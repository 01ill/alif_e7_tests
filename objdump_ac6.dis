
out/jit_test/HP/debug/jit_test.axf:     file format elf32-littlearm
architecture: armv3m, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x802032b5

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 M55_HP_ROM    00006894  80200000  80200000  00000040  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 RW_RAM        00000630  20000000  20000000  000068d8  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 RW_RAM        00000b80  20000630  20000630  00006f08  2**3  ALLOC
  3 ARM_LIB_HEAP  00004000  20004000  20004000  00006f08  2**0  ALLOC
  4 APP_HEAP      00008000  20008000  20008000  00006f08  2**0  ALLOC
  5 ARM_LIB_STACK 00002000  200fe000  200fe000  00006f08  2**0  ALLOC
  6 PADDING       00000010  60040000  60040000  00006f10  2**4  CONTENTS, ALLOC, LOAD, DATA
  7 .debug_abbrev 00001aa0  00000000  00000000  00006f20  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  000047b0  00000000  00000000  000089c0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00011709  00000000  00000000  0000d170  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   00009dda  00000000  00000000  0001e879  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000012d0  00000000  00000000  00028653  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    0000d710  00000000  00000000  00029923  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .note         0000002c  00000000  00000000  0004166c  2**2  CONTENTS, READONLY
 14 .comment      000006f0  00000000  00000000  00041698  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 main.cpp
20000c5d l     O RW_RAM	00000100 PRINTF_OUT_STRING
20000c5d l       RW_RAM	00000000 __tagsym$$used.3
802061de l     O M55_HP_ROM	0000000a main::instr
802063fd l     O M55_HP_ROM	0000000c .L.str
8020491c l     F M55_HP_ROM	0000004a __cxx_global_var_init
20000840 l       RW_RAM	00000000 __tagsym$$used.0
80204968 l     F M55_HP_ROM	00000046 __cxx_global_var_init.1
20000848 l       RW_RAM	00000000 __tagsym$$used.1
802049b0 l     F M55_HP_ROM	00000046 __cxx_global_var_init.2
20000844 l       RW_RAM	00000000 __tagsym$$used.2
00000000 l    df *ABS*	00000000 Backend.cpp
00000000 l    df *ABS*	00000000 Simple.cpp
00000000 l    df *ABS*	00000000 Triad.cpp
00000000 l    df *ABS*	00000000 Arithmetic.cpp
00000000 l    df *ABS*	00000000 Base.cpp
00000000 l    df *ABS*	00000000 DataProcessing.cpp
00000000 l    df *ABS*	00000000 Vector.cpp
00000000 l    df *ABS*	00000000 board_init.c
00000000 l    df *ABS*	00000000 fault_handler.c
80206407 l     O M55_HP_ROM	00000002 .L.str.31
80204d70 l     F M55_HP_ROM	0000001c print_faults
80204d8c l     F M55_HP_ROM	00000336 FaultDump
802050c4 l     F M55_HP_ROM	00000012 JumpToDump
802050d8 l     F M55_HP_ROM	00000046 print_usagefault
80205120 l     F M55_HP_ROM	0000006a print_memmanage
8020518c l     F M55_HP_ROM	0000009a print_busfault
80205228 l     F M55_HP_ROM	00000046 print_securefault
80205270 l     F M55_HP_ROM	00000046 print_debugfault
802052b8 l     F M55_HP_ROM	00000046 print_hardfault
80205300 l     F M55_HP_ROM	000000cc print_fsrbits
802053cc l     F M55_HP_ROM	0000002a CommonAsmFaultHandler
802053cc l       M55_HP_ROM	00000000 __tagsym$$used.0
80205404 l     F M55_HP_ROM	0000015c CommonFaultHandler
80205404 l       M55_HP_ROM	00000000 __tagsym$$used.1
20000d5e l     O RW_RAM	00000001 fault_handler_active
20000d5d l     O RW_RAM	00000001 fault_dump_enabled
80206409 l     O M55_HP_ROM	0000001a .L.str.15
80206423 l     O M55_HP_ROM	00000018 .L.str.25
8020643b l     O M55_HP_ROM	00000019 .L.str
80206454 l     O M55_HP_ROM	00000039 .L.str.16
8020648d l     O M55_HP_ROM	0000001b .L.str.24
802064a8 l     O M55_HP_ROM	00000022 .L.str.18
802064ca l     O M55_HP_ROM	0000000e .L.str.10
802064d8 l     O M55_HP_ROM	0000000e .L.str.8
802064e6 l     O M55_HP_ROM	0000000c .L.str.22
802064f2 l     O M55_HP_ROM	0000004d .L.str.26
8020653f l     O M55_HP_ROM	0000000e .L.str.23
8020654d l     O M55_HP_ROM	0000000d .L.str.29
80206555 l     O M55_HP_ROM	00000005 .L.str.30
8020655a l     O M55_HP_ROM	00000003 .L.str.4
8020655d l     O M55_HP_ROM	00000015 .L.str.19
80206572 l     O M55_HP_ROM	00000003 .L.str.3
80206575 l     O M55_HP_ROM	00000007 .L.str.27
8020657c l     O M55_HP_ROM	0000000d .L.str.9
80206589 l     O M55_HP_ROM	0000000d .L.str.7
80206596 l     O M55_HP_ROM	0000000d .L.str.1
802065a3 l     O M55_HP_ROM	00000009 .L.str.28
802065ac l     O M55_HP_ROM	0000000d .L.str.11
802065b9 l     O M55_HP_ROM	0000000d .L.str.13
802065c6 l     O M55_HP_ROM	0000000d .L.str.14
802065d3 l     O M55_HP_ROM	0000000d .L.str.12
802065e0 l     O M55_HP_ROM	0000000e .L.str.17
802065ee l     O M55_HP_ROM	00000007 .L.str.20
802065ff l     O M55_HP_ROM	00000008 .L.str.21
80206614 l     O M55_HP_ROM	00000007 .L.str.2
80206644 l     O M55_HP_ROM	00000001 .L.str.5
20000d60 l     O RW_RAM	00000004 exc_return
20000d64 l     O RW_RAM	00000004 fault_type
20000d68 l     O RW_RAM	00000044 regs
20000db0 l     O RW_RAM	00000400 fault_stack
802061e8 l     O M55_HP_ROM	0000003b ufsr_bits
80206223 l     O M55_HP_ROM	00000038 mmfsr_bits
8020625b l     O M55_HP_ROM	00000041 bfsr_bits
8020629c l     O M55_HP_ROM	000000ba afsr_bits
80206356 l     O M55_HP_ROM	0000003a sfsr_bits
80206390 l     O M55_HP_ROM	0000002a dfsr_bits
802063ba l     O M55_HP_ROM	00000019 hfsr_bits
802063d4 l     O M55_HP_ROM	00000018 FaultNames
802063ec l     O M55_HP_ROM	00000011 flag_names
80206653 l     O M55_HP_ROM	00000002 .L.str.6
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
80203c98 l     F M55_HP_ROM	000000a4 _DoInit
80203d3c l     F M55_HP_ROM	0000003e _GetAvailWriteSpace
80204248 l     F M55_HP_ROM	0000008c _WriteNoCheck
80204164 l     F M55_HP_ROM	000000e4 _WriteBlocking
802061bc l     O M55_HP_ROM	00000011 _DoInit._aInitStr
80206645 l     O M55_HP_ROM	00000009 .L.str
2000085d l     O RW_RAM	00000400 _acUpBuffer
2000084d l     O RW_RAM	00000010 _acDownBuffer
00000000 l    df *ABS*	00000000 SEGGER_RTT_printf.c
802040ec l     F M55_HP_ROM	00000076 _StoreChar
80203d7c l     F M55_HP_ROM	000001c8 _PrintInt
80203f44 l     F M55_HP_ROM	000001a8 _PrintUnsigned
8020664e l     O M55_HP_ROM	00000007 .L.str
802061cd l     O M55_HP_ROM	00000010 _PrintUnsigned._aV2C
00000000 l    df *ABS*	00000000 SEGGER_RTT_Syscalls_KEIL.c
00000000 l    df *ABS*	00000000 Driver_GPIO.c
80203128 l     F M55_HP_ROM	0000003c GPIO_IRQ_Handler
80204c00 l     F M55_HP_ROM	00000022 gpio_interrupt_eoi
2000000c l     O RW_RAM	0000003c GPIO0_RES
20000174 l     O RW_RAM	0000003c GPIO1_RES
200001b0 l     O RW_RAM	0000003c GPIO2_RES
200001ec l     O RW_RAM	0000003c GPIO3_RES
20000228 l     O RW_RAM	0000003c GPIO4_RES
20000264 l     O RW_RAM	0000003c GPIO5_RES
200002a0 l     O RW_RAM	0000003c GPIO6_RES
200002dc l     O RW_RAM	0000003c GPIO7_RES
20000318 l     O RW_RAM	0000003c GPIO8_RES
20000354 l     O RW_RAM	0000003c GPIO9_RES
20000048 l     O RW_RAM	0000003c GPIO10_RES
20000084 l     O RW_RAM	0000003c GPIO11_RES
200000c0 l     O RW_RAM	0000003c GPIO12_RES
200000fc l     O RW_RAM	0000003c GPIO13_RES
20000138 l     O RW_RAM	0000003c GPIO14_RES
20000390 l     O RW_RAM	0000003c LPGPIO_RES
00000000 l    df *ABS*	00000000 pinconf.c
00000000 l    df *ABS*	00000000 Driver_USART.c
80203b48 l     F M55_HP_ROM	00000148 UART_IRQHandler
200003d0 l     O RW_RAM	0000004c UART0
2000041c l     O RW_RAM	0000004c UART1
20000468 l     O RW_RAM	0000004c UART2
200004b4 l     O RW_RAM	0000004c UART3
20000500 l     O RW_RAM	0000004c UART4
2000054c l     O RW_RAM	0000004c UART5
20000598 l     O RW_RAM	0000004c UART6
200005e4 l     O RW_RAM	0000004c UART7
00000000 l    df *ABS*	00000000 uart.c
80205800 l     F M55_HP_ROM	00000010 uart_tx_ready
802055b0 l     F M55_HP_ROM	00000012 uart_get_tx_fifo_available_count
802057ec l     F M55_HP_ROM	00000014 uart_send_a_char_to_thr
802057dc l     F M55_HP_ROM	00000010 uart_rx_ready
802055a0 l     F M55_HP_ROM	0000000e uart_get_rx_fifo_available_count
802057d0 l     F M55_HP_ROM	0000000c uart_receive_a_char_from_rbr
8020558c l     F M55_HP_ROM	00000012 uart_disable_tx_irq
80205570 l     F M55_HP_ROM	0000001c uart_disable_rx_irq
00000000 l    df *ABS*	00000000 clk.c
00000000 l    df *ABS*	00000000 mpu_M55.c
80202734 l     F M55_HP_ROM	00000024 ARM_MPU_SetMemAttr
80202634 l     F M55_HP_ROM	00000020 ARM_MPU_Load
802025a0 l     F M55_HP_ROM	00000018 ARM_MPU_ClrRegion
802025d0 l     F M55_HP_ROM	0000002e ARM_MPU_Disable
80202600 l     F M55_HP_ROM	00000034 ARM_MPU_Enable
80202758 l     F M55_HP_ROM	00000064 ARM_MPU_SetMemAttrEx
80202654 l     F M55_HP_ROM	000000aa ARM_MPU_LoadEx
80202700 l     F M55_HP_ROM	00000034 ARM_MPU_OrderedMemcpy
802025b8 l     F M55_HP_ROM	00000016 ARM_MPU_ClrRegionEx
80206834 l     O M55_HP_ROM	00000048 MPU_Load_Regions.mpu_table
00000000 l    df *ABS*	00000000 system_M55.c
80204b94 l     F M55_HP_ROM	00000012 enable_force_peripheral_functional_clk
80204b80 l     F M55_HP_ROM	00000012 enable_force_apb_interface_clk
00000000 l    df *ABS*	00000000 system_utils.c
00000000 l    df *ABS*	00000000 tcm_partition.c
802032d4 l     F M55_HP_ROM	00000048 SAU_TCM_NS_Setup
00000000 l    df *ABS*	00000000 tgu_M55.c
8020687c l     O M55_HP_ROM	0000000c ns_regions
00000000 l    df *ABS*	00000000 startup_M55_HP.c
802032cc l       M55_HP_ROM	00000000 __tagsym$$used.0
80200000 l       M55_HP_ROM	00000000 __tagsym$$used.1
00000000 l    df *ABS*	00000000 dc.s
00000000 l    df *ABS*	00000000 ../clib/angel/sysapp.c
802060b2 l    d  M55_HP_ROM	00000004 .constdata
802060b6 l    d  M55_HP_ROM	00000004 .constdata
802060ba l    d  M55_HP_ROM	00000004 .constdata
00000000 l    df *ABS*	00000000 ../clib/longlong.s
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200958 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
80200970 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
80206016 l    d  M55_HP_ROM	00000000 i.fputc
00000000 l    df *ABS*	00000000 ../clib/stdio.c
802009d4 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
802009d8 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
20000630 l    d  RW_RAM	00000054 .bss
20000684 l    d  RW_RAM	00000054 .bss
200006d8 l    d  RW_RAM	00000054 .bss
20000000 l    d  RW_RAM	00000004 .data
20000004 l    d  RW_RAM	00000004 .data
20000008 l    d  RW_RAM	00000004 .data
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/string.c
00000000 l    df *ABS*	00000000 ../clib/memcpset.s
80200a04 l    d  M55_HP_ROM	0000008a .text
00000000 l    df *ABS*	00000000 ../clib/memcpset.s
80200a8e l    d  M55_HP_ROM	0000004e .text
00000000 l    df *ABS*	00000000 ../clib/memcpset.s
80200ae0 l    d  M55_HP_ROM	0000007c .text
00000000 l    df *ABS*	00000000 ../clib/angel/startup.s
802007c0 l    d  M55_HP_ROM	00000008 !!!main
00000000 l    df *ABS*	00000000 ../clib/arm_runtime.c
80206894 l    d  M55_HP_ROM	00000000 .init_array
00000000 l    df *ABS*	00000000 ../clib/arm_runtime.c
80200b5c l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 cxa_guard.cpp
80206655 l     O M55_HP_ROM	00000093 .L.str
00000000 l    df *ABS*	00000000 ../clib/angel/kernel.s
80200934 l    d  M55_HP_ROM	00000000 .ARM.Collect$$rtentry$$00000000
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200b88 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200bd6 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200bfa l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200c4c l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200cc4 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200cec l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200d10 l    d  M55_HP_ROM	00000000 .text
802060c0 l    d  M55_HP_ROM	00000008 .constdata
802060c0 l     O M55_HP_ROM	00000008 initial_mbstate
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200dcc l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200e48 l    d  M55_HP_ROM	00000000 .text
80200e48 l     F M55_HP_ROM	00000000 _printf_longlong_oct_internal
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200eb8 l    d  M55_HP_ROM	00000000 .text
80200eb8 l     F M55_HP_ROM	00000000 _printf_hex_common
802060c8 l    d  M55_HP_ROM	00000028 .constdata
802060c8 l     O M55_HP_ROM	00000014 uc_hextab
802060dc l     O M55_HP_ROM	00000014 lc_hextab
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
80206008 l    d  M55_HP_ROM	00000000 i._is_digit
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
80200f4c l    d  M55_HP_ROM	00000000 .text
802060f0 l    d  M55_HP_ROM	00000011 .constdata
802060f0 l     O M55_HP_ROM	00000011 maptable
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008d4 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000013
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008da l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000014
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
80200860 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000001
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008a6 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$0000000C
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
80200866 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000002
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008a0 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$0000000B
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
8020088e l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000008
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
80200894 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000009
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
8020089a l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$0000000A
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
8020086c l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000003
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
80200872 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000004
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
80200878 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000005
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
8020087e l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000006
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
80200860 l    d  M55_HP_ROM	00000000 .ARM.Collect$$_printf_percent$$00000000
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008ac l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$0000000D
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008b2 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$0000000E
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008b8 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$0000000F
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
80200884 l    d  M55_HP_ROM	0000000a .ARM.Collect$$_printf_percent$$00000007
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008ca l    d  M55_HP_ROM	0000000a .ARM.Collect$$_printf_percent$$00000012
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008e0 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000015
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008e6 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000016
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008be l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000010
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008c4 l    d  M55_HP_ROM	00000006 .ARM.Collect$$_printf_percent$$00000011
00000000 l    df *ABS*	00000000 ../clib/stdio.c
802010d4 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
802012b8 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
802013b0 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
802014b8 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/memcpset.s
802015f0 l    d  M55_HP_ROM	00000064 .text
00000000 l    df *ABS*	00000000 ../clib/libinit.s
802008f2 l    d  M55_HP_ROM	00000004 .ARM.Collect$$libinit$$00000001
802008f6 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000004
802008f6 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000006
802008fe l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$0000000C
802008fe l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$0000000E
802008fe l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000010
802008fe l    d  M55_HP_ROM	00000006 .ARM.Collect$$libinit$$00000011
80200904 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000013
80200904 l    d  M55_HP_ROM	0000000c .ARM.Collect$$libinit$$00000014
80200910 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000015
80200910 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000017
80200910 l    d  M55_HP_ROM	0000000a .ARM.Collect$$libinit$$00000018
8020091a l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000019
8020091a l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$0000001B
8020091a l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$0000001D
8020091a l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$0000001F
8020091a l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000021
8020091a l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000023
8020091a l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000025
8020091a l    d  M55_HP_ROM	00000004 .ARM.Collect$$libinit$$00000026
8020091e l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000027
8020091e l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$0000002E
8020091e l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000030
8020091e l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000032
8020091e l    d  M55_HP_ROM	00000004 .ARM.Collect$$libinit$$00000033
80200922 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libinit$$00000034
80200922 l    d  M55_HP_ROM	00000002 .ARM.Collect$$libinit$$00000035
00000000 l    df *ABS*	00000000 ../clib/misc.s
00000000 l    df *ABS*	00000000 ../clib/wchar.c
00000000 l    df *ABS*	00000000 ../clib/r_arm_target.c
00000000 l    df *ABS*	00000000 ../clib/r_arm_target.c
00000000 l    df *ABS*	00000000 ../fplib/printf1.s
802060aa l    d  M55_HP_ROM	00000004 x$fpl$printf1
802060aa l       M55_HP_ROM	00000000 $v0
00000000 l    df *ABS*	00000000 ../fplib/printf2.s
802060ae l    d  M55_HP_ROM	00000004 x$fpl$printf2
802060ae l       M55_HP_ROM	00000000 $v0
00000000 l    df *ABS*	00000000 ../fplib/printf2a.s
00000000 l    df *ABS*	00000000 ../fplib/printf2b.s
00000000 l    df *ABS*	00000000 abort_message.cpp
00000000 l    df *ABS*	00000000 ../clib/angel/sys.s
00000000 l    df *ABS*	00000000 ../clib/angel/kernel.s
80200934 l    d  M55_HP_ROM	00000004 .ARM.Collect$$rtentry$$00000001
8020093c l    d  M55_HP_ROM	00000000 .ARM.Collect$$rtentry$$00000009
8020093c l    d  M55_HP_ROM	00000004 .ARM.Collect$$rtentry$$0000000A
80200940 l    d  M55_HP_ROM	00000000 .ARM.Collect$$rtentry$$0000000C
80200940 l    d  M55_HP_ROM	00000008 .ARM.Collect$$rtentry$$0000000D
00000000 l    df *ABS*	00000000 ../clib/angel/kernel.s
00000000 l    df *ABS*	00000000 ../clib/angel/kernel.s
80200938 l    d  M55_HP_ROM	00000004 .ARM.Collect$$rtentry$$00000007
80200948 l    d  M55_HP_ROM	00000004 .ARM.Collect$$rtentry$$00002718
80200948 l     O M55_HP_ROM	00000004 __lit__00000000
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
00000000 l    df *ABS*	00000000 ../clib/heapalloc.c
00000000 l    df *ABS*	00000000 ../clib/heapalloc.c
00000000 l    df *ABS*	00000000 ../clib/heap1.c
80201654 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/heap1.c
802016b2 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/heap1.c
00000000 l    df *ABS*	00000000 ../clib/heap1.c
00000000 l    df *ABS*	00000000 ../clib/heap2.c
00000000 l    df *ABS*	00000000 ../clib/heap2.c
00000000 l    df *ABS*	00000000 ../clib/longlong.s
80201700 l    d  M55_HP_ROM	0000008a .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
8020178a l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
8020183c l    d  M55_HP_ROM	00000000 .text
8020183c l     F M55_HP_ROM	000001b0 _fp_digits
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
80201c58 l    d  M55_HP_ROM	00000000 .text
80206101 l    d  M55_HP_ROM	00000026 .constdata
80206101 l     O M55_HP_ROM	00000013 lc_hextab
80206114 l     O M55_HP_ROM	00000013 uc_hextab
00000000 l    df *ABS*	00000000 ../clib/printf.c
80201f54 l    d  M55_HP_ROM	00000000 .text
80201f54 l     F M55_HP_ROM	0000000a _printf_input_char
00000000 l    df *ABS*	00000000 ../clib/printf.c
80201f84 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
80201fb0 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf_percent.s
802008ec l    d  M55_HP_ROM	00000004 .ARM.Collect$$_printf_percent$$00000017
00000000 l    df *ABS*	00000000 ../clib/stdio.c
80201fdc l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
80201fe4 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
80202026 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
8020206c l    d  M55_HP_ROM	00000000 .text
8020206c l     F M55_HP_ROM	00000000 _freopen_locked
00000000 l    df *ABS*	00000000 ../clib/stdio.c
8020215c l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/locale.c
802021a8 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/stdlib.c
802021f0 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
80202206 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/assert.c
00000000 l    df *ABS*	00000000 ../clib/armsys.c
00000000 l    df *ABS*	00000000 ../clib/armsys.c
00000000 l    df *ABS*	00000000 ../clib/libinit.s
8020092e l    d  M55_HP_ROM	00000000 .ARM.Collect$$libshutdown$$00000002
8020092e l    d  M55_HP_ROM	00000004 .ARM.Collect$$libshutdown$$00000003
80200932 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libshutdown$$00000004
80200932 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libshutdown$$00000007
80200932 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libshutdown$$0000000A
80200932 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libshutdown$$0000000C
80200932 l    d  M55_HP_ROM	00000000 .ARM.Collect$$libshutdown$$0000000F
80200932 l    d  M55_HP_ROM	00000002 .ARM.Collect$$libshutdown$$00000010
00000000 l    df *ABS*	00000000 ../fplib/fpinit.s
8020608c l    d  M55_HP_ROM	0000001e x$fpl$fpinit
8020608c l       M55_HP_ROM	00000000 $v0
00000000 l    df *ABS*	00000000 ../clib/angel/sysapp.c
80202214 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/angel/sysapp.c
00000000 l    df *ABS*	00000000 ../clib/angel/sys.s
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
80202220 l    d  M55_HP_ROM	00000010 .text
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
80202230 l    d  M55_HP_ROM	00000008 .text
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
80202238 l    d  M55_HP_ROM	00000008 .text
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
00000000 l    df *ABS*	00000000 ../clib/angel/rt.s
80202240 l    d  M55_HP_ROM	00000008 .text
00000000 l    df *ABS*	00000000 ../clib/heapalloc.c
80202248 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/heapalloc.c
8020224c l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/heapalloc.c
00000000 l    df *ABS*	00000000 ../clib/heap1.c
802022d6 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/heap1.c
00000000 l    df *ABS*	00000000 ../clib/heap2.c
00000000 l    df *ABS*	00000000 ../clib/printf.c
802022e4 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/printf.c
00000000 l    df *ABS*	00000000 ../clib/bigflt.c
80202364 l    d  M55_HP_ROM	00000000 .text
80206128 l    d  M55_HP_ROM	00000094 .constdata
80206128 l     O M55_HP_ROM	0000003c tenpwrs_x
80206164 l     O M55_HP_ROM	00000040 tenpwrs_i
00000000 l    df *ABS*	00000000 ../clib/btod.s
80205848 l    d  M55_HP_ROM	0000003e CL$$btod_d2e
802058cc l    d  M55_HP_ROM	00000060 CL$$btod_d2e_norm_op1
80205886 l    d  M55_HP_ROM	00000046 CL$$btod_d2e_denorm_low
80205d6a l    d  M55_HP_ROM	0000002a CL$$btod_emul
80205d40 l    d  M55_HP_ROM	0000002a CL$$btod_ediv
80205c64 l    d  M55_HP_ROM	000000dc CL$$btod_e2e
80205d94 l    d  M55_HP_ROM	00000244 CL$$btod_mult_common
8020592c l    d  M55_HP_ROM	00000338 CL$$btod_div_common
00000000 l    df *ABS*	00000000 ../clib/btod_accurate.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/stdio.c
00000000 l    df *ABS*	00000000 ../clib/locale.s
80206708 l    d  M55_HP_ROM	0000001c locale$$data
8020670c l     O M55_HP_ROM	00000002 __lcnum_c_name
80206714 l     O M55_HP_ROM	00000000 __lcnum_c_start
80206720 l     O M55_HP_ROM	00000000 __lcnum_c_point
80206722 l     O M55_HP_ROM	00000000 __lcnum_c_thousands
80206723 l     O M55_HP_ROM	00000000 __lcnum_c_grouping
80206724 l     O M55_HP_ROM	00000000 __lcnum_c_end
80206034 l    d  M55_HP_ROM	0000002c locale$$code
00000000 l    df *ABS*	00000000 ../clib/stdlib.c
80202448 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
8020245a l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
80202464 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
80202474 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/angel/boardlib.s
00000000 l    df *ABS*	00000000 ../clib/angel/boardlib.s
00000000 l    df *ABS*	00000000 ../clib/armsys.c
00000000 l    df *ABS*	00000000 ../clib/armsys.c
00000000 l    df *ABS*	00000000 ../clib/armsys.c
00000000 l    df *ABS*	00000000 ../clib/libinit.s
802008f0 l    d  M55_HP_ROM	00000002 .ARM.Collect$$libinit$$00000000
00000000 l    df *ABS*	00000000 ../fplib/istatus.s
00000000 l    df *ABS*	00000000 ../fplib/usenofp.s
802060b2 l    d  M55_HP_ROM	00000000 x$fpl$usenofp
00000000 l    df *ABS*	00000000 ../mathlib/fpclassify.c
80205fd8 l    d  M55_HP_ROM	00000000 i.__ARM_fpclassify
00000000 l    df *ABS*	00000000 ../clib/angel/sysapp.c
00000000 l    df *ABS*	00000000 ../clib/angel/sysapp.c
00000000 l    df *ABS*	00000000 ../clib/angel/sys.s
2000072c l    d  RW_RAM	00000060 .bss
00000000 l    df *ABS*	00000000 ../clib/angel/sys.s
802024a8 l    d  M55_HP_ROM	00000002 .text
00000000 l    df *ABS*	00000000 ../clib/angel/sys.s
802024aa l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/angel/sys.s
00000000 l    df *ABS*	00000000 ../clib/angel/sys.s
00000000 l    df *ABS*	00000000 ../clib/angel/kernel.s
8020094c l    d  M55_HP_ROM	00000002 .ARM.Collect$$rtexit$$00000000
00000000 l    df *ABS*	00000000 ../clib/heapalloc.c
00000000 l    df *ABS*	00000000 ../clib/maybe.s
802024aa l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/maybe.s
00000000 l    df *ABS*	00000000 ../clib/heap1.c
802024aa l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/heap1.c
00000000 l    df *ABS*	00000000 ../clib/btod_accurate.c
00000000 l    df *ABS*	00000000 ../clib/locale.s
80206724 l    d  M55_HP_ROM	00000110 locale$$data
80206728 l     O M55_HP_ROM	00000002 __lcctype_c_name
80206730 l     O M55_HP_ROM	00000000 __lcctype_c_start
80206834 l     O M55_HP_ROM	00000000 __lcctype_c_end
80206060 l    d  M55_HP_ROM	0000002c locale$$code
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
802024de l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
80202510 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
80202540 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/heapaux.c
00000000 l    df *ABS*	00000000 ../clib/heapaux.c
00000000 l    df *ABS*	00000000 ../clib/libinit.s
802008f6 l    d  M55_HP_ROM	00000008 .ARM.Collect$$libinit$$0000000A
80200924 l    d  M55_HP_ROM	00000008 .ARM.Collect$$libinit$$0000271B
80200924 l     O M55_HP_ROM	00000004 __lit__00000000
80200928 l     O M55_HP_ROM	00000004 __lit__00000001
00000000 l    df *ABS*	00000000 ../clib/angel/kernel.s
8020094e l    d  M55_HP_ROM	00000000 .ARM.Collect$$rtexit$$00000002
8020094e l    d  M55_HP_ROM	00000004 .ARM.Collect$$rtexit$$00000003
80200952 l    d  M55_HP_ROM	00000006 .ARM.Collect$$rtexit$$00000004
00000000 l    df *ABS*	00000000 ../clib/heapalloc.c
00000000 l    df *ABS*	00000000 ../clib/longlong.s
00000000 l    df *ABS*	00000000 ../clib/signal.c
80202550 l    d  M55_HP_ROM	00000000 .text
00000000 l    df *ABS*	00000000 ../clib/signal.s
00000000 l    df *ABS*	00000000 ../clib/heap1.c
00000000 l    df *ABS*	00000000 ../clib/heap1.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/signal.c
00000000 l    df *ABS*	00000000 ../clib/angel/boardlib.s
00000000 l    df *ABS*	00000000 ../clib/libinit.s
8020092c l    d  M55_HP_ROM	00000002 .ARM.Collect$$libshutdown$$00000000
00000000 l    df *ABS*	00000000 ../clib/angel/scatter.s
802007c8 l    d  M55_HP_ROM	0000005c !!!scatter
80200840 l    d  M55_HP_ROM	00000002 !!handler_null
00000000 l    df *ABS*	00000000 ../clib/angel/handlers.s
80200824 l    d  M55_HP_ROM	0000001a !!handler_copy
00000000 l    df *ABS*	00000000 ../clib/angel/handlers.s
80200844 l    d  M55_HP_ROM	0000001c !!handler_zi
00000000 g       *ABS*	00000000 .hidden BuildAttributes$$THM_ISAv4$E$P$D$K$B$S$7EM$v8.1M$VFPv5_D16_FP16$PE$MVEf$A:L22UL41UL21$X:L11$S22US41US21$IEEE1$IW$USESV6$~STKCKD$USESV7$WCHAR32$ENUMINT$~SHL$OTIME$ROPI$IEEEX$UX$STANDARDLIB$REQ8$PRES8$EABIv2
00000000 g       *ABS*	00000000 .hidden _printf_flags
00000000 g       *ABS*	00000000 .hidden _printf_return_value
00000000 g       *ABS*	00000000 .hidden _printf_sizespec
00000000 g       *ABS*	00000000 .hidden _printf_widthprec
20000000 g     O RW_RAM	00000004 __aeabi_stdin
20000004 g     O RW_RAM	00000004 __aeabi_stdout
20000008 g     O RW_RAM	00000004 __aeabi_stderr
200003cc g     O RW_RAM	00000004 .hidden SystemCoreClock
20000630 g     O RW_RAM	00000054 __stdin
20000684 g     O RW_RAM	00000054 __stdout
200006d8 g     O RW_RAM	00000054 __stderr
2000072c g     O RW_RAM	00000060 __libspace_start
2000078c g     O RW_RAM	000000a8 .hidden _SEGGER_RTT
2000078c g     O RW_RAM	00000000 __temporary_stack_top$libspace
20000834  w    O RW_RAM	00000004 .hidden guard variable for LPRTC::RTC_CLK_EN
20000838  w    O RW_RAM	00000004 .hidden guard variable for LPRTC::CCR
2000083c  w    O RW_RAM	00000004 .hidden guard variable for LPRTC::CCVR
20000840  w    O RW_RAM	00000004 .hidden LPRTC::RTC_CLK_EN
20000844  w    O RW_RAM	00000004 .hidden LPRTC::CCR
20000848  w    O RW_RAM	00000004 .hidden LPRTC::CCVR
2000084c  w    O RW_RAM	00000001 .hidden LPRTC::getInstance()::instance
20004000 g       *ABS*	00000000 .hidden Image$$ARM_LIB_HEAP$$ZI$$Base
20004000 g       *ABS*	00000000 .hidden Image$$NS_REGION_0$$Base
20004000 g       *ABS*	00000000 .hidden Image$$NS_REGION_0_PAD$$Base
20008000 g       *ABS*	00000000 .hidden Image$$ARM_LIB_HEAP$$ZI$$Limit
200fe000 g       *ABS*	00000000 .hidden Image$$ARM_LIB_STACK$$ZI$$Base
20100000 g       *ABS*	00000000 .hidden Image$$ARM_LIB_STACK$$ZI$$Limit
80200000 g     O M55_HP_ROM	000007c0 .hidden __Vectors
802007c0 g     F M55_HP_ROM	00000008 .hidden __main
802007c8 g     F M55_HP_ROM	00000000 .hidden __scatterload
802007c8 g     F M55_HP_ROM	00000054 .hidden __scatterload_rt2
802007c8 g     F M55_HP_ROM	00000000 .hidden __scatterload_rt2_thumb_only
802007d2 g     F M55_HP_ROM	00000000 .hidden __scatterload_loop
80200824 g     F M55_HP_ROM	0000001a .hidden __scatterload_copy
80200840 g     F M55_HP_ROM	00000002 .hidden __scatterload_null
80200844 g     F M55_HP_ROM	0000001c .hidden __scatterload_zeroinit
80200860 g     F M55_HP_ROM	00000000 .hidden _printf_n
80200860 g     F M55_HP_ROM	00000000 .hidden _printf_percent
80200866 g     F M55_HP_ROM	00000000 .hidden _printf_p
8020086c g     F M55_HP_ROM	00000000 .hidden _printf_f
80200872 g     F M55_HP_ROM	00000000 .hidden _printf_e
80200878 g     F M55_HP_ROM	00000000 .hidden _printf_g
8020087e g     F M55_HP_ROM	00000000 .hidden _printf_a
80200884 g     F M55_HP_ROM	00000000 .hidden _printf_ll
8020088e g     F M55_HP_ROM	00000000 .hidden _printf_i
80200894 g     F M55_HP_ROM	00000000 .hidden _printf_d
8020089a g     F M55_HP_ROM	00000000 .hidden _printf_u
802008a0 g     F M55_HP_ROM	00000000 .hidden _printf_o
802008a6 g     F M55_HP_ROM	00000000 .hidden _printf_x
802008ac g     F M55_HP_ROM	00000000 .hidden _printf_lli
802008b2 g     F M55_HP_ROM	00000000 .hidden _printf_lld
802008b8 g     F M55_HP_ROM	00000000 .hidden _printf_llu
802008be g     F M55_HP_ROM	00000000 .hidden _printf_llo
802008c4 g     F M55_HP_ROM	00000000 .hidden _printf_llx
802008ca g     F M55_HP_ROM	00000000 .hidden _printf_l
802008d4 g     F M55_HP_ROM	00000000 .hidden _printf_c
802008da g     F M55_HP_ROM	00000000 .hidden _printf_s
802008e0 g     F M55_HP_ROM	00000000 .hidden _printf_lc
802008e6 g     F M55_HP_ROM	00000000 .hidden _printf_ls
802008ec g     F M55_HP_ROM	00000000 _printf_percent_end
802008f0 g     F M55_HP_ROM	00000000 __rt_lib_init
802008f2 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_fp_1
802008f6 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_heap_2
802008f6 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_preinit_1
802008f6 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_relocate_pie_1
802008fe g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_heap_1
802008fe g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_common
802008fe g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_rand_1
802008fe g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_user_alloc_1
80200904 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_collate_1
80200904 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_ctype_2
80200910 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_ctype_1
80200910 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_monetary_1
80200910 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_numeric_2
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_atexit_1
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_clock_1
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_fp_trap_1
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_getenv_1
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_numeric_1
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_lc_time_1
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_signal_1
8020091a g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_stdio_2
8020091e g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_alloca_1
8020091e g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_argv_1
8020091e g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_cpp_2
8020091e g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_exceptions_1
8020091e g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_stdio_1
80200922 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_cpp_1
80200922 g     F M55_HP_ROM	00000000 .hidden __rt_lib_init_return
8020092c g     F M55_HP_ROM	00000000 __rt_lib_shutdown
8020092e g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_cpp_1
8020092e g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_stdio_2
80200932 g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_fp_trap_1
80200932 g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_heap_1
80200932 g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_return
80200932 g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_signal_1
80200932 g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_stdio_1
80200932 g     F M55_HP_ROM	00000000 .hidden __rt_lib_shutdown_user_alloc_1
80200934 g     F M55_HP_ROM	00000000 .hidden __rt_entry
80200934 g     F M55_HP_ROM	00000000 .hidden __rt_entry_presh_1
80200938 g     F M55_HP_ROM	00000000 .hidden __rt_entry_sh
8020093c g     F M55_HP_ROM	00000000 .hidden __rt_entry_li
8020093c g     F M55_HP_ROM	00000000 .hidden __rt_entry_postsh_1
80200940 g     F M55_HP_ROM	00000000 .hidden __rt_entry_main
80200940 g     F M55_HP_ROM	00000000 .hidden __rt_entry_postli_1
8020094c g     F M55_HP_ROM	00000000 __rt_exit
8020094e g     F M55_HP_ROM	00000000 .hidden __rt_exit_ls
8020094e g     F M55_HP_ROM	00000000 .hidden __rt_exit_prels_1
80200952 g     F M55_HP_ROM	00000000 .hidden __rt_exit_exit
80200958 g     F M55_HP_ROM	00000014 printf
80200970 g     F M55_HP_ROM	00000036 _do_fflush
802009a6 g     F M55_HP_ROM	0000002a fflush
802009d4 g     F M55_HP_ROM	00000004 putc
802009d8 g     F M55_HP_ROM	00000028 puts
80200a04 g     F M55_HP_ROM	00000000 __aeabi_memcpy
80200a04 g     F M55_HP_ROM	0000008a __rt_memcpy
80200a6a g     F M55_HP_ROM	00000000 _memcpy_lastbytes
80200a8e g     F M55_HP_ROM	00000000 __aeabi_memclr4
80200a8e g     F M55_HP_ROM	00000000 __aeabi_memclr8
80200a8e g     F M55_HP_ROM	00000000 __rt_memclr_w
80200a92 g     F M55_HP_ROM	0000004a _memset_w
80200ae0 g     F M55_HP_ROM	0000007c strcmp
80200b5c g     F M55_HP_ROM	00000024 .hidden __cpp_initialize__aeabi_
80200b88 g     F M55_HP_ROM	0000002c .hidden _printf_pre_padding
80200bb4 g     F M55_HP_ROM	00000022 .hidden _printf_post_padding
80200bd6 g     F M55_HP_ROM	00000012 .hidden _printf_truncate_signed
80200be8 g     F M55_HP_ROM	00000012 .hidden _printf_truncate_unsigned
80200bfa g     F M55_HP_ROM	00000052 .hidden _printf_str
80200c4c g     F M55_HP_ROM	00000068 .hidden _printf_int_dec
80200cc4 g     F M55_HP_ROM	00000028 .hidden _printf_charcount
80200cec g     F M55_HP_ROM	00000020 _printf_char_file
80200d10 g     F M55_HP_ROM	000000b6 .hidden _printf_wctomb
80200dcc g     F M55_HP_ROM	0000006c .hidden _printf_longlong_dec
80200e48 g     F M55_HP_ROM	00000044 .hidden _printf_longlong_oct
80200e8c g     F M55_HP_ROM	00000018 _printf_int_oct
80200ea4 g     F M55_HP_ROM	0000000c _printf_ll_oct
80200eb8 g     F M55_HP_ROM	00000056 .hidden _printf_longlong_hex
80200f0e g     F M55_HP_ROM	0000001c _printf_int_hex
80200f2a g     F M55_HP_ROM	0000000c _printf_ll_hex
80200f36 g     F M55_HP_ROM	00000012 _printf_hex_ptr
80200f4c g     F M55_HP_ROM	00000184 __printf
802010d4 g     F M55_HP_ROM	000001e2 __flsbuf
802010d4 g     F M55_HP_ROM	00000000 __flsbuf_byte
802010d4 g     F M55_HP_ROM	00000000 __flsbuf_wide
802012b8 g     F M55_HP_ROM	000000f2 _fseek
802012b8 g     F M55_HP_ROM	00000000 fseek
802013b0 g     F M55_HP_ROM	00000014 _seterr
802013c4 g     F M55_HP_ROM	0000006c _writebuf
80201430 g     F M55_HP_ROM	00000046 _fflush
80201476 g     F M55_HP_ROM	0000003c _deferredlazyseek
802014b8 g     F M55_HP_ROM	000000d2 .hidden _initio
8020158a g     F M55_HP_ROM	00000038 .hidden _terminateio
802015f0 g     F M55_HP_ROM	00000000 __aeabi_memcpy4
802015f0 g     F M55_HP_ROM	00000000 __aeabi_memcpy8
802015f0 g     F M55_HP_ROM	00000064 __rt_memcpy_w
80201638 g     F M55_HP_ROM	00000000 _memcpy_lastbytes_aligned
80201654 g     F M55_HP_ROM	0000005e .hidden malloc
802016b2 g     F M55_HP_ROM	0000004e free
80201700 g     F M55_HP_ROM	0000008a _ll_udiv10
8020178a g     F M55_HP_ROM	000000b2 _printf_int_common
802019ec g     F M55_HP_ROM	0000026c _printf_fp_dec_real
80201c58 g     F M55_HP_ROM	000002f4 _printf_fp_hex_real
80201f5e g     F M55_HP_ROM	00000020 _printf_char_common
80201f84 g     F M55_HP_ROM	00000014 .hidden _printf_cs_common
80201f98 g     F M55_HP_ROM	00000010 _printf_char
80201fa8 g     F M55_HP_ROM	00000008 _printf_string
80201fb0 g     F M55_HP_ROM	00000014 .hidden _printf_lcs_common
80201fc4 g     F M55_HP_ROM	00000010 _printf_wchar
80201fd4 g     F M55_HP_ROM	00000008 _printf_wstring
80201fdc g     F M55_HP_ROM	00000008 ferror
80201fe4 g     F M55_HP_ROM	00000042 _ftell_internal
80201fe4 g     F M55_HP_ROM	00000000 ftell
80202026 g     F M55_HP_ROM	00000046 setvbuf
8020206c g     F M55_HP_ROM	000000a0 freopen
8020210c g     F M55_HP_ROM	0000004a fopen
8020215c g     F M55_HP_ROM	0000004c _fclose_internal
8020215c g     F M55_HP_ROM	00000000 fclose
802021a8 g     F M55_HP_ROM	00000048 _c32rtomb
802021a8 g     F M55_HP_ROM	00000000 _wcrtomb
802021f0 g     F M55_HP_ROM	00000016 abort
80202206 g     F M55_HP_ROM	0000000e __rt_SIGRTRED
80202214 g     F M55_HP_ROM	00000008 _sys_exit
80202220 g     F M55_HP_ROM	00000010 __rt_ctype_table
80202230 g     F M55_HP_ROM	00000008 __rt_heap_descriptor
80202238 g     F M55_HP_ROM	00000008 __rt_locale
80202240 g     F M55_HP_ROM	00000008 __aeabi_errno_addr
80202240 g     F M55_HP_ROM	00000000 __errno$intlibspace
80202240 g     F M55_HP_ROM	00000000 __rt_errno_addr$intlibspace
80202248 g     F M55_HP_ROM	00000002 .hidden __use_no_heap
8020224a g     F M55_HP_ROM	00000002 .hidden __heap$guard
8020224c g     F M55_HP_ROM	00000002 _terminate_user_alloc
8020224e g     F M55_HP_ROM	00000002 _init_user_alloc
80202250 g     F M55_HP_ROM	00000022 __Heap_Full
80202272 g     F M55_HP_ROM	00000006 __Heap_Broken
80202278 g     F M55_HP_ROM	0000005e .hidden _init_alloc
802022d6 g     F M55_HP_ROM	00000008 .hidden __Heap_Initialize
802022de g     F M55_HP_ROM	00000004 __Heap_DescSize
802022e4 g     F M55_HP_ROM	00000070 _printf_fp_infnan
80202364 g     F M55_HP_ROM	000000e0 _btod_etento
80202448 g     F M55_HP_ROM	00000012 exit
8020245a g     F M55_HP_ROM	0000000a __sig_exit
80202464 g     F M55_HP_ROM	0000000e __rt_SIGABRT
80202474 g     F M55_HP_ROM	0000000e __rt_SIGRTRED_inner
802024a8 g     F M55_HP_ROM	00000000 .hidden __I$use$semihosting
802024a8 g     F M55_HP_ROM	00000002 .hidden __use_no_semihosting_swi
802024aa g     F M55_HP_ROM	00000034 __Heap_ProvideMemory
802024aa g     F M55_HP_ROM	00000000 .hidden __semihosting_library_function
802024aa g     F M55_HP_ROM	00000000 .hidden _maybe_terminate_alloc
802024de g     F M55_HP_ROM	00000032 __default_signal_display
80202510 g     F M55_HP_ROM	0000000e __rt_SIGABRT_inner
80202540 g     F M55_HP_ROM	0000000e .hidden __rt_SIGRTMEM
80202550 g     F M55_HP_ROM	00000016 __rt_SIGRTMEM_inner
802027bc g     F M55_HP_ROM	00000006 .hidden BusFault_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC120_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC120_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC120_DONE0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC120_DONE1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC121_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC121_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC121_DONE0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC121_DONE1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC122_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC122_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC122_DONE0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC122_DONE1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC24_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC24_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC24_DONE0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ADC24_DONE1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden AES0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden AES1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden BOD_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CAM_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CANFD_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_BUS_ERROR0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_BUS_ERROR1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_FIFO_UNDERRUN0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_FIFO_UNDERRUN1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_FIFO_WARNING0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_FIFO_WARNING1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_REG_RELOAD0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_REG_RELOAD1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_SCANLINE0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CDC_SCANLINE1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CMP0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CMP1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CMP2_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CMP3_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden CSI_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ0Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ10Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ11Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ12Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ13Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ14Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ15Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ16Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ17Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ18Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ19Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ1Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ20Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ21Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ22Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ23Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ24Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ25Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ26Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ27Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ28Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ29Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ2Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ30Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ31Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ3Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ4Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ5Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ6Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ7Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ8Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ9Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA0_IRQ_ABORT_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ0Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ10Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ11Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ12Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ13Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ14Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ15Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ16Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ17Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ18Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ19Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ1Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ20Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ21Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ22Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ23Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ24Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ25Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ26Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ27Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ28Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ29Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ2Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ30Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ31Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ3Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ4Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ5Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ6Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ7Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ8Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ9Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DMA1_IRQ_ABORT_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden DSI_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden DebugMon_Handler
802027c4 g     F M55_HP_ROM	00000004 .hidden Default_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden ETH_PMT_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden ETH_SBD_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden GPU2D_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ0Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ10Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ11Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ12Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ13Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ14Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ15Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ1Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ2Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ3Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ4Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ5Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ6Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ7Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ8Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden HWSEM_IRQ9Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2C0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2C1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2C2_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2C3_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2S0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2S1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2S2_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I2S3_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden I3C_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden LPCMP_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden LPGPIO_COMB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden LPRTC_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden LPTIMER0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden LPTIMER1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden LPTIMER2_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden LPTIMER3_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_A32_M55HP_0_RX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_A32_M55HP_1_RX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HE_M55HP_0_RX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HE_M55HP_1_RX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HP_A32_0_TX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HP_A32_1_TX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HP_M55HE_0_TX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HP_M55HE_1_TX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HP_SECPU_0_TX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_M55HP_SECPU_1_TX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_SECPU_M55HP_0_RX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden MHU_SECPU_M55HP_1_RX_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden NMI_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden NPU_HP_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden OSPI0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden OSPI1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden PDM_AUDIO_DET_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden PDM_ERROR_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden PDM_WARN_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden PPU0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden PPU1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden PPU2_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden PendSV_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC0_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC0_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC1_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC1_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC2_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC2_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC3_CMPA_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden QEC3_CMPB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden REFCLK_CNTBASE0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden REFCLK_CNTBASE1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden REFCLK_CNTBASE2_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden REFCLK_CNTBASE3_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden S32K_CNTBASE0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden S32K_CNTBASE1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SDMMC_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SDMMC_WAKEUP_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SOC_CATU_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SOC_ETR_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SPI0_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SPI1_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SPI2_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SPI3_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden SVC_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden SysTick_Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden USB_IRQHandler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ0Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ10Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ11Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ12Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ13Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ14Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ15Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ16Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ17Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ18Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ19Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ1Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ20Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ21Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ22Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ23Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ24Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ25Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ26Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ27Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ28Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ29Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ2Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ30Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ31Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ32Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ33Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ34Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ35Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ36Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ37Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ38Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ39Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ3Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ40Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ41Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ42Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ43Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ44Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ45Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ46Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ47Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ48Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ49Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ4Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ50Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ51Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ52Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ53Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ54Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ55Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ56Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ57Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ58Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ59Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ5Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ60Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ61Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ62Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ63Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ64Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ65Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ66Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ67Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ68Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ69Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ6Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ70Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ71Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ72Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ73Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ74Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ75Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ76Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ77Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ78Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ79Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ7Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ80Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ81Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ82Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ83Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ84Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ85Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ86Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ87Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ88Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ89Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ8Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ90Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ91Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ92Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ93Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ94Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ95Handler
802027c4  w    F M55_HP_ROM	00000004 .hidden UTIMER_IRQ9Handler
802027c8 g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ0Handler
802027dc g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ1Handler
802027f0 g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ2Handler
80202804 g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ3Handler
80202818 g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ4Handler
8020282c g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ5Handler
80202840 g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ6Handler
80202854 g     F M55_HP_ROM	00000012 .hidden GPIO0_IRQ7Handler
80202868 g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ0Handler
8020287c g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ1Handler
80202890 g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ2Handler
802028a4 g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ3Handler
802028b8 g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ4Handler
802028cc g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ5Handler
802028e0 g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ6Handler
802028f4 g     F M55_HP_ROM	00000012 .hidden GPIO10_IRQ7Handler
80202908 g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ0Handler
8020291c g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ1Handler
80202930 g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ2Handler
80202944 g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ3Handler
80202958 g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ4Handler
8020296c g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ5Handler
80202980 g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ6Handler
80202994 g     F M55_HP_ROM	00000012 .hidden GPIO11_IRQ7Handler
802029a8 g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ0Handler
802029bc g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ1Handler
802029d0 g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ2Handler
802029e4 g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ3Handler
802029f8 g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ4Handler
80202a0c g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ5Handler
80202a20 g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ6Handler
80202a34 g     F M55_HP_ROM	00000012 .hidden GPIO12_IRQ7Handler
80202a48 g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ0Handler
80202a5c g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ1Handler
80202a70 g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ2Handler
80202a84 g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ3Handler
80202a98 g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ4Handler
80202aac g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ5Handler
80202ac0 g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ6Handler
80202ad4 g     F M55_HP_ROM	00000012 .hidden GPIO13_IRQ7Handler
80202ae8 g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ0Handler
80202afc g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ1Handler
80202b10 g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ2Handler
80202b24 g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ3Handler
80202b38 g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ4Handler
80202b4c g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ5Handler
80202b60 g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ6Handler
80202b74 g     F M55_HP_ROM	00000012 .hidden GPIO14_IRQ7Handler
80202b88 g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ0Handler
80202b9c g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ1Handler
80202bb0 g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ2Handler
80202bc4 g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ3Handler
80202bd8 g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ4Handler
80202bec g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ5Handler
80202c00 g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ6Handler
80202c14 g     F M55_HP_ROM	00000012 .hidden GPIO1_IRQ7Handler
80202c28 g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ0Handler
80202c3c g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ1Handler
80202c50 g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ2Handler
80202c64 g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ3Handler
80202c78 g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ4Handler
80202c8c g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ5Handler
80202ca0 g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ6Handler
80202cb4 g     F M55_HP_ROM	00000012 .hidden GPIO2_IRQ7Handler
80202cc8 g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ0Handler
80202cdc g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ1Handler
80202cf0 g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ2Handler
80202d04 g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ3Handler
80202d18 g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ4Handler
80202d2c g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ5Handler
80202d40 g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ6Handler
80202d54 g     F M55_HP_ROM	00000012 .hidden GPIO3_IRQ7Handler
80202d68 g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ0Handler
80202d7c g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ1Handler
80202d90 g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ2Handler
80202da4 g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ3Handler
80202db8 g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ4Handler
80202dcc g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ5Handler
80202de0 g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ6Handler
80202df4 g     F M55_HP_ROM	00000012 .hidden GPIO4_IRQ7Handler
80202e08 g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ0Handler
80202e1c g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ1Handler
80202e30 g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ2Handler
80202e44 g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ3Handler
80202e58 g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ4Handler
80202e6c g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ5Handler
80202e80 g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ6Handler
80202e94 g     F M55_HP_ROM	00000012 .hidden GPIO5_IRQ7Handler
80202ea8 g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ0Handler
80202ebc g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ1Handler
80202ed0 g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ2Handler
80202ee4 g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ3Handler
80202ef8 g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ4Handler
80202f0c g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ5Handler
80202f20 g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ6Handler
80202f34 g     F M55_HP_ROM	00000012 .hidden GPIO6_IRQ7Handler
80202f48 g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ0Handler
80202f5c g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ1Handler
80202f70 g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ2Handler
80202f84 g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ3Handler
80202f98 g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ4Handler
80202fac g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ5Handler
80202fc0 g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ6Handler
80202fd4 g     F M55_HP_ROM	00000012 .hidden GPIO7_IRQ7Handler
80202fe8 g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ0Handler
80202ffc g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ1Handler
80203010 g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ2Handler
80203024 g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ3Handler
80203038 g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ4Handler
8020304c g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ5Handler
80203060 g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ6Handler
80203074 g     F M55_HP_ROM	00000012 .hidden GPIO8_IRQ7Handler
80203088 g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ0Handler
8020309c g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ1Handler
802030b0 g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ2Handler
802030c4 g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ3Handler
802030d8 g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ4Handler
802030ec g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ5Handler
80203100 g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ6Handler
80203114 g     F M55_HP_ROM	00000012 .hidden GPIO9_IRQ7Handler
80203164 g     F M55_HP_ROM	00000006 .hidden HardFault_Handler
8020316c g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ0Handler
80203180 g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ1Handler
80203194 g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ2Handler
802031a8 g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ3Handler
802031bc g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ4Handler
802031d0 g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ5Handler
802031e4 g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ6Handler
802031f8 g     F M55_HP_ROM	00000012 .hidden LPGPIO_IRQ7Handler
8020320c g     F M55_HP_ROM	0000003a .hidden MPU_Clear_All_Regions
80203248  w    F M55_HP_ROM	0000003a .hidden MPU_Load_Regions
80203284  w    F M55_HP_ROM	00000028 .hidden MPU_Setup
802032ac g     F M55_HP_ROM	00000006 .hidden MemManage_Handler
802032b4 g     F M55_HP_ROM	00000010 .hidden Reset_Handler
802032cc g     F M55_HP_ROM	00000008 .hidden Reset_Handler_C
8020331c g     F M55_HP_ROM	000000a2 .hidden SEGGER_RTT_ConfigUpBuffer
802033c0 g     F M55_HP_ROM	0000004e .hidden SEGGER_RTT_Write
80203410 g     F M55_HP_ROM	000000b0 .hidden SEGGER_RTT_WriteNoLock
802034c0 g     F M55_HP_ROM	0000002a .hidden SEGGER_RTT_printf
802034ec g     F M55_HP_ROM	0000039c .hidden SEGGER_RTT_vprintf
80203888 g     F M55_HP_ROM	00000006 .hidden SecureFault_Handler
80203890 g     F M55_HP_ROM	000000a2 .hidden SystemInit
80203934  w    F M55_HP_ROM	00000002 .hidden System_HandleSpuriousWakeup
80203938 g     F M55_HP_ROM	00000190 .hidden TGU_Setup
80203ac8 g     F M55_HP_ROM	00000010 .hidden UART0_IRQHandler
80203ad8 g     F M55_HP_ROM	00000010 .hidden UART1_IRQHandler
80203ae8 g     F M55_HP_ROM	00000010 .hidden UART2_IRQHandler
80203af8 g     F M55_HP_ROM	00000010 .hidden UART3_IRQHandler
80203b08 g     F M55_HP_ROM	00000010 .hidden UART4_IRQHandler
80203b18 g     F M55_HP_ROM	00000010 .hidden UART5_IRQHandler
80203b28 g     F M55_HP_ROM	00000010 .hidden UART6_IRQHandler
80203b38 g     F M55_HP_ROM	00000010 .hidden UART7_IRQHandler
80203c90 g     F M55_HP_ROM	00000006 .hidden UsageFault_Handler
802042d4 g     F M55_HP_ROM	0000011a .hidden JIT::Generators::Triad::generate(unsigned int)
802043f0  w    F M55_HP_ROM	00000014 .hidden JIT::Generators::Triad::Triad()
80204404 g     F M55_HP_ROM	0000003a .hidden JIT::Generators::Simple::generate()
80204440  w    F M55_HP_ROM	00000014 .hidden JIT::Generators::Simple::Simple()
80204454 g     F M55_HP_ROM	00000038 .hidden JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)
8020448c g     F M55_HP_ROM	00000044 .hidden JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)
802044d0 g     F M55_HP_ROM	00000044 .hidden JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)
80204514 g     F M55_HP_ROM	00000026 .hidden JIT::Instructions::Base::bx(JIT::Instructions::Register)
8020453c g     F M55_HP_ROM	00000048 .hidden JIT::Instructions::Base::letp(short)
80204584 g     F M55_HP_ROM	00000032 .hidden JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)
802045b8 g     F M55_HP_ROM	00000046 .hidden JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)
80204600 g     F M55_HP_ROM	00000054 .hidden JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)
80204654 g     F M55_HP_ROM	0000008c .hidden JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)
802046e0 g     F M55_HP_ROM	00000066 .hidden JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)
80204748 g     F M55_HP_ROM	0000002e .hidden JIT::Backend::addInstruction(unsigned int)
80204778 g     F M55_HP_ROM	00000020 .hidden JIT::Backend::addInstruction(unsigned short)
80204798 g     F M55_HP_ROM	0000001a .hidden JIT::Backend::getBranchOffset(unsigned short*)
802047b4 g     F M55_HP_ROM	00000022 .hidden JIT::Backend::addBranchInstruction(unsigned int)
802047d8  w    F M55_HP_ROM	0000003e .hidden JIT::Backend::Backend()
80204818  w    F M55_HP_ROM	0000000a .hidden LPRTC::getInstance()
80204824  w    F M55_HP_ROM	00000026 .hidden LPRTC::enable()
8020484c  w    F M55_HP_ROM	00000026 .hidden LPRTC::disable()
80204874  w    F M55_HP_ROM	00000010 .hidden Register<unsigned int, unsigned int, 0u>::Register(unsigned int)
80204884  w    F M55_HP_ROM	00000016 .hidden Register<unsigned int, unsigned int, 12u>::set(unsigned int)
8020489c  w    F M55_HP_ROM	00000016 .hidden Register<unsigned int, unsigned int, 12u>::clear(unsigned int)
802048b4  w    F M55_HP_ROM	00000012 .hidden Register<unsigned int, unsigned int, 12u>::Register(unsigned int)
802048c8  w    F M55_HP_ROM	00000016 .hidden Register<unsigned int, unsigned int, 16u>::set(unsigned int)
802048e0  w    F M55_HP_ROM	00000016 .hidden Register<unsigned int, unsigned int, 16u>::clear(unsigned int)
802048f8  w    F M55_HP_ROM	00000012 .hidden Register<unsigned int, unsigned int, 16u>::Register(unsigned int)
8020490c g     F M55_HP_ROM	0000000e .hidden JIT::Backend::getThumbAddress() const
802049f8 g     F M55_HP_ROM	000000a0 .hidden _platform_pre_stackheap_init
80204a98 g     F M55_HP_ROM	0000000a .hidden _sys_close
80204aa4 g     F M55_HP_ROM	0000000a .hidden _sys_flen
80204ab0 g     F M55_HP_ROM	00000020 .hidden _sys_istty
80204ad0 g     F M55_HP_ROM	00000048 .hidden _sys_open
80204b18 g     F M55_HP_ROM	0000000c .hidden _sys_seek
80204b24 g     F M55_HP_ROM	0000003a .hidden _sys_write
80204b60 g     F M55_HP_ROM	00000020 .hidden _ttywrch
80204ba8 g     F M55_HP_ROM	00000056 .hidden fault_dump_enable
80204c24 g     F M55_HP_ROM	00000124 .hidden main
80204d48 g     F M55_HP_ROM	00000026 .hidden setup_tcm_ns_partition
80205560 g     F M55_HP_ROM	0000000e .hidden sys_busy_loop_init
802055c4 g     F M55_HP_ROM	0000020c .hidden uart_irq_handler
80205810 g     F M55_HP_ROM	0000002c __cxa_guard_acquire
8020583c g     F M55_HP_ROM	00000008 __cxa_guard_release
80205844 g     F M55_HP_ROM	00000004 .hidden abort_message
80205848 g     F M55_HP_ROM	0000003e _btod_d2e
80205886 g     F M55_HP_ROM	00000046 _d2e_denorm_low
802058cc g     F M55_HP_ROM	00000060 _d2e_norm_op1
8020592c g     F M55_HP_ROM	000002b8 __btod_div_common
80205c64 g     F M55_HP_ROM	000000dc _e2e
80205d40 g     F M55_HP_ROM	0000002a _btod_ediv
80205d6a g     F M55_HP_ROM	0000002a _btod_emul
80205d94 g     F M55_HP_ROM	00000244 __btod_mult_common
80205fd8 g     F M55_HP_ROM	00000030 __ARM_fpclassify
80206008 g     F M55_HP_ROM	0000000e _is_digit
80206016 g     F M55_HP_ROM	0000001c fputc
80206034 g     F M55_HP_ROM	0000002c .hidden _get_lc_numeric
80206060 g     F M55_HP_ROM	0000002c _get_lc_ctype
8020608c g     F M55_HP_ROM	0000001e _fp_init
802060a8 g     F M55_HP_ROM	00000000 __fplib_config_fpu_vfp
802060a8 g     F M55_HP_ROM	00000000 __fplib_config_pureend_doubles
802060aa g     F M55_HP_ROM	00000004 .hidden _printf_fp_dec
802060ae g     F M55_HP_ROM	00000004 .hidden _printf_fp_hex
802060b2 g       M55_HP_ROM	00000000 .hidden __I$use$fp
802060b2 g     O M55_HP_ROM	00000004 __stdin_name
802060b6 g     O M55_HP_ROM	00000004 __stdout_name
802060ba g     O M55_HP_ROM	00000004 __stderr_name
802066e8 g       M55_HP_ROM	00000000 .hidden Region$$Table$$Base
80206708 g       M55_HP_ROM	00000000 .hidden Region$$Table$$Limit
80206731 g     O M55_HP_ROM	00000000 __ctype
80206888 g       M55_HP_ROM	00000000 .hidden SHT$$INIT_ARRAY$$Base
80206894 g       M55_HP_ROM	00000000 .hidden SHT$$INIT_ARRAY$$Limit



Disassembly of section M55_HP_ROM:

80200000 <__Vectors>:
__tagsym$$used.1():
80200000:	00 00 10 20 b5 32 20 80 c5 27 20 80 65 31 20 80     ... .2 ..' .e1 .
80200010:	ad 32 20 80 bd 27 20 80 91 3c 20 80 89 38 20 80     .2 ..' ..< ..8 .
	...
8020002c:	c5 27 20 80 c5 27 20 80 00 00 00 00 c5 27 20 80     .' ..' ......' .
8020003c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020004c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020005c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020006c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020007c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020008c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020009c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802000ac:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802000bc:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802000cc:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802000dc:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802000ec:	c5 27 20 80 c5 27 20 80 00 00 00 00 00 00 00 00     .' ..' .........
	...
8020011c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020012c:	00 00 00 00 c5 27 20 80 c5 27 20 80 c5 27 20 80     .....' ..' ..' .
8020013c:	c5 27 20 80 00 00 00 00 00 00 00 00 00 00 00 00     .' .............
8020014c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
8020015c:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
	...
802001c0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802001d0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802001e0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802001f0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200200:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200210:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200220:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200230:	c9 3a 20 80 d9 3a 20 80 e9 3a 20 80 f9 3a 20 80     .: ..: ..: ..: .
80200240:	09 3b 20 80 19 3b 20 80 29 3b 20 80 39 3b 20 80     .; ..; .); .9; .
80200250:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200260:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200270:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200280:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200290:	c5 27 20 80 c5 27 20 80 00 00 00 00 c5 27 20 80     .' ..' ......' .
802002a0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802002b0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802002c0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802002d0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802002e0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 6d 31 20 80     .' ..' ..' .m1 .
802002f0:	81 31 20 80 95 31 20 80 a9 31 20 80 bd 31 20 80     .1 ..1 ..1 ..1 .
80200300:	d1 31 20 80 e5 31 20 80 f9 31 20 80 c9 27 20 80     .1 ..1 ..1 ..' .
80200310:	dd 27 20 80 f1 27 20 80 05 28 20 80 19 28 20 80     .' ..' ..( ..( .
80200320:	2d 28 20 80 41 28 20 80 55 28 20 80 89 2b 20 80     -( .A( .U( ..+ .
80200330:	9d 2b 20 80 b1 2b 20 80 c5 2b 20 80 d9 2b 20 80     .+ ..+ ..+ ..+ .
80200340:	ed 2b 20 80 01 2c 20 80 15 2c 20 80 29 2c 20 80     .+ .., .., .), .
80200350:	3d 2c 20 80 51 2c 20 80 65 2c 20 80 79 2c 20 80     =, .Q, .e, .y, .
80200360:	8d 2c 20 80 a1 2c 20 80 b5 2c 20 80 c9 2c 20 80     ., .., .., .., .
80200370:	dd 2c 20 80 f1 2c 20 80 05 2d 20 80 19 2d 20 80     ., .., ..- ..- .
80200380:	2d 2d 20 80 41 2d 20 80 55 2d 20 80 69 2d 20 80     -- .A- .U- .i- .
80200390:	7d 2d 20 80 91 2d 20 80 a5 2d 20 80 b9 2d 20 80     }- ..- ..- ..- .
802003a0:	cd 2d 20 80 e1 2d 20 80 f5 2d 20 80 09 2e 20 80     .- ..- ..- ... .
802003b0:	1d 2e 20 80 31 2e 20 80 45 2e 20 80 59 2e 20 80     .. .1. .E. .Y. .
802003c0:	6d 2e 20 80 81 2e 20 80 95 2e 20 80 a9 2e 20 80     m. ... ... ... .
802003d0:	bd 2e 20 80 d1 2e 20 80 e5 2e 20 80 f9 2e 20 80     .. ... ... ... .
802003e0:	0d 2f 20 80 21 2f 20 80 35 2f 20 80 49 2f 20 80     ./ .!/ .5/ .I/ .
802003f0:	5d 2f 20 80 71 2f 20 80 85 2f 20 80 99 2f 20 80     ]/ .q/ ../ ../ .
80200400:	ad 2f 20 80 c1 2f 20 80 d5 2f 20 80 e9 2f 20 80     ./ ../ ../ ../ .
80200410:	fd 2f 20 80 11 30 20 80 25 30 20 80 39 30 20 80     ./ ..0 .%0 .90 .
80200420:	4d 30 20 80 61 30 20 80 75 30 20 80 89 30 20 80     M0 .a0 .u0 ..0 .
80200430:	9d 30 20 80 b1 30 20 80 c5 30 20 80 d9 30 20 80     .0 ..0 ..0 ..0 .
80200440:	ed 30 20 80 01 31 20 80 15 31 20 80 69 28 20 80     .0 ..1 ..1 .i( .
80200450:	7d 28 20 80 91 28 20 80 a5 28 20 80 b9 28 20 80     }( ..( ..( ..( .
80200460:	cd 28 20 80 e1 28 20 80 f5 28 20 80 09 29 20 80     .( ..( ..( ..) .
80200470:	1d 29 20 80 31 29 20 80 45 29 20 80 59 29 20 80     .) .1) .E) .Y) .
80200480:	6d 29 20 80 81 29 20 80 95 29 20 80 a9 29 20 80     m) ..) ..) ..) .
80200490:	bd 29 20 80 d1 29 20 80 e5 29 20 80 f9 29 20 80     .) ..) ..) ..) .
802004a0:	0d 2a 20 80 21 2a 20 80 35 2a 20 80 49 2a 20 80     .* .!* .5* .I* .
802004b0:	5d 2a 20 80 71 2a 20 80 85 2a 20 80 99 2a 20 80     ]* .q* ..* ..* .
802004c0:	ad 2a 20 80 c1 2a 20 80 d5 2a 20 80 e9 2a 20 80     .* ..* ..* ..* .
802004d0:	fd 2a 20 80 11 2b 20 80 25 2b 20 80 39 2b 20 80     .* ..+ .%+ .9+ .
802004e0:	4d 2b 20 80 61 2b 20 80 75 2b 20 80 c5 27 20 80     M+ .a+ .u+ ..' .
802004f0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200500:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200510:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200520:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200530:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200540:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200550:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200560:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200570:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200580:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200590:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802005a0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802005b0:	c5 27 20 80 c5 27 20 80 c5 27 20 80 00 00 00 00     .' ..' ..' .....
	...
80200604:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200614:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200624:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200634:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200644:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200654:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200664:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200674:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200684:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200694:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802006a4:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802006b4:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802006c4:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802006d4:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802006e4:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
802006f4:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200704:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200714:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200724:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200734:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200744:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200754:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200764:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200774:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200784:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
80200794:	c5 27 20 80 c5 27 20 80 c5 27 20 80 c5 27 20 80     .' ..' ..' ..' .
	...

802007c0 <__main>:
__main():
802007c0:	f000 f802 	bl	802007c8 <__scatterload_rt2>
802007c4:	f000 f8b6 	bl	80200934 <__rt_entry>

802007c8 <__scatterload_rt2>:
__scatterload():
802007c8:	a614      	add	r6, pc, #80	@ (adr r6, 8020081c <__scatterload_loop+0x4a>)
__scatterload_rt2():
802007ca:	e896 0c00 	ldmia.w	r6, {sl, fp}
802007ce:	44b2      	add	sl, r6
802007d0:	44b3      	add	fp, r6

802007d2 <__scatterload_loop>:
__scatterload_loop():
802007d2:	45da      	cmp	sl, fp
802007d4:	d101      	bne.n	802007da <__scatterload_loop+0x8>
802007d6:	f000 f8ad 	bl	80200934 <__rt_entry>
802007da:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
802007de:	a60f      	add	r6, pc, #60	@ (adr r6, 8020081c <__scatterload_loop+0x4a>)
802007e0:	e896 0030 	ldmia.w	r6, {r4, r5}
802007e4:	eba5 0504 	sub.w	r5, r5, r4
802007e8:	eb04 0706 	add.w	r7, r4, r6
802007ec:	ebaa 0407 	sub.w	r4, sl, r7
802007f0:	f1a7 0701 	sub.w	r7, r7, #1
802007f4:	ea4f 1515 	mov.w	r5, r5, lsr #4
802007f8:	ea4f 1434 	mov.w	r4, r4, ror #4
802007fc:	f1a4 0401 	sub.w	r4, r4, #1
80200800:	42ac      	cmp	r4, r5
80200802:	d301      	bcc.n	80200808 <__scatterload_loop+0x36>
80200804:	f000 f896 	bl	80200934 <__rt_entry>
80200808:	f013 0f01 	tst.w	r3, #1
8020080c:	bf18      	it	ne
8020080e:	1afb      	subne	r3, r7, r3
80200810:	f043 0301 	orr.w	r3, r3, #1
80200814:	f000 f801 	bl	8020081a <__scatterload_loop+0x48>
80200818:	e7db      	b.n	802007d2 <__scatterload_loop>
8020081a:	4718      	bx	r3
8020081c:	00005ecc 	.word	0x00005ecc
80200820:	00005eec 	.word	0x00005eec

80200824 <__scatterload_copy>:
__scatterload_copy():
80200824:	3a10      	subs	r2, #16
80200826:	bf24      	itt	cs
80200828:	c878      	ldmiacs	r0!, {r3, r4, r5, r6}
8020082a:	c178      	stmiacs	r1!, {r3, r4, r5, r6}
8020082c:	d8fa      	bhi.n	80200824 <__scatterload_copy>
8020082e:	0752      	lsls	r2, r2, #29
80200830:	bf24      	itt	cs
80200832:	c830      	ldmiacs	r0!, {r4, r5}
80200834:	c130      	stmiacs	r1!, {r4, r5}
80200836:	bf44      	itt	mi
80200838:	6804      	ldrmi	r4, [r0, #0]
8020083a:	600c      	strmi	r4, [r1, #0]
8020083c:	4770      	bx	lr
	...

80200840 <__scatterload_null>:
__scatterload_null():
80200840:	4770      	bx	lr
	...

80200844 <__scatterload_zeroinit>:
__scatterload_zeroinit():
80200844:	2300      	movs	r3, #0
80200846:	2400      	movs	r4, #0
80200848:	2500      	movs	r5, #0
8020084a:	2600      	movs	r6, #0
8020084c:	3a10      	subs	r2, #16
8020084e:	bf28      	it	cs
80200850:	c178      	stmiacs	r1!, {r3, r4, r5, r6}
80200852:	d8fb      	bhi.n	8020084c <__scatterload_zeroinit+0x8>
80200854:	0752      	lsls	r2, r2, #29
80200856:	bf28      	it	cs
80200858:	c130      	stmiacs	r1!, {r4, r5}
8020085a:	bf48      	it	mi
8020085c:	600b      	strmi	r3, [r1, #0]
8020085e:	4770      	bx	lr

80200860 <_printf_n>:
_printf_n():
80200860:	296e      	cmp	r1, #110	@ 0x6e
80200862:	f000 822f 	beq.w	80200cc4 <_printf_charcount>

80200866 <_printf_p>:
_printf_p():
80200866:	2970      	cmp	r1, #112	@ 0x70
80200868:	f000 8365 	beq.w	80200f36 <_printf_hex_ptr>

8020086c <_printf_f>:
_printf_f():
8020086c:	2966      	cmp	r1, #102	@ 0x66
8020086e:	f005 841c 	beq.w	802060aa <_printf_fp_dec>

80200872 <_printf_e>:
_printf_e():
80200872:	2965      	cmp	r1, #101	@ 0x65
80200874:	f005 8419 	beq.w	802060aa <_printf_fp_dec>

80200878 <_printf_g>:
_printf_g():
80200878:	2967      	cmp	r1, #103	@ 0x67
8020087a:	f005 8416 	beq.w	802060aa <_printf_fp_dec>

8020087e <_printf_a>:
_printf_a():
8020087e:	2961      	cmp	r1, #97	@ 0x61
80200880:	f005 8415 	beq.w	802060ae <_printf_fp_hex>

80200884 <_printf_ll>:
_printf_ll():
80200884:	6803      	ldr	r3, [r0, #0]
80200886:	0a1b      	lsrs	r3, r3, #8
80200888:	bf28      	it	cs
8020088a:	f041 0180 	orrcs.w	r1, r1, #128	@ 0x80

8020088e <_printf_i>:
_printf_i():
8020088e:	2969      	cmp	r1, #105	@ 0x69
80200890:	f000 81dc 	beq.w	80200c4c <_printf_int_dec>

80200894 <_printf_d>:
_printf_d():
80200894:	2964      	cmp	r1, #100	@ 0x64
80200896:	f000 81d9 	beq.w	80200c4c <_printf_int_dec>

8020089a <_printf_u>:
_printf_u():
8020089a:	2975      	cmp	r1, #117	@ 0x75
8020089c:	f000 81d6 	beq.w	80200c4c <_printf_int_dec>

802008a0 <_printf_o>:
_printf_o():
802008a0:	296f      	cmp	r1, #111	@ 0x6f
802008a2:	f000 82f3 	beq.w	80200e8c <_printf_int_oct>

802008a6 <_printf_x>:
_printf_x():
802008a6:	2978      	cmp	r1, #120	@ 0x78
802008a8:	f000 8331 	beq.w	80200f0e <_printf_int_hex>

802008ac <_printf_lli>:
_printf_lli():
802008ac:	29e9      	cmp	r1, #233	@ 0xe9
802008ae:	f000 828d 	beq.w	80200dcc <_printf_longlong_dec>

802008b2 <_printf_lld>:
_printf_lld():
802008b2:	29e4      	cmp	r1, #228	@ 0xe4
802008b4:	f000 828a 	beq.w	80200dcc <_printf_longlong_dec>

802008b8 <_printf_llu>:
_printf_llu():
802008b8:	29f5      	cmp	r1, #245	@ 0xf5
802008ba:	f000 8287 	beq.w	80200dcc <_printf_longlong_dec>

802008be <_printf_llo>:
_printf_llo():
802008be:	29ef      	cmp	r1, #239	@ 0xef
802008c0:	f000 82f0 	beq.w	80200ea4 <_printf_ll_oct>

802008c4 <_printf_llx>:
_printf_llx():
802008c4:	29f8      	cmp	r1, #248	@ 0xf8
802008c6:	f000 8330 	beq.w	80200f2a <_printf_ll_hex>

802008ca <_printf_l>:
_printf_l():
802008ca:	6803      	ldr	r3, [r0, #0]
802008cc:	09db      	lsrs	r3, r3, #7
802008ce:	bf28      	it	cs
802008d0:	f041 0180 	orrcs.w	r1, r1, #128	@ 0x80

802008d4 <_printf_c>:
_printf_c():
802008d4:	2963      	cmp	r1, #99	@ 0x63
802008d6:	f001 835f 	beq.w	80201f98 <_printf_char>

802008da <_printf_s>:
_printf_s():
802008da:	2973      	cmp	r1, #115	@ 0x73
802008dc:	f001 8364 	beq.w	80201fa8 <_printf_string>

802008e0 <_printf_lc>:
_printf_lc():
802008e0:	29e3      	cmp	r1, #227	@ 0xe3
802008e2:	f001 836f 	beq.w	80201fc4 <_printf_wchar>

802008e6 <_printf_ls>:
_printf_ls():
802008e6:	29f3      	cmp	r1, #243	@ 0xf3
802008e8:	f001 8374 	beq.w	80201fd4 <_printf_wstring>

802008ec <_printf_percent_end>:
_printf_percent_end():
802008ec:	2000      	movs	r0, #0
802008ee:	4770      	bx	lr

802008f0 <__rt_lib_init>:
__rt_lib_init():
802008f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

802008f2 <__rt_lib_init_fp_1>:
__rt_lib_init_fp_1():
802008f2:	f005 fbcb 	bl	8020608c <_fp_init>

802008f6 <__rt_lib_init_heap_2>:
__rt_lib_init_heap_2():
802008f6:	480b      	ldr	r0, [pc, #44]	@ (80200924 <__lit__00000000>)
802008f8:	490b      	ldr	r1, [pc, #44]	@ (80200928 <__lit__00000001>)
802008fa:	f001 fcbd 	bl	80202278 <_init_alloc>

802008fe <__rt_lib_init_heap_1>:
__rt_lib_init_heap_1():
802008fe:	f001 fc9b 	bl	80202238 <__rt_locale>
80200902:	0004      	movs	r4, r0

80200904 <__rt_lib_init_lc_collate_1>:
__rt_lib_init_lc_collate_1():
80200904:	2000      	movs	r0, #0
80200906:	2100      	movs	r1, #0
80200908:	f005 fbaa 	bl	80206060 <_get_lc_ctype>
8020090c:	1c40      	adds	r0, r0, #1
8020090e:	6060      	str	r0, [r4, #4]

80200910 <__rt_lib_init_lc_ctype_1>:
__rt_lib_init_lc_ctype_1():
80200910:	2000      	movs	r0, #0
80200912:	2100      	movs	r1, #0
80200914:	f005 fb8e 	bl	80206034 <_get_lc_numeric>
80200918:	60e0      	str	r0, [r4, #12]

8020091a <__rt_lib_init_atexit_1>:
__rt_lib_init_atexit_1():
8020091a:	f000 fdcd 	bl	802014b8 <_initio>

8020091e <__rt_lib_init_alloca_1>:
__rt_lib_init_alloca_1():
8020091e:	f000 f91d 	bl	80200b5c <__cpp_initialize__aeabi_>

80200922 <__rt_lib_init_cpp_1>:
__rt_lib_init_cpp_1():
80200922:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

80200924 <__lit__00000000>:
80200924:	4000 2000                                   .@. 

80200928 <__lit__00000001>:
80200928:	8000 2000                                   ... 

8020092c <__rt_lib_shutdown>:
__rt_lib_shutdown():
8020092c:	b510      	push	{r4, lr}

8020092e <__rt_lib_shutdown_cpp_1>:
__rt_lib_shutdown_cpp_1():
8020092e:	f000 fe2c 	bl	8020158a <_terminateio>

80200932 <__rt_lib_shutdown_fp_trap_1>:
__rt_lib_shutdown_fp_trap_1():
80200932:	bd10      	pop	{r4, pc}

80200934 <__rt_entry>:
__rt_entry():
80200934:	f004 f860 	bl	802049f8 <_platform_pre_stackheap_init>

80200938 <__rt_entry_sh>:
__rt_entry_sh():
80200938:	f8df d00c 	ldr.w	sp, [pc, #12]	@ 80200948 <__lit__00000000>

8020093c <__rt_entry_li>:
__rt_entry_li():
8020093c:	f7ff ffd8 	bl	802008f0 <__rt_lib_init>

80200940 <__rt_entry_main>:
__rt_entry_main():
80200940:	f004 f970 	bl	80204c24 <main>
80200944:	f001 fd80 	bl	80202448 <exit>

80200948 <__lit__00000000>:
80200948:	0000 2010                                   ... 

8020094c <__rt_exit>:
__rt_exit():
8020094c:	b403      	push	{r0, r1}

8020094e <__rt_exit_ls>:
__rt_exit_ls():
8020094e:	f7ff ffed 	bl	8020092c <__rt_lib_shutdown>

80200952 <__rt_exit_exit>:
__rt_exit_exit():
80200952:	bc03      	pop	{r0, r1}
80200954:	f001 fc5e 	bl	80202214 <_sys_exit>

80200958 <printf>:
printf():
80200958:	b40f      	push	{r0, r1, r2, r3}
8020095a:	4904      	ldr	r1, [pc, #16]	@ (8020096c <printf+0x14>)
8020095c:	b510      	push	{r4, lr}
8020095e:	aa03      	add	r2, sp, #12
80200960:	9802      	ldr	r0, [sp, #8]
80200962:	f000 f9c3 	bl	80200cec <_printf_char_file>
80200966:	bc10      	pop	{r4}
80200968:	f85d fb14 	ldr.w	pc, [sp], #20
8020096c:	20000684 	.word	0x20000684

80200970 <_do_fflush>:
_do_fflush():
80200970:	b570      	push	{r4, r5, r6, lr}
80200972:	4604      	mov	r4, r0
80200974:	68c0      	ldr	r0, [r0, #12]
80200976:	0781      	lsls	r1, r0, #30
80200978:	d013      	beq.n	802009a2 <_do_fflush+0x32>
8020097a:	0680      	lsls	r0, r0, #26
8020097c:	d501      	bpl.n	80200982 <_do_fflush+0x12>
8020097e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
80200980:	e004      	b.n	8020098c <_do_fflush+0x1c>
80200982:	69a1      	ldr	r1, [r4, #24]
80200984:	6860      	ldr	r0, [r4, #4]
80200986:	4408      	add	r0, r1
80200988:	6921      	ldr	r1, [r4, #16]
8020098a:	1a45      	subs	r5, r0, r1
8020098c:	4620      	mov	r0, r4
8020098e:	f000 fd4f 	bl	80201430 <_fflush>
80200992:	2200      	movs	r2, #0
80200994:	4606      	mov	r6, r0
80200996:	4629      	mov	r1, r5
80200998:	4620      	mov	r0, r4
8020099a:	f000 fc8d 	bl	802012b8 <_fseek>
8020099e:	4630      	mov	r0, r6
802009a0:	bd70      	pop	{r4, r5, r6, pc}
802009a2:	2000      	movs	r0, #0
802009a4:	bd70      	pop	{r4, r5, r6, pc}

802009a6 <fflush>:
fflush():
802009a6:	b570      	push	{r4, r5, r6, lr}
802009a8:	b110      	cbz	r0, 802009b0 <fflush+0xa>
802009aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
802009ae:	e7df      	b.n	80200970 <_do_fflush>
802009b0:	2500      	movs	r5, #0
802009b2:	4c07      	ldr	r4, [pc, #28]	@ (802009d0 <fflush+0x2a>)
802009b4:	1e6e      	subs	r6, r5, #1
802009b6:	e007      	b.n	802009c8 <fflush+0x22>
802009b8:	4620      	mov	r0, r4
802009ba:	f7ff ffd9 	bl	80200970 <_do_fflush>
802009be:	b100      	cbz	r0, 802009c2 <fflush+0x1c>
802009c0:	4635      	mov	r5, r6
802009c2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
802009c4:	f020 0401 	bic.w	r4, r0, #1
802009c8:	2c00      	cmp	r4, #0
802009ca:	d1f5      	bne.n	802009b8 <fflush+0x12>
802009cc:	4628      	mov	r0, r5
802009ce:	bd70      	pop	{r4, r5, r6, pc}
802009d0:	20000630 	.word	0x20000630

802009d4 <putc>:
putc():
802009d4:	f005 bb1f 	b.w	80206016 <fputc>

802009d8 <puts>:
puts():
802009d8:	b510      	push	{r4, lr}
802009da:	4604      	mov	r4, r0
802009dc:	e003      	b.n	802009e6 <puts+0xe>
802009de:	f005 fb1a 	bl	80206016 <fputc>
802009e2:	1c40      	adds	r0, r0, #1
802009e4:	d009      	beq.n	802009fa <puts+0x22>
802009e6:	f814 0b01 	ldrb.w	r0, [r4], #1
802009ea:	4905      	ldr	r1, [pc, #20]	@ (80200a00 <puts+0x28>)
802009ec:	2800      	cmp	r0, #0
802009ee:	d1f6      	bne.n	802009de <puts+0x6>
802009f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
802009f4:	200a      	movs	r0, #10
802009f6:	f005 bb0e 	b.w	80206016 <fputc>
802009fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
802009fe:	bd10      	pop	{r4, pc}
80200a00:	20000684 	.word	0x20000684

80200a04 <__rt_memcpy>:
__aeabi_memcpy():
80200a04:	2a03      	cmp	r2, #3
__rt_memcpy():
80200a06:	f240 8030 	bls.w	80200a6a <_memcpy_lastbytes>
80200a0a:	f010 0c03 	ands.w	ip, r0, #3
80200a0e:	f000 8015 	beq.w	80200a3c <__rt_memcpy+0x38>
80200a12:	f811 3b01 	ldrb.w	r3, [r1], #1
80200a16:	f1bc 0f02 	cmp.w	ip, #2
80200a1a:	4462      	add	r2, ip
80200a1c:	bf98      	it	ls
80200a1e:	f811 cb01 	ldrbls.w	ip, [r1], #1
80200a22:	f800 3b01 	strb.w	r3, [r0], #1
80200a26:	bf38      	it	cc
80200a28:	f811 3b01 	ldrbcc.w	r3, [r1], #1
80200a2c:	f1a2 0204 	sub.w	r2, r2, #4
80200a30:	bf98      	it	ls
80200a32:	f800 cb01 	strbls.w	ip, [r0], #1
80200a36:	bf38      	it	cc
80200a38:	f800 3b01 	strbcc.w	r3, [r0], #1
80200a3c:	f011 0303 	ands.w	r3, r1, #3
80200a40:	f000 85d6 	beq.w	802015f0 <__rt_memcpy_w>
80200a44:	3a08      	subs	r2, #8
80200a46:	f0c0 8008 	bcc.w	80200a5a <__rt_memcpy+0x56>
80200a4a:	f851 3b04 	ldr.w	r3, [r1], #4
80200a4e:	3a08      	subs	r2, #8
80200a50:	f851 cb04 	ldr.w	ip, [r1], #4
80200a54:	e8a0 1008 	stmia.w	r0!, {r3, ip}
80200a58:	e7f5      	b.n	80200a46 <__rt_memcpy+0x42>
80200a5a:	1d12      	adds	r2, r2, #4
80200a5c:	bf5c      	itt	pl
80200a5e:	f851 3b04 	ldrpl.w	r3, [r1], #4
80200a62:	f840 3b04 	strpl.w	r3, [r0], #4
80200a66:	f3af 8000 	nop.w

80200a6a <_memcpy_lastbytes>:
_memcpy_lastbytes():
80200a6a:	07d2      	lsls	r2, r2, #31
80200a6c:	bf24      	itt	cs
80200a6e:	f811 3b01 	ldrbcs.w	r3, [r1], #1
80200a72:	f811 cb01 	ldrbcs.w	ip, [r1], #1
80200a76:	bf48      	it	mi
80200a78:	f811 2b01 	ldrbmi.w	r2, [r1], #1
80200a7c:	bf24      	itt	cs
80200a7e:	f800 3b01 	strbcs.w	r3, [r0], #1
80200a82:	f800 cb01 	strbcs.w	ip, [r0], #1
80200a86:	bf48      	it	mi
80200a88:	f800 2b01 	strbmi.w	r2, [r0], #1
80200a8c:	4770      	bx	lr

80200a8e <__aeabi_memclr4>:
__aeabi_memclr4():
80200a8e:	f04f 0200 	mov.w	r2, #0

80200a92 <_memset_w>:
_memset_w():
80200a92:	b500      	push	{lr}
80200a94:	4613      	mov	r3, r2
80200a96:	4694      	mov	ip, r2
80200a98:	4696      	mov	lr, r2
80200a9a:	3920      	subs	r1, #32
80200a9c:	bf22      	ittt	cs
80200a9e:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
80200aa2:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
80200aa6:	f1b1 0120 	subscs.w	r1, r1, #32
80200aaa:	f4bf aff7 	bcs.w	80200a9c <_memset_w+0xa>
80200aae:	0709      	lsls	r1, r1, #28
80200ab0:	bf28      	it	cs
80200ab2:	e8a0 500c 	stmiacs.w	r0!, {r2, r3, ip, lr}
80200ab6:	bf48      	it	mi
80200ab8:	c00c      	stmiami	r0!, {r2, r3}
80200aba:	f85d eb04 	ldr.w	lr, [sp], #4
80200abe:	0089      	lsls	r1, r1, #2
80200ac0:	bf28      	it	cs
80200ac2:	f840 2b04 	strcs.w	r2, [r0], #4
80200ac6:	bf08      	it	eq
80200ac8:	4770      	bxeq	lr
80200aca:	bf48      	it	mi
80200acc:	f820 2b02 	strhmi.w	r2, [r0], #2
80200ad0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
80200ad4:	bf18      	it	ne
80200ad6:	f800 2b01 	strbne.w	r2, [r0], #1
80200ada:	4770      	bx	lr
80200adc:	0000      	movs	r0, r0
	...

80200ae0 <strcmp>:
strcmp():
80200ae0:	b430      	push	{r4, r5}
80200ae2:	f04f 3c01 	mov.w	ip, #16843009	@ 0x1010101
80200ae6:	f850 2b04 	ldr.w	r2, [r0], #4
80200aea:	f851 3b04 	ldr.w	r3, [r1], #4
80200aee:	facc f452 	uqsub8	r4, ip, r2
80200af2:	1ad5      	subs	r5, r2, r3
80200af4:	d120      	bne.n	80200b38 <strcmp+0x58>
80200af6:	b9fc      	cbnz	r4, 80200b38 <strcmp+0x58>
80200af8:	f850 2b04 	ldr.w	r2, [r0], #4
80200afc:	f851 3b04 	ldr.w	r3, [r1], #4
80200b00:	facc f452 	uqsub8	r4, ip, r2
80200b04:	1ad5      	subs	r5, r2, r3
80200b06:	d117      	bne.n	80200b38 <strcmp+0x58>
80200b08:	b9b4      	cbnz	r4, 80200b38 <strcmp+0x58>
80200b0a:	f850 2b04 	ldr.w	r2, [r0], #4
80200b0e:	f851 3b04 	ldr.w	r3, [r1], #4
80200b12:	facc f452 	uqsub8	r4, ip, r2
80200b16:	1ad5      	subs	r5, r2, r3
80200b18:	d10e      	bne.n	80200b38 <strcmp+0x58>
80200b1a:	b96c      	cbnz	r4, 80200b38 <strcmp+0x58>
80200b1c:	f850 2b04 	ldr.w	r2, [r0], #4
80200b20:	f851 3b04 	ldr.w	r3, [r1], #4
80200b24:	facc f452 	uqsub8	r4, ip, r2
80200b28:	1ad5      	subs	r5, r2, r3
80200b2a:	d105      	bne.n	80200b38 <strcmp+0x58>
80200b2c:	2c00      	cmp	r4, #0
80200b2e:	d0da      	beq.n	80200ae6 <strcmp+0x6>
80200b30:	bc30      	pop	{r4, r5}
80200b32:	f04f 0000 	mov.w	r0, #0
80200b36:	4770      	bx	lr
80200b38:	ba29      	rev	r1, r5
80200b3a:	fab1 f181 	clz	r1, r1
80200b3e:	f011 0118 	ands.w	r1, r1, #24
80200b42:	f1d1 0020 	rsbs	r0, r1, #32
80200b46:	4084      	lsls	r4, r0
80200b48:	d1f2      	bne.n	80200b30 <strcmp+0x50>
80200b4a:	40ca      	lsrs	r2, r1
80200b4c:	40cb      	lsrs	r3, r1
80200b4e:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
80200b52:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
80200b56:	bc30      	pop	{r4, r5}
80200b58:	1ad0      	subs	r0, r2, r3
80200b5a:	4770      	bx	lr

80200b5c <__cpp_initialize__aeabi_>:
__cpp_initialize__aeabi_():
80200b5c:	4808      	ldr	r0, [pc, #32]	@ (80200b80 <__cpp_initialize__aeabi_+0x24>)
80200b5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
80200b60:	4478      	add	r0, pc
80200b62:	9000      	str	r0, [sp, #0]
80200b64:	4807      	ldr	r0, [pc, #28]	@ (80200b84 <__cpp_initialize__aeabi_+0x28>)
80200b66:	4478      	add	r0, pc
80200b68:	9c00      	ldr	r4, [sp, #0]
80200b6a:	4605      	mov	r5, r0
80200b6c:	9001      	str	r0, [sp, #4]
80200b6e:	e004      	b.n	80200b7a <__cpp_initialize__aeabi_+0x1e>
80200b70:	4620      	mov	r0, r4
80200b72:	6801      	ldr	r1, [r0, #0]
80200b74:	4408      	add	r0, r1
80200b76:	4780      	blx	r0
80200b78:	1d24      	adds	r4, r4, #4
80200b7a:	42ac      	cmp	r4, r5
80200b7c:	d1f8      	bne.n	80200b70 <__cpp_initialize__aeabi_+0x14>
80200b7e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
80200b80:	00005d24 	.word	0x00005d24
80200b84:	00005d2a 	.word	0x00005d2a

80200b88 <_printf_pre_padding>:
_printf_pre_padding():
80200b88:	b570      	push	{r4, r5, r6, lr}
80200b8a:	4604      	mov	r4, r0
80200b8c:	6985      	ldr	r5, [r0, #24]
80200b8e:	6800      	ldr	r0, [r0, #0]
80200b90:	06c1      	lsls	r1, r0, #27
80200b92:	d501      	bpl.n	80200b98 <_printf_pre_padding+0x10>
80200b94:	2630      	movs	r6, #48	@ 0x30
80200b96:	e000      	b.n	80200b9a <_printf_pre_padding+0x12>
80200b98:	2620      	movs	r6, #32
80200b9a:	07c0      	lsls	r0, r0, #31
80200b9c:	d007      	beq.n	80200bae <_printf_pre_padding+0x26>
80200b9e:	bd70      	pop	{r4, r5, r6, pc}
80200ba0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200ba4:	4630      	mov	r0, r6
80200ba6:	4790      	blx	r2
80200ba8:	6a20      	ldr	r0, [r4, #32]
80200baa:	1c40      	adds	r0, r0, #1
80200bac:	6220      	str	r0, [r4, #32]
80200bae:	1e6d      	subs	r5, r5, #1
80200bb0:	d5f6      	bpl.n	80200ba0 <_printf_pre_padding+0x18>
80200bb2:	bd70      	pop	{r4, r5, r6, pc}

80200bb4 <_printf_post_padding>:
_printf_post_padding():
80200bb4:	b570      	push	{r4, r5, r6, lr}
80200bb6:	4604      	mov	r4, r0
80200bb8:	6985      	ldr	r5, [r0, #24]
80200bba:	7800      	ldrb	r0, [r0, #0]
80200bbc:	07c0      	lsls	r0, r0, #31
80200bbe:	d107      	bne.n	80200bd0 <_printf_post_padding+0x1c>
80200bc0:	bd70      	pop	{r4, r5, r6, pc}
80200bc2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200bc6:	2020      	movs	r0, #32
80200bc8:	4790      	blx	r2
80200bca:	6a20      	ldr	r0, [r4, #32]
80200bcc:	1c40      	adds	r0, r0, #1
80200bce:	6220      	str	r0, [r4, #32]
80200bd0:	1e6d      	subs	r5, r5, #1
80200bd2:	d5f6      	bpl.n	80200bc2 <_printf_post_padding+0xe>
80200bd4:	bd70      	pop	{r4, r5, r6, pc}

80200bd6 <_printf_truncate_signed>:
_printf_truncate_signed():
80200bd6:	6809      	ldr	r1, [r1, #0]
80200bd8:	054a      	lsls	r2, r1, #21
80200bda:	d501      	bpl.n	80200be0 <_printf_truncate_signed+0xa>
80200bdc:	b240      	sxtb	r0, r0
80200bde:	4770      	bx	lr
80200be0:	05c9      	lsls	r1, r1, #23
80200be2:	d5fc      	bpl.n	80200bde <_printf_truncate_signed+0x8>
80200be4:	b200      	sxth	r0, r0
80200be6:	4770      	bx	lr

80200be8 <_printf_truncate_unsigned>:
_printf_truncate_unsigned():
80200be8:	6809      	ldr	r1, [r1, #0]
80200bea:	054a      	lsls	r2, r1, #21
80200bec:	d501      	bpl.n	80200bf2 <_printf_truncate_unsigned+0xa>
80200bee:	b2c0      	uxtb	r0, r0
80200bf0:	4770      	bx	lr
80200bf2:	05c9      	lsls	r1, r1, #23
80200bf4:	d5fc      	bpl.n	80200bf0 <_printf_truncate_unsigned+0x8>
80200bf6:	b280      	uxth	r0, r0
80200bf8:	4770      	bx	lr

80200bfa <_printf_str>:
_printf_str():
80200bfa:	b570      	push	{r4, r5, r6, lr}
80200bfc:	460c      	mov	r4, r1
80200bfe:	4605      	mov	r5, r0
80200c00:	2a01      	cmp	r2, #1
80200c02:	d005      	beq.n	80200c10 <_printf_str+0x16>
80200c04:	7828      	ldrb	r0, [r5, #0]
80200c06:	0680      	lsls	r0, r0, #26
80200c08:	d500      	bpl.n	80200c0c <_printf_str+0x12>
80200c0a:	69ea      	ldr	r2, [r5, #28]
80200c0c:	2300      	movs	r3, #0
80200c0e:	e002      	b.n	80200c16 <_printf_str+0x1c>
80200c10:	2301      	movs	r3, #1
80200c12:	e005      	b.n	80200c20 <_printf_str+0x26>
80200c14:	1c5b      	adds	r3, r3, #1
80200c16:	4293      	cmp	r3, r2
80200c18:	d202      	bcs.n	80200c20 <_printf_str+0x26>
80200c1a:	5ce0      	ldrb	r0, [r4, r3]
80200c1c:	2800      	cmp	r0, #0
80200c1e:	d1f9      	bne.n	80200c14 <_printf_str+0x1a>
80200c20:	69a8      	ldr	r0, [r5, #24]
80200c22:	18e6      	adds	r6, r4, r3
80200c24:	1ac0      	subs	r0, r0, r3
80200c26:	61a8      	str	r0, [r5, #24]
80200c28:	6a28      	ldr	r0, [r5, #32]
80200c2a:	4418      	add	r0, r3
80200c2c:	6228      	str	r0, [r5, #32]
80200c2e:	4628      	mov	r0, r5
80200c30:	f7ff ffaa 	bl	80200b88 <_printf_pre_padding>
80200c34:	e004      	b.n	80200c40 <_printf_str+0x46>
80200c36:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
80200c3a:	f814 0b01 	ldrb.w	r0, [r4], #1
80200c3e:	4790      	blx	r2
80200c40:	42b4      	cmp	r4, r6
80200c42:	d3f8      	bcc.n	80200c36 <_printf_str+0x3c>
80200c44:	4628      	mov	r0, r5
80200c46:	f7ff ffb5 	bl	80200bb4 <_printf_post_padding>
80200c4a:	bd70      	pop	{r4, r5, r6, pc}

80200c4c <_printf_int_dec>:
_printf_int_dec():
80200c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
80200c50:	4606      	mov	r6, r0
80200c52:	2400      	movs	r4, #0
80200c54:	6810      	ldr	r0, [r2, #0]
80200c56:	2975      	cmp	r1, #117	@ 0x75
80200c58:	4631      	mov	r1, r6
80200c5a:	a516      	add	r5, pc, #88	@ (adr r5, 80200cb4 <_printf_int_dec+0x68>)
80200c5c:	d010      	beq.n	80200c80 <_printf_int_dec+0x34>
80200c5e:	f7ff ffba 	bl	80200bd6 <_printf_truncate_signed>
80200c62:	2800      	cmp	r0, #0
80200c64:	da02      	bge.n	80200c6c <_printf_int_dec+0x20>
80200c66:	4240      	negs	r0, r0
80200c68:	a513      	add	r5, pc, #76	@ (adr r5, 80200cb8 <_printf_int_dec+0x6c>)
80200c6a:	e007      	b.n	80200c7c <_printf_int_dec+0x30>
80200c6c:	6831      	ldr	r1, [r6, #0]
80200c6e:	078a      	lsls	r2, r1, #30
80200c70:	d501      	bpl.n	80200c76 <_printf_int_dec+0x2a>
80200c72:	a512      	add	r5, pc, #72	@ (adr r5, 80200cbc <_printf_int_dec+0x70>)
80200c74:	e002      	b.n	80200c7c <_printf_int_dec+0x30>
80200c76:	0749      	lsls	r1, r1, #29
80200c78:	d504      	bpl.n	80200c84 <_printf_int_dec+0x38>
80200c7a:	a511      	add	r5, pc, #68	@ (adr r5, 80200cc0 <_printf_int_dec+0x74>)
80200c7c:	2401      	movs	r4, #1
80200c7e:	e001      	b.n	80200c84 <_printf_int_dec+0x38>
80200c80:	f7ff ffb2 	bl	80200be8 <_printf_truncate_unsigned>
80200c84:	2100      	movs	r1, #0
80200c86:	220a      	movs	r2, #10
80200c88:	f106 0724 	add.w	r7, r6, #36	@ 0x24
80200c8c:	e009      	b.n	80200ca2 <_printf_int_dec+0x56>
80200c8e:	fbb0 fcf2 	udiv	ip, r0, r2
80200c92:	fbb0 f3f2 	udiv	r3, r0, r2
80200c96:	fb02 001c 	mls	r0, r2, ip, r0
80200c9a:	3030      	adds	r0, #48	@ 0x30
80200c9c:	5478      	strb	r0, [r7, r1]
80200c9e:	4618      	mov	r0, r3
80200ca0:	1c49      	adds	r1, r1, #1
80200ca2:	2800      	cmp	r0, #0
80200ca4:	d1f3      	bne.n	80200c8e <_printf_int_dec+0x42>
80200ca6:	4623      	mov	r3, r4
80200ca8:	462a      	mov	r2, r5
80200caa:	4630      	mov	r0, r6
80200cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
80200cb0:	f000 bd6b 	b.w	8020178a <_printf_int_common>
80200cb4:	00000000 	.word	0x00000000
80200cb8:	0000002d 	.word	0x0000002d
80200cbc:	0000002b 	.word	0x0000002b
80200cc0:	00000020 	.word	0x00000020

80200cc4 <_printf_charcount>:
_printf_charcount():
80200cc4:	6811      	ldr	r1, [r2, #0]
80200cc6:	6802      	ldr	r2, [r0, #0]
80200cc8:	6a00      	ldr	r0, [r0, #32]
80200cca:	0553      	lsls	r3, r2, #21
80200ccc:	d501      	bpl.n	80200cd2 <_printf_charcount+0xe>
80200cce:	7008      	strb	r0, [r1, #0]
80200cd0:	e00a      	b.n	80200ce8 <_printf_charcount+0x24>
80200cd2:	05d3      	lsls	r3, r2, #23
80200cd4:	d501      	bpl.n	80200cda <_printf_charcount+0x16>
80200cd6:	8008      	strh	r0, [r1, #0]
80200cd8:	e006      	b.n	80200ce8 <_printf_charcount+0x24>
80200cda:	0613      	lsls	r3, r2, #24
80200cdc:	d503      	bpl.n	80200ce6 <_printf_charcount+0x22>
80200cde:	17c2      	asrs	r2, r0, #31
80200ce0:	e9c1 0200 	strd	r0, r2, [r1]
80200ce4:	e000      	b.n	80200ce8 <_printf_charcount+0x24>
80200ce6:	6008      	str	r0, [r1, #0]
80200ce8:	2001      	movs	r0, #1
80200cea:	4770      	bx	lr

80200cec <_printf_char_file>:
_printf_char_file():
80200cec:	4b07      	ldr	r3, [pc, #28]	@ (80200d0c <_printf_char_file+0x20>)
80200cee:	b570      	push	{r4, r5, r6, lr}
80200cf0:	460d      	mov	r5, r1
80200cf2:	447b      	add	r3, pc
80200cf4:	f001 f933 	bl	80201f5e <_printf_char_common>
80200cf8:	4604      	mov	r4, r0
80200cfa:	4628      	mov	r0, r5
80200cfc:	f001 f96e 	bl	80201fdc <ferror>
80200d00:	b110      	cbz	r0, 80200d08 <_printf_char_file+0x1c>
80200d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
80200d06:	bd70      	pop	{r4, r5, r6, pc}
80200d08:	4620      	mov	r0, r4
80200d0a:	bd70      	pop	{r4, r5, r6, pc}
80200d0c:	00005321 	.word	0x00005321

80200d10 <_printf_wctomb>:
_printf_wctomb():
80200d10:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
80200d14:	4615      	mov	r5, r2
80200d16:	468a      	mov	sl, r1
80200d18:	4604      	mov	r4, r0
80200d1a:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 80200dc8 <_printf_wctomb+0xb8>
80200d1e:	44f8      	add	r8, pc
80200d20:	2700      	movs	r7, #0
80200d22:	e9d8 1000 	ldrd	r1, r0, [r8]
80200d26:	463e      	mov	r6, r7
80200d28:	e9cd 1000 	strd	r1, r0, [sp]
80200d2c:	e010      	b.n	80200d50 <_printf_wctomb+0x40>
80200d2e:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
80200d32:	466a      	mov	r2, sp
80200d34:	a802      	add	r0, sp, #8
80200d36:	f001 fa37 	bl	802021a8 <_c32rtomb>
80200d3a:	1c41      	adds	r1, r0, #1
80200d3c:	d007      	beq.n	80200d4e <_printf_wctomb+0x3e>
80200d3e:	7821      	ldrb	r1, [r4, #0]
80200d40:	0689      	lsls	r1, r1, #26
80200d42:	d503      	bpl.n	80200d4c <_printf_wctomb+0x3c>
80200d44:	69e2      	ldr	r2, [r4, #28]
80200d46:	1839      	adds	r1, r7, r0
80200d48:	4291      	cmp	r1, r2
80200d4a:	d80d      	bhi.n	80200d68 <_printf_wctomb+0x58>
80200d4c:	4407      	add	r7, r0
80200d4e:	1c76      	adds	r6, r6, #1
80200d50:	7820      	ldrb	r0, [r4, #0]
80200d52:	0680      	lsls	r0, r0, #26
80200d54:	d502      	bpl.n	80200d5c <_printf_wctomb+0x4c>
80200d56:	69e0      	ldr	r0, [r4, #28]
80200d58:	42b8      	cmp	r0, r7
80200d5a:	dd05      	ble.n	80200d68 <_printf_wctomb+0x58>
80200d5c:	42ae      	cmp	r6, r5
80200d5e:	dbe6      	blt.n	80200d2e <_printf_wctomb+0x1e>
80200d60:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
80200d64:	2800      	cmp	r0, #0
80200d66:	d1e2      	bne.n	80200d2e <_printf_wctomb+0x1e>
80200d68:	69a0      	ldr	r0, [r4, #24]
80200d6a:	1bc0      	subs	r0, r0, r7
80200d6c:	61a0      	str	r0, [r4, #24]
80200d6e:	4620      	mov	r0, r4
80200d70:	f7ff ff0a 	bl	80200b88 <_printf_pre_padding>
80200d74:	e9d8 1000 	ldrd	r1, r0, [r8]
80200d78:	e9cd 1000 	strd	r1, r0, [sp]
80200d7c:	2000      	movs	r0, #0
80200d7e:	e017      	b.n	80200db0 <_printf_wctomb+0xa0>
80200d80:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
80200d84:	466a      	mov	r2, sp
80200d86:	a802      	add	r0, sp, #8
80200d88:	f001 fa0e 	bl	802021a8 <_c32rtomb>
80200d8c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80200d90:	4681      	mov	r9, r0
80200d92:	d00b      	beq.n	80200dac <_printf_wctomb+0x9c>
80200d94:	2500      	movs	r5, #0
80200d96:	f10d 0b08 	add.w	fp, sp, #8
80200d9a:	e005      	b.n	80200da8 <_printf_wctomb+0x98>
80200d9c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200da0:	f81b 0005 	ldrb.w	r0, [fp, r5]
80200da4:	4790      	blx	r2
80200da6:	1c6d      	adds	r5, r5, #1
80200da8:	454d      	cmp	r5, r9
80200daa:	d3f7      	bcc.n	80200d9c <_printf_wctomb+0x8c>
80200dac:	f108 0001 	add.w	r0, r8, #1
80200db0:	42b0      	cmp	r0, r6
80200db2:	4680      	mov	r8, r0
80200db4:	dbe4      	blt.n	80200d80 <_printf_wctomb+0x70>
80200db6:	6a20      	ldr	r0, [r4, #32]
80200db8:	4438      	add	r0, r7
80200dba:	6220      	str	r0, [r4, #32]
80200dbc:	4620      	mov	r0, r4
80200dbe:	f7ff fef9 	bl	80200bb4 <_printf_post_padding>
80200dc2:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
80200dc6:	0000      	.short	0x0000
80200dc8:	0000539e 	.word	0x0000539e

80200dcc <_printf_longlong_dec>:
_printf_longlong_dec():
80200dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
80200dd0:	4680      	mov	r8, r0
80200dd2:	1dd2      	adds	r2, r2, #7
80200dd4:	f022 0207 	bic.w	r2, r2, #7
80200dd8:	2500      	movs	r5, #0
80200dda:	e9d2 0200 	ldrd	r0, r2, [r2]
80200dde:	29f5      	cmp	r1, #245	@ 0xf5
80200de0:	a615      	add	r6, pc, #84	@ (adr r6, 80200e38 <_printf_longlong_dec+0x6c>)
80200de2:	d014      	beq.n	80200e0e <_printf_longlong_dec+0x42>
80200de4:	1e01      	subs	r1, r0, #0
80200de6:	f172 0100 	sbcs.w	r1, r2, #0
80200dea:	da06      	bge.n	80200dfa <_printf_longlong_dec+0x2e>
80200dec:	2300      	movs	r3, #0
80200dee:	ebd0 0003 	rsbs	r0, r0, r3
80200df2:	eb63 0202 	sbc.w	r2, r3, r2
80200df6:	a611      	add	r6, pc, #68	@ (adr r6, 80200e3c <_printf_longlong_dec+0x70>)
80200df8:	e008      	b.n	80200e0c <_printf_longlong_dec+0x40>
80200dfa:	f8d8 1000 	ldr.w	r1, [r8]
80200dfe:	078b      	lsls	r3, r1, #30
80200e00:	d501      	bpl.n	80200e06 <_printf_longlong_dec+0x3a>
80200e02:	a60f      	add	r6, pc, #60	@ (adr r6, 80200e40 <_printf_longlong_dec+0x74>)
80200e04:	e002      	b.n	80200e0c <_printf_longlong_dec+0x40>
80200e06:	0749      	lsls	r1, r1, #29
80200e08:	d501      	bpl.n	80200e0e <_printf_longlong_dec+0x42>
80200e0a:	a60e      	add	r6, pc, #56	@ (adr r6, 80200e44 <_printf_longlong_dec+0x78>)
80200e0c:	2501      	movs	r5, #1
80200e0e:	4611      	mov	r1, r2
80200e10:	2400      	movs	r4, #0
80200e12:	f108 0724 	add.w	r7, r8, #36	@ 0x24
80200e16:	e004      	b.n	80200e22 <_printf_longlong_dec+0x56>
80200e18:	f000 fc72 	bl	80201700 <_ll_udiv10>
80200e1c:	3230      	adds	r2, #48	@ 0x30
80200e1e:	553a      	strb	r2, [r7, r4]
80200e20:	1c64      	adds	r4, r4, #1
80200e22:	ea50 0201 	orrs.w	r2, r0, r1
80200e26:	d1f7      	bne.n	80200e18 <_printf_longlong_dec+0x4c>
80200e28:	462b      	mov	r3, r5
80200e2a:	4632      	mov	r2, r6
80200e2c:	4621      	mov	r1, r4
80200e2e:	4640      	mov	r0, r8
80200e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
80200e34:	f000 bca9 	b.w	8020178a <_printf_int_common>
80200e38:	00000000 	.word	0x00000000
80200e3c:	0000002d 	.word	0x0000002d
80200e40:	0000002b 	.word	0x0000002b
80200e44:	00000020 	.word	0x00000020

80200e48 <_printf_longlong_oct>:
_printf_longlong_oct_internal():
80200e48:	b430      	push	{r4, r5}
_printf_longlong_oct():
80200e4a:	2100      	movs	r1, #0
80200e4c:	f100 0424 	add.w	r4, r0, #36	@ 0x24
80200e50:	e008      	b.n	80200e64 <_printf_longlong_oct+0x1c>
80200e52:	f002 0507 	and.w	r5, r2, #7
80200e56:	08d2      	lsrs	r2, r2, #3
80200e58:	3530      	adds	r5, #48	@ 0x30
80200e5a:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
80200e5e:	08db      	lsrs	r3, r3, #3
80200e60:	5465      	strb	r5, [r4, r1]
80200e62:	1c49      	adds	r1, r1, #1
80200e64:	ea52 0503 	orrs.w	r5, r2, r3
80200e68:	d1f3      	bne.n	80200e52 <_printf_longlong_oct+0xa>
80200e6a:	6804      	ldr	r4, [r0, #0]
80200e6c:	2300      	movs	r3, #0
80200e6e:	a210      	add	r2, pc, #64	@ (adr r2, 80200eb0 <_printf_ll_oct+0xc>)
80200e70:	0725      	lsls	r5, r4, #28
80200e72:	d508      	bpl.n	80200e86 <_printf_longlong_oct+0x3e>
80200e74:	f004 0420 	and.w	r4, r4, #32
80200e78:	430c      	orrs	r4, r1
80200e7a:	d004      	beq.n	80200e86 <_printf_longlong_oct+0x3e>
80200e7c:	69c4      	ldr	r4, [r0, #28]
80200e7e:	2301      	movs	r3, #1
80200e80:	a20c      	add	r2, pc, #48	@ (adr r2, 80200eb4 <_printf_ll_oct+0x10>)
80200e82:	1e64      	subs	r4, r4, #1
80200e84:	61c4      	str	r4, [r0, #28]
80200e86:	bc30      	pop	{r4, r5}
80200e88:	f000 bc7f 	b.w	8020178a <_printf_int_common>

80200e8c <_printf_int_oct>:
_printf_int_oct():
80200e8c:	b510      	push	{r4, lr}
80200e8e:	4604      	mov	r4, r0
80200e90:	4621      	mov	r1, r4
80200e92:	6810      	ldr	r0, [r2, #0]
80200e94:	f7ff fea8 	bl	80200be8 <_printf_truncate_unsigned>
80200e98:	4602      	mov	r2, r0
80200e9a:	4620      	mov	r0, r4
80200e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80200ea0:	2300      	movs	r3, #0
80200ea2:	e7d1      	b.n	80200e48 <_printf_longlong_oct>

80200ea4 <_printf_ll_oct>:
_printf_ll_oct():
80200ea4:	1dd2      	adds	r2, r2, #7
80200ea6:	f022 0107 	bic.w	r1, r2, #7
80200eaa:	e9d1 2300 	ldrd	r2, r3, [r1]
80200eae:	e7cb      	b.n	80200e48 <_printf_longlong_oct>
80200eb0:	00000000 	.word	0x00000000
80200eb4:	00000030 	.word	0x00000030

80200eb8 <_printf_longlong_hex>:
_printf_hex_common():
80200eb8:	b4f0      	push	{r4, r5, r6, r7}
_printf_longlong_hex():
80200eba:	460d      	mov	r5, r1
80200ebc:	8801      	ldrh	r1, [r0, #0]
80200ebe:	0509      	lsls	r1, r1, #20
80200ec0:	d502      	bpl.n	80200ec8 <_printf_longlong_hex+0x10>
80200ec2:	4c21      	ldr	r4, [pc, #132]	@ (80200f48 <_printf_hex_ptr+0x12>)
80200ec4:	447c      	add	r4, pc
80200ec6:	e002      	b.n	80200ece <_printf_longlong_hex+0x16>
80200ec8:	4c1f      	ldr	r4, [pc, #124]	@ (80200f48 <_printf_hex_ptr+0x12>)
80200eca:	447c      	add	r4, pc
80200ecc:	340e      	adds	r4, #14
80200ece:	2100      	movs	r1, #0
80200ed0:	f100 0624 	add.w	r6, r0, #36	@ 0x24
80200ed4:	e008      	b.n	80200ee8 <_printf_longlong_hex+0x30>
80200ed6:	f002 070f 	and.w	r7, r2, #15
80200eda:	0912      	lsrs	r2, r2, #4
80200edc:	5de7      	ldrb	r7, [r4, r7]
80200ede:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
80200ee2:	091b      	lsrs	r3, r3, #4
80200ee4:	5477      	strb	r7, [r6, r1]
80200ee6:	1c49      	adds	r1, r1, #1
80200ee8:	ea52 0703 	orrs.w	r7, r2, r3
80200eec:	d1f3      	bne.n	80200ed6 <_printf_longlong_hex+0x1e>
80200eee:	7802      	ldrb	r2, [r0, #0]
80200ef0:	2300      	movs	r3, #0
80200ef2:	0712      	lsls	r2, r2, #28
80200ef4:	d504      	bpl.n	80200f00 <_printf_longlong_hex+0x48>
80200ef6:	2d70      	cmp	r5, #112	@ 0x70
80200ef8:	d006      	beq.n	80200f08 <_printf_longlong_hex+0x50>
80200efa:	b109      	cbz	r1, 80200f00 <_printf_longlong_hex+0x48>
80200efc:	2302      	movs	r3, #2
80200efe:	3411      	adds	r4, #17
80200f00:	4622      	mov	r2, r4
80200f02:	bcf0      	pop	{r4, r5, r6, r7}
80200f04:	f000 bc41 	b.w	8020178a <_printf_int_common>
80200f08:	2301      	movs	r3, #1
80200f0a:	3410      	adds	r4, #16
80200f0c:	e7f8      	b.n	80200f00 <_printf_longlong_hex+0x48>

80200f0e <_printf_int_hex>:
_printf_int_hex():
80200f0e:	b570      	push	{r4, r5, r6, lr}
80200f10:	4604      	mov	r4, r0
80200f12:	460d      	mov	r5, r1
80200f14:	4621      	mov	r1, r4
80200f16:	6810      	ldr	r0, [r2, #0]
80200f18:	f7ff fe66 	bl	80200be8 <_printf_truncate_unsigned>
80200f1c:	4602      	mov	r2, r0
80200f1e:	4629      	mov	r1, r5
80200f20:	4620      	mov	r0, r4
80200f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
80200f26:	2300      	movs	r3, #0
80200f28:	e7c6      	b.n	80200eb8 <_printf_longlong_hex>

80200f2a <_printf_ll_hex>:
_printf_ll_hex():
80200f2a:	1dd2      	adds	r2, r2, #7
80200f2c:	f022 0307 	bic.w	r3, r2, #7
80200f30:	e9d3 2300 	ldrd	r2, r3, [r3]
80200f34:	e7c0      	b.n	80200eb8 <_printf_longlong_hex>

80200f36 <_printf_hex_ptr>:
_printf_hex_ptr():
80200f36:	6803      	ldr	r3, [r0, #0]
80200f38:	6812      	ldr	r2, [r2, #0]
80200f3a:	f043 0320 	orr.w	r3, r3, #32
80200f3e:	6003      	str	r3, [r0, #0]
80200f40:	2308      	movs	r3, #8
80200f42:	61c3      	str	r3, [r0, #28]
80200f44:	2300      	movs	r3, #0
80200f46:	e7b7      	b.n	80200eb8 <_printf_longlong_hex>
80200f48:	00005200 	.word	0x00005200

80200f4c <__printf>:
__printf():
80200f4c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
80200f50:	4689      	mov	r9, r1
80200f52:	4604      	mov	r4, r0
80200f54:	f04f 0a00 	mov.w	sl, #0
80200f58:	f8df b174 	ldr.w	fp, [pc, #372]	@ 802010d0 <__printf+0x184>
80200f5c:	44fb      	add	fp, pc
80200f5e:	f8c0 a020 	str.w	sl, [r0, #32]
80200f62:	4620      	mov	r0, r4
80200f64:	68e1      	ldr	r1, [r4, #12]
80200f66:	4788      	blx	r1
80200f68:	2800      	cmp	r0, #0
80200f6a:	d074      	beq.n	80201056 <__printf+0x10a>
80200f6c:	2825      	cmp	r0, #37	@ 0x25
80200f6e:	d006      	beq.n	80200f7e <__printf+0x32>
80200f70:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80200f74:	4790      	blx	r2
80200f76:	6a20      	ldr	r0, [r4, #32]
80200f78:	1c40      	adds	r0, r0, #1
80200f7a:	6220      	str	r0, [r4, #32]
80200f7c:	e7f1      	b.n	80200f62 <__printf+0x16>
80200f7e:	2600      	movs	r6, #0
80200f80:	465f      	mov	r7, fp
80200f82:	4620      	mov	r0, r4
80200f84:	68e1      	ldr	r1, [r4, #12]
80200f86:	4788      	blx	r1
80200f88:	2820      	cmp	r0, #32
80200f8a:	4605      	mov	r5, r0
80200f8c:	db07      	blt.n	80200f9e <__printf+0x52>
80200f8e:	2d31      	cmp	r5, #49	@ 0x31
80200f90:	d205      	bcs.n	80200f9e <__printf+0x52>
80200f92:	1978      	adds	r0, r7, r5
80200f94:	f810 0c20 	ldrb.w	r0, [r0, #-32]
80200f98:	b108      	cbz	r0, 80200f9e <__printf+0x52>
80200f9a:	4306      	orrs	r6, r0
80200f9c:	e7f1      	b.n	80200f82 <__printf+0x36>
80200f9e:	07b0      	lsls	r0, r6, #30
80200fa0:	d501      	bpl.n	80200fa6 <__printf+0x5a>
80200fa2:	f026 0604 	bic.w	r6, r6, #4
80200fa6:	f8c4 a01c 	str.w	sl, [r4, #28]
80200faa:	2700      	movs	r7, #0
80200fac:	f8c4 a018 	str.w	sl, [r4, #24]
80200fb0:	2d2a      	cmp	r5, #42	@ 0x2a
80200fb2:	d009      	beq.n	80200fc8 <__printf+0x7c>
80200fb4:	4628      	mov	r0, r5
80200fb6:	f005 f827 	bl	80206008 <_is_digit>
80200fba:	b338      	cbz	r0, 8020100c <__printf+0xc0>
80200fbc:	eb04 0887 	add.w	r8, r4, r7, lsl #2
80200fc0:	3d30      	subs	r5, #48	@ 0x30
80200fc2:	f8c8 5018 	str.w	r5, [r8, #24]
80200fc6:	e019      	b.n	80200ffc <__printf+0xb0>
80200fc8:	f859 1b04 	ldr.w	r1, [r9], #4
80200fcc:	4620      	mov	r0, r4
80200fce:	eb04 0287 	add.w	r2, r4, r7, lsl #2
80200fd2:	6191      	str	r1, [r2, #24]
80200fd4:	68e1      	ldr	r1, [r4, #12]
80200fd6:	4788      	blx	r1
80200fd8:	2f01      	cmp	r7, #1
80200fda:	4605      	mov	r5, r0
80200fdc:	d118      	bne.n	80201010 <__printf+0xc4>
80200fde:	69e0      	ldr	r0, [r4, #28]
80200fe0:	2800      	cmp	r0, #0
80200fe2:	da20      	bge.n	80201026 <__printf+0xda>
80200fe4:	f026 0620 	bic.w	r6, r6, #32
80200fe8:	e01d      	b.n	80201026 <__printf+0xda>
80200fea:	f8d8 0018 	ldr.w	r0, [r8, #24]
80200fee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
80200ff2:	eb05 0040 	add.w	r0, r5, r0, lsl #1
80200ff6:	3830      	subs	r0, #48	@ 0x30
80200ff8:	f8c8 0018 	str.w	r0, [r8, #24]
80200ffc:	4620      	mov	r0, r4
80200ffe:	68e1      	ldr	r1, [r4, #12]
80201000:	4788      	blx	r1
80201002:	4605      	mov	r5, r0
80201004:	f005 f800 	bl	80206008 <_is_digit>
80201008:	2800      	cmp	r0, #0
8020100a:	d1ee      	bne.n	80200fea <__printf+0x9e>
8020100c:	2f01      	cmp	r7, #1
8020100e:	d00a      	beq.n	80201026 <__printf+0xda>
80201010:	2d2e      	cmp	r5, #46	@ 0x2e
80201012:	d108      	bne.n	80201026 <__printf+0xda>
80201014:	4620      	mov	r0, r4
80201016:	68e1      	ldr	r1, [r4, #12]
80201018:	4788      	blx	r1
8020101a:	1c7f      	adds	r7, r7, #1
8020101c:	4605      	mov	r5, r0
8020101e:	2f02      	cmp	r7, #2
80201020:	f046 0620 	orr.w	r6, r6, #32
80201024:	dbc4      	blt.n	80200fb0 <__printf+0x64>
80201026:	69a0      	ldr	r0, [r4, #24]
80201028:	2800      	cmp	r0, #0
8020102a:	da03      	bge.n	80201034 <__printf+0xe8>
8020102c:	4240      	negs	r0, r0
8020102e:	f046 0601 	orr.w	r6, r6, #1
80201032:	61a0      	str	r0, [r4, #24]
80201034:	07f0      	lsls	r0, r6, #31
80201036:	d001      	beq.n	8020103c <__printf+0xf0>
80201038:	f026 0610 	bic.w	r6, r6, #16
8020103c:	2d6c      	cmp	r5, #108	@ 0x6c
8020103e:	d00b      	beq.n	80201058 <__printf+0x10c>
80201040:	2d68      	cmp	r5, #104	@ 0x68
80201042:	d009      	beq.n	80201058 <__printf+0x10c>
80201044:	2d4c      	cmp	r5, #76	@ 0x4c
80201046:	d039      	beq.n	802010bc <__printf+0x170>
80201048:	2d6a      	cmp	r5, #106	@ 0x6a
8020104a:	d035      	beq.n	802010b8 <__printf+0x16c>
8020104c:	2d74      	cmp	r5, #116	@ 0x74
8020104e:	d035      	beq.n	802010bc <__printf+0x170>
80201050:	2d7a      	cmp	r5, #122	@ 0x7a
80201052:	d033      	beq.n	802010bc <__printf+0x170>
80201054:	e016      	b.n	80201084 <__printf+0x138>
80201056:	e038      	b.n	802010ca <__printf+0x17e>
80201058:	68e1      	ldr	r1, [r4, #12]
8020105a:	462f      	mov	r7, r5
8020105c:	4620      	mov	r0, r4
8020105e:	4788      	blx	r1
80201060:	42b8      	cmp	r0, r7
80201062:	4605      	mov	r5, r0
80201064:	d109      	bne.n	8020107a <__printf+0x12e>
80201066:	2f6c      	cmp	r7, #108	@ 0x6c
80201068:	d026      	beq.n	802010b8 <__printf+0x16c>
8020106a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
8020106e:	68e1      	ldr	r1, [r4, #12]
80201070:	4306      	orrs	r6, r0
80201072:	4620      	mov	r0, r4
80201074:	4788      	blx	r1
80201076:	4605      	mov	r5, r0
80201078:	e004      	b.n	80201084 <__printf+0x138>
8020107a:	2f6c      	cmp	r7, #108	@ 0x6c
8020107c:	d01a      	beq.n	802010b4 <__printf+0x168>
8020107e:	f44f 7080 	mov.w	r0, #256	@ 0x100
80201082:	4306      	orrs	r6, r0
80201084:	b30d      	cbz	r5, 802010ca <__printf+0x17e>
80201086:	f1a5 0041 	sub.w	r0, r5, #65	@ 0x41
8020108a:	2819      	cmp	r0, #25
8020108c:	d802      	bhi.n	80201094 <__printf+0x148>
8020108e:	3520      	adds	r5, #32
80201090:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
80201094:	464a      	mov	r2, r9
80201096:	4629      	mov	r1, r5
80201098:	4620      	mov	r0, r4
8020109a:	6026      	str	r6, [r4, #0]
8020109c:	464e      	mov	r6, r9
8020109e:	f7ff fbdf 	bl	80200860 <_printf_n>
802010a2:	b180      	cbz	r0, 802010c6 <__printf+0x17a>
802010a4:	2801      	cmp	r0, #1
802010a6:	d00b      	beq.n	802010c0 <__printf+0x174>
802010a8:	1df6      	adds	r6, r6, #7
802010aa:	f026 0007 	bic.w	r0, r6, #7
802010ae:	f100 0908 	add.w	r9, r0, #8
802010b2:	e756      	b.n	80200f62 <__printf+0x16>
802010b4:	2040      	movs	r0, #64	@ 0x40
802010b6:	e7e4      	b.n	80201082 <__printf+0x136>
802010b8:	2080      	movs	r0, #128	@ 0x80
802010ba:	e7d8      	b.n	8020106e <__printf+0x122>
802010bc:	2000      	movs	r0, #0
802010be:	e7d6      	b.n	8020106e <__printf+0x122>
802010c0:	f106 0904 	add.w	r9, r6, #4
802010c4:	e74d      	b.n	80200f62 <__printf+0x16>
802010c6:	4628      	mov	r0, r5
802010c8:	e752      	b.n	80200f70 <__printf+0x24>
802010ca:	6a20      	ldr	r0, [r4, #32]
802010cc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
802010d0:	00005190 	.word	0x00005190

802010d4 <__flsbuf>:
__flsbuf_byte():
802010d4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
__flsbuf():
802010d8:	4605      	mov	r5, r0
802010da:	4617      	mov	r7, r2
802010dc:	460c      	mov	r4, r1
802010de:	68c8      	ldr	r0, [r1, #12]
802010e0:	f420 1020 	bic.w	r0, r0, #2621440	@ 0x280000
802010e4:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
802010e8:	60c8      	str	r0, [r1, #12]
802010ea:	0680      	lsls	r0, r0, #26
802010ec:	d502      	bpl.n	802010f4 <__flsbuf+0x20>
802010ee:	4608      	mov	r0, r1
802010f0:	f000 f9c1 	bl	80201476 <_deferredlazyseek>
802010f4:	68e0      	ldr	r0, [r4, #12]
802010f6:	f241 0182 	movw	r1, #4226	@ 0x1082
802010fa:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
802010fe:	4001      	ands	r1, r0
80201100:	2902      	cmp	r1, #2
80201102:	d003      	beq.n	8020110c <__flsbuf+0x38>
80201104:	4620      	mov	r0, r4
80201106:	f000 f953 	bl	802013b0 <_seterr>
8020110a:	e0b9      	b.n	80201280 <__flsbuf+0x1ac>
8020110c:	f400 4120 	and.w	r1, r0, #40960	@ 0xa000
80201110:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
80201114:	d10f      	bne.n	80201136 <__flsbuf+0x62>
80201116:	03c0      	lsls	r0, r0, #15
80201118:	d506      	bpl.n	80201128 <__flsbuf+0x54>
8020111a:	6861      	ldr	r1, [r4, #4]
8020111c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
8020111e:	4288      	cmp	r0, r1
80201120:	d800      	bhi.n	80201124 <__flsbuf+0x50>
80201122:	4608      	mov	r0, r1
80201124:	6060      	str	r0, [r4, #4]
80201126:	e006      	b.n	80201136 <__flsbuf+0x62>
80201128:	6920      	ldr	r0, [r4, #16]
8020112a:	62e0      	str	r0, [r4, #44]	@ 0x2c
8020112c:	6060      	str	r0, [r4, #4]
8020112e:	6960      	ldr	r0, [r4, #20]
80201130:	f003 fcb8 	bl	80204aa4 <_sys_flen>
80201134:	61a0      	str	r0, [r4, #24]
80201136:	68a0      	ldr	r0, [r4, #8]
80201138:	2200      	movs	r2, #0
8020113a:	b2ee      	uxtb	r6, r5
8020113c:	2800      	cmp	r0, #0
8020113e:	da0d      	bge.n	8020115c <__flsbuf+0x88>
80201140:	68e1      	ldr	r1, [r4, #12]
80201142:	058b      	lsls	r3, r1, #22
80201144:	d40a      	bmi.n	8020115c <__flsbuf+0x88>
80201146:	43c0      	mvns	r0, r0
80201148:	60a0      	str	r0, [r4, #8]
8020114a:	f441 3090 	orr.w	r0, r1, #73728	@ 0x12000
8020114e:	6022      	str	r2, [r4, #0]
80201150:	60e0      	str	r0, [r4, #12]
80201152:	6860      	ldr	r0, [r4, #4]
80201154:	1c41      	adds	r1, r0, #1
80201156:	6061      	str	r1, [r4, #4]
80201158:	7006      	strb	r6, [r0, #0]
8020115a:	e0aa      	b.n	802012b2 <__flsbuf+0x1de>
8020115c:	68e0      	ldr	r0, [r4, #12]
8020115e:	4691      	mov	r9, r2
80201160:	6022      	str	r2, [r4, #0]
80201162:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
80201166:	60e0      	str	r0, [r4, #12]
80201168:	6920      	ldr	r0, [r4, #16]
8020116a:	bb78      	cbnz	r0, 802011cc <__flsbuf+0xf8>
8020116c:	6960      	ldr	r0, [r4, #20]
8020116e:	f003 fc9f 	bl	80204ab0 <_sys_istty>
80201172:	f104 0524 	add.w	r5, r4, #36	@ 0x24
80201176:	f04f 0801 	mov.w	r8, #1
8020117a:	b1a8      	cbz	r0, 802011a8 <__flsbuf+0xd4>
8020117c:	89a0      	ldrh	r0, [r4, #12]
8020117e:	f410 7f40 	tst.w	r0, #768	@ 0x300
80201182:	d008      	beq.n	80201196 <__flsbuf+0xc2>
80201184:	69e0      	ldr	r0, [r4, #28]
80201186:	f000 fa65 	bl	80201654 <malloc>
8020118a:	6120      	str	r0, [r4, #16]
8020118c:	b118      	cbz	r0, 80201196 <__flsbuf+0xc2>
8020118e:	68e0      	ldr	r0, [r4, #12]
80201190:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
80201194:	e017      	b.n	802011c6 <__flsbuf+0xf2>
80201196:	f8c4 801c 	str.w	r8, [r4, #28]
8020119a:	6125      	str	r5, [r4, #16]
8020119c:	68e0      	ldr	r0, [r4, #12]
8020119e:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
802011a2:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
802011a6:	e00e      	b.n	802011c6 <__flsbuf+0xf2>
802011a8:	69e0      	ldr	r0, [r4, #28]
802011aa:	f000 fa53 	bl	80201654 <malloc>
802011ae:	2800      	cmp	r0, #0
802011b0:	6120      	str	r0, [r4, #16]
802011b2:	d0f0      	beq.n	80201196 <__flsbuf+0xc2>
802011b4:	68e0      	ldr	r0, [r4, #12]
802011b6:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
802011ba:	f410 7f40 	tst.w	r0, #768	@ 0x300
802011be:	60e0      	str	r0, [r4, #12]
802011c0:	d102      	bne.n	802011c8 <__flsbuf+0xf4>
802011c2:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
802011c6:	60e0      	str	r0, [r4, #12]
802011c8:	6920      	ldr	r0, [r4, #16]
802011ca:	6060      	str	r0, [r4, #4]
802011cc:	68e0      	ldr	r0, [r4, #12]
802011ce:	6925      	ldr	r5, [r4, #16]
802011d0:	f06f 0b01 	mvn.w	fp, #1
802011d4:	05c1      	lsls	r1, r0, #23
802011d6:	d51e      	bpl.n	80201216 <__flsbuf+0x142>
802011d8:	6861      	ldr	r1, [r4, #4]
802011da:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
802011dc:	4288      	cmp	r0, r1
802011de:	d800      	bhi.n	802011e2 <__flsbuf+0x10e>
802011e0:	4608      	mov	r0, r1
802011e2:	1b41      	subs	r1, r0, r5
802011e4:	d004      	beq.n	802011f0 <__flsbuf+0x11c>
802011e6:	4622      	mov	r2, r4
802011e8:	4628      	mov	r0, r5
802011ea:	f000 f8eb 	bl	802013c4 <_writebuf>
802011ee:	bbe8      	cbnz	r0, 8020126c <__flsbuf+0x198>
802011f0:	b11f      	cbz	r7, 802011fa <__flsbuf+0x126>
802011f2:	62e5      	str	r5, [r4, #44]	@ 0x2c
802011f4:	e9c4 5901 	strd	r5, r9, [r4, #4]
802011f8:	e059      	b.n	802012ae <__flsbuf+0x1da>
802011fa:	1c68      	adds	r0, r5, #1
802011fc:	62e0      	str	r0, [r4, #44]	@ 0x2c
802011fe:	6060      	str	r0, [r4, #4]
80201200:	69e0      	ldr	r0, [r4, #28]
80201202:	1e40      	subs	r0, r0, #1
80201204:	60a0      	str	r0, [r4, #8]
80201206:	68e0      	ldr	r0, [r4, #12]
80201208:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
8020120c:	60e0      	str	r0, [r4, #12]
8020120e:	4630      	mov	r0, r6
80201210:	702e      	strb	r6, [r5, #0]
80201212:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
80201216:	b117      	cbz	r7, 8020121e <__flsbuf+0x14a>
80201218:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
8020121c:	e00a      	b.n	80201234 <__flsbuf+0x160>
8020121e:	6860      	ldr	r0, [r4, #4]
80201220:	1c41      	adds	r1, r0, #1
80201222:	6061      	str	r1, [r4, #4]
80201224:	7006      	strb	r6, [r0, #0]
80201226:	68e0      	ldr	r0, [r4, #12]
80201228:	2e0a      	cmp	r6, #10
8020122a:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
8020122e:	60e0      	str	r0, [r4, #12]
80201230:	d006      	beq.n	80201240 <__flsbuf+0x16c>
80201232:	2200      	movs	r2, #0
80201234:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
80201236:	6860      	ldr	r0, [r4, #4]
80201238:	4281      	cmp	r1, r0
8020123a:	d903      	bls.n	80201244 <__flsbuf+0x170>
8020123c:	460b      	mov	r3, r1
8020123e:	e002      	b.n	80201246 <__flsbuf+0x172>
80201240:	2201      	movs	r2, #1
80201242:	e7f7      	b.n	80201234 <__flsbuf+0x160>
80201244:	4603      	mov	r3, r0
80201246:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
8020124a:	1b5b      	subs	r3, r3, r5
8020124c:	ea5f 5c4c 	movs.w	ip, ip, lsl #21
80201250:	d404      	bmi.n	8020125c <__flsbuf+0x188>
80201252:	f8d4 c01c 	ldr.w	ip, [r4, #28]
80201256:	459c      	cmp	ip, r3
80201258:	dd00      	ble.n	8020125c <__flsbuf+0x188>
8020125a:	b302      	cbz	r2, 8020129e <__flsbuf+0x1ca>
8020125c:	4281      	cmp	r1, r0
8020125e:	d800      	bhi.n	80201262 <__flsbuf+0x18e>
80201260:	4601      	mov	r1, r0
80201262:	2b00      	cmp	r3, #0
80201264:	eba1 0800 	sub.w	r8, r1, r0
80201268:	62e5      	str	r5, [r4, #44]	@ 0x2c
8020126a:	e000      	b.n	8020126e <__flsbuf+0x19a>
8020126c:	e008      	b.n	80201280 <__flsbuf+0x1ac>
8020126e:	e9c4 5901 	strd	r5, r9, [r4, #4]
80201272:	dd07      	ble.n	80201284 <__flsbuf+0x1b0>
80201274:	4622      	mov	r2, r4
80201276:	4619      	mov	r1, r3
80201278:	4628      	mov	r0, r5
8020127a:	f000 f8a3 	bl	802013c4 <_writebuf>
8020127e:	b108      	cbz	r0, 80201284 <__flsbuf+0x1b0>
80201280:	4650      	mov	r0, sl
80201282:	e7c6      	b.n	80201212 <__flsbuf+0x13e>
80201284:	f1b8 0f00 	cmp.w	r8, #0
80201288:	d009      	beq.n	8020129e <__flsbuf+0x1ca>
8020128a:	69a1      	ldr	r1, [r4, #24]
8020128c:	62e5      	str	r5, [r4, #44]	@ 0x2c
8020128e:	6065      	str	r5, [r4, #4]
80201290:	eba1 0008 	sub.w	r0, r1, r8
80201294:	61a0      	str	r0, [r4, #24]
80201296:	68e0      	ldr	r0, [r4, #12]
80201298:	f040 0010 	orr.w	r0, r0, #16
8020129c:	60e0      	str	r0, [r4, #12]
8020129e:	b147      	cbz	r7, 802012b2 <__flsbuf+0x1de>
802012a0:	6861      	ldr	r1, [r4, #4]
802012a2:	69a0      	ldr	r0, [r4, #24]
802012a4:	62e5      	str	r5, [r4, #44]	@ 0x2c
802012a6:	1b49      	subs	r1, r1, r5
802012a8:	4408      	add	r0, r1
802012aa:	6065      	str	r5, [r4, #4]
802012ac:	61a0      	str	r0, [r4, #24]
802012ae:	4658      	mov	r0, fp
802012b0:	e7af      	b.n	80201212 <__flsbuf+0x13e>
802012b2:	4630      	mov	r0, r6
802012b4:	e7ad      	b.n	80201212 <__flsbuf+0x13e>
	...

802012b8 <_fseek>:
fseek():
802012b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
_fseek():
802012bc:	4604      	mov	r4, r0
802012be:	4616      	mov	r6, r2
802012c0:	460d      	mov	r5, r1
802012c2:	6947      	ldr	r7, [r0, #20]
802012c4:	7b00      	ldrb	r0, [r0, #12]
802012c6:	0780      	lsls	r0, r0, #30
802012c8:	d02e      	beq.n	80201328 <_fseek+0x70>
802012ca:	4638      	mov	r0, r7
802012cc:	f003 fbf0 	bl	80204ab0 <_sys_istty>
802012d0:	bb50      	cbnz	r0, 80201328 <_fseek+0x70>
802012d2:	b33e      	cbz	r6, 80201324 <_fseek+0x6c>
802012d4:	2e01      	cmp	r6, #1
802012d6:	d002      	beq.n	802012de <_fseek+0x26>
802012d8:	2e02      	cmp	r6, #2
802012da:	d125      	bne.n	80201328 <_fseek+0x70>
802012dc:	e004      	b.n	802012e8 <_fseek+0x30>
802012de:	4620      	mov	r0, r4
802012e0:	f000 fe80 	bl	80201fe4 <_ftell_internal>
802012e4:	4405      	add	r5, r0
802012e6:	e01d      	b.n	80201324 <_fseek+0x6c>
802012e8:	4638      	mov	r0, r7
802012ea:	f003 fbdb 	bl	80204aa4 <_sys_flen>
802012ee:	68e1      	ldr	r1, [r4, #12]
802012f0:	2800      	cmp	r0, #0
802012f2:	f041 0110 	orr.w	r1, r1, #16
802012f6:	60e1      	str	r1, [r4, #12]
802012f8:	da05      	bge.n	80201306 <_fseek+0x4e>
802012fa:	4620      	mov	r0, r4
802012fc:	f000 f858 	bl	802013b0 <_seterr>
80201300:	2001      	movs	r0, #1
80201302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
80201306:	03c9      	lsls	r1, r1, #15
80201308:	d50b      	bpl.n	80201322 <_fseek+0x6a>
8020130a:	6862      	ldr	r2, [r4, #4]
8020130c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
8020130e:	4291      	cmp	r1, r2
80201310:	d800      	bhi.n	80201314 <_fseek+0x5c>
80201312:	4611      	mov	r1, r2
80201314:	69a2      	ldr	r2, [r4, #24]
80201316:	4411      	add	r1, r2
80201318:	6922      	ldr	r2, [r4, #16]
8020131a:	1a89      	subs	r1, r1, r2
8020131c:	4281      	cmp	r1, r0
8020131e:	dd00      	ble.n	80201322 <_fseek+0x6a>
80201320:	4608      	mov	r0, r1
80201322:	4405      	add	r5, r0
80201324:	2d00      	cmp	r5, #0
80201326:	da01      	bge.n	8020132c <_fseek+0x74>
80201328:	2002      	movs	r0, #2
8020132a:	e7ea      	b.n	80201302 <_fseek+0x4a>
8020132c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
8020132e:	6860      	ldr	r0, [r4, #4]
80201330:	68e2      	ldr	r2, [r4, #12]
80201332:	4281      	cmp	r1, r0
80201334:	d206      	bcs.n	80201344 <_fseek+0x8c>
80201336:	0391      	lsls	r1, r2, #14
80201338:	62e0      	str	r0, [r4, #44]	@ 0x2c
8020133a:	d503      	bpl.n	80201344 <_fseek+0x8c>
8020133c:	f422 3100 	bic.w	r1, r2, #131072	@ 0x20000
80201340:	f041 0210 	orr.w	r2, r1, #16
80201344:	69a6      	ldr	r6, [r4, #24]
80201346:	2700      	movs	r7, #0
80201348:	42ae      	cmp	r6, r5
8020134a:	dc13      	bgt.n	80201374 <_fseek+0xbc>
8020134c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
8020134e:	4281      	cmp	r1, r0
80201350:	d901      	bls.n	80201356 <_fseek+0x9e>
80201352:	460b      	mov	r3, r1
80201354:	e000      	b.n	80201358 <_fseek+0xa0>
80201356:	4603      	mov	r3, r0
80201358:	eb03 0c06 	add.w	ip, r3, r6
8020135c:	6923      	ldr	r3, [r4, #16]
8020135e:	ebac 0c03 	sub.w	ip, ip, r3
80201362:	45ac      	cmp	ip, r5
80201364:	dd06      	ble.n	80201374 <_fseek+0xbc>
80201366:	4281      	cmp	r1, r0
80201368:	d901      	bls.n	8020136e <_fseek+0xb6>
8020136a:	468c      	mov	ip, r1
8020136c:	e000      	b.n	80201370 <_fseek+0xb8>
8020136e:	4684      	mov	ip, r0
80201370:	459c      	cmp	ip, r3
80201372:	d105      	bne.n	80201380 <_fseek+0xc8>
80201374:	60a7      	str	r7, [r4, #8]
80201376:	6027      	str	r7, [r4, #0]
80201378:	f042 0020 	orr.w	r0, r2, #32
8020137c:	62a5      	str	r5, [r4, #40]	@ 0x28
8020137e:	e00d      	b.n	8020139c <_fseek+0xe4>
80201380:	1bad      	subs	r5, r5, r6
80201382:	69e6      	ldr	r6, [r4, #28]
80201384:	1bae      	subs	r6, r5, r6
80201386:	4281      	cmp	r1, r0
80201388:	60a6      	str	r6, [r4, #8]
8020138a:	d900      	bls.n	8020138e <_fseek+0xd6>
8020138c:	4608      	mov	r0, r1
8020138e:	1ac0      	subs	r0, r0, r3
80201390:	1a28      	subs	r0, r5, r0
80201392:	6020      	str	r0, [r4, #0]
80201394:	1958      	adds	r0, r3, r5
80201396:	6060      	str	r0, [r4, #4]
80201398:	f022 0020 	bic.w	r0, r2, #32
8020139c:	4903      	ldr	r1, [pc, #12]	@ (802013ac <_fseek+0xf4>)
8020139e:	4008      	ands	r0, r1
802013a0:	60e0      	str	r0, [r4, #12]
802013a2:	2000      	movs	r0, #0
802013a4:	f884 7048 	strb.w	r7, [r4, #72]	@ 0x48
802013a8:	e7ab      	b.n	80201302 <_fseek+0x4a>
802013aa:	0000      	.short	0x0000
802013ac:	ffd7cfbf 	.word	0xffd7cfbf

802013b0 <_seterr>:
_seterr():
802013b0:	68c1      	ldr	r1, [r0, #12]
802013b2:	f421 1100 	bic.w	r1, r1, #2097152	@ 0x200000
802013b6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
802013ba:	60c1      	str	r1, [r0, #12]
802013bc:	2100      	movs	r1, #0
802013be:	6081      	str	r1, [r0, #8]
802013c0:	6001      	str	r1, [r0, #0]
802013c2:	4770      	bx	lr

802013c4 <_writebuf>:
_writebuf():
802013c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
802013c8:	4615      	mov	r5, r2
802013ca:	460c      	mov	r4, r1
802013cc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
802013d0:	4838      	ldr	r0, [pc, #224]	@ (802014b4 <_deferredlazyseek+0x3e>)
802013d2:	68d7      	ldr	r7, [r2, #12]
802013d4:	f8d2 a014 	ldr.w	sl, [r2, #20]
802013d8:	4207      	tst	r7, r0
802013da:	d009      	beq.n	802013f0 <_writebuf+0x2c>
802013dc:	4650      	mov	r0, sl
802013de:	69a9      	ldr	r1, [r5, #24]
802013e0:	f003 fb9a 	bl	80204b18 <_sys_seek>
802013e4:	2800      	cmp	r0, #0
802013e6:	db19      	blt.n	8020141c <_writebuf+0x58>
802013e8:	4832      	ldr	r0, [pc, #200]	@ (802014b4 <_deferredlazyseek+0x3e>)
802013ea:	43c0      	mvns	r0, r0
802013ec:	4007      	ands	r7, r0
802013ee:	60ef      	str	r7, [r5, #12]
802013f0:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
802013f4:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
802013f8:	454c      	cmp	r4, r9
802013fa:	d301      	bcc.n	80201400 <_writebuf+0x3c>
802013fc:	4646      	mov	r6, r8
802013fe:	e000      	b.n	80201402 <_writebuf+0x3e>
80201400:	4626      	mov	r6, r4
80201402:	9900      	ldr	r1, [sp, #0]
80201404:	463b      	mov	r3, r7
80201406:	4650      	mov	r0, sl
80201408:	4632      	mov	r2, r6
8020140a:	f003 fb8b 	bl	80204b24 <_sys_write>
8020140e:	69a9      	ldr	r1, [r5, #24]
80201410:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
80201414:	1ab2      	subs	r2, r6, r2
80201416:	4411      	add	r1, r2
80201418:	61a9      	str	r1, [r5, #24]
8020141a:	b128      	cbz	r0, 80201428 <_writebuf+0x64>
8020141c:	4628      	mov	r0, r5
8020141e:	f7ff ffc7 	bl	802013b0 <_seterr>
80201422:	4658      	mov	r0, fp
80201424:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
80201428:	1ba4      	subs	r4, r4, r6
8020142a:	d1e5      	bne.n	802013f8 <_writebuf+0x34>
8020142c:	2000      	movs	r0, #0
8020142e:	e7f9      	b.n	80201424 <_writebuf+0x60>

80201430 <_fflush>:
_fflush():
80201430:	b570      	push	{r4, r5, r6, lr}
80201432:	4604      	mov	r4, r0
80201434:	6905      	ldr	r5, [r0, #16]
80201436:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
80201438:	6861      	ldr	r1, [r4, #4]
8020143a:	4288      	cmp	r0, r1
8020143c:	d800      	bhi.n	80201440 <_fflush+0x10>
8020143e:	4608      	mov	r0, r1
80201440:	68e1      	ldr	r1, [r4, #12]
80201442:	f421 1120 	bic.w	r1, r1, #2621440	@ 0x280000
80201446:	60e1      	str	r1, [r4, #12]
80201448:	03c9      	lsls	r1, r1, #15
8020144a:	d512      	bpl.n	80201472 <_fflush+0x42>
8020144c:	42a8      	cmp	r0, r5
8020144e:	d008      	beq.n	80201462 <_fflush+0x32>
80201450:	4622      	mov	r2, r4
80201452:	1b41      	subs	r1, r0, r5
80201454:	4628      	mov	r0, r5
80201456:	f7ff ffb5 	bl	802013c4 <_writebuf>
8020145a:	b110      	cbz	r0, 80201462 <_fflush+0x32>
8020145c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
80201460:	bd70      	pop	{r4, r5, r6, pc}
80201462:	2000      	movs	r0, #0
80201464:	62e5      	str	r5, [r4, #44]	@ 0x2c
80201466:	e9c4 5001 	strd	r5, r0, [r4, #4]
8020146a:	68e0      	ldr	r0, [r4, #12]
8020146c:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
80201470:	60e0      	str	r0, [r4, #12]
80201472:	2000      	movs	r0, #0
80201474:	bd70      	pop	{r4, r5, r6, pc}

80201476 <_deferredlazyseek>:
_deferredlazyseek():
80201476:	b510      	push	{r4, lr}
80201478:	4604      	mov	r4, r0
8020147a:	68c0      	ldr	r0, [r0, #12]
8020147c:	f020 0020 	bic.w	r0, r0, #32
80201480:	60e0      	str	r0, [r4, #12]
80201482:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
80201484:	69a0      	ldr	r0, [r4, #24]
80201486:	4288      	cmp	r0, r1
80201488:	d00d      	beq.n	802014a6 <_deferredlazyseek+0x30>
8020148a:	4620      	mov	r0, r4
8020148c:	f7ff ffd0 	bl	80201430 <_fflush>
80201490:	68e0      	ldr	r0, [r4, #12]
80201492:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
80201496:	f040 0010 	orr.w	r0, r0, #16
8020149a:	60e0      	str	r0, [r4, #12]
8020149c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
8020149e:	61a0      	str	r0, [r4, #24]
802014a0:	6920      	ldr	r0, [r4, #16]
802014a2:	62e0      	str	r0, [r4, #44]	@ 0x2c
802014a4:	6060      	str	r0, [r4, #4]
802014a6:	f244 0140 	movw	r1, #16448	@ 0x4040
802014aa:	68e0      	ldr	r0, [r4, #12]
802014ac:	4388      	bics	r0, r1
802014ae:	60e0      	str	r0, [r4, #12]
802014b0:	bd10      	pop	{r4, pc}
802014b2:	0000      	.short	0x0000
802014b4:	00020010 	.word	0x00020010

802014b8 <_initio>:
_initio():
802014b8:	b510      	push	{r4, lr}
802014ba:	4842      	ldr	r0, [pc, #264]	@ (802015c4 <_terminateio+0x3a>)
802014bc:	2154      	movs	r1, #84	@ 0x54
802014be:	f7ff fae6 	bl	80200a8e <__aeabi_memclr4>
802014c2:	4841      	ldr	r0, [pc, #260]	@ (802015c8 <_terminateio+0x3e>)
802014c4:	2154      	movs	r1, #84	@ 0x54
802014c6:	f7ff fae2 	bl	80200a8e <__aeabi_memclr4>
802014ca:	4840      	ldr	r0, [pc, #256]	@ (802015cc <_terminateio+0x42>)
802014cc:	2154      	movs	r1, #84	@ 0x54
802014ce:	f7ff fade 	bl	80200a8e <__aeabi_memclr4>
802014d2:	493f      	ldr	r1, [pc, #252]	@ (802015d0 <_terminateio+0x46>)
802014d4:	483b      	ldr	r0, [pc, #236]	@ (802015c4 <_terminateio+0x3a>)
802014d6:	4a3c      	ldr	r2, [pc, #240]	@ (802015c8 <_terminateio+0x3e>)
802014d8:	4b3f      	ldr	r3, [pc, #252]	@ (802015d8 <_terminateio+0x4e>)
802014da:	6008      	str	r0, [r1, #0]
802014dc:	493d      	ldr	r1, [pc, #244]	@ (802015d4 <_terminateio+0x4a>)
802014de:	600a      	str	r2, [r1, #0]
802014e0:	493a      	ldr	r1, [pc, #232]	@ (802015cc <_terminateio+0x42>)
802014e2:	6019      	str	r1, [r3, #0]
802014e4:	1c53      	adds	r3, r2, #1
802014e6:	6503      	str	r3, [r0, #80]	@ 0x50
802014e8:	1c48      	adds	r0, r1, #1
802014ea:	6510      	str	r0, [r2, #80]	@ 0x50
802014ec:	2001      	movs	r0, #1
802014ee:	6508      	str	r0, [r1, #80]	@ 0x50
802014f0:	483b      	ldr	r0, [pc, #236]	@ (802015e0 <_terminateio+0x56>)
802014f2:	4a34      	ldr	r2, [pc, #208]	@ (802015c4 <_terminateio+0x3a>)
802014f4:	a139      	add	r1, pc, #228	@ (adr r1, 802015dc <_terminateio+0x52>)
802014f6:	4478      	add	r0, pc
802014f8:	f000 fdb8 	bl	8020206c <freopen>
802014fc:	b920      	cbnz	r0, 80201508 <_initio+0x50>
802014fe:	4838      	ldr	r0, [pc, #224]	@ (802015e0 <_terminateio+0x56>)
80201500:	4478      	add	r0, pc
80201502:	380a      	subs	r0, #10
80201504:	f000 fe7f 	bl	80202206 <__rt_SIGRTRED>
80201508:	4837      	ldr	r0, [pc, #220]	@ (802015e8 <_terminateio+0x5e>)
8020150a:	4a2f      	ldr	r2, [pc, #188]	@ (802015c8 <_terminateio+0x3e>)
8020150c:	a135      	add	r1, pc, #212	@ (adr r1, 802015e4 <_terminateio+0x5a>)
8020150e:	4478      	add	r0, pc
80201510:	f000 fdac 	bl	8020206c <freopen>
80201514:	b920      	cbnz	r0, 80201520 <_initio+0x68>
80201516:	4834      	ldr	r0, [pc, #208]	@ (802015e8 <_terminateio+0x5e>)
80201518:	4478      	add	r0, pc
8020151a:	380a      	subs	r0, #10
8020151c:	f000 fe73 	bl	80202206 <__rt_SIGRTRED>
80201520:	4832      	ldr	r0, [pc, #200]	@ (802015ec <_terminateio+0x62>)
80201522:	4a2a      	ldr	r2, [pc, #168]	@ (802015cc <_terminateio+0x42>)
80201524:	a12f      	add	r1, pc, #188	@ (adr r1, 802015e4 <_terminateio+0x5a>)
80201526:	4478      	add	r0, pc
80201528:	f000 fda0 	bl	8020206c <freopen>
8020152c:	b920      	cbnz	r0, 80201538 <_initio+0x80>
8020152e:	482f      	ldr	r0, [pc, #188]	@ (802015ec <_terminateio+0x62>)
80201530:	4478      	add	r0, pc
80201532:	380a      	subs	r0, #10
80201534:	f000 fe67 	bl	80202206 <__rt_SIGRTRED>
80201538:	2340      	movs	r3, #64	@ 0x40
8020153a:	4822      	ldr	r0, [pc, #136]	@ (802015c4 <_terminateio+0x3a>)
8020153c:	00dc      	lsls	r4, r3, #3
8020153e:	2100      	movs	r1, #0
80201540:	4622      	mov	r2, r4
80201542:	f000 fd70 	bl	80202026 <setvbuf>
80201546:	b120      	cbz	r0, 80201552 <_initio+0x9a>
80201548:	4825      	ldr	r0, [pc, #148]	@ (802015e0 <_terminateio+0x56>)
8020154a:	4478      	add	r0, pc
8020154c:	3854      	subs	r0, #84	@ 0x54
8020154e:	f000 fe5a 	bl	80202206 <__rt_SIGRTRED>
80201552:	481d      	ldr	r0, [pc, #116]	@ (802015c8 <_terminateio+0x3e>)
80201554:	4622      	mov	r2, r4
80201556:	2340      	movs	r3, #64	@ 0x40
80201558:	2100      	movs	r1, #0
8020155a:	f000 fd64 	bl	80202026 <setvbuf>
8020155e:	b120      	cbz	r0, 8020156a <_initio+0xb2>
80201560:	4821      	ldr	r0, [pc, #132]	@ (802015e8 <_terminateio+0x5e>)
80201562:	4478      	add	r0, pc
80201564:	3854      	subs	r0, #84	@ 0x54
80201566:	f000 fe4e 	bl	80202206 <__rt_SIGRTRED>
8020156a:	4818      	ldr	r0, [pc, #96]	@ (802015cc <_terminateio+0x42>)
8020156c:	4622      	mov	r2, r4
8020156e:	2310      	movs	r3, #16
80201570:	2100      	movs	r1, #0
80201572:	f000 fd58 	bl	80202026 <setvbuf>
80201576:	2800      	cmp	r0, #0
80201578:	d006      	beq.n	80201588 <_initio+0xd0>
8020157a:	481c      	ldr	r0, [pc, #112]	@ (802015ec <_terminateio+0x62>)
8020157c:	4478      	add	r0, pc
8020157e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80201582:	3856      	subs	r0, #86	@ 0x56
80201584:	f000 be3f 	b.w	80202206 <__rt_SIGRTRED>
80201588:	bd10      	pop	{r4, pc}

8020158a <_terminateio>:
_terminateio():
8020158a:	4810      	ldr	r0, [pc, #64]	@ (802015cc <_terminateio+0x42>)
8020158c:	b570      	push	{r4, r5, r6, lr}
8020158e:	6d00      	ldr	r0, [r0, #80]	@ 0x50
80201590:	f020 0401 	bic.w	r4, r0, #1
80201594:	480b      	ldr	r0, [pc, #44]	@ (802015c4 <_terminateio+0x3a>)
80201596:	f000 fde1 	bl	8020215c <_fclose_internal>
8020159a:	480b      	ldr	r0, [pc, #44]	@ (802015c8 <_terminateio+0x3e>)
8020159c:	f000 fdde 	bl	8020215c <_fclose_internal>
802015a0:	480a      	ldr	r0, [pc, #40]	@ (802015cc <_terminateio+0x42>)
802015a2:	f000 fddb 	bl	8020215c <_fclose_internal>
802015a6:	e009      	b.n	802015bc <_terminateio+0x32>
802015a8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
802015aa:	f020 0501 	bic.w	r5, r0, #1
802015ae:	4620      	mov	r0, r4
802015b0:	f000 fdd4 	bl	8020215c <_fclose_internal>
802015b4:	4620      	mov	r0, r4
802015b6:	f000 f87c 	bl	802016b2 <free>
802015ba:	462c      	mov	r4, r5
802015bc:	2c00      	cmp	r4, #0
802015be:	d1f3      	bne.n	802015a8 <_terminateio+0x1e>
802015c0:	bd70      	pop	{r4, r5, r6, pc}
802015c2:	0000      	.short	0x0000
802015c4:	20000630 	.word	0x20000630
802015c8:	20000684 	.word	0x20000684
802015cc:	200006d8 	.word	0x200006d8
802015d0:	20000000 	.word	0x20000000
802015d4:	20000004 	.word	0x20000004
802015d8:	20000008 	.word	0x20000008
802015dc:	00000072 	.word	0x00000072
802015e0:	00004bb8 	.word	0x00004bb8
802015e4:	00000077 	.word	0x00000077
802015e8:	00004ba4 	.word	0x00004ba4
802015ec:	00004b90 	.word	0x00004b90

802015f0 <__rt_memcpy_w>:
__aeabi_memcpy4():
802015f0:	b510      	push	{r4, lr}
__rt_memcpy_w():
802015f2:	3a20      	subs	r2, #32
802015f4:	f0c0 800b 	bcc.w	8020160e <__rt_memcpy_w+0x1e>
802015f8:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
802015fc:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
80201600:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
80201604:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
80201608:	3a20      	subs	r2, #32
8020160a:	f4bf aff5 	bcs.w	802015f8 <__rt_memcpy_w+0x8>
8020160e:	ea5f 7c02 	movs.w	ip, r2, lsl #28
80201612:	bf24      	itt	cs
80201614:	e8b1 5018 	ldmiacs.w	r1!, {r3, r4, ip, lr}
80201618:	e8a0 5018 	stmiacs.w	r0!, {r3, r4, ip, lr}
8020161c:	bf44      	itt	mi
8020161e:	c918      	ldmiami	r1!, {r3, r4}
80201620:	c018      	stmiami	r0!, {r3, r4}
80201622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80201626:	ea5f 7c82 	movs.w	ip, r2, lsl #30
8020162a:	bf24      	itt	cs
8020162c:	f851 3b04 	ldrcs.w	r3, [r1], #4
80201630:	f840 3b04 	strcs.w	r3, [r0], #4
80201634:	bf08      	it	eq
80201636:	4770      	bxeq	lr

80201638 <_memcpy_lastbytes_aligned>:
_memcpy_lastbytes_aligned():
80201638:	07d2      	lsls	r2, r2, #31
8020163a:	bf28      	it	cs
8020163c:	f831 3b02 	ldrhcs.w	r3, [r1], #2
80201640:	bf48      	it	mi
80201642:	f811 2b01 	ldrbmi.w	r2, [r1], #1
80201646:	bf28      	it	cs
80201648:	f820 3b02 	strhcs.w	r3, [r0], #2
8020164c:	bf48      	it	mi
8020164e:	f800 2b01 	strbmi.w	r2, [r0], #1
80201652:	4770      	bx	lr

80201654 <malloc>:
malloc():
80201654:	b570      	push	{r4, r5, r6, lr}
80201656:	4606      	mov	r6, r0
80201658:	f000 fdea 	bl	80202230 <__rt_heap_descriptor>
8020165c:	6805      	ldr	r5, [r0, #0]
8020165e:	f106 000b 	add.w	r0, r6, #11
80201662:	f020 0407 	bic.w	r4, r0, #7
80201666:	42b4      	cmp	r4, r6
80201668:	bf9c      	itt	ls
8020166a:	2000      	movls	r0, #0
8020166c:	bd70      	popls	{r4, r5, r6, pc}
8020166e:	462b      	mov	r3, r5
80201670:	686a      	ldr	r2, [r5, #4]
80201672:	b1ba      	cbz	r2, 802016a4 <malloc+0x50>
80201674:	6810      	ldr	r0, [r2, #0]
80201676:	42a0      	cmp	r0, r4
80201678:	d310      	bcc.n	8020169c <malloc+0x48>
8020167a:	f104 0108 	add.w	r1, r4, #8
8020167e:	4288      	cmp	r0, r1
80201680:	bf3c      	itt	cc
80201682:	6850      	ldrcc	r0, [r2, #4]
80201684:	6058      	strcc	r0, [r3, #4]
80201686:	d307      	bcc.n	80201698 <malloc+0x44>
80201688:	6851      	ldr	r1, [r2, #4]
8020168a:	1910      	adds	r0, r2, r4
8020168c:	6041      	str	r1, [r0, #4]
8020168e:	6811      	ldr	r1, [r2, #0]
80201690:	1b09      	subs	r1, r1, r4
80201692:	6001      	str	r1, [r0, #0]
80201694:	6058      	str	r0, [r3, #4]
80201696:	6014      	str	r4, [r2, #0]
80201698:	1d10      	adds	r0, r2, #4
8020169a:	bd70      	pop	{r4, r5, r6, pc}
8020169c:	4613      	mov	r3, r2
8020169e:	6852      	ldr	r2, [r2, #4]
802016a0:	2a00      	cmp	r2, #0
802016a2:	d1e7      	bne.n	80201674 <malloc+0x20>
802016a4:	4621      	mov	r1, r4
802016a6:	4628      	mov	r0, r5
802016a8:	f000 fdd2 	bl	80202250 <__Heap_Full>
802016ac:	2800      	cmp	r0, #0
802016ae:	d1de      	bne.n	8020166e <malloc+0x1a>
802016b0:	bd70      	pop	{r4, r5, r6, pc}

802016b2 <free>:
free():
802016b2:	b570      	push	{r4, r5, r6, lr}
802016b4:	4604      	mov	r4, r0
802016b6:	1f05      	subs	r5, r0, #4
802016b8:	f000 fdba 	bl	80202230 <__rt_heap_descriptor>
802016bc:	6800      	ldr	r0, [r0, #0]
802016be:	2c00      	cmp	r4, #0
802016c0:	bf14      	ite	ne
802016c2:	6844      	ldrne	r4, [r0, #4]
802016c4:	bd70      	popeq	{r4, r5, r6, pc}
802016c6:	2c00      	cmp	r4, #0
802016c8:	bf18      	it	ne
802016ca:	42ac      	cmpne	r4, r5
802016cc:	bf3c      	itt	cc
802016ce:	4620      	movcc	r0, r4
802016d0:	6864      	ldrcc	r4, [r4, #4]
802016d2:	d3f8      	bcc.n	802016c6 <free+0x14>
802016d4:	6801      	ldr	r1, [r0, #0]
802016d6:	180a      	adds	r2, r1, r0
802016d8:	42aa      	cmp	r2, r5
802016da:	bf18      	it	ne
802016dc:	6045      	strne	r5, [r0, #4]
802016de:	d103      	bne.n	802016e8 <free+0x36>
802016e0:	682a      	ldr	r2, [r5, #0]
802016e2:	4605      	mov	r5, r0
802016e4:	4411      	add	r1, r2
802016e6:	6001      	str	r1, [r0, #0]
802016e8:	6828      	ldr	r0, [r5, #0]
802016ea:	1941      	adds	r1, r0, r5
802016ec:	42a1      	cmp	r1, r4
802016ee:	bf1c      	itt	ne
802016f0:	606c      	strne	r4, [r5, #4]
802016f2:	bd70      	popne	{r4, r5, r6, pc}
802016f4:	6861      	ldr	r1, [r4, #4]
802016f6:	6069      	str	r1, [r5, #4]
802016f8:	6821      	ldr	r1, [r4, #0]
802016fa:	4408      	add	r0, r1
802016fc:	6028      	str	r0, [r5, #0]
802016fe:	bd70      	pop	{r4, r5, r6, pc}

80201700 <_ll_udiv10>:
_ll_udiv10():
80201700:	b530      	push	{r4, r5, lr}
80201702:	f1b0 020a 	subs.w	r2, r0, #10
80201706:	f171 0300 	sbcs.w	r3, r1, #0
8020170a:	ea4f 0e90 	mov.w	lr, r0, lsr #2
8020170e:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
80201712:	ebb0 000e 	subs.w	r0, r0, lr
80201716:	eb61 0191 	sbc.w	r1, r1, r1, lsr #2
8020171a:	ea4f 1e10 	mov.w	lr, r0, lsr #4
8020171e:	ea4e 7e01 	orr.w	lr, lr, r1, lsl #28
80201722:	eb10 000e 	adds.w	r0, r0, lr
80201726:	eb41 1111 	adc.w	r1, r1, r1, lsr #4
8020172a:	ea4f 2e10 	mov.w	lr, r0, lsr #8
8020172e:	ea4e 6e01 	orr.w	lr, lr, r1, lsl #24
80201732:	eb10 000e 	adds.w	r0, r0, lr
80201736:	eb41 2111 	adc.w	r1, r1, r1, lsr #8
8020173a:	ea4f 4e10 	mov.w	lr, r0, lsr #16
8020173e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
80201742:	eb10 000e 	adds.w	r0, r0, lr
80201746:	eb41 4111 	adc.w	r1, r1, r1, lsr #16
8020174a:	1840      	adds	r0, r0, r1
8020174c:	f141 0100 	adc.w	r1, r1, #0
80201750:	ea4f 00d0 	mov.w	r0, r0, lsr #3
80201754:	ea40 7041 	orr.w	r0, r0, r1, lsl #29
80201758:	ea4f 01d1 	mov.w	r1, r1, lsr #3
8020175c:	ea4f 0481 	mov.w	r4, r1, lsl #2
80201760:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
80201764:	eb10 0580 	adds.w	r5, r0, r0, lsl #2
80201768:	eb44 0401 	adc.w	r4, r4, r1
8020176c:	196d      	adds	r5, r5, r5
8020176e:	eb44 0404 	adc.w	r4, r4, r4
80201772:	1b52      	subs	r2, r2, r5
80201774:	41a3      	sbcs	r3, r4
80201776:	f04f 0300 	mov.w	r3, #0
8020177a:	bf48      	it	mi
8020177c:	320a      	addmi	r2, #10
8020177e:	d500      	bpl.n	80201782 <_ll_udiv10+0x82>
80201780:	bd30      	pop	{r4, r5, pc}
80201782:	1c40      	adds	r0, r0, #1
80201784:	f141 0100 	adc.w	r1, r1, #0
80201788:	bd30      	pop	{r4, r5, pc}

8020178a <_printf_int_common>:
_printf_int_common():
8020178a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
8020178e:	460d      	mov	r5, r1
80201790:	4699      	mov	r9, r3
80201792:	4692      	mov	sl, r2
80201794:	4604      	mov	r4, r0
80201796:	f100 0824 	add.w	r8, r0, #36	@ 0x24
8020179a:	6801      	ldr	r1, [r0, #0]
8020179c:	0688      	lsls	r0, r1, #26
8020179e:	d504      	bpl.n	802017aa <_printf_int_common+0x20>
802017a0:	69e0      	ldr	r0, [r4, #28]
802017a2:	f021 0110 	bic.w	r1, r1, #16
802017a6:	6021      	str	r1, [r4, #0]
802017a8:	e000      	b.n	802017ac <_printf_int_common+0x22>
802017aa:	2001      	movs	r0, #1
802017ac:	42a8      	cmp	r0, r5
802017ae:	dd01      	ble.n	802017b4 <_printf_int_common+0x2a>
802017b0:	1b47      	subs	r7, r0, r5
802017b2:	e000      	b.n	802017b6 <_printf_int_common+0x2c>
802017b4:	2700      	movs	r7, #0
802017b6:	69a1      	ldr	r1, [r4, #24]
802017b8:	197a      	adds	r2, r7, r5
802017ba:	eb02 0009 	add.w	r0, r2, r9
802017be:	1a08      	subs	r0, r1, r0
802017c0:	61a0      	str	r0, [r4, #24]
802017c2:	7820      	ldrb	r0, [r4, #0]
802017c4:	06c0      	lsls	r0, r0, #27
802017c6:	d402      	bmi.n	802017ce <_printf_int_common+0x44>
802017c8:	4620      	mov	r0, r4
802017ca:	f7ff f9dd 	bl	80200b88 <_printf_pre_padding>
802017ce:	2600      	movs	r6, #0
802017d0:	e008      	b.n	802017e4 <_printf_int_common+0x5a>
802017d2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
802017d6:	f81a 0006 	ldrb.w	r0, [sl, r6]
802017da:	4790      	blx	r2
802017dc:	6a20      	ldr	r0, [r4, #32]
802017de:	1c40      	adds	r0, r0, #1
802017e0:	1c76      	adds	r6, r6, #1
802017e2:	6220      	str	r0, [r4, #32]
802017e4:	454e      	cmp	r6, r9
802017e6:	dbf4      	blt.n	802017d2 <_printf_int_common+0x48>
802017e8:	7820      	ldrb	r0, [r4, #0]
802017ea:	06c0      	lsls	r0, r0, #27
802017ec:	d50a      	bpl.n	80201804 <_printf_int_common+0x7a>
802017ee:	4620      	mov	r0, r4
802017f0:	f7ff f9ca 	bl	80200b88 <_printf_pre_padding>
802017f4:	e006      	b.n	80201804 <_printf_int_common+0x7a>
802017f6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
802017fa:	2030      	movs	r0, #48	@ 0x30
802017fc:	4790      	blx	r2
802017fe:	6a20      	ldr	r0, [r4, #32]
80201800:	1c40      	adds	r0, r0, #1
80201802:	6220      	str	r0, [r4, #32]
80201804:	1e38      	subs	r0, r7, #0
80201806:	f1a7 0701 	sub.w	r7, r7, #1
8020180a:	dcf4      	bgt.n	802017f6 <_printf_int_common+0x6c>
8020180c:	e007      	b.n	8020181e <_printf_int_common+0x94>
8020180e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201812:	f818 0005 	ldrb.w	r0, [r8, r5]
80201816:	4790      	blx	r2
80201818:	6a20      	ldr	r0, [r4, #32]
8020181a:	1c40      	adds	r0, r0, #1
8020181c:	6220      	str	r0, [r4, #32]
8020181e:	1e28      	subs	r0, r5, #0
80201820:	f1a5 0501 	sub.w	r5, r5, #1
80201824:	dcf3      	bgt.n	8020180e <_printf_int_common+0x84>
80201826:	4620      	mov	r0, r4
80201828:	f7ff f9c4 	bl	80200bb4 <_printf_post_padding>
8020182c:	7820      	ldrb	r0, [r4, #0]
8020182e:	0600      	lsls	r0, r0, #24
80201830:	d502      	bpl.n	80201838 <_printf_int_common+0xae>
80201832:	2002      	movs	r0, #2
80201834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
80201838:	2001      	movs	r0, #1
8020183a:	e7fb      	b.n	80201834 <_printf_int_common+0xaa>

8020183c <_fp_digits>:
_fp_digits():
8020183c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
80201840:	460c      	mov	r4, r1
80201842:	461e      	mov	r6, r3
80201844:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
80201848:	b08b      	sub	sp, #44	@ 0x2c
8020184a:	e9d2 0100 	ldrd	r0, r1, [r2]
8020184e:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
80201852:	900a      	str	r0, [sp, #40]	@ 0x28
80201854:	468a      	mov	sl, r1
80201856:	f3c1 550a 	ubfx	r5, r1, #20, #11
8020185a:	b905      	cbnz	r5, 8020185e <_fp_digits+0x22>
8020185c:	463d      	mov	r5, r7
8020185e:	2100      	movs	r1, #0
80201860:	4608      	mov	r0, r1
80201862:	f04f 0000 	mov.w	r0, #0
80201866:	f1ba 0f00 	cmp.w	sl, #0
8020186a:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
8020186e:	da05      	bge.n	8020187c <_fp_digits+0x40>
80201870:	eb00 0080 	add.w	r0, r0, r0, lsl #2
80201874:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
80201878:	ea01 0050 	and.w	r0, r1, r0, lsr #1
8020187c:	ea4f 5990 	mov.w	r9, r0, lsr #22
80201880:	f1b9 0f01 	cmp.w	r9, #1
80201884:	dd00      	ble.n	80201888 <_fp_digits+0x4c>
80201886:	46b9      	mov	r9, r7
80201888:	980a      	ldr	r0, [sp, #40]	@ 0x28
8020188a:	ea50 004a 	orrs.w	r0, r0, sl, lsl #1
8020188e:	d00e      	beq.n	802018ae <_fp_digits+0x72>
80201890:	f644 5010 	movw	r0, #19728	@ 0x4d10
80201894:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
80201898:	4345      	muls	r5, r0
8020189a:	142f      	asrs	r7, r5, #16
8020189c:	f1b8 0f00 	cmp.w	r8, #0
802018a0:	d01e      	beq.n	802018e0 <_fp_digits+0xa4>
802018a2:	4275      	negs	r5, r6
802018a4:	1e29      	subs	r1, r5, #0
802018a6:	dd1e      	ble.n	802018e6 <_fp_digits+0xaa>
802018a8:	f1c9 0200 	rsb	r2, r9, #0
802018ac:	e01c      	b.n	802018e8 <_fp_digits+0xac>
802018ae:	f1b8 0f01 	cmp.w	r8, #1
802018b2:	f04f 0000 	mov.w	r0, #0
802018b6:	d001      	beq.n	802018bc <_fp_digits+0x80>
802018b8:	2130      	movs	r1, #48	@ 0x30
802018ba:	e003      	b.n	802018c4 <_fp_digits+0x88>
802018bc:	43f2      	mvns	r2, r6
802018be:	e005      	b.n	802018cc <_fp_digits+0x90>
802018c0:	5421      	strb	r1, [r4, r0]
802018c2:	1c40      	adds	r0, r0, #1
802018c4:	42b0      	cmp	r0, r6
802018c6:	dbfb      	blt.n	802018c0 <_fp_digits+0x84>
802018c8:	4630      	mov	r0, r6
802018ca:	2200      	movs	r2, #0
802018cc:	2100      	movs	r1, #0
802018ce:	5421      	strb	r1, [r4, r0]
802018d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
802018d2:	f8c1 8008 	str.w	r8, [r1, #8]
802018d6:	e9c1 2000 	strd	r2, r0, [r1]
802018da:	b00f      	add	sp, #60	@ 0x3c
802018dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
802018e0:	1bbd      	subs	r5, r7, r6
802018e2:	1c6d      	adds	r5, r5, #1
802018e4:	e7de      	b.n	802018a4 <_fp_digits+0x68>
802018e6:	464a      	mov	r2, r9
802018e8:	da00      	bge.n	802018ec <_fp_digits+0xb0>
802018ea:	4269      	negs	r1, r5
802018ec:	a806      	add	r0, sp, #24
802018ee:	f000 fd39 	bl	80202364 <_btod_etento>
802018f2:	ab06      	add	r3, sp, #24
802018f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
802018f8:	ab03      	add	r3, sp, #12
802018fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
802018fe:	4650      	mov	r0, sl
80201900:	990a      	ldr	r1, [sp, #40]	@ 0x28
80201902:	f003 ffa1 	bl	80205848 <_btod_d2e>
80201906:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
8020190a:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
8020190e:	381f      	subs	r0, #31
80201910:	9000      	str	r0, [sp, #0]
80201912:	9803      	ldr	r0, [sp, #12]
80201914:	2d00      	cmp	r5, #0
80201916:	dd0a      	ble.n	8020192e <_fp_digits+0xf2>
80201918:	f242 011f 	movw	r1, #8223	@ 0x201f
8020191c:	464a      	mov	r2, r9
8020191e:	4408      	add	r0, r1
80201920:	2300      	movs	r3, #0
80201922:	a903      	add	r1, sp, #12
80201924:	9003      	str	r0, [sp, #12]
80201926:	4668      	mov	r0, sp
80201928:	f004 fa0a 	bl	80205d40 <_btod_ediv>
8020192c:	e009      	b.n	80201942 <_fp_digits+0x106>
8020192e:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
80201932:	464a      	mov	r2, r9
80201934:	381f      	subs	r0, #31
80201936:	2300      	movs	r3, #0
80201938:	a903      	add	r1, sp, #12
8020193a:	9003      	str	r0, [sp, #12]
8020193c:	4668      	mov	r0, sp
8020193e:	f004 fa14 	bl	80205d6a <_btod_emul>
80201942:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
80201946:	0400      	lsls	r0, r0, #16
80201948:	0c00      	lsrs	r0, r0, #16
8020194a:	d003      	beq.n	80201954 <_fp_digits+0x118>
8020194c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
80201950:	0841      	lsrs	r1, r0, #1
80201952:	e000      	b.n	80201956 <_fp_digits+0x11a>
80201954:	4610      	mov	r0, r2
80201956:	f1b8 0f00 	cmp.w	r8, #0
8020195a:	d003      	beq.n	80201964 <_fp_digits+0x128>
8020195c:	2200      	movs	r2, #0
8020195e:	9200      	str	r2, [sp, #0]
80201960:	4615      	mov	r5, r2
80201962:	e01e      	b.n	802019a2 <_fp_digits+0x166>
80201964:	1e75      	subs	r5, r6, #1
80201966:	d405      	bmi.n	80201974 <_fp_digits+0x138>
80201968:	f7ff feca 	bl	80201700 <_ll_udiv10>
8020196c:	3230      	adds	r2, #48	@ 0x30
8020196e:	5562      	strb	r2, [r4, r5]
80201970:	1e6d      	subs	r5, r5, #1
80201972:	d5f9      	bpl.n	80201968 <_fp_digits+0x12c>
80201974:	46b3      	mov	fp, r6
80201976:	2201      	movs	r2, #1
80201978:	4308      	orrs	r0, r1
8020197a:	d002      	beq.n	80201982 <_fp_digits+0x146>
8020197c:	2200      	movs	r2, #0
8020197e:	1c7f      	adds	r7, r7, #1
80201980:	e004      	b.n	8020198c <_fp_digits+0x150>
80201982:	7820      	ldrb	r0, [r4, #0]
80201984:	2830      	cmp	r0, #48	@ 0x30
80201986:	d101      	bne.n	8020198c <_fp_digits+0x150>
80201988:	2200      	movs	r2, #0
8020198a:	1e7f      	subs	r7, r7, #1
8020198c:	2a00      	cmp	r2, #0
8020198e:	9709      	str	r7, [sp, #36]	@ 0x24
80201990:	d084      	beq.n	8020189c <_fp_digits+0x60>
80201992:	e01d      	b.n	802019d0 <_fp_digits+0x194>
80201994:	2d11      	cmp	r5, #17
80201996:	da07      	bge.n	802019a8 <_fp_digits+0x16c>
80201998:	f7ff feb2 	bl	80201700 <_ll_udiv10>
8020199c:	3230      	adds	r2, #48	@ 0x30
8020199e:	5562      	strb	r2, [r4, r5]
802019a0:	1c6d      	adds	r5, r5, #1
802019a2:	ea50 0201 	orrs.w	r2, r0, r1
802019a6:	d1f5      	bne.n	80201994 <_fp_digits+0x158>
802019a8:	4308      	orrs	r0, r1
802019aa:	d002      	beq.n	802019b2 <_fp_digits+0x176>
802019ac:	9800      	ldr	r0, [sp, #0]
802019ae:	b1c8      	cbz	r0, 802019e4 <_fp_digits+0x1a8>
802019b0:	e00e      	b.n	802019d0 <_fp_digits+0x194>
802019b2:	2100      	movs	r1, #0
802019b4:	1e68      	subs	r0, r5, #1
802019b6:	e005      	b.n	802019c4 <_fp_digits+0x188>
802019b8:	5c23      	ldrb	r3, [r4, r0]
802019ba:	5c62      	ldrb	r2, [r4, r1]
802019bc:	5463      	strb	r3, [r4, r1]
802019be:	5422      	strb	r2, [r4, r0]
802019c0:	1e40      	subs	r0, r0, #1
802019c2:	1c49      	adds	r1, r1, #1
802019c4:	4281      	cmp	r1, r0
802019c6:	dbf7      	blt.n	802019b8 <_fp_digits+0x17c>
802019c8:	46ab      	mov	fp, r5
802019ca:	1ba8      	subs	r0, r5, r6
802019cc:	1e40      	subs	r0, r0, #1
802019ce:	9009      	str	r0, [sp, #36]	@ 0x24
802019d0:	2000      	movs	r0, #0
802019d2:	f804 000b 	strb.w	r0, [r4, fp]
802019d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
802019d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
802019da:	f8c0 8008 	str.w	r8, [r0, #8]
802019de:	e9c0 2b00 	strd	r2, fp, [r0]
802019e2:	e77a      	b.n	802018da <_fp_digits+0x9e>
802019e4:	2611      	movs	r6, #17
802019e6:	f04f 0800 	mov.w	r8, #0
802019ea:	e757      	b.n	8020189c <_fp_digits+0x60>

802019ec <_printf_fp_dec_real>:
_printf_fp_dec_real():
802019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
802019f0:	4688      	mov	r8, r1
802019f2:	4604      	mov	r4, r0
802019f4:	1dd2      	adds	r2, r2, #7
802019f6:	f022 0107 	bic.w	r1, r2, #7
802019fa:	b091      	sub	sp, #68	@ 0x44
802019fc:	e9d1 0100 	ldrd	r0, r1, [r1]
80201a00:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
80201a04:	f004 fae8 	bl	80205fd8 <__ARM_fpclassify>
80201a08:	4602      	mov	r2, r0
80201a0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80201a0c:	0fc0      	lsrs	r0, r0, #31
80201a0e:	d001      	beq.n	80201a14 <_printf_fp_dec_real+0x28>
80201a10:	202d      	movs	r0, #45	@ 0x2d
80201a12:	e007      	b.n	80201a24 <_printf_fp_dec_real+0x38>
80201a14:	6820      	ldr	r0, [r4, #0]
80201a16:	0781      	lsls	r1, r0, #30
80201a18:	d501      	bpl.n	80201a1e <_printf_fp_dec_real+0x32>
80201a1a:	202b      	movs	r0, #43	@ 0x2b
80201a1c:	e002      	b.n	80201a24 <_printf_fp_dec_real+0x38>
80201a1e:	2120      	movs	r1, #32
80201a20:	ea01 00c0 	and.w	r0, r1, r0, lsl #3
80201a24:	2a03      	cmp	r2, #3
80201a26:	9009      	str	r0, [sp, #36]	@ 0x24
80201a28:	d001      	beq.n	80201a2e <_printf_fp_dec_real+0x42>
80201a2a:	2a07      	cmp	r2, #7
80201a2c:	db05      	blt.n	80201a3a <_printf_fp_dec_real+0x4e>
80201a2e:	4603      	mov	r3, r0
80201a30:	4641      	mov	r1, r8
80201a32:	4620      	mov	r0, r4
80201a34:	f000 fc56 	bl	802022e4 <_printf_fp_infnan>
80201a38:	e10b      	b.n	80201c52 <_printf_fp_dec_real+0x266>
80201a3a:	7820      	ldrb	r0, [r4, #0]
80201a3c:	0680      	lsls	r0, r0, #26
80201a3e:	d501      	bpl.n	80201a44 <_printf_fp_dec_real+0x58>
80201a40:	69e0      	ldr	r0, [r4, #28]
80201a42:	e000      	b.n	80201a46 <_printf_fp_dec_real+0x5a>
80201a44:	2006      	movs	r0, #6
80201a46:	f1b8 0f65 	cmp.w	r8, #101	@ 0x65
80201a4a:	4681      	mov	r9, r0
80201a4c:	d006      	beq.n	80201a5c <_printf_fp_dec_real+0x70>
80201a4e:	f1b8 0f66 	cmp.w	r8, #102	@ 0x66
80201a52:	d018      	beq.n	80201a86 <_printf_fp_dec_real+0x9a>
80201a54:	f1b8 0f67 	cmp.w	r8, #103	@ 0x67
80201a58:	d170      	bne.n	80201b3c <_printf_fp_dec_real+0x150>
80201a5a:	e031      	b.n	80201ac0 <_printf_fp_dec_real+0xd4>
80201a5c:	2000      	movs	r0, #0
80201a5e:	f1b9 0f11 	cmp.w	r9, #17
80201a62:	9000      	str	r0, [sp, #0]
80201a64:	db01      	blt.n	80201a6a <_printf_fp_dec_real+0x7e>
80201a66:	2311      	movs	r3, #17
80201a68:	e001      	b.n	80201a6e <_printf_fp_dec_real+0x82>
80201a6a:	f109 0301 	add.w	r3, r9, #1
80201a6e:	aa0a      	add	r2, sp, #40	@ 0x28
80201a70:	a901      	add	r1, sp, #4
80201a72:	a80c      	add	r0, sp, #48	@ 0x30
80201a74:	f7ff fee2 	bl	8020183c <_fp_digits>
80201a78:	e9dd 700c 	ldrd	r7, r0, [sp, #48]	@ 0x30
80201a7c:	2600      	movs	r6, #0
80201a7e:	f109 0501 	add.w	r5, r9, #1
80201a82:	4683      	mov	fp, r0
80201a84:	e047      	b.n	80201b16 <_printf_fp_dec_real+0x12a>
80201a86:	2001      	movs	r0, #1
80201a88:	464b      	mov	r3, r9
80201a8a:	9000      	str	r0, [sp, #0]
80201a8c:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
80201a90:	aa0a      	add	r2, sp, #40	@ 0x28
80201a92:	a901      	add	r1, sp, #4
80201a94:	a80c      	add	r0, sp, #48	@ 0x30
80201a96:	f7ff fed1 	bl	8020183c <_fp_digits>
80201a9a:	e9dd b00d 	ldrd	fp, r0, [sp, #52]	@ 0x34
80201a9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
80201aa0:	465d      	mov	r5, fp
80201aa2:	2600      	movs	r6, #0
80201aa4:	b910      	cbnz	r0, 80201aac <_printf_fp_dec_real+0xc0>
80201aa6:	f109 0001 	add.w	r0, r9, #1
80201aaa:	180d      	adds	r5, r1, r0
80201aac:	ebb9 0005 	subs.w	r0, r9, r5
80201ab0:	d403      	bmi.n	80201aba <_printf_fp_dec_real+0xce>
80201ab2:	f1c0 36ff 	rsb	r6, r0, #4294967295	@ 0xffffffff
80201ab6:	f109 0501 	add.w	r5, r9, #1
80201aba:	eba5 0009 	sub.w	r0, r5, r9
80201abe:	e02b      	b.n	80201b18 <_printf_fp_dec_real+0x12c>
80201ac0:	f1b9 0f01 	cmp.w	r9, #1
80201ac4:	da01      	bge.n	80201aca <_printf_fp_dec_real+0xde>
80201ac6:	f04f 0901 	mov.w	r9, #1
80201aca:	2000      	movs	r0, #0
80201acc:	f1b9 0f11 	cmp.w	r9, #17
80201ad0:	9000      	str	r0, [sp, #0]
80201ad2:	4648      	mov	r0, r9
80201ad4:	dd01      	ble.n	80201ada <_printf_fp_dec_real+0xee>
80201ad6:	2311      	movs	r3, #17
80201ad8:	e000      	b.n	80201adc <_printf_fp_dec_real+0xf0>
80201ada:	4603      	mov	r3, r0
80201adc:	aa0a      	add	r2, sp, #40	@ 0x28
80201ade:	a901      	add	r1, sp, #4
80201ae0:	a80c      	add	r0, sp, #48	@ 0x30
80201ae2:	f7ff feab 	bl	8020183c <_fp_digits>
80201ae6:	e9dd 700c 	ldrd	r7, r0, [sp, #48]	@ 0x30
80201aea:	464d      	mov	r5, r9
80201aec:	2600      	movs	r6, #0
80201aee:	4683      	mov	fp, r0
80201af0:	7820      	ldrb	r0, [r4, #0]
80201af2:	0700      	lsls	r0, r0, #28
80201af4:	d40a      	bmi.n	80201b0c <_printf_fp_dec_real+0x120>
80201af6:	45ab      	cmp	fp, r5
80201af8:	da00      	bge.n	80201afc <_printf_fp_dec_real+0x110>
80201afa:	465d      	mov	r5, fp
80201afc:	a801      	add	r0, sp, #4
80201afe:	2d01      	cmp	r5, #1
80201b00:	dd04      	ble.n	80201b0c <_printf_fp_dec_real+0x120>
80201b02:	1941      	adds	r1, r0, r5
80201b04:	f811 1c01 	ldrb.w	r1, [r1, #-1]
80201b08:	2930      	cmp	r1, #48	@ 0x30
80201b0a:	d007      	beq.n	80201b1c <_printf_fp_dec_real+0x130>
80201b0c:	454f      	cmp	r7, r9
80201b0e:	da02      	bge.n	80201b16 <_printf_fp_dec_real+0x12a>
80201b10:	f117 0f04 	cmn.w	r7, #4
80201b14:	da04      	bge.n	80201b20 <_printf_fp_dec_real+0x134>
80201b16:	2001      	movs	r0, #1
80201b18:	4682      	mov	sl, r0
80201b1a:	e00f      	b.n	80201b3c <_printf_fp_dec_real+0x150>
80201b1c:	1e6d      	subs	r5, r5, #1
80201b1e:	e7ee      	b.n	80201afe <_printf_fp_dec_real+0x112>
80201b20:	2f00      	cmp	r7, #0
80201b22:	dc02      	bgt.n	80201b2a <_printf_fp_dec_real+0x13e>
80201b24:	1bed      	subs	r5, r5, r7
80201b26:	443e      	add	r6, r7
80201b28:	e003      	b.n	80201b32 <_printf_fp_dec_real+0x146>
80201b2a:	1c78      	adds	r0, r7, #1
80201b2c:	42a8      	cmp	r0, r5
80201b2e:	dd00      	ble.n	80201b32 <_printf_fp_dec_real+0x146>
80201b30:	1c7d      	adds	r5, r7, #1
80201b32:	1bb8      	subs	r0, r7, r6
80201b34:	f100 0a01 	add.w	sl, r0, #1
80201b38:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
80201b3c:	7820      	ldrb	r0, [r4, #0]
80201b3e:	0700      	lsls	r0, r0, #28
80201b40:	d403      	bmi.n	80201b4a <_printf_fp_dec_real+0x15e>
80201b42:	45aa      	cmp	sl, r5
80201b44:	db01      	blt.n	80201b4a <_printf_fp_dec_real+0x15e>
80201b46:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
80201b4a:	2100      	movs	r1, #0
80201b4c:	f1b7 4f00 	cmp.w	r7, #2147483648	@ 0x80000000
80201b50:	f10d 0843 	add.w	r8, sp, #67	@ 0x43
80201b54:	f88d 1043 	strb.w	r1, [sp, #67]	@ 0x43
80201b58:	d024      	beq.n	80201ba4 <_printf_fp_dec_real+0x1b8>
80201b5a:	2002      	movs	r0, #2
80201b5c:	232b      	movs	r3, #43	@ 0x2b
80201b5e:	2f00      	cmp	r7, #0
80201b60:	da01      	bge.n	80201b66 <_printf_fp_dec_real+0x17a>
80201b62:	427f      	negs	r7, r7
80201b64:	232d      	movs	r3, #45	@ 0x2d
80201b66:	210a      	movs	r1, #10
80201b68:	1e02      	subs	r2, r0, #0
80201b6a:	f1a0 0001 	sub.w	r0, r0, #1
80201b6e:	dc00      	bgt.n	80201b72 <_printf_fp_dec_real+0x186>
80201b70:	b15f      	cbz	r7, 80201b8a <_printf_fp_dec_real+0x19e>
80201b72:	fb97 fcf1 	sdiv	ip, r7, r1
80201b76:	fb97 f2f1 	sdiv	r2, r7, r1
80201b7a:	fb01 7c1c 	mls	ip, r1, ip, r7
80201b7e:	4617      	mov	r7, r2
80201b80:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
80201b84:	f808 cd01 	strb.w	ip, [r8, #-1]!
80201b88:	e7ee      	b.n	80201b68 <_printf_fp_dec_real+0x17c>
80201b8a:	f1a8 0001 	sub.w	r0, r8, #1
80201b8e:	7003      	strb	r3, [r0, #0]
80201b90:	8821      	ldrh	r1, [r4, #0]
80201b92:	0509      	lsls	r1, r1, #20
80201b94:	d501      	bpl.n	80201b9a <_printf_fp_dec_real+0x1ae>
80201b96:	2145      	movs	r1, #69	@ 0x45
80201b98:	e000      	b.n	80201b9c <_printf_fp_dec_real+0x1b0>
80201b9a:	2165      	movs	r1, #101	@ 0x65
80201b9c:	f1a0 0801 	sub.w	r8, r0, #1
80201ba0:	f800 1c01 	strb.w	r1, [r0, #-1]
80201ba4:	9809      	ldr	r0, [sp, #36]	@ 0x24
80201ba6:	a90f      	add	r1, sp, #60	@ 0x3c
80201ba8:	eba1 0708 	sub.w	r7, r1, r8
80201bac:	1dff      	adds	r7, r7, #7
80201bae:	b100      	cbz	r0, 80201bb2 <_printf_fp_dec_real+0x1c6>
80201bb0:	2001      	movs	r0, #1
80201bb2:	1941      	adds	r1, r0, r5
80201bb4:	eb01 70ea 	add.w	r0, r1, sl, asr #31
80201bb8:	69a1      	ldr	r1, [r4, #24]
80201bba:	4438      	add	r0, r7
80201bbc:	1a08      	subs	r0, r1, r0
80201bbe:	1e40      	subs	r0, r0, #1
80201bc0:	61a0      	str	r0, [r4, #24]
80201bc2:	7820      	ldrb	r0, [r4, #0]
80201bc4:	06c0      	lsls	r0, r0, #27
80201bc6:	d402      	bmi.n	80201bce <_printf_fp_dec_real+0x1e2>
80201bc8:	4620      	mov	r0, r4
80201bca:	f7fe ffdd 	bl	80200b88 <_printf_pre_padding>
80201bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
80201bd0:	b128      	cbz	r0, 80201bde <_printf_fp_dec_real+0x1f2>
80201bd2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201bd6:	4790      	blx	r2
80201bd8:	6a20      	ldr	r0, [r4, #32]
80201bda:	1c40      	adds	r0, r0, #1
80201bdc:	6220      	str	r0, [r4, #32]
80201bde:	7820      	ldrb	r0, [r4, #0]
80201be0:	06c0      	lsls	r0, r0, #27
80201be2:	d522      	bpl.n	80201c2a <_printf_fp_dec_real+0x23e>
80201be4:	4620      	mov	r0, r4
80201be6:	f7fe ffcf 	bl	80200b88 <_printf_pre_padding>
80201bea:	e01e      	b.n	80201c2a <_printf_fp_dec_real+0x23e>
80201bec:	2e00      	cmp	r6, #0
80201bee:	db04      	blt.n	80201bfa <_printf_fp_dec_real+0x20e>
80201bf0:	45b3      	cmp	fp, r6
80201bf2:	dd02      	ble.n	80201bfa <_printf_fp_dec_real+0x20e>
80201bf4:	a801      	add	r0, sp, #4
80201bf6:	5d80      	ldrb	r0, [r0, r6]
80201bf8:	e000      	b.n	80201bfc <_printf_fp_dec_real+0x210>
80201bfa:	2030      	movs	r0, #48	@ 0x30
80201bfc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201c00:	4790      	blx	r2
80201c02:	6a20      	ldr	r0, [r4, #32]
80201c04:	1c40      	adds	r0, r0, #1
80201c06:	6220      	str	r0, [r4, #32]
80201c08:	1c76      	adds	r6, r6, #1
80201c0a:	f1aa 0001 	sub.w	r0, sl, #1
80201c0e:	ea5f 0a00 	movs.w	sl, r0
80201c12:	d10a      	bne.n	80201c2a <_printf_fp_dec_real+0x23e>
80201c14:	f000 fb10 	bl	80202238 <__rt_locale>
80201c18:	68c0      	ldr	r0, [r0, #12]
80201c1a:	6801      	ldr	r1, [r0, #0]
80201c1c:	5c40      	ldrb	r0, [r0, r1]
80201c1e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201c22:	4790      	blx	r2
80201c24:	6a20      	ldr	r0, [r4, #32]
80201c26:	1c40      	adds	r0, r0, #1
80201c28:	6220      	str	r0, [r4, #32]
80201c2a:	1e28      	subs	r0, r5, #0
80201c2c:	f1a5 0501 	sub.w	r5, r5, #1
80201c30:	dcdc      	bgt.n	80201bec <_printf_fp_dec_real+0x200>
80201c32:	e007      	b.n	80201c44 <_printf_fp_dec_real+0x258>
80201c34:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201c38:	f818 0b01 	ldrb.w	r0, [r8], #1
80201c3c:	4790      	blx	r2
80201c3e:	6a20      	ldr	r0, [r4, #32]
80201c40:	1c40      	adds	r0, r0, #1
80201c42:	6220      	str	r0, [r4, #32]
80201c44:	1e38      	subs	r0, r7, #0
80201c46:	f1a7 0701 	sub.w	r7, r7, #1
80201c4a:	dcf3      	bgt.n	80201c34 <_printf_fp_dec_real+0x248>
80201c4c:	4620      	mov	r0, r4
80201c4e:	f7fe ffb1 	bl	80200bb4 <_printf_post_padding>
80201c52:	2003      	movs	r0, #3
80201c54:	b011      	add	sp, #68	@ 0x44
80201c56:	e641      	b.n	802018dc <_fp_digits+0xa0>

80201c58 <_printf_fp_hex_real>:
_printf_fp_hex_real():
80201c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
80201c5c:	4604      	mov	r4, r0
80201c5e:	460d      	mov	r5, r1
80201c60:	1dd2      	adds	r2, r2, #7
80201c62:	f022 0007 	bic.w	r0, r2, #7
80201c66:	b089      	sub	sp, #36	@ 0x24
80201c68:	e9d0 9700 	ldrd	r9, r7, [r0]
80201c6c:	4648      	mov	r0, r9
80201c6e:	4639      	mov	r1, r7
80201c70:	f004 f9b2 	bl	80205fd8 <__ARM_fpclassify>
80201c74:	4602      	mov	r2, r0
80201c76:	0ff8      	lsrs	r0, r7, #31
80201c78:	d001      	beq.n	80201c7e <_printf_fp_hex_real+0x26>
80201c7a:	232d      	movs	r3, #45	@ 0x2d
80201c7c:	e007      	b.n	80201c8e <_printf_fp_hex_real+0x36>
80201c7e:	6820      	ldr	r0, [r4, #0]
80201c80:	0781      	lsls	r1, r0, #30
80201c82:	d501      	bpl.n	80201c88 <_printf_fp_hex_real+0x30>
80201c84:	232b      	movs	r3, #43	@ 0x2b
80201c86:	e002      	b.n	80201c8e <_printf_fp_hex_real+0x36>
80201c88:	2120      	movs	r1, #32
80201c8a:	ea01 03c0 	and.w	r3, r1, r0, lsl #3
80201c8e:	f88d 3020 	strb.w	r3, [sp, #32]
80201c92:	b10b      	cbz	r3, 80201c98 <_printf_fp_hex_real+0x40>
80201c94:	2001      	movs	r0, #1
80201c96:	e000      	b.n	80201c9a <_printf_fp_hex_real+0x42>
80201c98:	2000      	movs	r0, #0
80201c9a:	2a03      	cmp	r2, #3
80201c9c:	4682      	mov	sl, r0
80201c9e:	d001      	beq.n	80201ca4 <_printf_fp_hex_real+0x4c>
80201ca0:	2a07      	cmp	r2, #7
80201ca2:	db04      	blt.n	80201cae <_printf_fp_hex_real+0x56>
80201ca4:	4629      	mov	r1, r5
80201ca6:	4620      	mov	r0, r4
80201ca8:	f000 fb1c 	bl	802022e4 <_printf_fp_infnan>
80201cac:	e13f      	b.n	80201f2e <_printf_fp_hex_real+0x2d6>
80201cae:	7820      	ldrb	r0, [r4, #0]
80201cb0:	0680      	lsls	r0, r0, #26
80201cb2:	d401      	bmi.n	80201cb8 <_printf_fp_hex_real+0x60>
80201cb4:	250d      	movs	r5, #13
80201cb6:	e000      	b.n	80201cba <_printf_fp_hex_real+0x62>
80201cb8:	69e5      	ldr	r5, [r4, #28]
80201cba:	f3c7 560a 	ubfx	r6, r7, #20, #11
80201cbe:	2d0d      	cmp	r5, #13
80201cc0:	da49      	bge.n	80201d56 <_printf_fp_hex_real+0xfe>
80201cc2:	2100      	movs	r1, #0
80201cc4:	ea4f 5b17 	mov.w	fp, r7, lsr #20
80201cc8:	4608      	mov	r0, r1
80201cca:	f04f 0000 	mov.w	r0, #0
80201cce:	2f00      	cmp	r7, #0
80201cd0:	f400 0040 	and.w	r0, r0, #12582912	@ 0xc00000
80201cd4:	da07      	bge.n	80201ce6 <_printf_fp_hex_real+0x8e>
80201cd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
80201cda:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
80201cde:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
80201ce2:	ea01 0060 	and.w	r0, r1, r0, asr #1
80201ce6:	1581      	asrs	r1, r0, #22
80201ce8:	2901      	cmp	r1, #1
80201cea:	dd01      	ble.n	80201cf0 <_printf_fp_hex_real+0x98>
80201cec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
80201cf0:	2200      	movs	r2, #0
80201cf2:	ea4f 0c85 	mov.w	ip, r5, lsl #2
80201cf6:	f1bc 0f18 	cmp.w	ip, #24
80201cfa:	d306      	bcc.n	80201d0a <_printf_fp_hex_real+0xb2>
80201cfc:	4613      	mov	r3, r2
80201cfe:	f1ac 0018 	sub.w	r0, ip, #24
80201d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
80201d06:	40c2      	lsrs	r2, r0
80201d08:	e003      	b.n	80201d12 <_printf_fp_hex_real+0xba>
80201d0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
80201d0e:	fa23 f30c 	lsr.w	r3, r3, ip
80201d12:	f10c 0c0c 	add.w	ip, ip, #12
80201d16:	f1bc 0f20 	cmp.w	ip, #32
80201d1a:	d304      	bcc.n	80201d26 <_printf_fp_hex_real+0xce>
80201d1c:	f1ac 0c20 	sub.w	ip, ip, #32
80201d20:	fa09 f00c 	lsl.w	r0, r9, ip
80201d24:	e001      	b.n	80201d2a <_printf_fp_hex_real+0xd2>
80201d26:	fa07 f00c 	lsl.w	r0, r7, ip
80201d2a:	2900      	cmp	r1, #0
80201d2c:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
80201d30:	dd01      	ble.n	80201d36 <_printf_fp_hex_real+0xde>
80201d32:	b918      	cbnz	r0, 80201d3c <_printf_fp_hex_real+0xe4>
80201d34:	e00f      	b.n	80201d56 <_printf_fp_hex_real+0xfe>
80201d36:	d10e      	bne.n	80201d56 <_printf_fp_hex_real+0xfe>
80201d38:	4540      	cmp	r0, r8
80201d3a:	d30c      	bcc.n	80201d56 <_printf_fp_hex_real+0xfe>
80201d3c:	eb19 0902 	adds.w	r9, r9, r2
80201d40:	415f      	adcs	r7, r3
80201d42:	b921      	cbnz	r1, 80201d4e <_printf_fp_hex_real+0xf6>
80201d44:	4540      	cmp	r0, r8
80201d46:	d102      	bne.n	80201d4e <_printf_fp_hex_real+0xf6>
80201d48:	439f      	bics	r7, r3
80201d4a:	ea29 0902 	bic.w	r9, r9, r2
80201d4e:	ebbb 5f17 	cmp.w	fp, r7, lsr #20
80201d52:	d000      	beq.n	80201d56 <_printf_fp_hex_real+0xfe>
80201d54:	1c76      	adds	r6, r6, #1
80201d56:	8820      	ldrh	r0, [r4, #0]
80201d58:	0500      	lsls	r0, r0, #20
80201d5a:	d502      	bpl.n	80201d62 <_printf_fp_hex_real+0x10a>
80201d5c:	487b      	ldr	r0, [pc, #492]	@ (80201f4c <_printf_fp_hex_real+0x2f4>)
80201d5e:	4478      	add	r0, pc
80201d60:	e002      	b.n	80201d68 <_printf_fp_hex_real+0x110>
80201d62:	487a      	ldr	r0, [pc, #488]	@ (80201f4c <_printf_fp_hex_real+0x2f4>)
80201d64:	4478      	add	r0, pc
80201d66:	3819      	subs	r0, #25
80201d68:	aa08      	add	r2, sp, #32
80201d6a:	2330      	movs	r3, #48	@ 0x30
80201d6c:	f802 300a 	strb.w	r3, [r2, sl]
80201d70:	7c03      	ldrb	r3, [r0, #16]
80201d72:	f10a 0101 	add.w	r1, sl, #1
80201d76:	2e00      	cmp	r6, #0
80201d78:	f10a 0a02 	add.w	sl, sl, #2
80201d7c:	5453      	strb	r3, [r2, r1]
80201d7e:	466a      	mov	r2, sp
80201d80:	dc02      	bgt.n	80201d88 <_printf_fp_hex_real+0x130>
80201d82:	f04f 0130 	mov.w	r1, #48	@ 0x30
80201d86:	e001      	b.n	80201d8c <_printf_fp_hex_real+0x134>
80201d88:	f04f 0131 	mov.w	r1, #49	@ 0x31
80201d8c:	f04f 0801 	mov.w	r8, #1
80201d90:	f88d 1000 	strb.w	r1, [sp]
80201d94:	d002      	beq.n	80201d9c <_printf_fp_hex_real+0x144>
80201d96:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
80201d9a:	e003      	b.n	80201da4 <_printf_fp_hex_real+0x14c>
80201d9c:	ea59 0147 	orrs.w	r1, r9, r7, lsl #1
80201da0:	d000      	beq.n	80201da4 <_printf_fp_hex_real+0x14c>
80201da2:	4e6b      	ldr	r6, [pc, #428]	@ (80201f50 <_printf_fp_hex_real+0x2f8>)
80201da4:	2d00      	cmp	r5, #0
80201da6:	dc02      	bgt.n	80201dae <_printf_fp_hex_real+0x156>
80201da8:	7821      	ldrb	r1, [r4, #0]
80201daa:	0709      	lsls	r1, r1, #28
80201dac:	d504      	bpl.n	80201db8 <_printf_fp_hex_real+0x160>
80201dae:	f04f 0802 	mov.w	r8, #2
80201db2:	212e      	movs	r1, #46	@ 0x2e
80201db4:	f88d 1001 	strb.w	r1, [sp, #1]
80201db8:	46c4      	mov	ip, r8
80201dba:	2100      	movs	r1, #0
80201dbc:	e00b      	b.n	80201dd6 <_printf_fp_hex_real+0x17e>
80201dbe:	f3c7 4303 	ubfx	r3, r7, #16, #4
80201dc2:	013f      	lsls	r7, r7, #4
80201dc4:	5cc3      	ldrb	r3, [r0, r3]
80201dc6:	1c49      	adds	r1, r1, #1
80201dc8:	1e6d      	subs	r5, r5, #1
80201dca:	f802 3008 	strb.w	r3, [r2, r8]
80201dce:	2905      	cmp	r1, #5
80201dd0:	f108 0801 	add.w	r8, r8, #1
80201dd4:	da01      	bge.n	80201dda <_printf_fp_hex_real+0x182>
80201dd6:	2d00      	cmp	r5, #0
80201dd8:	dcf1      	bgt.n	80201dbe <_printf_fp_hex_real+0x166>
80201dda:	2100      	movs	r1, #0
80201ddc:	e00c      	b.n	80201df8 <_printf_fp_hex_real+0x1a0>
80201dde:	eb00 7319 	add.w	r3, r0, r9, lsr #28
80201de2:	1c49      	adds	r1, r1, #1
80201de4:	781b      	ldrb	r3, [r3, #0]
80201de6:	1e6d      	subs	r5, r5, #1
80201de8:	2908      	cmp	r1, #8
80201dea:	f802 3008 	strb.w	r3, [r2, r8]
80201dee:	ea4f 1909 	mov.w	r9, r9, lsl #4
80201df2:	f108 0801 	add.w	r8, r8, #1
80201df6:	da01      	bge.n	80201dfc <_printf_fp_hex_real+0x1a4>
80201df8:	2d00      	cmp	r5, #0
80201dfa:	dcf0      	bgt.n	80201dde <_printf_fp_hex_real+0x186>
80201dfc:	6821      	ldr	r1, [r4, #0]
80201dfe:	068b      	lsls	r3, r1, #26
80201e00:	d502      	bpl.n	80201e08 <_printf_fp_hex_real+0x1b0>
80201e02:	e016      	b.n	80201e32 <_printf_fp_hex_real+0x1da>
80201e04:	f1a8 0801 	sub.w	r8, r8, #1
80201e08:	45e0      	cmp	r8, ip
80201e0a:	dd05      	ble.n	80201e18 <_printf_fp_hex_real+0x1c0>
80201e0c:	eb02 0308 	add.w	r3, r2, r8
80201e10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
80201e14:	2b30      	cmp	r3, #48	@ 0x30
80201e16:	d0f5      	beq.n	80201e04 <_printf_fp_hex_real+0x1ac>
80201e18:	f1b8 0f00 	cmp.w	r8, #0
80201e1c:	dd09      	ble.n	80201e32 <_printf_fp_hex_real+0x1da>
80201e1e:	eb02 0308 	add.w	r3, r2, r8
80201e22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
80201e26:	2b2e      	cmp	r3, #46	@ 0x2e
80201e28:	d103      	bne.n	80201e32 <_printf_fp_hex_real+0x1da>
80201e2a:	0709      	lsls	r1, r1, #28
80201e2c:	d401      	bmi.n	80201e32 <_printf_fp_hex_real+0x1da>
80201e2e:	f1a8 0801 	sub.w	r8, r8, #1
80201e32:	2d00      	cmp	r5, #0
80201e34:	dd05      	ble.n	80201e42 <_printf_fp_hex_real+0x1ea>
80201e36:	213e      	movs	r1, #62	@ 0x3e
80201e38:	f802 1008 	strb.w	r1, [r2, r8]
80201e3c:	1e6d      	subs	r5, r5, #1
80201e3e:	f108 0801 	add.w	r8, r8, #1
80201e42:	7c40      	ldrb	r0, [r0, #17]
80201e44:	2e00      	cmp	r6, #0
80201e46:	f802 0008 	strb.w	r0, [r2, r8]
80201e4a:	f108 0801 	add.w	r8, r8, #1
80201e4e:	da04      	bge.n	80201e5a <_printf_fp_hex_real+0x202>
80201e50:	202d      	movs	r0, #45	@ 0x2d
80201e52:	4276      	negs	r6, r6
80201e54:	f802 0008 	strb.w	r0, [r2, r8]
80201e58:	e002      	b.n	80201e60 <_printf_fp_hex_real+0x208>
80201e5a:	202b      	movs	r0, #43	@ 0x2b
80201e5c:	f802 0008 	strb.w	r0, [r2, r8]
80201e60:	210a      	movs	r1, #10
80201e62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
80201e66:	4286      	cmp	r6, r0
80201e68:	f108 0801 	add.w	r8, r8, #1
80201e6c:	db0b      	blt.n	80201e86 <_printf_fp_hex_real+0x22e>
80201e6e:	fb96 f3f0 	sdiv	r3, r6, r0
80201e72:	3330      	adds	r3, #48	@ 0x30
80201e74:	f802 3008 	strb.w	r3, [r2, r8]
80201e78:	fb96 f3f0 	sdiv	r3, r6, r0
80201e7c:	f108 0801 	add.w	r8, r8, #1
80201e80:	fb00 6613 	mls	r6, r0, r3, r6
80201e84:	e001      	b.n	80201e8a <_printf_fp_hex_real+0x232>
80201e86:	2e64      	cmp	r6, #100	@ 0x64
80201e88:	db0c      	blt.n	80201ea4 <_printf_fp_hex_real+0x24c>
80201e8a:	2064      	movs	r0, #100	@ 0x64
80201e8c:	fb96 f3f0 	sdiv	r3, r6, r0
80201e90:	3330      	adds	r3, #48	@ 0x30
80201e92:	f802 3008 	strb.w	r3, [r2, r8]
80201e96:	fb96 f3f0 	sdiv	r3, r6, r0
80201e9a:	f108 0801 	add.w	r8, r8, #1
80201e9e:	fb00 6613 	mls	r6, r0, r3, r6
80201ea2:	e001      	b.n	80201ea8 <_printf_fp_hex_real+0x250>
80201ea4:	2e0a      	cmp	r6, #10
80201ea6:	db06      	blt.n	80201eb6 <_printf_fp_hex_real+0x25e>
80201ea8:	fb96 f0f1 	sdiv	r0, r6, r1
80201eac:	3030      	adds	r0, #48	@ 0x30
80201eae:	f802 0008 	strb.w	r0, [r2, r8]
80201eb2:	f108 0801 	add.w	r8, r8, #1
80201eb6:	fb96 f0f1 	sdiv	r0, r6, r1
80201eba:	fb01 6010 	mls	r0, r1, r0, r6
80201ebe:	3030      	adds	r0, #48	@ 0x30
80201ec0:	f802 0008 	strb.w	r0, [r2, r8]
80201ec4:	69a1      	ldr	r1, [r4, #24]
80201ec6:	f108 0801 	add.w	r8, r8, #1
80201eca:	eb08 0205 	add.w	r2, r8, r5
80201ece:	eb02 000a 	add.w	r0, r2, sl
80201ed2:	1a08      	subs	r0, r1, r0
80201ed4:	61a0      	str	r0, [r4, #24]
80201ed6:	7820      	ldrb	r0, [r4, #0]
80201ed8:	06c0      	lsls	r0, r0, #27
80201eda:	d402      	bmi.n	80201ee2 <_printf_fp_hex_real+0x28a>
80201edc:	4620      	mov	r0, r4
80201ede:	f7fe fe53 	bl	80200b88 <_printf_pre_padding>
80201ee2:	6a21      	ldr	r1, [r4, #32]
80201ee4:	ae08      	add	r6, sp, #32
80201ee6:	eb01 000a 	add.w	r0, r1, sl
80201eea:	6220      	str	r0, [r4, #32]
80201eec:	e004      	b.n	80201ef8 <_printf_fp_hex_real+0x2a0>
80201eee:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201ef2:	f816 0b01 	ldrb.w	r0, [r6], #1
80201ef6:	4790      	blx	r2
80201ef8:	f1ba 0a01 	subs.w	sl, sl, #1
80201efc:	d2f7      	bcs.n	80201eee <_printf_fp_hex_real+0x296>
80201efe:	7820      	ldrb	r0, [r4, #0]
80201f00:	06c0      	lsls	r0, r0, #27
80201f02:	d502      	bpl.n	80201f0a <_printf_fp_hex_real+0x2b2>
80201f04:	4620      	mov	r0, r4
80201f06:	f7fe fe3f 	bl	80200b88 <_printf_pre_padding>
80201f0a:	466e      	mov	r6, sp
80201f0c:	e009      	b.n	80201f22 <_printf_fp_hex_real+0x2ca>
80201f0e:	f816 0b01 	ldrb.w	r0, [r6], #1
80201f12:	283e      	cmp	r0, #62	@ 0x3e
80201f14:	d00f      	beq.n	80201f36 <_printf_fp_hex_real+0x2de>
80201f16:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201f1a:	4790      	blx	r2
80201f1c:	6a20      	ldr	r0, [r4, #32]
80201f1e:	1c40      	adds	r0, r0, #1
80201f20:	6220      	str	r0, [r4, #32]
80201f22:	f1b8 0801 	subs.w	r8, r8, #1
80201f26:	d2f2      	bcs.n	80201f0e <_printf_fp_hex_real+0x2b6>
80201f28:	4620      	mov	r0, r4
80201f2a:	f7fe fe43 	bl	80200bb4 <_printf_post_padding>
80201f2e:	b009      	add	sp, #36	@ 0x24
80201f30:	2003      	movs	r0, #3
80201f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
80201f36:	6a20      	ldr	r0, [r4, #32]
80201f38:	4428      	add	r0, r5
80201f3a:	6220      	str	r0, [r4, #32]
80201f3c:	e003      	b.n	80201f46 <_printf_fp_hex_real+0x2ee>
80201f3e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80201f42:	2030      	movs	r0, #48	@ 0x30
80201f44:	4790      	blx	r2
80201f46:	1e6d      	subs	r5, r5, #1
80201f48:	d3eb      	bcc.n	80201f22 <_printf_fp_hex_real+0x2ca>
80201f4a:	e7f8      	b.n	80201f3e <_printf_fp_hex_real+0x2e6>
80201f4c:	000043b2 	.word	0x000043b2
80201f50:	fffffc02 	.word	0xfffffc02

80201f54 <_printf_input_char>:
_printf_input_char():
80201f54:	6901      	ldr	r1, [r0, #16]
80201f56:	1c4a      	adds	r2, r1, #1
80201f58:	6102      	str	r2, [r0, #16]
80201f5a:	7808      	ldrb	r0, [r1, #0]
80201f5c:	4770      	bx	lr

80201f5e <_printf_char_common>:
_printf_char_common():
80201f5e:	b500      	push	{lr}
80201f60:	b08f      	sub	sp, #60	@ 0x3c
80201f62:	e9cd 3101 	strd	r3, r1, [sp, #4]
80201f66:	2100      	movs	r1, #0
80201f68:	9105      	str	r1, [sp, #20]
80201f6a:	4905      	ldr	r1, [pc, #20]	@ (80201f80 <_printf_char_common+0x22>)
80201f6c:	4479      	add	r1, pc
80201f6e:	e9cd 1003 	strd	r1, r0, [sp, #12]
80201f72:	4611      	mov	r1, r2
80201f74:	4668      	mov	r0, sp
80201f76:	f7fe ffe9 	bl	80200f4c <__printf>
80201f7a:	b00f      	add	sp, #60	@ 0x3c
80201f7c:	bd00      	pop	{pc}
80201f7e:	0000      	.short	0x0000
80201f80:	ffffffe5 	.word	0xffffffe5

80201f84 <_printf_cs_common>:
_printf_cs_common():
80201f84:	b510      	push	{r4, lr}
80201f86:	6943      	ldr	r3, [r0, #20]
80201f88:	b113      	cbz	r3, 80201f90 <_printf_cs_common+0xc>
80201f8a:	f3af 8000 	nop.w
80201f8e:	e001      	b.n	80201f94 <_printf_cs_common+0x10>
80201f90:	f7fe fe33 	bl	80200bfa <_printf_str>
80201f94:	2001      	movs	r0, #1
80201f96:	bd10      	pop	{r4, pc}

80201f98 <_printf_char>:
_printf_char():
80201f98:	7812      	ldrb	r2, [r2, #0]
80201f9a:	f100 0124 	add.w	r1, r0, #36	@ 0x24
80201f9e:	700a      	strb	r2, [r1, #0]
80201fa0:	2200      	movs	r2, #0
80201fa2:	704a      	strb	r2, [r1, #1]
80201fa4:	2201      	movs	r2, #1
80201fa6:	e7ed      	b.n	80201f84 <_printf_cs_common>

80201fa8 <_printf_string>:
_printf_string():
80201fa8:	6811      	ldr	r1, [r2, #0]
80201faa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
80201fae:	e7e9      	b.n	80201f84 <_printf_cs_common>

80201fb0 <_printf_lcs_common>:
_printf_lcs_common():
80201fb0:	b510      	push	{r4, lr}
80201fb2:	6943      	ldr	r3, [r0, #20]
80201fb4:	b113      	cbz	r3, 80201fbc <_printf_lcs_common+0xc>
80201fb6:	f3af 8000 	nop.w
80201fba:	e001      	b.n	80201fc0 <_printf_lcs_common+0x10>
80201fbc:	f7fe fea8 	bl	80200d10 <_printf_wctomb>
80201fc0:	2001      	movs	r0, #1
80201fc2:	bd10      	pop	{r4, pc}

80201fc4 <_printf_wchar>:
_printf_wchar():
80201fc4:	6812      	ldr	r2, [r2, #0]
80201fc6:	f100 0124 	add.w	r1, r0, #36	@ 0x24
80201fca:	6242      	str	r2, [r0, #36]	@ 0x24
80201fcc:	2200      	movs	r2, #0
80201fce:	6282      	str	r2, [r0, #40]	@ 0x28
80201fd0:	2201      	movs	r2, #1
80201fd2:	e7ed      	b.n	80201fb0 <_printf_lcs_common>

80201fd4 <_printf_wstring>:
_printf_wstring():
80201fd4:	6811      	ldr	r1, [r2, #0]
80201fd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
80201fda:	e7e9      	b.n	80201fb0 <_printf_lcs_common>

80201fdc <ferror>:
ferror():
80201fdc:	7b00      	ldrb	r0, [r0, #12]
80201fde:	f000 0080 	and.w	r0, r0, #128	@ 0x80
80201fe2:	4770      	bx	lr

80201fe4 <_ftell_internal>:
ftell():
80201fe4:	b510      	push	{r4, lr}
_ftell_internal():
80201fe6:	4601      	mov	r1, r0
80201fe8:	68c2      	ldr	r2, [r0, #12]
80201fea:	0790      	lsls	r0, r2, #30
80201fec:	d003      	beq.n	80201ff6 <_ftell_internal+0x12>
80201fee:	0690      	lsls	r0, r2, #26
80201ff0:	d507      	bpl.n	80202002 <_ftell_internal+0x1e>
80201ff2:	6a88      	ldr	r0, [r1, #40]	@ 0x28
80201ff4:	e00a      	b.n	8020200c <_ftell_internal+0x28>
80201ff6:	f000 f923 	bl	80202240 <__aeabi_errno_addr>
80201ffa:	2101      	movs	r1, #1
80201ffc:	6001      	str	r1, [r0, #0]
80201ffe:	1e88      	subs	r0, r1, #2
80202000:	bd10      	pop	{r4, pc}
80202002:	698b      	ldr	r3, [r1, #24]
80202004:	6848      	ldr	r0, [r1, #4]
80202006:	4418      	add	r0, r3
80202008:	690b      	ldr	r3, [r1, #16]
8020200a:	1ac0      	subs	r0, r0, r3
8020200c:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
80202010:	b11b      	cbz	r3, 8020201a <_ftell_internal+0x36>
80202012:	f891 1049 	ldrb.w	r1, [r1, #73]	@ 0x49
80202016:	1a40      	subs	r0, r0, r1
80202018:	bd10      	pop	{r4, pc}
8020201a:	0311      	lsls	r1, r2, #12
8020201c:	d5fc      	bpl.n	80202018 <_ftell_internal+0x34>
8020201e:	2800      	cmp	r0, #0
80202020:	ddfa      	ble.n	80202018 <_ftell_internal+0x34>
80202022:	1e40      	subs	r0, r0, #1
80202024:	bd10      	pop	{r4, pc}

80202026 <setvbuf>:
setvbuf():
80202026:	b570      	push	{r4, r5, r6, lr}
80202028:	68c4      	ldr	r4, [r0, #12]
8020202a:	07a5      	lsls	r5, r4, #30
8020202c:	d013      	beq.n	80202056 <setvbuf+0x30>
8020202e:	0265      	lsls	r5, r4, #9
80202030:	d411      	bmi.n	80202056 <setvbuf+0x30>
80202032:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
80202036:	d009      	beq.n	8020204c <setvbuf+0x26>
80202038:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
8020203c:	d006      	beq.n	8020204c <setvbuf+0x26>
8020203e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
80202042:	d108      	bne.n	80202056 <setvbuf+0x30>
80202044:	2301      	movs	r3, #1
80202046:	f100 0124 	add.w	r1, r0, #36	@ 0x24
8020204a:	e006      	b.n	8020205a <setvbuf+0x34>
8020204c:	1e5d      	subs	r5, r3, #1
8020204e:	f06f 467f 	mvn.w	r6, #4278190080	@ 0xff000000
80202052:	42b5      	cmp	r5, r6
80202054:	d301      	bcc.n	8020205a <setvbuf+0x34>
80202056:	2001      	movs	r0, #1
80202058:	bd70      	pop	{r4, r5, r6, pc}
8020205a:	6101      	str	r1, [r0, #16]
8020205c:	61c3      	str	r3, [r0, #28]
8020205e:	6041      	str	r1, [r0, #4]
80202060:	f424 6170 	bic.w	r1, r4, #3840	@ 0xf00
80202064:	4311      	orrs	r1, r2
80202066:	60c1      	str	r1, [r0, #12]
80202068:	2000      	movs	r0, #0
8020206a:	bd70      	pop	{r4, r5, r6, pc}

8020206c <freopen>:
_freopen_locked():
8020206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
freopen():
80202070:	460c      	mov	r4, r1
80202072:	4616      	mov	r6, r2
80202074:	0007      	movs	r7, r0
80202076:	d047      	beq.n	80202108 <freopen+0x9c>
80202078:	4610      	mov	r0, r2
8020207a:	f000 f86f 	bl	8020215c <_fclose_internal>
8020207e:	7820      	ldrb	r0, [r4, #0]
80202080:	1c61      	adds	r1, r4, #1
80202082:	2861      	cmp	r0, #97	@ 0x61
80202084:	d00a      	beq.n	8020209c <freopen+0x30>
80202086:	2872      	cmp	r0, #114	@ 0x72
80202088:	d002      	beq.n	80202090 <freopen+0x24>
8020208a:	2877      	cmp	r0, #119	@ 0x77
8020208c:	d13c      	bne.n	80202108 <freopen+0x9c>
8020208e:	e002      	b.n	80202096 <freopen+0x2a>
80202090:	2501      	movs	r5, #1
80202092:	2400      	movs	r4, #0
80202094:	e005      	b.n	802020a2 <freopen+0x36>
80202096:	2502      	movs	r5, #2
80202098:	2404      	movs	r4, #4
8020209a:	e002      	b.n	802020a2 <freopen+0x36>
8020209c:	2408      	movs	r4, #8
8020209e:	f248 0502 	movw	r5, #32770	@ 0x8002
802020a2:	f811 0b01 	ldrb.w	r0, [r1], #1
802020a6:	282b      	cmp	r0, #43	@ 0x2b
802020a8:	d006      	beq.n	802020b8 <freopen+0x4c>
802020aa:	2862      	cmp	r0, #98	@ 0x62
802020ac:	d009      	beq.n	802020c2 <freopen+0x56>
802020ae:	f811 0c01 	ldrb.w	r0, [r1, #-1]
802020b2:	2874      	cmp	r0, #116	@ 0x74
802020b4:	d00a      	beq.n	802020cc <freopen+0x60>
802020b6:	e00b      	b.n	802020d0 <freopen+0x64>
802020b8:	f045 0503 	orr.w	r5, r5, #3
802020bc:	f044 0402 	orr.w	r4, r4, #2
802020c0:	e7ef      	b.n	802020a2 <freopen+0x36>
802020c2:	f045 0504 	orr.w	r5, r5, #4
802020c6:	f044 0401 	orr.w	r4, r4, #1
802020ca:	e7ea      	b.n	802020a2 <freopen+0x36>
802020cc:	f044 0410 	orr.w	r4, r4, #16
802020d0:	4638      	mov	r0, r7
802020d2:	4621      	mov	r1, r4
802020d4:	f002 fcfc 	bl	80204ad0 <_sys_open>
802020d8:	1c41      	adds	r1, r0, #1
802020da:	d015      	beq.n	80202108 <freopen+0x9c>
802020dc:	2100      	movs	r1, #0
802020de:	6131      	str	r1, [r6, #16]
802020e0:	6071      	str	r1, [r6, #4]
802020e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
802020e6:	60f5      	str	r5, [r6, #12]
802020e8:	61f1      	str	r1, [r6, #28]
802020ea:	6170      	str	r0, [r6, #20]
802020ec:	0720      	lsls	r0, r4, #28
802020ee:	d504      	bpl.n	802020fa <freopen+0x8e>
802020f0:	4630      	mov	r0, r6
802020f2:	2202      	movs	r2, #2
802020f4:	2100      	movs	r1, #0
802020f6:	f7ff f8df 	bl	802012b8 <_fseek>
802020fa:	6d30      	ldr	r0, [r6, #80]	@ 0x50
802020fc:	f040 0001 	orr.w	r0, r0, #1
80202100:	6530      	str	r0, [r6, #80]	@ 0x50
80202102:	4630      	mov	r0, r6
80202104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
80202108:	2000      	movs	r0, #0
8020210a:	e7fb      	b.n	80202104 <freopen+0x98>

8020210c <fopen>:
fopen():
8020210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
80202110:	460d      	mov	r5, r1
80202112:	4606      	mov	r6, r0
80202114:	4c10      	ldr	r4, [pc, #64]	@ (80202158 <fopen+0x4c>)
80202116:	6d20      	ldr	r0, [r4, #80]	@ 0x50
80202118:	07c1      	lsls	r1, r0, #31
8020211a:	d004      	beq.n	80202126 <fopen+0x1a>
8020211c:	0841      	lsrs	r1, r0, #1
8020211e:	d004      	beq.n	8020212a <fopen+0x1e>
80202120:	f020 0401 	bic.w	r4, r0, #1
80202124:	e7f7      	b.n	80202116 <fopen+0xa>
80202126:	4622      	mov	r2, r4
80202128:	e00e      	b.n	80202148 <fopen+0x3c>
8020212a:	2054      	movs	r0, #84	@ 0x54
8020212c:	f7ff fa92 	bl	80201654 <malloc>
80202130:	0007      	movs	r7, r0
80202132:	d00e      	beq.n	80202152 <fopen+0x46>
80202134:	6d20      	ldr	r0, [r4, #80]	@ 0x50
80202136:	f047 0101 	orr.w	r1, r7, #1
8020213a:	4308      	orrs	r0, r1
8020213c:	2154      	movs	r1, #84	@ 0x54
8020213e:	6520      	str	r0, [r4, #80]	@ 0x50
80202140:	4638      	mov	r0, r7
80202142:	f7fe fca4 	bl	80200a8e <__aeabi_memclr4>
80202146:	463a      	mov	r2, r7
80202148:	4629      	mov	r1, r5
8020214a:	4630      	mov	r0, r6
8020214c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
80202150:	e78c      	b.n	8020206c <freopen>
80202152:	2000      	movs	r0, #0
80202154:	e7d6      	b.n	80202104 <freopen+0x98>
80202156:	0000      	.short	0x0000
80202158:	20000630 	.word	0x20000630

8020215c <_fclose_internal>:
fclose():
8020215c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_fclose_internal():
80202160:	4604      	mov	r4, r0
80202162:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
80202166:	2600      	movs	r6, #0
80202168:	68c5      	ldr	r5, [r0, #12]
8020216a:	e9d4 9704 	ldrd	r9, r7, [r4, #16]
8020216e:	07a8      	lsls	r0, r5, #30
80202170:	d018      	beq.n	802021a4 <_fclose_internal+0x48>
80202172:	4620      	mov	r0, r4
80202174:	f7ff f95c 	bl	80201430 <_fflush>
80202178:	4638      	mov	r0, r7
8020217a:	f002 fc8d 	bl	80204a98 <_sys_close>
8020217e:	2800      	cmp	r0, #0
80202180:	da00      	bge.n	80202184 <_fclose_internal+0x28>
80202182:	4646      	mov	r6, r8
80202184:	0528      	lsls	r0, r5, #20
80202186:	d502      	bpl.n	8020218e <_fclose_internal+0x32>
80202188:	4648      	mov	r0, r9
8020218a:	f7ff fa92 	bl	802016b2 <free>
8020218e:	214c      	movs	r1, #76	@ 0x4c
80202190:	4620      	mov	r0, r4
80202192:	f7fe fc7c 	bl	80200a8e <__aeabi_memclr4>
80202196:	6d20      	ldr	r0, [r4, #80]	@ 0x50
80202198:	f020 0001 	bic.w	r0, r0, #1
8020219c:	6520      	str	r0, [r4, #80]	@ 0x50
8020219e:	4630      	mov	r0, r6
802021a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
802021a4:	4640      	mov	r0, r8
802021a6:	e7fb      	b.n	802021a0 <_fclose_internal+0x44>

802021a8 <_c32rtomb>:
_wcrtomb():
802021a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
_c32rtomb():
802021ac:	4616      	mov	r6, r2
802021ae:	460c      	mov	r4, r1
802021b0:	4605      	mov	r5, r0
802021b2:	f000 f835 	bl	80202220 <__rt_ctype_table>
802021b6:	6803      	ldr	r3, [r0, #0]
802021b8:	f893 0101 	ldrb.w	r0, [r3, #257]	@ 0x101
802021bc:	2801      	cmp	r0, #1
802021be:	d007      	beq.n	802021d0 <_c32rtomb+0x28>
802021c0:	2cff      	cmp	r4, #255	@ 0xff
802021c2:	d812      	bhi.n	802021ea <_c32rtomb+0x42>
802021c4:	5d18      	ldrb	r0, [r3, r4]
802021c6:	b180      	cbz	r0, 802021ea <_c32rtomb+0x42>
802021c8:	2001      	movs	r0, #1
802021ca:	702c      	strb	r4, [r5, #0]
802021cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
802021d0:	f8d3 0107 	ldr.w	r0, [r3, #263]	@ 0x107
802021d4:	4632      	mov	r2, r6
802021d6:	4621      	mov	r1, r4
802021d8:	f203 1307 	addw	r3, r3, #263	@ 0x107
802021dc:	18c7      	adds	r7, r0, r3
802021de:	4628      	mov	r0, r5
802021e0:	46bc      	mov	ip, r7
802021e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
802021e6:	2301      	movs	r3, #1
802021e8:	4760      	bx	ip
802021ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
802021ee:	e7ed      	b.n	802021cc <_c32rtomb+0x24>

802021f0 <abort>:
abort():
802021f0:	b510      	push	{r4, lr}
802021f2:	2000      	movs	r0, #0
802021f4:	f000 f936 	bl	80202464 <__rt_SIGABRT>
802021f8:	f7fe fb98 	bl	8020092c <__rt_lib_shutdown>
802021fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80202200:	2001      	movs	r0, #1
80202202:	f000 b807 	b.w	80202214 <_sys_exit>

80202206 <__rt_SIGRTRED>:
__rt_SIGRTRED():
80202206:	b510      	push	{r4, lr}
80202208:	f000 f934 	bl	80202474 <__rt_SIGRTRED_inner>
8020220c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80202210:	f000 b923 	b.w	8020245a <__sig_exit>

80202214 <_sys_exit>:
_sys_exit():
80202214:	4901      	ldr	r1, [pc, #4]	@ (8020221c <_sys_exit+0x8>)
80202216:	2018      	movs	r0, #24
80202218:	beab      	bkpt	0x00ab
8020221a:	e7fe      	b.n	8020221a <_sys_exit+0x6>
8020221c:	00020026 	.word	0x00020026

80202220 <__rt_ctype_table>:
__rt_ctype_table():
80202220:	b510      	push	{r4, lr}
80202222:	f000 f809 	bl	80202238 <__rt_locale>
80202226:	1d00      	adds	r0, r0, #4
80202228:	bd10      	pop	{r4, pc}
8020222a:	bf00      	nop
8020222c:	00003e35 	.word	0x00003e35

80202230 <__rt_heap_descriptor>:
__rt_heap_descriptor():
80202230:	4800      	ldr	r0, [pc, #0]	@ (80202234 <__rt_heap_descriptor+0x4>)
80202232:	4770      	bx	lr
80202234:	20000734 	.word	0x20000734

80202238 <__rt_locale>:
__rt_locale():
80202238:	4800      	ldr	r0, [pc, #0]	@ (8020223c <__rt_locale+0x4>)
8020223a:	4770      	bx	lr
8020223c:	2000074c 	.word	0x2000074c

80202240 <__aeabi_errno_addr>:
__errno$intlibspace():
80202240:	4800      	ldr	r0, [pc, #0]	@ (80202244 <__aeabi_errno_addr+0x4>)
__aeabi_errno_addr():
80202242:	4770      	bx	lr
80202244:	2000072c 	.word	0x2000072c

80202248 <__use_no_heap>:
__use_no_heap():
80202248:	4770      	bx	lr

8020224a <__heap$guard>:
__heap$guard():
8020224a:	4770      	bx	lr

8020224c <_terminate_user_alloc>:
_terminate_user_alloc():
8020224c:	4770      	bx	lr

8020224e <_init_user_alloc>:
_init_user_alloc():
8020224e:	4770      	bx	lr

80202250 <__Heap_Full>:
__Heap_Full():
80202250:	b538      	push	{r3, r4, r5, lr}
80202252:	4604      	mov	r4, r0
80202254:	460a      	mov	r2, r1
80202256:	2000      	movs	r0, #0
80202258:	4669      	mov	r1, sp
8020225a:	f3af 8000 	nop.w
8020225e:	2800      	cmp	r0, #0
80202260:	bf08      	it	eq
80202262:	bd38      	popeq	{r3, r4, r5, pc}
80202264:	4602      	mov	r2, r0
80202266:	9900      	ldr	r1, [sp, #0]
80202268:	4620      	mov	r0, r4
8020226a:	f000 f91e 	bl	802024aa <__Heap_ProvideMemory>
8020226e:	2001      	movs	r0, #1
80202270:	bd38      	pop	{r3, r4, r5, pc}

80202272 <__Heap_Broken>:
__Heap_Broken():
80202272:	2001      	movs	r0, #1
80202274:	f000 b964 	b.w	80202540 <__rt_SIGRTMEM>

80202278 <_init_alloc>:
_init_alloc():
80202278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
8020227a:	f3af 8000 	nop.w
8020227e:	4605      	mov	r5, r0
80202280:	2000      	movs	r0, #0
80202282:	460c      	mov	r4, r1
80202284:	200c      	movs	r0, #12
80202286:	bf00      	nop
80202288:	4606      	mov	r6, r0
8020228a:	19a8      	adds	r0, r5, r6
8020228c:	42a0      	cmp	r0, r4
8020228e:	d90d      	bls.n	802022ac <_init_alloc+0x34>
80202290:	4632      	mov	r2, r6
80202292:	4669      	mov	r1, sp
80202294:	2000      	movs	r0, #0
80202296:	f3af 8000 	nop.w
8020229a:	0007      	movs	r7, r0
8020229c:	bf08      	it	eq
8020229e:	f000 f94f 	bleq	80202540 <__rt_SIGRTMEM>
802022a2:	9800      	ldr	r0, [sp, #0]
802022a4:	42a0      	cmp	r0, r4
802022a6:	bf18      	it	ne
802022a8:	4605      	movne	r5, r0
802022aa:	19c4      	adds	r4, r0, r7
802022ac:	f7ff ffc0 	bl	80202230 <__rt_heap_descriptor>
802022b0:	6005      	str	r5, [r0, #0]
802022b2:	4607      	mov	r7, r0
802022b4:	1df0      	adds	r0, r6, #7
802022b6:	f020 0007 	bic.w	r0, r0, #7
802022ba:	1946      	adds	r6, r0, r5
802022bc:	4628      	mov	r0, r5
802022be:	f000 f80a 	bl	802022d6 <__Heap_Initialize>
802022c2:	42b4      	cmp	r4, r6
802022c4:	bf08      	it	eq
802022c6:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
802022c8:	1ba2      	subs	r2, r4, r6
802022ca:	4631      	mov	r1, r6
802022cc:	6838      	ldr	r0, [r7, #0]
802022ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
802022d2:	f000 b8ea 	b.w	802024aa <__Heap_ProvideMemory>

802022d6 <__Heap_Initialize>:
__Heap_Initialize():
802022d6:	2100      	movs	r1, #0
802022d8:	6001      	str	r1, [r0, #0]
802022da:	6041      	str	r1, [r0, #4]
802022dc:	4770      	bx	lr

802022de <__Heap_DescSize>:
__Heap_DescSize():
802022de:	200c      	movs	r0, #12
802022e0:	4770      	bx	lr
	...

802022e4 <_printf_fp_infnan>:
_printf_fp_infnan():
802022e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
802022e8:	461f      	mov	r7, r3
802022ea:	4604      	mov	r4, r0
802022ec:	2603      	movs	r6, #3
802022ee:	6801      	ldr	r1, [r0, #0]
802022f0:	2a07      	cmp	r2, #7
802022f2:	f401 6000 	and.w	r0, r1, #2048	@ 0x800
802022f6:	db04      	blt.n	80202302 <_printf_fp_infnan+0x1e>
802022f8:	b108      	cbz	r0, 802022fe <_printf_fp_infnan+0x1a>
802022fa:	a516      	add	r5, pc, #88	@ (adr r5, 80202354 <_printf_fp_infnan+0x70>)
802022fc:	e005      	b.n	8020230a <_printf_fp_infnan+0x26>
802022fe:	a516      	add	r5, pc, #88	@ (adr r5, 80202358 <_printf_fp_infnan+0x74>)
80202300:	e003      	b.n	8020230a <_printf_fp_infnan+0x26>
80202302:	b108      	cbz	r0, 80202308 <_printf_fp_infnan+0x24>
80202304:	a515      	add	r5, pc, #84	@ (adr r5, 8020235c <_printf_fp_infnan+0x78>)
80202306:	e000      	b.n	8020230a <_printf_fp_infnan+0x26>
80202308:	a515      	add	r5, pc, #84	@ (adr r5, 80202360 <_printf_fp_infnan+0x7c>)
8020230a:	f021 0010 	bic.w	r0, r1, #16
8020230e:	6020      	str	r0, [r4, #0]
80202310:	69a0      	ldr	r0, [r4, #24]
80202312:	1ec0      	subs	r0, r0, #3
80202314:	61a0      	str	r0, [r4, #24]
80202316:	b10f      	cbz	r7, 8020231c <_printf_fp_infnan+0x38>
80202318:	1e40      	subs	r0, r0, #1
8020231a:	61a0      	str	r0, [r4, #24]
8020231c:	4620      	mov	r0, r4
8020231e:	f7fe fc33 	bl	80200b88 <_printf_pre_padding>
80202322:	b14f      	cbz	r7, 80202338 <_printf_fp_infnan+0x54>
80202324:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80202328:	4638      	mov	r0, r7
8020232a:	4790      	blx	r2
8020232c:	6a20      	ldr	r0, [r4, #32]
8020232e:	1c40      	adds	r0, r0, #1
80202330:	6220      	str	r0, [r4, #32]
80202332:	1cc0      	adds	r0, r0, #3
80202334:	6220      	str	r0, [r4, #32]
80202336:	e006      	b.n	80202346 <_printf_fp_infnan+0x62>
80202338:	6a20      	ldr	r0, [r4, #32]
8020233a:	e7fa      	b.n	80202332 <_printf_fp_infnan+0x4e>
8020233c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
80202340:	f815 0b01 	ldrb.w	r0, [r5], #1
80202344:	4790      	blx	r2
80202346:	1e76      	subs	r6, r6, #1
80202348:	d2f8      	bcs.n	8020233c <_printf_fp_infnan+0x58>
8020234a:	4620      	mov	r0, r4
8020234c:	f7fe fc32 	bl	80200bb4 <_printf_post_padding>
80202350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
80202354:	004e414e 	.word	0x004e414e
80202358:	006e616e 	.word	0x006e616e
8020235c:	00464e49 	.word	0x00464e49
80202360:	00666e69 	.word	0x00666e69

80202364 <_btod_etento>:
_btod_etento():
80202364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
80202368:	4681      	mov	r9, r0
8020236a:	4616      	mov	r6, r2
8020236c:	b08a      	sub	sp, #40	@ 0x28
8020236e:	4835      	ldr	r0, [pc, #212]	@ (80202444 <_btod_etento+0xe0>)
80202370:	4478      	add	r0, pc
80202372:	c80d      	ldmia	r0, {r0, r2, r3}
80202374:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
80202378:	4832      	ldr	r0, [pc, #200]	@ (80202444 <_btod_etento+0xe0>)
8020237a:	4478      	add	r0, pc
8020237c:	1c80      	adds	r0, r0, #2
8020237e:	ac03      	add	r4, sp, #12
80202380:	c80d      	ldmia	r0, {r0, r2, r3}
80202382:	e884 000d 	stmia.w	r4, {r0, r2, r3}
80202386:	f641 309b 	movw	r0, #7067	@ 0x1b9b
8020238a:	4408      	add	r0, r1
8020238c:	2137      	movs	r1, #55	@ 0x37
8020238e:	fb90 f2f1 	sdiv	r2, r0, r1
80202392:	fb90 f5f1 	sdiv	r5, r0, r1
80202396:	f1a5 0580 	sub.w	r5, r5, #128	@ 0x80
8020239a:	fb01 0412 	mls	r4, r1, r2, r0
8020239e:	3c1b      	subs	r4, #27
802023a0:	d502      	bpl.n	802023a8 <_btod_etento+0x44>
802023a2:	4264      	negs	r4, r4
802023a4:	2001      	movs	r0, #1
802023a6:	e000      	b.n	802023aa <_btod_etento+0x46>
802023a8:	2000      	movs	r0, #0
802023aa:	f8df a098 	ldr.w	sl, [pc, #152]	@ 80202444 <_btod_etento+0xe0>
802023ae:	4680      	mov	r8, r0
802023b0:	2700      	movs	r7, #0
802023b2:	44fa      	add	sl, pc
802023b4:	f1aa 0abe 	sub.w	sl, sl, #190	@ 0xbe
802023b8:	e00e      	b.n	802023d8 <_btod_etento+0x74>
802023ba:	07e0      	lsls	r0, r4, #31
802023bc:	d00a      	beq.n	802023d4 <_btod_etento+0x70>
802023be:	4632      	mov	r2, r6
802023c0:	4668      	mov	r0, sp
802023c2:	eb07 0147 	add.w	r1, r7, r7, lsl #1
802023c6:	2301      	movs	r3, #1
802023c8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
802023cc:	f003 fccd 	bl	80205d6a <_btod_emul>
802023d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
802023d4:	1064      	asrs	r4, r4, #1
802023d6:	1c7f      	adds	r7, r7, #1
802023d8:	2c00      	cmp	r4, #0
802023da:	d1ee      	bne.n	802023ba <_btod_etento+0x56>
802023dc:	4f19      	ldr	r7, [pc, #100]	@ (80202444 <_btod_etento+0xe0>)
802023de:	447f      	add	r7, pc
802023e0:	3fae      	subs	r7, #174	@ 0xae
802023e2:	e019      	b.n	80202418 <_btod_etento+0xb4>
802023e4:	07e8      	lsls	r0, r5, #31
802023e6:	d015      	beq.n	80202414 <_btod_etento+0xb0>
802023e8:	eb07 1004 	add.w	r0, r7, r4, lsl #4
802023ec:	f10d 0a18 	add.w	sl, sp, #24
802023f0:	e890 000e 	ldmia.w	r0, {r1, r2, r3}
802023f4:	e88a 000e 	stmia.w	sl, {r1, r2, r3}
802023f8:	68c0      	ldr	r0, [r0, #12]
802023fa:	42f0      	cmn	r0, r6
802023fc:	d101      	bne.n	80202402 <_btod_etento+0x9e>
802023fe:	1998      	adds	r0, r3, r6
80202400:	9008      	str	r0, [sp, #32]
80202402:	4632      	mov	r2, r6
80202404:	2301      	movs	r3, #1
80202406:	a906      	add	r1, sp, #24
80202408:	a803      	add	r0, sp, #12
8020240a:	f003 fcae 	bl	80205d6a <_btod_emul>
8020240e:	ab03      	add	r3, sp, #12
80202410:	e883 0007 	stmia.w	r3, {r0, r1, r2}
80202414:	106d      	asrs	r5, r5, #1
80202416:	1c64      	adds	r4, r4, #1
80202418:	2d00      	cmp	r5, #0
8020241a:	d1e3      	bne.n	802023e4 <_btod_etento+0x80>
8020241c:	f04f 0301 	mov.w	r3, #1
80202420:	4632      	mov	r2, r6
80202422:	4669      	mov	r1, sp
80202424:	f1b8 0f00 	cmp.w	r8, #0
80202428:	a803      	add	r0, sp, #12
8020242a:	d002      	beq.n	80202432 <_btod_etento+0xce>
8020242c:	f003 fc88 	bl	80205d40 <_btod_ediv>
80202430:	e001      	b.n	80202436 <_btod_etento+0xd2>
80202432:	f003 fc9a 	bl	80205d6a <_btod_emul>
80202436:	e9c9 0100 	strd	r0, r1, [r9]
8020243a:	f8c9 2008 	str.w	r2, [r9, #8]
8020243e:	b00a      	add	sp, #40	@ 0x28
80202440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
80202444:	00003e30 	.word	0x00003e30

80202448 <exit>:
exit():
80202448:	b510      	push	{r4, lr}
8020244a:	4604      	mov	r4, r0
8020244c:	f3af 8000 	nop.w
80202450:	4620      	mov	r0, r4
80202452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80202456:	f7fe ba79 	b.w	8020094c <__rt_exit>

8020245a <__sig_exit>:
__sig_exit():
8020245a:	2800      	cmp	r0, #0
8020245c:	d001      	beq.n	80202462 <__sig_exit+0x8>
8020245e:	f7ff bed9 	b.w	80202214 <_sys_exit>
80202462:	4770      	bx	lr

80202464 <__rt_SIGABRT>:
__rt_SIGABRT():
80202464:	b510      	push	{r4, lr}
80202466:	f000 f853 	bl	80202510 <__rt_SIGABRT_inner>
8020246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
8020246e:	f7ff bff4 	b.w	8020245a <__sig_exit>
	...

80202474 <__rt_SIGRTRED_inner>:
__rt_SIGRTRED_inner():
80202474:	b510      	push	{r4, lr}
80202476:	4601      	mov	r1, r0
80202478:	a002      	add	r0, pc, #8	@ (adr r0, 80202484 <__rt_SIGRTRED_inner+0x10>)
8020247a:	f000 f830 	bl	802024de <__default_signal_display>
8020247e:	2001      	movs	r0, #1
80202480:	bd10      	pop	{r4, pc}
80202482:	0000      	.short	0x0000
80202484:	52474953 	.word	0x52474953
80202488:	44455254 	.word	0x44455254
8020248c:	6552203a 	.word	0x6552203a
80202490:	65726964 	.word	0x65726964
80202494:	203a7463 	.word	0x203a7463
80202498:	276e6163 	.word	0x276e6163
8020249c:	706f2074 	.word	0x706f2074
802024a0:	203a6e65 	.word	0x203a6e65
802024a4:	00000000 	.word	0x00000000

802024a8 <__use_no_semihosting_swi>:
__I$use$semihosting():
802024a8:	4770      	bx	lr

802024aa <__Heap_ProvideMemory>:
__semihosting_library_function():
802024aa:	4603      	mov	r3, r0
__Heap_ProvideMemory():
802024ac:	6840      	ldr	r0, [r0, #4]
802024ae:	468c      	mov	ip, r1
802024b0:	2800      	cmp	r0, #0
802024b2:	bf18      	it	ne
802024b4:	4288      	cmpne	r0, r1
802024b6:	bf3c      	itt	cc
802024b8:	4603      	movcc	r3, r0
802024ba:	6840      	ldrcc	r0, [r0, #4]
802024bc:	d3f8      	bcc.n	802024b0 <__Heap_ProvideMemory+0x6>
802024be:	6818      	ldr	r0, [r3, #0]
802024c0:	4418      	add	r0, r3
802024c2:	4288      	cmp	r0, r1
802024c4:	d007      	beq.n	802024d6 <__Heap_ProvideMemory+0x2c>
802024c6:	f10c 0003 	add.w	r0, ip, #3
802024ca:	f020 0007 	bic.w	r0, r0, #7
802024ce:	1d00      	adds	r0, r0, #4
802024d0:	1a41      	subs	r1, r0, r1
802024d2:	1a52      	subs	r2, r2, r1
802024d4:	4601      	mov	r1, r0
802024d6:	1d08      	adds	r0, r1, #4
802024d8:	600a      	str	r2, [r1, #0]
802024da:	f7ff b8ea 	b.w	802016b2 <free>

802024de <__default_signal_display>:
__default_signal_display():
802024de:	b570      	push	{r4, r5, r6, lr}
802024e0:	4605      	mov	r5, r0
802024e2:	460c      	mov	r4, r1
802024e4:	200a      	movs	r0, #10
802024e6:	e000      	b.n	802024ea <__default_signal_display+0xc>
802024e8:	1c6d      	adds	r5, r5, #1
802024ea:	f002 fb39 	bl	80204b60 <_ttywrch>
802024ee:	b135      	cbz	r5, 802024fe <__default_signal_display+0x20>
802024f0:	7828      	ldrb	r0, [r5, #0]
802024f2:	2800      	cmp	r0, #0
802024f4:	d1f8      	bne.n	802024e8 <__default_signal_display+0xa>
802024f6:	e002      	b.n	802024fe <__default_signal_display+0x20>
802024f8:	1c64      	adds	r4, r4, #1
802024fa:	f002 fb31 	bl	80204b60 <_ttywrch>
802024fe:	b114      	cbz	r4, 80202506 <__default_signal_display+0x28>
80202500:	7820      	ldrb	r0, [r4, #0]
80202502:	2800      	cmp	r0, #0
80202504:	d1f8      	bne.n	802024f8 <__default_signal_display+0x1a>
80202506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
8020250a:	200a      	movs	r0, #10
8020250c:	f002 bb28 	b.w	80204b60 <_ttywrch>

80202510 <__rt_SIGABRT_inner>:
__rt_SIGABRT_inner():
80202510:	b510      	push	{r4, lr}
80202512:	2100      	movs	r1, #0
80202514:	a002      	add	r0, pc, #8	@ (adr r0, 80202520 <__rt_SIGABRT_inner+0x10>)
80202516:	f7ff ffe2 	bl	802024de <__default_signal_display>
8020251a:	2001      	movs	r0, #1
8020251c:	bd10      	pop	{r4, pc}
8020251e:	0000      	.short	0x0000
80202520:	41474953 	.word	0x41474953
80202524:	3a545242 	.word	0x3a545242
80202528:	6e624120 	.word	0x6e624120
8020252c:	616d726f 	.word	0x616d726f
80202530:	6574206c 	.word	0x6574206c
80202534:	6e696d72 	.word	0x6e696d72
80202538:	6f697461 	.word	0x6f697461
8020253c:	0000006e 	.word	0x0000006e

80202540 <__rt_SIGRTMEM>:
__rt_SIGRTMEM():
80202540:	b510      	push	{r4, lr}
80202542:	f000 f805 	bl	80202550 <__rt_SIGRTMEM_inner>
80202546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
8020254a:	f7ff bf86 	b.w	8020245a <__sig_exit>
	...

80202550 <__rt_SIGRTMEM_inner>:
__rt_SIGRTMEM_inner():
80202550:	b510      	push	{r4, lr}
80202552:	2801      	cmp	r0, #1
80202554:	d005      	beq.n	80202562 <__rt_SIGRTMEM_inner+0x12>
80202556:	2100      	movs	r1, #0
80202558:	a003      	add	r0, pc, #12	@ (adr r0, 80202568 <__rt_SIGRTMEM_inner+0x18>)
8020255a:	f7ff ffc0 	bl	802024de <__default_signal_display>
8020255e:	2001      	movs	r0, #1
80202560:	bd10      	pop	{r4, pc}
80202562:	a109      	add	r1, pc, #36	@ (adr r1, 80202588 <__rt_SIGRTMEM_inner+0x38>)
80202564:	e7f8      	b.n	80202558 <__rt_SIGRTMEM_inner+0x8>
80202566:	0000      	.short	0x0000
80202568:	52474953 	.word	0x52474953
8020256c:	4d454d54 	.word	0x4d454d54
80202570:	754f203a 	.word	0x754f203a
80202574:	666f2074 	.word	0x666f2074
80202578:	61656820 	.word	0x61656820
8020257c:	656d2070 	.word	0x656d2070
80202580:	79726f6d 	.word	0x79726f6d
80202584:	00000000 	.word	0x00000000
80202588:	6548203a 	.word	0x6548203a
8020258c:	6d207061 	.word	0x6d207061
80202590:	726f6d65 	.word	0x726f6d65
80202594:	6f632079 	.word	0x6f632079
80202598:	70757272 	.word	0x70757272
8020259c:	00646574 	.word	0x00646574

802025a0 <ARM_MPU_ClrRegion>:
ARM_MPU_ClrRegion():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:304

/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
802025a0:	b580      	push	{r7, lr}
802025a2:	b082      	sub	sp, #8
802025a4:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:305
  ARM_MPU_ClrRegionEx(MPU, rnr);
802025a6:	9901      	ldr	r1, [sp, #4]
802025a8:	f64e 5090 	movw	r0, #60816	@ 0xed90
802025ac:	f2ce 0000 	movt	r0, #57344	@ 0xe000
802025b0:	f000 f802 	bl	802025b8 <ARM_MPU_ClrRegionEx>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:306
}
802025b4:	b002      	add	sp, #8
802025b6:	bd80      	pop	{r7, pc}

802025b8 <ARM_MPU_ClrRegionEx>:
ARM_MPU_ClrRegionEx():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:295
{
802025b8:	b082      	sub	sp, #8
802025ba:	9001      	str	r0, [sp, #4]
802025bc:	9100      	str	r1, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:296
  mpu->RNR = rnr;
802025be:	9800      	ldr	r0, [sp, #0]
802025c0:	9901      	ldr	r1, [sp, #4]
802025c2:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:297
  mpu->RLAR = 0U;
802025c4:	9901      	ldr	r1, [sp, #4]
802025c6:	2000      	movs	r0, #0
802025c8:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:298
}
802025ca:	b002      	add	sp, #8
802025cc:	4770      	bx	lr
	...

802025d0 <ARM_MPU_Disable>:
ARM_MPU_Disable():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:214
  __DMB();
802025d0:	f3bf 8f5f 	dmb	sy
802025d4:	f64e 5124 	movw	r1, #60708	@ 0xed24
802025d8:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:216
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
802025dc:	6808      	ldr	r0, [r1, #0]
802025de:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
802025e2:	6008      	str	r0, [r1, #0]
802025e4:	f64e 5194 	movw	r1, #60820	@ 0xed94
802025e8:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:218
  MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
802025ec:	6808      	ldr	r0, [r1, #0]
802025ee:	f020 0001 	bic.w	r0, r0, #1
802025f2:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:219
  __DSB();
802025f4:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:220
  __ISB();
802025f8:	f3bf 8f6f 	isb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:221
}
802025fc:	4770      	bx	lr
	...

80202600 <ARM_MPU_Enable>:
ARM_MPU_Enable():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:200
{
80202600:	b081      	sub	sp, #4
80202602:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:201
  __DMB();
80202604:	f3bf 8f5f 	dmb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:202
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
80202608:	9800      	ldr	r0, [sp, #0]
8020260a:	f040 0001 	orr.w	r0, r0, #1
8020260e:	f64e 5194 	movw	r1, #60820	@ 0xed94
80202612:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80202616:	6008      	str	r0, [r1, #0]
80202618:	f64e 5124 	movw	r1, #60708	@ 0xed24
8020261c:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:204
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
80202620:	6808      	ldr	r0, [r1, #0]
80202622:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
80202626:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:206
  __DSB();
80202628:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:207
  __ISB();
8020262c:	f3bf 8f6f 	isb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:208
}
80202630:	b001      	add	sp, #4
80202632:	4770      	bx	lr

80202634 <ARM_MPU_Load>:
ARM_MPU_Load():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:404
* \param rnr First region number to be configured.
* \param table Pointer to the MPU configuration table.
* \param cnt Amount of regions to be configured.
*/
__STATIC_INLINE void ARM_MPU_Load(uint32_t rnr, ARM_MPU_Region_t const* table, uint32_t cnt)
{
80202634:	b580      	push	{r7, lr}
80202636:	b084      	sub	sp, #16
80202638:	9003      	str	r0, [sp, #12]
8020263a:	9102      	str	r1, [sp, #8]
8020263c:	9201      	str	r2, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:405
  ARM_MPU_LoadEx(MPU, rnr, table, cnt);
8020263e:	9903      	ldr	r1, [sp, #12]
80202640:	9a02      	ldr	r2, [sp, #8]
80202642:	9b01      	ldr	r3, [sp, #4]
80202644:	f64e 5090 	movw	r0, #60816	@ 0xed90
80202648:	f2ce 0000 	movt	r0, #57344	@ 0xe000
8020264c:	f000 f802 	bl	80202654 <ARM_MPU_LoadEx>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:406
}
80202650:	b004      	add	sp, #16
80202652:	bd80      	pop	{r7, pc}

80202654 <ARM_MPU_LoadEx>:
ARM_MPU_LoadEx():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:374
{
80202654:	b580      	push	{r7, lr}
80202656:	b088      	sub	sp, #32
80202658:	9007      	str	r0, [sp, #28]
8020265a:	9106      	str	r1, [sp, #24]
8020265c:	9205      	str	r2, [sp, #20]
8020265e:	9304      	str	r3, [sp, #16]
80202660:	2002      	movs	r0, #2
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:375
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
80202662:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:376
  if (cnt == 1U) {
80202664:	9804      	ldr	r0, [sp, #16]
80202666:	2801      	cmp	r0, #1
80202668:	d10a      	bne.n	80202680 <ARM_MPU_LoadEx+0x2c>
8020266a:	e7ff      	b.n	8020266c <ARM_MPU_LoadEx+0x18>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:377
    mpu->RNR = rnr;
8020266c:	9806      	ldr	r0, [sp, #24]
8020266e:	9907      	ldr	r1, [sp, #28]
80202670:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:378
    ARM_MPU_OrderedMemcpy(&(mpu->RBAR), &(table->RBAR), rowWordSize);
80202672:	9807      	ldr	r0, [sp, #28]
80202674:	300c      	adds	r0, #12
80202676:	9905      	ldr	r1, [sp, #20]
80202678:	2202      	movs	r2, #2
8020267a:	f000 f841 	bl	80202700 <ARM_MPU_OrderedMemcpy>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:379
  } else {
8020267e:	e03c      	b.n	802026fa <ARM_MPU_LoadEx+0xa6>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:380
    uint32_t rnrBase   = rnr & ~(MPU_TYPE_RALIASES-1U);
80202680:	9806      	ldr	r0, [sp, #24]
80202682:	f020 0003 	bic.w	r0, r0, #3
80202686:	9002      	str	r0, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:381
    uint32_t rnrOffset = rnr % MPU_TYPE_RALIASES;
80202688:	9806      	ldr	r0, [sp, #24]
8020268a:	f000 0003 	and.w	r0, r0, #3
8020268e:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:383
    mpu->RNR = rnrBase;
80202690:	9802      	ldr	r0, [sp, #8]
80202692:	9907      	ldr	r1, [sp, #28]
80202694:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:384
    while ((rnrOffset + cnt) > MPU_TYPE_RALIASES) {
80202696:	e7ff      	b.n	80202698 <ARM_MPU_LoadEx+0x44>
80202698:	9801      	ldr	r0, [sp, #4]
8020269a:	9904      	ldr	r1, [sp, #16]
8020269c:	4408      	add	r0, r1
8020269e:	2805      	cmp	r0, #5
802026a0:	d320      	bcc.n	802026e4 <ARM_MPU_LoadEx+0x90>
802026a2:	e7ff      	b.n	802026a4 <ARM_MPU_LoadEx+0x50>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:385
      uint32_t c = MPU_TYPE_RALIASES - rnrOffset;
802026a4:	9801      	ldr	r0, [sp, #4]
802026a6:	f1c0 0004 	rsb	r0, r0, #4
802026aa:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:386
      ARM_MPU_OrderedMemcpy(&(mpu->RBAR)+(rnrOffset*2U), &(table->RBAR), c*rowWordSize);
802026ac:	9807      	ldr	r0, [sp, #28]
802026ae:	9901      	ldr	r1, [sp, #4]
802026b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
802026b4:	300c      	adds	r0, #12
802026b6:	9905      	ldr	r1, [sp, #20]
802026b8:	9a00      	ldr	r2, [sp, #0]
802026ba:	0052      	lsls	r2, r2, #1
802026bc:	f000 f820 	bl	80202700 <ARM_MPU_OrderedMemcpy>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:387
      table += c;
802026c0:	9900      	ldr	r1, [sp, #0]
802026c2:	9805      	ldr	r0, [sp, #20]
802026c4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
802026c8:	9005      	str	r0, [sp, #20]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:388
      cnt -= c;
802026ca:	9900      	ldr	r1, [sp, #0]
802026cc:	9804      	ldr	r0, [sp, #16]
802026ce:	1a40      	subs	r0, r0, r1
802026d0:	9004      	str	r0, [sp, #16]
802026d2:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:389
      rnrOffset = 0U;
802026d4:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:390
      rnrBase += MPU_TYPE_RALIASES;
802026d6:	9802      	ldr	r0, [sp, #8]
802026d8:	3004      	adds	r0, #4
802026da:	9002      	str	r0, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:391
      mpu->RNR = rnrBase;
802026dc:	9802      	ldr	r0, [sp, #8]
802026de:	9907      	ldr	r1, [sp, #28]
802026e0:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:384
    while ((rnrOffset + cnt) > MPU_TYPE_RALIASES) {
802026e2:	e7d9      	b.n	80202698 <ARM_MPU_LoadEx+0x44>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:394
    ARM_MPU_OrderedMemcpy(&(mpu->RBAR)+(rnrOffset*2U), &(table->RBAR), cnt*rowWordSize);
802026e4:	9807      	ldr	r0, [sp, #28]
802026e6:	9901      	ldr	r1, [sp, #4]
802026e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
802026ec:	300c      	adds	r0, #12
802026ee:	9905      	ldr	r1, [sp, #20]
802026f0:	9a04      	ldr	r2, [sp, #16]
802026f2:	0052      	lsls	r2, r2, #1
802026f4:	f000 f804 	bl	80202700 <ARM_MPU_OrderedMemcpy>
802026f8:	e7ff      	b.n	802026fa <ARM_MPU_LoadEx+0xa6>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:396
}
802026fa:	b008      	add	sp, #32
802026fc:	bd80      	pop	{r7, pc}
	...

80202700 <ARM_MPU_OrderedMemcpy>:
ARM_MPU_OrderedMemcpy():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:359
{
80202700:	b084      	sub	sp, #16
80202702:	9003      	str	r0, [sp, #12]
80202704:	9102      	str	r1, [sp, #8]
80202706:	9201      	str	r2, [sp, #4]
80202708:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:361
  for (i = 0U; i < len; ++i)
8020270a:	9000      	str	r0, [sp, #0]
8020270c:	e7ff      	b.n	8020270e <ARM_MPU_OrderedMemcpy+0xe>
8020270e:	9800      	ldr	r0, [sp, #0]
80202710:	9901      	ldr	r1, [sp, #4]
80202712:	4288      	cmp	r0, r1
80202714:	d20c      	bcs.n	80202730 <ARM_MPU_OrderedMemcpy+0x30>
80202716:	e7ff      	b.n	80202718 <ARM_MPU_OrderedMemcpy+0x18>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:363
    dst[i] = src[i];
80202718:	9802      	ldr	r0, [sp, #8]
8020271a:	9a00      	ldr	r2, [sp, #0]
8020271c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
80202720:	9903      	ldr	r1, [sp, #12]
80202722:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:364
  }
80202726:	e7ff      	b.n	80202728 <ARM_MPU_OrderedMemcpy+0x28>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:361
  for (i = 0U; i < len; ++i)
80202728:	9800      	ldr	r0, [sp, #0]
8020272a:	3001      	adds	r0, #1
8020272c:	9000      	str	r0, [sp, #0]
8020272e:	e7ee      	b.n	8020270e <ARM_MPU_OrderedMemcpy+0xe>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:365
}
80202730:	b004      	add	sp, #16
80202732:	4770      	bx	lr

80202734 <ARM_MPU_SetMemAttr>:
ARM_MPU_SetMemAttr():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:275
{
80202734:	b580      	push	{r7, lr}
80202736:	b082      	sub	sp, #8
80202738:	f88d 0007 	strb.w	r0, [sp, #7]
8020273c:	f88d 1006 	strb.w	r1, [sp, #6]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:276
  ARM_MPU_SetMemAttrEx(MPU, idx, attr);
80202740:	f89d 1007 	ldrb.w	r1, [sp, #7]
80202744:	f89d 2006 	ldrb.w	r2, [sp, #6]
80202748:	f64e 5090 	movw	r0, #60816	@ 0xed90
8020274c:	f2ce 0000 	movt	r0, #57344	@ 0xe000
80202750:	f000 f802 	bl	80202758 <ARM_MPU_SetMemAttrEx>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:277
}
80202754:	b002      	add	sp, #8
80202756:	bd80      	pop	{r7, pc}

80202758 <ARM_MPU_SetMemAttrEx>:
ARM_MPU_SetMemAttrEx():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:258
{
80202758:	b084      	sub	sp, #16
8020275a:	9003      	str	r0, [sp, #12]
8020275c:	f88d 100b 	strb.w	r1, [sp, #11]
80202760:	f88d 200a 	strb.w	r2, [sp, #10]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:259
  const uint8_t reg = idx / 4U;
80202764:	f89d 000b 	ldrb.w	r0, [sp, #11]
80202768:	0880      	lsrs	r0, r0, #2
8020276a:	f88d 0009 	strb.w	r0, [sp, #9]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:260
  const uint32_t pos = ((idx % 4U) * 8U);
8020276e:	f89d 000b 	ldrb.w	r0, [sp, #11]
80202772:	f000 0003 	and.w	r0, r0, #3
80202776:	00c0      	lsls	r0, r0, #3
80202778:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:261
  const uint32_t mask = 0xFFU << pos;
8020277a:	9901      	ldr	r1, [sp, #4]
8020277c:	20ff      	movs	r0, #255	@ 0xff
8020277e:	4088      	lsls	r0, r1
80202780:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:263
  if (reg >= (sizeof(mpu->MAIR) / sizeof(mpu->MAIR[0]))) {
80202782:	f89d 0009 	ldrb.w	r0, [sp, #9]
80202786:	2802      	cmp	r0, #2
80202788:	d301      	bcc.n	8020278e <ARM_MPU_SetMemAttrEx+0x36>
8020278a:	e7ff      	b.n	8020278c <ARM_MPU_SetMemAttrEx+0x34>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:264
    return; // invalid index
8020278c:	e014      	b.n	802027b8 <ARM_MPU_SetMemAttrEx+0x60>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:267
  mpu->MAIR[reg] = ((mpu->MAIR[reg] & ~mask) | ((attr << pos) & mask));
8020278e:	9803      	ldr	r0, [sp, #12]
80202790:	f89d 1009 	ldrb.w	r1, [sp, #9]
80202794:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80202798:	6b00      	ldr	r0, [r0, #48]	@ 0x30
8020279a:	9a00      	ldr	r2, [sp, #0]
8020279c:	4390      	bics	r0, r2
8020279e:	f89d 100a 	ldrb.w	r1, [sp, #10]
802027a2:	9b01      	ldr	r3, [sp, #4]
802027a4:	4099      	lsls	r1, r3
802027a6:	4011      	ands	r1, r2
802027a8:	4408      	add	r0, r1
802027aa:	9903      	ldr	r1, [sp, #12]
802027ac:	f89d 2009 	ldrb.w	r2, [sp, #9]
802027b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
802027b4:	6308      	str	r0, [r1, #48]	@ 0x30
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:268
}
802027b6:	e7ff      	b.n	802027b8 <ARM_MPU_SetMemAttrEx+0x60>
802027b8:	b004      	add	sp, #16
802027ba:	4770      	bx	lr

802027bc <BusFault_Handler>:
BusFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:331
}

__attribute__((naked))
void BusFault_Handler(void)
{
    __asm("MOVS R0, #2\n\t"
802027bc:	2002      	movs	r0, #2
802027be:	f002 be05 	b.w	802053cc <CommonAsmFaultHandler>
	...

802027c4 <Default_Handler>:
Default_Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1114
/*----------------------------------------------------------------------------
  Default Handler for Exceptions / Interrupts
 *----------------------------------------------------------------------------*/
void Default_Handler(void)
{
  while(1);
802027c4:	e7ff      	b.n	802027c6 <Default_Handler+0x2>
802027c6:	e7fe      	b.n	802027c6 <Default_Handler+0x2>

802027c8 <GPIO0_IRQ0Handler>:
GPIO0_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:532
        RTE_GPIO0_PIN6_IRQ_PRIORITY,
        RTE_GPIO0_PIN7_IRQ_PRIORITY
    }
};

void GPIO0_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 0);    }
802027c8:	b580      	push	{r7, lr}
802027ca:	f240 000c 	movw	r0, #12
802027ce:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027d2:	2100      	movs	r1, #0
802027d4:	f000 fca8 	bl	80203128 <GPIO_IRQ_Handler>
802027d8:	bd80      	pop	{r7, pc}
	...

802027dc <GPIO0_IRQ1Handler>:
GPIO0_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:534

void GPIO0_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 1);    }
802027dc:	b580      	push	{r7, lr}
802027de:	f240 000c 	movw	r0, #12
802027e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027e6:	2101      	movs	r1, #1
802027e8:	f000 fc9e 	bl	80203128 <GPIO_IRQ_Handler>
802027ec:	bd80      	pop	{r7, pc}
	...

802027f0 <GPIO0_IRQ2Handler>:
GPIO0_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:536

void GPIO0_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 2);    }
802027f0:	b580      	push	{r7, lr}
802027f2:	f240 000c 	movw	r0, #12
802027f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802027fa:	2102      	movs	r1, #2
802027fc:	f000 fc94 	bl	80203128 <GPIO_IRQ_Handler>
80202800:	bd80      	pop	{r7, pc}
	...

80202804 <GPIO0_IRQ3Handler>:
GPIO0_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:538

void GPIO0_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 3);    }
80202804:	b580      	push	{r7, lr}
80202806:	f240 000c 	movw	r0, #12
8020280a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020280e:	2103      	movs	r1, #3
80202810:	f000 fc8a 	bl	80203128 <GPIO_IRQ_Handler>
80202814:	bd80      	pop	{r7, pc}
	...

80202818 <GPIO0_IRQ4Handler>:
GPIO0_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:540

void GPIO0_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 4);    }
80202818:	b580      	push	{r7, lr}
8020281a:	f240 000c 	movw	r0, #12
8020281e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202822:	2104      	movs	r1, #4
80202824:	f000 fc80 	bl	80203128 <GPIO_IRQ_Handler>
80202828:	bd80      	pop	{r7, pc}
	...

8020282c <GPIO0_IRQ5Handler>:
GPIO0_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:542

void GPIO0_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 5);    }
8020282c:	b580      	push	{r7, lr}
8020282e:	f240 000c 	movw	r0, #12
80202832:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202836:	2105      	movs	r1, #5
80202838:	f000 fc76 	bl	80203128 <GPIO_IRQ_Handler>
8020283c:	bd80      	pop	{r7, pc}
	...

80202840 <GPIO0_IRQ6Handler>:
GPIO0_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:544

void GPIO0_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 6);    }
80202840:	b580      	push	{r7, lr}
80202842:	f240 000c 	movw	r0, #12
80202846:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020284a:	2106      	movs	r1, #6
8020284c:	f000 fc6c 	bl	80203128 <GPIO_IRQ_Handler>
80202850:	bd80      	pop	{r7, pc}
	...

80202854 <GPIO0_IRQ7Handler>:
GPIO0_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:546

void GPIO0_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 7);    }
80202854:	b580      	push	{r7, lr}
80202856:	f240 000c 	movw	r0, #12
8020285a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020285e:	2107      	movs	r1, #7
80202860:	f000 fc62 	bl	80203128 <GPIO_IRQ_Handler>
80202864:	bd80      	pop	{r7, pc}
	...

80202868 <GPIO10_IRQ0Handler>:
GPIO10_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1426
            RTE_GPIO10_PIN6_IRQ_PRIORITY,
            RTE_GPIO10_PIN7_IRQ_PRIORITY,
    }
};

void GPIO10_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 0);    }
80202868:	b580      	push	{r7, lr}
8020286a:	f240 0048 	movw	r0, #72	@ 0x48
8020286e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202872:	2100      	movs	r1, #0
80202874:	f000 fc58 	bl	80203128 <GPIO_IRQ_Handler>
80202878:	bd80      	pop	{r7, pc}
	...

8020287c <GPIO10_IRQ1Handler>:
GPIO10_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1428

void GPIO10_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 1);    }
8020287c:	b580      	push	{r7, lr}
8020287e:	f240 0048 	movw	r0, #72	@ 0x48
80202882:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202886:	2101      	movs	r1, #1
80202888:	f000 fc4e 	bl	80203128 <GPIO_IRQ_Handler>
8020288c:	bd80      	pop	{r7, pc}
	...

80202890 <GPIO10_IRQ2Handler>:
GPIO10_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1430

void GPIO10_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 2);    }
80202890:	b580      	push	{r7, lr}
80202892:	f240 0048 	movw	r0, #72	@ 0x48
80202896:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020289a:	2102      	movs	r1, #2
8020289c:	f000 fc44 	bl	80203128 <GPIO_IRQ_Handler>
802028a0:	bd80      	pop	{r7, pc}
	...

802028a4 <GPIO10_IRQ3Handler>:
GPIO10_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1432

void GPIO10_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 3);    }
802028a4:	b580      	push	{r7, lr}
802028a6:	f240 0048 	movw	r0, #72	@ 0x48
802028aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028ae:	2103      	movs	r1, #3
802028b0:	f000 fc3a 	bl	80203128 <GPIO_IRQ_Handler>
802028b4:	bd80      	pop	{r7, pc}
	...

802028b8 <GPIO10_IRQ4Handler>:
GPIO10_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1434

void GPIO10_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 4);    }
802028b8:	b580      	push	{r7, lr}
802028ba:	f240 0048 	movw	r0, #72	@ 0x48
802028be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028c2:	2104      	movs	r1, #4
802028c4:	f000 fc30 	bl	80203128 <GPIO_IRQ_Handler>
802028c8:	bd80      	pop	{r7, pc}
	...

802028cc <GPIO10_IRQ5Handler>:
GPIO10_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1436

void GPIO10_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 5);    }
802028cc:	b580      	push	{r7, lr}
802028ce:	f240 0048 	movw	r0, #72	@ 0x48
802028d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028d6:	2105      	movs	r1, #5
802028d8:	f000 fc26 	bl	80203128 <GPIO_IRQ_Handler>
802028dc:	bd80      	pop	{r7, pc}
	...

802028e0 <GPIO10_IRQ6Handler>:
GPIO10_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1438

void GPIO10_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 6);    }
802028e0:	b580      	push	{r7, lr}
802028e2:	f240 0048 	movw	r0, #72	@ 0x48
802028e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028ea:	2106      	movs	r1, #6
802028ec:	f000 fc1c 	bl	80203128 <GPIO_IRQ_Handler>
802028f0:	bd80      	pop	{r7, pc}
	...

802028f4 <GPIO10_IRQ7Handler>:
GPIO10_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1440

void GPIO10_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 7);    }
802028f4:	b580      	push	{r7, lr}
802028f6:	f240 0048 	movw	r0, #72	@ 0x48
802028fa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802028fe:	2107      	movs	r1, #7
80202900:	f000 fc12 	bl	80203128 <GPIO_IRQ_Handler>
80202904:	bd80      	pop	{r7, pc}
	...

80202908 <GPIO11_IRQ0Handler>:
GPIO11_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1515
            RTE_GPIO11_PIN6_IRQ_PRIORITY,
            RTE_GPIO11_PIN7_IRQ_PRIORITY,
    }
};

void GPIO11_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 0);    }
80202908:	b580      	push	{r7, lr}
8020290a:	f240 0084 	movw	r0, #132	@ 0x84
8020290e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202912:	2100      	movs	r1, #0
80202914:	f000 fc08 	bl	80203128 <GPIO_IRQ_Handler>
80202918:	bd80      	pop	{r7, pc}
	...

8020291c <GPIO11_IRQ1Handler>:
GPIO11_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1517

void GPIO11_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 1);    }
8020291c:	b580      	push	{r7, lr}
8020291e:	f240 0084 	movw	r0, #132	@ 0x84
80202922:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202926:	2101      	movs	r1, #1
80202928:	f000 fbfe 	bl	80203128 <GPIO_IRQ_Handler>
8020292c:	bd80      	pop	{r7, pc}
	...

80202930 <GPIO11_IRQ2Handler>:
GPIO11_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1519

void GPIO11_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 2);    }
80202930:	b580      	push	{r7, lr}
80202932:	f240 0084 	movw	r0, #132	@ 0x84
80202936:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020293a:	2102      	movs	r1, #2
8020293c:	f000 fbf4 	bl	80203128 <GPIO_IRQ_Handler>
80202940:	bd80      	pop	{r7, pc}
	...

80202944 <GPIO11_IRQ3Handler>:
GPIO11_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1521

void GPIO11_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 3);    }
80202944:	b580      	push	{r7, lr}
80202946:	f240 0084 	movw	r0, #132	@ 0x84
8020294a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020294e:	2103      	movs	r1, #3
80202950:	f000 fbea 	bl	80203128 <GPIO_IRQ_Handler>
80202954:	bd80      	pop	{r7, pc}
	...

80202958 <GPIO11_IRQ4Handler>:
GPIO11_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1523

void GPIO11_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 4);    }
80202958:	b580      	push	{r7, lr}
8020295a:	f240 0084 	movw	r0, #132	@ 0x84
8020295e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202962:	2104      	movs	r1, #4
80202964:	f000 fbe0 	bl	80203128 <GPIO_IRQ_Handler>
80202968:	bd80      	pop	{r7, pc}
	...

8020296c <GPIO11_IRQ5Handler>:
GPIO11_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1525

void GPIO11_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 5);    }
8020296c:	b580      	push	{r7, lr}
8020296e:	f240 0084 	movw	r0, #132	@ 0x84
80202972:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202976:	2105      	movs	r1, #5
80202978:	f000 fbd6 	bl	80203128 <GPIO_IRQ_Handler>
8020297c:	bd80      	pop	{r7, pc}
	...

80202980 <GPIO11_IRQ6Handler>:
GPIO11_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1527

void GPIO11_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 6);    }
80202980:	b580      	push	{r7, lr}
80202982:	f240 0084 	movw	r0, #132	@ 0x84
80202986:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020298a:	2106      	movs	r1, #6
8020298c:	f000 fbcc 	bl	80203128 <GPIO_IRQ_Handler>
80202990:	bd80      	pop	{r7, pc}
	...

80202994 <GPIO11_IRQ7Handler>:
GPIO11_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1529

void GPIO11_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 7);    }
80202994:	b580      	push	{r7, lr}
80202996:	f240 0084 	movw	r0, #132	@ 0x84
8020299a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020299e:	2107      	movs	r1, #7
802029a0:	f000 fbc2 	bl	80203128 <GPIO_IRQ_Handler>
802029a4:	bd80      	pop	{r7, pc}
	...

802029a8 <GPIO12_IRQ0Handler>:
GPIO12_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1604
            RTE_GPIO12_PIN6_IRQ_PRIORITY,
            RTE_GPIO12_PIN7_IRQ_PRIORITY,
    }
};

void GPIO12_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 0);    }
802029a8:	b580      	push	{r7, lr}
802029aa:	f240 00c0 	movw	r0, #192	@ 0xc0
802029ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029b2:	2100      	movs	r1, #0
802029b4:	f000 fbb8 	bl	80203128 <GPIO_IRQ_Handler>
802029b8:	bd80      	pop	{r7, pc}
	...

802029bc <GPIO12_IRQ1Handler>:
GPIO12_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1606

void GPIO12_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 1);    }
802029bc:	b580      	push	{r7, lr}
802029be:	f240 00c0 	movw	r0, #192	@ 0xc0
802029c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029c6:	2101      	movs	r1, #1
802029c8:	f000 fbae 	bl	80203128 <GPIO_IRQ_Handler>
802029cc:	bd80      	pop	{r7, pc}
	...

802029d0 <GPIO12_IRQ2Handler>:
GPIO12_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1608

void GPIO12_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 2);    }
802029d0:	b580      	push	{r7, lr}
802029d2:	f240 00c0 	movw	r0, #192	@ 0xc0
802029d6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029da:	2102      	movs	r1, #2
802029dc:	f000 fba4 	bl	80203128 <GPIO_IRQ_Handler>
802029e0:	bd80      	pop	{r7, pc}
	...

802029e4 <GPIO12_IRQ3Handler>:
GPIO12_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1610

void GPIO12_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 3);    }
802029e4:	b580      	push	{r7, lr}
802029e6:	f240 00c0 	movw	r0, #192	@ 0xc0
802029ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802029ee:	2103      	movs	r1, #3
802029f0:	f000 fb9a 	bl	80203128 <GPIO_IRQ_Handler>
802029f4:	bd80      	pop	{r7, pc}
	...

802029f8 <GPIO12_IRQ4Handler>:
GPIO12_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1612

void GPIO12_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 4);    }
802029f8:	b580      	push	{r7, lr}
802029fa:	f240 00c0 	movw	r0, #192	@ 0xc0
802029fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a02:	2104      	movs	r1, #4
80202a04:	f000 fb90 	bl	80203128 <GPIO_IRQ_Handler>
80202a08:	bd80      	pop	{r7, pc}
	...

80202a0c <GPIO12_IRQ5Handler>:
GPIO12_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1614

void GPIO12_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 5);    }
80202a0c:	b580      	push	{r7, lr}
80202a0e:	f240 00c0 	movw	r0, #192	@ 0xc0
80202a12:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a16:	2105      	movs	r1, #5
80202a18:	f000 fb86 	bl	80203128 <GPIO_IRQ_Handler>
80202a1c:	bd80      	pop	{r7, pc}
	...

80202a20 <GPIO12_IRQ6Handler>:
GPIO12_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1616

void GPIO12_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 6);    }
80202a20:	b580      	push	{r7, lr}
80202a22:	f240 00c0 	movw	r0, #192	@ 0xc0
80202a26:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a2a:	2106      	movs	r1, #6
80202a2c:	f000 fb7c 	bl	80203128 <GPIO_IRQ_Handler>
80202a30:	bd80      	pop	{r7, pc}
	...

80202a34 <GPIO12_IRQ7Handler>:
GPIO12_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1618

void GPIO12_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 7);    }
80202a34:	b580      	push	{r7, lr}
80202a36:	f240 00c0 	movw	r0, #192	@ 0xc0
80202a3a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a3e:	2107      	movs	r1, #7
80202a40:	f000 fb72 	bl	80203128 <GPIO_IRQ_Handler>
80202a44:	bd80      	pop	{r7, pc}
	...

80202a48 <GPIO13_IRQ0Handler>:
GPIO13_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1693
            RTE_GPIO13_PIN6_IRQ_PRIORITY,
            RTE_GPIO13_PIN7_IRQ_PRIORITY,
    }
};

void GPIO13_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 0);    }
80202a48:	b580      	push	{r7, lr}
80202a4a:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a52:	2100      	movs	r1, #0
80202a54:	f000 fb68 	bl	80203128 <GPIO_IRQ_Handler>
80202a58:	bd80      	pop	{r7, pc}
	...

80202a5c <GPIO13_IRQ1Handler>:
GPIO13_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1695

void GPIO13_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 1);    }
80202a5c:	b580      	push	{r7, lr}
80202a5e:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a62:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a66:	2101      	movs	r1, #1
80202a68:	f000 fb5e 	bl	80203128 <GPIO_IRQ_Handler>
80202a6c:	bd80      	pop	{r7, pc}
	...

80202a70 <GPIO13_IRQ2Handler>:
GPIO13_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1697

void GPIO13_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 2);    }
80202a70:	b580      	push	{r7, lr}
80202a72:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a76:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a7a:	2102      	movs	r1, #2
80202a7c:	f000 fb54 	bl	80203128 <GPIO_IRQ_Handler>
80202a80:	bd80      	pop	{r7, pc}
	...

80202a84 <GPIO13_IRQ3Handler>:
GPIO13_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1699

void GPIO13_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 3);    }
80202a84:	b580      	push	{r7, lr}
80202a86:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a8a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202a8e:	2103      	movs	r1, #3
80202a90:	f000 fb4a 	bl	80203128 <GPIO_IRQ_Handler>
80202a94:	bd80      	pop	{r7, pc}
	...

80202a98 <GPIO13_IRQ4Handler>:
GPIO13_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1701

void GPIO13_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 4);    }
80202a98:	b580      	push	{r7, lr}
80202a9a:	f240 00fc 	movw	r0, #252	@ 0xfc
80202a9e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202aa2:	2104      	movs	r1, #4
80202aa4:	f000 fb40 	bl	80203128 <GPIO_IRQ_Handler>
80202aa8:	bd80      	pop	{r7, pc}
	...

80202aac <GPIO13_IRQ5Handler>:
GPIO13_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1703

void GPIO13_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 5);    }
80202aac:	b580      	push	{r7, lr}
80202aae:	f240 00fc 	movw	r0, #252	@ 0xfc
80202ab2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ab6:	2105      	movs	r1, #5
80202ab8:	f000 fb36 	bl	80203128 <GPIO_IRQ_Handler>
80202abc:	bd80      	pop	{r7, pc}
	...

80202ac0 <GPIO13_IRQ6Handler>:
GPIO13_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1705

void GPIO13_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 6);    }
80202ac0:	b580      	push	{r7, lr}
80202ac2:	f240 00fc 	movw	r0, #252	@ 0xfc
80202ac6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202aca:	2106      	movs	r1, #6
80202acc:	f000 fb2c 	bl	80203128 <GPIO_IRQ_Handler>
80202ad0:	bd80      	pop	{r7, pc}
	...

80202ad4 <GPIO13_IRQ7Handler>:
GPIO13_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1707

void GPIO13_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 7);    }
80202ad4:	b580      	push	{r7, lr}
80202ad6:	f240 00fc 	movw	r0, #252	@ 0xfc
80202ada:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ade:	2107      	movs	r1, #7
80202ae0:	f000 fb22 	bl	80203128 <GPIO_IRQ_Handler>
80202ae4:	bd80      	pop	{r7, pc}
	...

80202ae8 <GPIO14_IRQ0Handler>:
GPIO14_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1782
            RTE_GPIO14_PIN6_IRQ_PRIORITY,
            RTE_GPIO14_PIN7_IRQ_PRIORITY,
    }
};

void GPIO14_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 0);    }
80202ae8:	b580      	push	{r7, lr}
80202aea:	f240 1038 	movw	r0, #312	@ 0x138
80202aee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202af2:	2100      	movs	r1, #0
80202af4:	f000 fb18 	bl	80203128 <GPIO_IRQ_Handler>
80202af8:	bd80      	pop	{r7, pc}
	...

80202afc <GPIO14_IRQ1Handler>:
GPIO14_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1784

void GPIO14_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 1);    }
80202afc:	b580      	push	{r7, lr}
80202afe:	f240 1038 	movw	r0, #312	@ 0x138
80202b02:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b06:	2101      	movs	r1, #1
80202b08:	f000 fb0e 	bl	80203128 <GPIO_IRQ_Handler>
80202b0c:	bd80      	pop	{r7, pc}
	...

80202b10 <GPIO14_IRQ2Handler>:
GPIO14_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1786

void GPIO14_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 2);    }
80202b10:	b580      	push	{r7, lr}
80202b12:	f240 1038 	movw	r0, #312	@ 0x138
80202b16:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b1a:	2102      	movs	r1, #2
80202b1c:	f000 fb04 	bl	80203128 <GPIO_IRQ_Handler>
80202b20:	bd80      	pop	{r7, pc}
	...

80202b24 <GPIO14_IRQ3Handler>:
GPIO14_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1788

void GPIO14_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 3);    }
80202b24:	b580      	push	{r7, lr}
80202b26:	f240 1038 	movw	r0, #312	@ 0x138
80202b2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b2e:	2103      	movs	r1, #3
80202b30:	f000 fafa 	bl	80203128 <GPIO_IRQ_Handler>
80202b34:	bd80      	pop	{r7, pc}
	...

80202b38 <GPIO14_IRQ4Handler>:
GPIO14_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1790

void GPIO14_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 4);    }
80202b38:	b580      	push	{r7, lr}
80202b3a:	f240 1038 	movw	r0, #312	@ 0x138
80202b3e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b42:	2104      	movs	r1, #4
80202b44:	f000 faf0 	bl	80203128 <GPIO_IRQ_Handler>
80202b48:	bd80      	pop	{r7, pc}
	...

80202b4c <GPIO14_IRQ5Handler>:
GPIO14_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1792

void GPIO14_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 5);    }
80202b4c:	b580      	push	{r7, lr}
80202b4e:	f240 1038 	movw	r0, #312	@ 0x138
80202b52:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b56:	2105      	movs	r1, #5
80202b58:	f000 fae6 	bl	80203128 <GPIO_IRQ_Handler>
80202b5c:	bd80      	pop	{r7, pc}
	...

80202b60 <GPIO14_IRQ6Handler>:
GPIO14_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1794

void GPIO14_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 6);    }
80202b60:	b580      	push	{r7, lr}
80202b62:	f240 1038 	movw	r0, #312	@ 0x138
80202b66:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b6a:	2106      	movs	r1, #6
80202b6c:	f000 fadc 	bl	80203128 <GPIO_IRQ_Handler>
80202b70:	bd80      	pop	{r7, pc}
	...

80202b74 <GPIO14_IRQ7Handler>:
GPIO14_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1796

void GPIO14_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 7);    }
80202b74:	b580      	push	{r7, lr}
80202b76:	f240 1038 	movw	r0, #312	@ 0x138
80202b7a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b7e:	2107      	movs	r1, #7
80202b80:	f000 fad2 	bl	80203128 <GPIO_IRQ_Handler>
80202b84:	bd80      	pop	{r7, pc}
	...

80202b88 <GPIO1_IRQ0Handler>:
GPIO1_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:622
void GPIO1_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 0);    }
80202b88:	b580      	push	{r7, lr}
80202b8a:	f240 1074 	movw	r0, #372	@ 0x174
80202b8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202b92:	2100      	movs	r1, #0
80202b94:	f000 fac8 	bl	80203128 <GPIO_IRQ_Handler>
80202b98:	bd80      	pop	{r7, pc}
	...

80202b9c <GPIO1_IRQ1Handler>:
GPIO1_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:624
void GPIO1_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 1);    }
80202b9c:	b580      	push	{r7, lr}
80202b9e:	f240 1074 	movw	r0, #372	@ 0x174
80202ba2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ba6:	2101      	movs	r1, #1
80202ba8:	f000 fabe 	bl	80203128 <GPIO_IRQ_Handler>
80202bac:	bd80      	pop	{r7, pc}
	...

80202bb0 <GPIO1_IRQ2Handler>:
GPIO1_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:626
void GPIO1_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 2);    }
80202bb0:	b580      	push	{r7, lr}
80202bb2:	f240 1074 	movw	r0, #372	@ 0x174
80202bb6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202bba:	2102      	movs	r1, #2
80202bbc:	f000 fab4 	bl	80203128 <GPIO_IRQ_Handler>
80202bc0:	bd80      	pop	{r7, pc}
	...

80202bc4 <GPIO1_IRQ3Handler>:
GPIO1_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:628
void GPIO1_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 3);    }
80202bc4:	b580      	push	{r7, lr}
80202bc6:	f240 1074 	movw	r0, #372	@ 0x174
80202bca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202bce:	2103      	movs	r1, #3
80202bd0:	f000 faaa 	bl	80203128 <GPIO_IRQ_Handler>
80202bd4:	bd80      	pop	{r7, pc}
	...

80202bd8 <GPIO1_IRQ4Handler>:
GPIO1_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:630
void GPIO1_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 4);    }
80202bd8:	b580      	push	{r7, lr}
80202bda:	f240 1074 	movw	r0, #372	@ 0x174
80202bde:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202be2:	2104      	movs	r1, #4
80202be4:	f000 faa0 	bl	80203128 <GPIO_IRQ_Handler>
80202be8:	bd80      	pop	{r7, pc}
	...

80202bec <GPIO1_IRQ5Handler>:
GPIO1_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:632
void GPIO1_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 5);    }
80202bec:	b580      	push	{r7, lr}
80202bee:	f240 1074 	movw	r0, #372	@ 0x174
80202bf2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202bf6:	2105      	movs	r1, #5
80202bf8:	f000 fa96 	bl	80203128 <GPIO_IRQ_Handler>
80202bfc:	bd80      	pop	{r7, pc}
	...

80202c00 <GPIO1_IRQ6Handler>:
GPIO1_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:634
void GPIO1_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 6);    }
80202c00:	b580      	push	{r7, lr}
80202c02:	f240 1074 	movw	r0, #372	@ 0x174
80202c06:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c0a:	2106      	movs	r1, #6
80202c0c:	f000 fa8c 	bl	80203128 <GPIO_IRQ_Handler>
80202c10:	bd80      	pop	{r7, pc}
	...

80202c14 <GPIO1_IRQ7Handler>:
GPIO1_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:636
void GPIO1_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 7);    }
80202c14:	b580      	push	{r7, lr}
80202c16:	f240 1074 	movw	r0, #372	@ 0x174
80202c1a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c1e:	2107      	movs	r1, #7
80202c20:	f000 fa82 	bl	80203128 <GPIO_IRQ_Handler>
80202c24:	bd80      	pop	{r7, pc}
	...

80202c28 <GPIO2_IRQ0Handler>:
GPIO2_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:711
void GPIO2_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 0);    }
80202c28:	b580      	push	{r7, lr}
80202c2a:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c2e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c32:	2100      	movs	r1, #0
80202c34:	f000 fa78 	bl	80203128 <GPIO_IRQ_Handler>
80202c38:	bd80      	pop	{r7, pc}
	...

80202c3c <GPIO2_IRQ1Handler>:
GPIO2_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:713
void GPIO2_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 1);    }
80202c3c:	b580      	push	{r7, lr}
80202c3e:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c42:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c46:	2101      	movs	r1, #1
80202c48:	f000 fa6e 	bl	80203128 <GPIO_IRQ_Handler>
80202c4c:	bd80      	pop	{r7, pc}
	...

80202c50 <GPIO2_IRQ2Handler>:
GPIO2_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:715
void GPIO2_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 2);    }
80202c50:	b580      	push	{r7, lr}
80202c52:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c56:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c5a:	2102      	movs	r1, #2
80202c5c:	f000 fa64 	bl	80203128 <GPIO_IRQ_Handler>
80202c60:	bd80      	pop	{r7, pc}
	...

80202c64 <GPIO2_IRQ3Handler>:
GPIO2_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:717
void GPIO2_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 3);    }
80202c64:	b580      	push	{r7, lr}
80202c66:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c6a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c6e:	2103      	movs	r1, #3
80202c70:	f000 fa5a 	bl	80203128 <GPIO_IRQ_Handler>
80202c74:	bd80      	pop	{r7, pc}
	...

80202c78 <GPIO2_IRQ4Handler>:
GPIO2_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:719
void GPIO2_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 4);    }
80202c78:	b580      	push	{r7, lr}
80202c7a:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c7e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c82:	2104      	movs	r1, #4
80202c84:	f000 fa50 	bl	80203128 <GPIO_IRQ_Handler>
80202c88:	bd80      	pop	{r7, pc}
	...

80202c8c <GPIO2_IRQ5Handler>:
GPIO2_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:721
void GPIO2_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 5);    }
80202c8c:	b580      	push	{r7, lr}
80202c8e:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202c92:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202c96:	2105      	movs	r1, #5
80202c98:	f000 fa46 	bl	80203128 <GPIO_IRQ_Handler>
80202c9c:	bd80      	pop	{r7, pc}
	...

80202ca0 <GPIO2_IRQ6Handler>:
GPIO2_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:723
void GPIO2_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 6);    }
80202ca0:	b580      	push	{r7, lr}
80202ca2:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202ca6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202caa:	2106      	movs	r1, #6
80202cac:	f000 fa3c 	bl	80203128 <GPIO_IRQ_Handler>
80202cb0:	bd80      	pop	{r7, pc}
	...

80202cb4 <GPIO2_IRQ7Handler>:
GPIO2_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:725
void GPIO2_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 7);    }
80202cb4:	b580      	push	{r7, lr}
80202cb6:	f240 10b0 	movw	r0, #432	@ 0x1b0
80202cba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cbe:	2107      	movs	r1, #7
80202cc0:	f000 fa32 	bl	80203128 <GPIO_IRQ_Handler>
80202cc4:	bd80      	pop	{r7, pc}
	...

80202cc8 <GPIO3_IRQ0Handler>:
GPIO3_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:800
void GPIO3_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 0);    }
80202cc8:	b580      	push	{r7, lr}
80202cca:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202cce:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cd2:	2100      	movs	r1, #0
80202cd4:	f000 fa28 	bl	80203128 <GPIO_IRQ_Handler>
80202cd8:	bd80      	pop	{r7, pc}
	...

80202cdc <GPIO3_IRQ1Handler>:
GPIO3_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:802
void GPIO3_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 1);    }
80202cdc:	b580      	push	{r7, lr}
80202cde:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202ce2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ce6:	2101      	movs	r1, #1
80202ce8:	f000 fa1e 	bl	80203128 <GPIO_IRQ_Handler>
80202cec:	bd80      	pop	{r7, pc}
	...

80202cf0 <GPIO3_IRQ2Handler>:
GPIO3_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:804
void GPIO3_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 2);    }
80202cf0:	b580      	push	{r7, lr}
80202cf2:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202cf6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202cfa:	2102      	movs	r1, #2
80202cfc:	f000 fa14 	bl	80203128 <GPIO_IRQ_Handler>
80202d00:	bd80      	pop	{r7, pc}
	...

80202d04 <GPIO3_IRQ3Handler>:
GPIO3_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:806
void GPIO3_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 3);    }
80202d04:	b580      	push	{r7, lr}
80202d06:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202d0a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d0e:	2103      	movs	r1, #3
80202d10:	f000 fa0a 	bl	80203128 <GPIO_IRQ_Handler>
80202d14:	bd80      	pop	{r7, pc}
	...

80202d18 <GPIO3_IRQ4Handler>:
GPIO3_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:808
void GPIO3_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 4);    }
80202d18:	b580      	push	{r7, lr}
80202d1a:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202d1e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d22:	2104      	movs	r1, #4
80202d24:	f000 fa00 	bl	80203128 <GPIO_IRQ_Handler>
80202d28:	bd80      	pop	{r7, pc}
	...

80202d2c <GPIO3_IRQ5Handler>:
GPIO3_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:810
void GPIO3_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 5);    }
80202d2c:	b580      	push	{r7, lr}
80202d2e:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202d32:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d36:	2105      	movs	r1, #5
80202d38:	f000 f9f6 	bl	80203128 <GPIO_IRQ_Handler>
80202d3c:	bd80      	pop	{r7, pc}
	...

80202d40 <GPIO3_IRQ6Handler>:
GPIO3_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:812
void GPIO3_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 6);    }
80202d40:	b580      	push	{r7, lr}
80202d42:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202d46:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d4a:	2106      	movs	r1, #6
80202d4c:	f000 f9ec 	bl	80203128 <GPIO_IRQ_Handler>
80202d50:	bd80      	pop	{r7, pc}
	...

80202d54 <GPIO3_IRQ7Handler>:
GPIO3_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:814
void GPIO3_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 7);    }
80202d54:	b580      	push	{r7, lr}
80202d56:	f240 10ec 	movw	r0, #492	@ 0x1ec
80202d5a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d5e:	2107      	movs	r1, #7
80202d60:	f000 f9e2 	bl	80203128 <GPIO_IRQ_Handler>
80202d64:	bd80      	pop	{r7, pc}
	...

80202d68 <GPIO4_IRQ0Handler>:
GPIO4_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:889
void GPIO4_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 0);    }
80202d68:	b580      	push	{r7, lr}
80202d6a:	f240 2028 	movw	r0, #552	@ 0x228
80202d6e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d72:	2100      	movs	r1, #0
80202d74:	f000 f9d8 	bl	80203128 <GPIO_IRQ_Handler>
80202d78:	bd80      	pop	{r7, pc}
	...

80202d7c <GPIO4_IRQ1Handler>:
GPIO4_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:891
void GPIO4_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 1);    }
80202d7c:	b580      	push	{r7, lr}
80202d7e:	f240 2028 	movw	r0, #552	@ 0x228
80202d82:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d86:	2101      	movs	r1, #1
80202d88:	f000 f9ce 	bl	80203128 <GPIO_IRQ_Handler>
80202d8c:	bd80      	pop	{r7, pc}
	...

80202d90 <GPIO4_IRQ2Handler>:
GPIO4_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:893
void GPIO4_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 2);    }
80202d90:	b580      	push	{r7, lr}
80202d92:	f240 2028 	movw	r0, #552	@ 0x228
80202d96:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202d9a:	2102      	movs	r1, #2
80202d9c:	f000 f9c4 	bl	80203128 <GPIO_IRQ_Handler>
80202da0:	bd80      	pop	{r7, pc}
	...

80202da4 <GPIO4_IRQ3Handler>:
GPIO4_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:895
void GPIO4_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 3);    }
80202da4:	b580      	push	{r7, lr}
80202da6:	f240 2028 	movw	r0, #552	@ 0x228
80202daa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dae:	2103      	movs	r1, #3
80202db0:	f000 f9ba 	bl	80203128 <GPIO_IRQ_Handler>
80202db4:	bd80      	pop	{r7, pc}
	...

80202db8 <GPIO4_IRQ4Handler>:
GPIO4_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:897
void GPIO4_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 4);    }
80202db8:	b580      	push	{r7, lr}
80202dba:	f240 2028 	movw	r0, #552	@ 0x228
80202dbe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dc2:	2104      	movs	r1, #4
80202dc4:	f000 f9b0 	bl	80203128 <GPIO_IRQ_Handler>
80202dc8:	bd80      	pop	{r7, pc}
	...

80202dcc <GPIO4_IRQ5Handler>:
GPIO4_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:899
void GPIO4_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 5);    }
80202dcc:	b580      	push	{r7, lr}
80202dce:	f240 2028 	movw	r0, #552	@ 0x228
80202dd2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dd6:	2105      	movs	r1, #5
80202dd8:	f000 f9a6 	bl	80203128 <GPIO_IRQ_Handler>
80202ddc:	bd80      	pop	{r7, pc}
	...

80202de0 <GPIO4_IRQ6Handler>:
GPIO4_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:901
void GPIO4_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 6);    }
80202de0:	b580      	push	{r7, lr}
80202de2:	f240 2028 	movw	r0, #552	@ 0x228
80202de6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dea:	2106      	movs	r1, #6
80202dec:	f000 f99c 	bl	80203128 <GPIO_IRQ_Handler>
80202df0:	bd80      	pop	{r7, pc}
	...

80202df4 <GPIO4_IRQ7Handler>:
GPIO4_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:903
void GPIO4_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 7);    }
80202df4:	b580      	push	{r7, lr}
80202df6:	f240 2028 	movw	r0, #552	@ 0x228
80202dfa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202dfe:	2107      	movs	r1, #7
80202e00:	f000 f992 	bl	80203128 <GPIO_IRQ_Handler>
80202e04:	bd80      	pop	{r7, pc}
	...

80202e08 <GPIO5_IRQ0Handler>:
GPIO5_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:979
void GPIO5_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 0);    }
80202e08:	b580      	push	{r7, lr}
80202e0a:	f240 2064 	movw	r0, #612	@ 0x264
80202e0e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e12:	2100      	movs	r1, #0
80202e14:	f000 f988 	bl	80203128 <GPIO_IRQ_Handler>
80202e18:	bd80      	pop	{r7, pc}
	...

80202e1c <GPIO5_IRQ1Handler>:
GPIO5_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:981
void GPIO5_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 1);    }
80202e1c:	b580      	push	{r7, lr}
80202e1e:	f240 2064 	movw	r0, #612	@ 0x264
80202e22:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e26:	2101      	movs	r1, #1
80202e28:	f000 f97e 	bl	80203128 <GPIO_IRQ_Handler>
80202e2c:	bd80      	pop	{r7, pc}
	...

80202e30 <GPIO5_IRQ2Handler>:
GPIO5_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:983
void GPIO5_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 2);    }
80202e30:	b580      	push	{r7, lr}
80202e32:	f240 2064 	movw	r0, #612	@ 0x264
80202e36:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e3a:	2102      	movs	r1, #2
80202e3c:	f000 f974 	bl	80203128 <GPIO_IRQ_Handler>
80202e40:	bd80      	pop	{r7, pc}
	...

80202e44 <GPIO5_IRQ3Handler>:
GPIO5_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:985
void GPIO5_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 3);    }
80202e44:	b580      	push	{r7, lr}
80202e46:	f240 2064 	movw	r0, #612	@ 0x264
80202e4a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e4e:	2103      	movs	r1, #3
80202e50:	f000 f96a 	bl	80203128 <GPIO_IRQ_Handler>
80202e54:	bd80      	pop	{r7, pc}
	...

80202e58 <GPIO5_IRQ4Handler>:
GPIO5_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:987
void GPIO5_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 4);    }
80202e58:	b580      	push	{r7, lr}
80202e5a:	f240 2064 	movw	r0, #612	@ 0x264
80202e5e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e62:	2104      	movs	r1, #4
80202e64:	f000 f960 	bl	80203128 <GPIO_IRQ_Handler>
80202e68:	bd80      	pop	{r7, pc}
	...

80202e6c <GPIO5_IRQ5Handler>:
GPIO5_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:989
void GPIO5_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 5);    }
80202e6c:	b580      	push	{r7, lr}
80202e6e:	f240 2064 	movw	r0, #612	@ 0x264
80202e72:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e76:	2105      	movs	r1, #5
80202e78:	f000 f956 	bl	80203128 <GPIO_IRQ_Handler>
80202e7c:	bd80      	pop	{r7, pc}
	...

80202e80 <GPIO5_IRQ6Handler>:
GPIO5_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:991
void GPIO5_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 6);    }
80202e80:	b580      	push	{r7, lr}
80202e82:	f240 2064 	movw	r0, #612	@ 0x264
80202e86:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e8a:	2106      	movs	r1, #6
80202e8c:	f000 f94c 	bl	80203128 <GPIO_IRQ_Handler>
80202e90:	bd80      	pop	{r7, pc}
	...

80202e94 <GPIO5_IRQ7Handler>:
GPIO5_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:993
void GPIO5_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 7);    }
80202e94:	b580      	push	{r7, lr}
80202e96:	f240 2064 	movw	r0, #612	@ 0x264
80202e9a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202e9e:	2107      	movs	r1, #7
80202ea0:	f000 f942 	bl	80203128 <GPIO_IRQ_Handler>
80202ea4:	bd80      	pop	{r7, pc}
	...

80202ea8 <GPIO6_IRQ0Handler>:
GPIO6_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1069
void GPIO6_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 0);    }
80202ea8:	b580      	push	{r7, lr}
80202eaa:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202eae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202eb2:	2100      	movs	r1, #0
80202eb4:	f000 f938 	bl	80203128 <GPIO_IRQ_Handler>
80202eb8:	bd80      	pop	{r7, pc}
	...

80202ebc <GPIO6_IRQ1Handler>:
GPIO6_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1071
void GPIO6_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 1);    }
80202ebc:	b580      	push	{r7, lr}
80202ebe:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202ec2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ec6:	2101      	movs	r1, #1
80202ec8:	f000 f92e 	bl	80203128 <GPIO_IRQ_Handler>
80202ecc:	bd80      	pop	{r7, pc}
	...

80202ed0 <GPIO6_IRQ2Handler>:
GPIO6_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1073
void GPIO6_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 2);    }
80202ed0:	b580      	push	{r7, lr}
80202ed2:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202ed6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202eda:	2102      	movs	r1, #2
80202edc:	f000 f924 	bl	80203128 <GPIO_IRQ_Handler>
80202ee0:	bd80      	pop	{r7, pc}
	...

80202ee4 <GPIO6_IRQ3Handler>:
GPIO6_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1075
void GPIO6_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 3);    }
80202ee4:	b580      	push	{r7, lr}
80202ee6:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202eea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202eee:	2103      	movs	r1, #3
80202ef0:	f000 f91a 	bl	80203128 <GPIO_IRQ_Handler>
80202ef4:	bd80      	pop	{r7, pc}
	...

80202ef8 <GPIO6_IRQ4Handler>:
GPIO6_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1077
void GPIO6_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 4);    }
80202ef8:	b580      	push	{r7, lr}
80202efa:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202efe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f02:	2104      	movs	r1, #4
80202f04:	f000 f910 	bl	80203128 <GPIO_IRQ_Handler>
80202f08:	bd80      	pop	{r7, pc}
	...

80202f0c <GPIO6_IRQ5Handler>:
GPIO6_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1079
void GPIO6_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 5);    }
80202f0c:	b580      	push	{r7, lr}
80202f0e:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202f12:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f16:	2105      	movs	r1, #5
80202f18:	f000 f906 	bl	80203128 <GPIO_IRQ_Handler>
80202f1c:	bd80      	pop	{r7, pc}
	...

80202f20 <GPIO6_IRQ6Handler>:
GPIO6_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1081
void GPIO6_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 6);    }
80202f20:	b580      	push	{r7, lr}
80202f22:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202f26:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f2a:	2106      	movs	r1, #6
80202f2c:	f000 f8fc 	bl	80203128 <GPIO_IRQ_Handler>
80202f30:	bd80      	pop	{r7, pc}
	...

80202f34 <GPIO6_IRQ7Handler>:
GPIO6_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1083
void GPIO6_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 7);    }
80202f34:	b580      	push	{r7, lr}
80202f36:	f240 20a0 	movw	r0, #672	@ 0x2a0
80202f3a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f3e:	2107      	movs	r1, #7
80202f40:	f000 f8f2 	bl	80203128 <GPIO_IRQ_Handler>
80202f44:	bd80      	pop	{r7, pc}
	...

80202f48 <GPIO7_IRQ0Handler>:
GPIO7_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1159
void GPIO7_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 0);    }
80202f48:	b580      	push	{r7, lr}
80202f4a:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f52:	2100      	movs	r1, #0
80202f54:	f000 f8e8 	bl	80203128 <GPIO_IRQ_Handler>
80202f58:	bd80      	pop	{r7, pc}
	...

80202f5c <GPIO7_IRQ1Handler>:
GPIO7_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1161
void GPIO7_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 1);    }
80202f5c:	b580      	push	{r7, lr}
80202f5e:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f62:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f66:	2101      	movs	r1, #1
80202f68:	f000 f8de 	bl	80203128 <GPIO_IRQ_Handler>
80202f6c:	bd80      	pop	{r7, pc}
	...

80202f70 <GPIO7_IRQ2Handler>:
GPIO7_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1163
void GPIO7_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 2);    }
80202f70:	b580      	push	{r7, lr}
80202f72:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f76:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f7a:	2102      	movs	r1, #2
80202f7c:	f000 f8d4 	bl	80203128 <GPIO_IRQ_Handler>
80202f80:	bd80      	pop	{r7, pc}
	...

80202f84 <GPIO7_IRQ3Handler>:
GPIO7_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1165
void GPIO7_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 3);    }
80202f84:	b580      	push	{r7, lr}
80202f86:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f8a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202f8e:	2103      	movs	r1, #3
80202f90:	f000 f8ca 	bl	80203128 <GPIO_IRQ_Handler>
80202f94:	bd80      	pop	{r7, pc}
	...

80202f98 <GPIO7_IRQ4Handler>:
GPIO7_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1167
void GPIO7_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 4);    }
80202f98:	b580      	push	{r7, lr}
80202f9a:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202f9e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fa2:	2104      	movs	r1, #4
80202fa4:	f000 f8c0 	bl	80203128 <GPIO_IRQ_Handler>
80202fa8:	bd80      	pop	{r7, pc}
	...

80202fac <GPIO7_IRQ5Handler>:
GPIO7_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1169
void GPIO7_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 5);    }
80202fac:	b580      	push	{r7, lr}
80202fae:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202fb2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fb6:	2105      	movs	r1, #5
80202fb8:	f000 f8b6 	bl	80203128 <GPIO_IRQ_Handler>
80202fbc:	bd80      	pop	{r7, pc}
	...

80202fc0 <GPIO7_IRQ6Handler>:
GPIO7_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1171
void GPIO7_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 6);    }
80202fc0:	b580      	push	{r7, lr}
80202fc2:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202fc6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fca:	2106      	movs	r1, #6
80202fcc:	f000 f8ac 	bl	80203128 <GPIO_IRQ_Handler>
80202fd0:	bd80      	pop	{r7, pc}
	...

80202fd4 <GPIO7_IRQ7Handler>:
GPIO7_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1173
void GPIO7_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 7);    }
80202fd4:	b580      	push	{r7, lr}
80202fd6:	f240 20dc 	movw	r0, #732	@ 0x2dc
80202fda:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202fde:	2107      	movs	r1, #7
80202fe0:	f000 f8a2 	bl	80203128 <GPIO_IRQ_Handler>
80202fe4:	bd80      	pop	{r7, pc}
	...

80202fe8 <GPIO8_IRQ0Handler>:
GPIO8_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1248
void GPIO8_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 0);    }
80202fe8:	b580      	push	{r7, lr}
80202fea:	f240 3018 	movw	r0, #792	@ 0x318
80202fee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80202ff2:	2100      	movs	r1, #0
80202ff4:	f000 f898 	bl	80203128 <GPIO_IRQ_Handler>
80202ff8:	bd80      	pop	{r7, pc}
	...

80202ffc <GPIO8_IRQ1Handler>:
GPIO8_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1250
void GPIO8_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 1);    }
80202ffc:	b580      	push	{r7, lr}
80202ffe:	f240 3018 	movw	r0, #792	@ 0x318
80203002:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203006:	2101      	movs	r1, #1
80203008:	f000 f88e 	bl	80203128 <GPIO_IRQ_Handler>
8020300c:	bd80      	pop	{r7, pc}
	...

80203010 <GPIO8_IRQ2Handler>:
GPIO8_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1252
void GPIO8_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 2);    }
80203010:	b580      	push	{r7, lr}
80203012:	f240 3018 	movw	r0, #792	@ 0x318
80203016:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020301a:	2102      	movs	r1, #2
8020301c:	f000 f884 	bl	80203128 <GPIO_IRQ_Handler>
80203020:	bd80      	pop	{r7, pc}
	...

80203024 <GPIO8_IRQ3Handler>:
GPIO8_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1254
void GPIO8_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 3);    }
80203024:	b580      	push	{r7, lr}
80203026:	f240 3018 	movw	r0, #792	@ 0x318
8020302a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020302e:	2103      	movs	r1, #3
80203030:	f000 f87a 	bl	80203128 <GPIO_IRQ_Handler>
80203034:	bd80      	pop	{r7, pc}
	...

80203038 <GPIO8_IRQ4Handler>:
GPIO8_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1256
void GPIO8_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 4);    }
80203038:	b580      	push	{r7, lr}
8020303a:	f240 3018 	movw	r0, #792	@ 0x318
8020303e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203042:	2104      	movs	r1, #4
80203044:	f000 f870 	bl	80203128 <GPIO_IRQ_Handler>
80203048:	bd80      	pop	{r7, pc}
	...

8020304c <GPIO8_IRQ5Handler>:
GPIO8_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1258
void GPIO8_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 5);    }
8020304c:	b580      	push	{r7, lr}
8020304e:	f240 3018 	movw	r0, #792	@ 0x318
80203052:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203056:	2105      	movs	r1, #5
80203058:	f000 f866 	bl	80203128 <GPIO_IRQ_Handler>
8020305c:	bd80      	pop	{r7, pc}
	...

80203060 <GPIO8_IRQ6Handler>:
GPIO8_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1260
void GPIO8_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 6);    }
80203060:	b580      	push	{r7, lr}
80203062:	f240 3018 	movw	r0, #792	@ 0x318
80203066:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020306a:	2106      	movs	r1, #6
8020306c:	f000 f85c 	bl	80203128 <GPIO_IRQ_Handler>
80203070:	bd80      	pop	{r7, pc}
	...

80203074 <GPIO8_IRQ7Handler>:
GPIO8_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1262
void GPIO8_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 7);    }
80203074:	b580      	push	{r7, lr}
80203076:	f240 3018 	movw	r0, #792	@ 0x318
8020307a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020307e:	2107      	movs	r1, #7
80203080:	f000 f852 	bl	80203128 <GPIO_IRQ_Handler>
80203084:	bd80      	pop	{r7, pc}
	...

80203088 <GPIO9_IRQ0Handler>:
GPIO9_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1337
void GPIO9_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 0);    }
80203088:	b580      	push	{r7, lr}
8020308a:	f240 3054 	movw	r0, #852	@ 0x354
8020308e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203092:	2100      	movs	r1, #0
80203094:	f000 f848 	bl	80203128 <GPIO_IRQ_Handler>
80203098:	bd80      	pop	{r7, pc}
	...

8020309c <GPIO9_IRQ1Handler>:
GPIO9_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1339
void GPIO9_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 1);    }
8020309c:	b580      	push	{r7, lr}
8020309e:	f240 3054 	movw	r0, #852	@ 0x354
802030a2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802030a6:	2101      	movs	r1, #1
802030a8:	f000 f83e 	bl	80203128 <GPIO_IRQ_Handler>
802030ac:	bd80      	pop	{r7, pc}
	...

802030b0 <GPIO9_IRQ2Handler>:
GPIO9_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1341
void GPIO9_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 2);    }
802030b0:	b580      	push	{r7, lr}
802030b2:	f240 3054 	movw	r0, #852	@ 0x354
802030b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802030ba:	2102      	movs	r1, #2
802030bc:	f000 f834 	bl	80203128 <GPIO_IRQ_Handler>
802030c0:	bd80      	pop	{r7, pc}
	...

802030c4 <GPIO9_IRQ3Handler>:
GPIO9_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1343
void GPIO9_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 3);    }
802030c4:	b580      	push	{r7, lr}
802030c6:	f240 3054 	movw	r0, #852	@ 0x354
802030ca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802030ce:	2103      	movs	r1, #3
802030d0:	f000 f82a 	bl	80203128 <GPIO_IRQ_Handler>
802030d4:	bd80      	pop	{r7, pc}
	...

802030d8 <GPIO9_IRQ4Handler>:
GPIO9_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1345
void GPIO9_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 4);    }
802030d8:	b580      	push	{r7, lr}
802030da:	f240 3054 	movw	r0, #852	@ 0x354
802030de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802030e2:	2104      	movs	r1, #4
802030e4:	f000 f820 	bl	80203128 <GPIO_IRQ_Handler>
802030e8:	bd80      	pop	{r7, pc}
	...

802030ec <GPIO9_IRQ5Handler>:
GPIO9_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1347
void GPIO9_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 5);    }
802030ec:	b580      	push	{r7, lr}
802030ee:	f240 3054 	movw	r0, #852	@ 0x354
802030f2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802030f6:	2105      	movs	r1, #5
802030f8:	f000 f816 	bl	80203128 <GPIO_IRQ_Handler>
802030fc:	bd80      	pop	{r7, pc}
	...

80203100 <GPIO9_IRQ6Handler>:
GPIO9_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1349
void GPIO9_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 6);    }
80203100:	b580      	push	{r7, lr}
80203102:	f240 3054 	movw	r0, #852	@ 0x354
80203106:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020310a:	2106      	movs	r1, #6
8020310c:	f000 f80c 	bl	80203128 <GPIO_IRQ_Handler>
80203110:	bd80      	pop	{r7, pc}
	...

80203114 <GPIO9_IRQ7Handler>:
GPIO9_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1351
void GPIO9_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 7);    }
80203114:	b580      	push	{r7, lr}
80203116:	f240 3054 	movw	r0, #852	@ 0x354
8020311a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020311e:	2107      	movs	r1, #7
80203120:	f000 f802 	bl	80203128 <GPIO_IRQ_Handler>
80203124:	bd80      	pop	{r7, pc}
	...

80203128 <GPIO_IRQ_Handler>:
GPIO_IRQ_Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:503
{
80203128:	b580      	push	{r7, lr}
8020312a:	b082      	sub	sp, #8
8020312c:	9001      	str	r0, [sp, #4]
8020312e:	f88d 1003 	strb.w	r1, [sp, #3]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:505
    gpio_interrupt_eoi(GPIO->reg_base, pin_no);
80203132:	9801      	ldr	r0, [sp, #4]
80203134:	6800      	ldr	r0, [r0, #0]
80203136:	f89d 1003 	ldrb.w	r1, [sp, #3]
8020313a:	f001 fd61 	bl	80204c00 <gpio_interrupt_eoi>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:507
    if (GPIO->cb_event[pin_no] != NULL)
8020313e:	9801      	ldr	r0, [sp, #4]
80203140:	f89d 1003 	ldrb.w	r1, [sp, #3]
80203144:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80203148:	69c0      	ldr	r0, [r0, #28]
8020314a:	b148      	cbz	r0, 80203160 <GPIO_IRQ_Handler+0x38>
8020314c:	e7ff      	b.n	8020314e <GPIO_IRQ_Handler+0x26>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:509
        GPIO->cb_event[pin_no](ARM_GPIO_IRQ_EVENT_EXTERNAL);
8020314e:	9801      	ldr	r0, [sp, #4]
80203150:	f89d 1003 	ldrb.w	r1, [sp, #3]
80203154:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80203158:	69c1      	ldr	r1, [r0, #28]
8020315a:	2001      	movs	r0, #1
8020315c:	4788      	blx	r1
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:510
    }
8020315e:	e7ff      	b.n	80203160 <GPIO_IRQ_Handler+0x38>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:511
}
80203160:	b002      	add	sp, #8
80203162:	bd80      	pop	{r7, pc}

80203164 <HardFault_Handler>:
HardFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:317
    __asm("MOVS R0, #0\n\t"
80203164:	2000      	movs	r0, #0
80203166:	f002 b931 	b.w	802053cc <CommonAsmFaultHandler>
	...

8020316c <LPGPIO_IRQ0Handler>:
LPGPIO_IRQ0Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1869
            RTE_LPGPIO_PIN5_IRQ_PRIORITY,
            RTE_LPGPIO_PIN6_IRQ_PRIORITY,
            RTE_LPGPIO_PIN7_IRQ_PRIORITY,
    }
};
void LPGPIO_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 0);    }
8020316c:	b580      	push	{r7, lr}
8020316e:	f240 3090 	movw	r0, #912	@ 0x390
80203172:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203176:	2100      	movs	r1, #0
80203178:	f7ff ffd6 	bl	80203128 <GPIO_IRQ_Handler>
8020317c:	bd80      	pop	{r7, pc}
	...

80203180 <LPGPIO_IRQ1Handler>:
LPGPIO_IRQ1Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1871

void LPGPIO_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 1);    }
80203180:	b580      	push	{r7, lr}
80203182:	f240 3090 	movw	r0, #912	@ 0x390
80203186:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020318a:	2101      	movs	r1, #1
8020318c:	f7ff ffcc 	bl	80203128 <GPIO_IRQ_Handler>
80203190:	bd80      	pop	{r7, pc}
	...

80203194 <LPGPIO_IRQ2Handler>:
LPGPIO_IRQ2Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1873

void LPGPIO_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 2);    }
80203194:	b580      	push	{r7, lr}
80203196:	f240 3090 	movw	r0, #912	@ 0x390
8020319a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020319e:	2102      	movs	r1, #2
802031a0:	f7ff ffc2 	bl	80203128 <GPIO_IRQ_Handler>
802031a4:	bd80      	pop	{r7, pc}
	...

802031a8 <LPGPIO_IRQ3Handler>:
LPGPIO_IRQ3Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1875

void LPGPIO_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 3);    }
802031a8:	b580      	push	{r7, lr}
802031aa:	f240 3090 	movw	r0, #912	@ 0x390
802031ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802031b2:	2103      	movs	r1, #3
802031b4:	f7ff ffb8 	bl	80203128 <GPIO_IRQ_Handler>
802031b8:	bd80      	pop	{r7, pc}
	...

802031bc <LPGPIO_IRQ4Handler>:
LPGPIO_IRQ4Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1877

void LPGPIO_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 4);    }
802031bc:	b580      	push	{r7, lr}
802031be:	f240 3090 	movw	r0, #912	@ 0x390
802031c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802031c6:	2104      	movs	r1, #4
802031c8:	f7ff ffae 	bl	80203128 <GPIO_IRQ_Handler>
802031cc:	bd80      	pop	{r7, pc}
	...

802031d0 <LPGPIO_IRQ5Handler>:
LPGPIO_IRQ5Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1879

void LPGPIO_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 5);    }
802031d0:	b580      	push	{r7, lr}
802031d2:	f240 3090 	movw	r0, #912	@ 0x390
802031d6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802031da:	2105      	movs	r1, #5
802031dc:	f7ff ffa4 	bl	80203128 <GPIO_IRQ_Handler>
802031e0:	bd80      	pop	{r7, pc}
	...

802031e4 <LPGPIO_IRQ6Handler>:
LPGPIO_IRQ6Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1881

void LPGPIO_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 6);    }
802031e4:	b580      	push	{r7, lr}
802031e6:	f240 3090 	movw	r0, #912	@ 0x390
802031ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802031ee:	2106      	movs	r1, #6
802031f0:	f7ff ff9a 	bl	80203128 <GPIO_IRQ_Handler>
802031f4:	bd80      	pop	{r7, pc}
	...

802031f8 <LPGPIO_IRQ7Handler>:
LPGPIO_IRQ7Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1883

void LPGPIO_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 7);    }
802031f8:	b580      	push	{r7, lr}
802031fa:	f240 3090 	movw	r0, #912	@ 0x390
802031fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203202:	2107      	movs	r1, #7
80203204:	f7ff ff90 	bl	80203128 <GPIO_IRQ_Handler>
80203208:	bd80      	pop	{r7, pc}
	...

8020320c <MPU_Clear_All_Regions>:
MPU_Clear_All_Regions():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:146
 *         all the existing regions.
 * @param  None
 * @retval None
 */
void MPU_Clear_All_Regions(void)
{
8020320c:	b580      	push	{r7, lr}
8020320e:	b084      	sub	sp, #16
80203210:	f64e 5090 	movw	r0, #60816	@ 0xed90
80203214:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:147
    MPU_Type* mpu = MPU;
80203218:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:149
    /* Retrieve the number of regions */
    uint32_t num_regions = (mpu->TYPE >> 8);
8020321a:	9803      	ldr	r0, [sp, #12]
8020321c:	6800      	ldr	r0, [r0, #0]
8020321e:	0a00      	lsrs	r0, r0, #8
80203220:	9002      	str	r0, [sp, #8]
80203222:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:152
    uint32_t cnt;

    for(cnt = 0U; cnt < num_regions; cnt++)
80203224:	9001      	str	r0, [sp, #4]
80203226:	e7ff      	b.n	80203228 <MPU_Clear_All_Regions+0x1c>
80203228:	9801      	ldr	r0, [sp, #4]
8020322a:	9902      	ldr	r1, [sp, #8]
8020322c:	4288      	cmp	r0, r1
8020322e:	d208      	bcs.n	80203242 <MPU_Clear_All_Regions+0x36>
80203230:	e7ff      	b.n	80203232 <MPU_Clear_All_Regions+0x26>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:153
            ARM_MPU_ClrRegion(cnt);
80203232:	9801      	ldr	r0, [sp, #4]
80203234:	f7ff f9b4 	bl	802025a0 <ARM_MPU_ClrRegion>
80203238:	e7ff      	b.n	8020323a <MPU_Clear_All_Regions+0x2e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:152
    for(cnt = 0U; cnt < num_regions; cnt++)
8020323a:	9801      	ldr	r0, [sp, #4]
8020323c:	3001      	adds	r0, #1
8020323e:	9001      	str	r0, [sp, #4]
80203240:	e7f2      	b.n	80203228 <MPU_Clear_All_Regions+0x1c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:154
}
80203242:	b004      	add	sp, #16
80203244:	bd80      	pop	{r7, pc}
	...

80203248 <MPU_Load_Regions>:
MPU_Load_Regions():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:51
{
80203248:	b580      	push	{r7, lr}
8020324a:	b082      	sub	sp, #8
8020324c:	2000      	movs	r0, #0
8020324e:	9001      	str	r0, [sp, #4]
80203250:	2122      	movs	r1, #34	@ 0x22
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:111
    ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WT_RA_TRANSIENT, ARM_MPU_ATTR(
80203252:	f7ff fa6f 	bl	80202734 <ARM_MPU_SetMemAttr>
80203256:	2001      	movs	r0, #1
80203258:	2104      	movs	r1, #4
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:117
    ARM_MPU_SetMemAttr(MEMATTRIDX_DEVICE_nGnRE, ARM_MPU_ATTR(
8020325a:	f7ff fa6b 	bl	80202734 <ARM_MPU_SetMemAttr>
8020325e:	2002      	movs	r0, #2
80203260:	21ff      	movs	r1, #255	@ 0xff
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:123
    ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WB_RA_WA, ARM_MPU_ATTR(
80203262:	f7ff fa67 	bl	80202734 <ARM_MPU_SetMemAttr>
80203266:	2003      	movs	r0, #3
80203268:	21aa      	movs	r1, #170	@ 0xaa
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:129
    ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WT_RA, ARM_MPU_ATTR(
8020326a:	f7ff fa63 	bl	80202734 <ARM_MPU_SetMemAttr>
8020326e:	9801      	ldr	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:135
    ARM_MPU_Load(0, mpu_table, sizeof(mpu_table)/sizeof(ARM_MPU_Region_t));
80203270:	f646 0134 	movw	r1, #26676	@ 0x6834
80203274:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80203278:	2209      	movs	r2, #9
8020327a:	f7ff f9db 	bl	80202634 <ARM_MPU_Load>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:136
}
8020327e:	b002      	add	sp, #8
80203280:	bd80      	pop	{r7, pc}
	...

80203284 <MPU_Setup>:
MPU_Setup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:170
 * @param  None
 * @retval None
 */
__attribute__ ((weak))
void MPU_Setup(void)
{
80203284:	b580      	push	{r7, lr}
80203286:	f64e 5094 	movw	r0, #60820	@ 0xed94
8020328a:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:178
     * Make this conditional to avoid an unnecessary DSB -
     * If this call is made from the booting sequence, it is very
     * likely that cache auto-invalidation is ongoing (as we prepare
     * the table), and DSB would wait for it to finish.
     */
    if (MPU->CTRL & MPU_CTRL_ENABLE_Msk)
8020328e:	6800      	ldr	r0, [r0, #0]
80203290:	07c0      	lsls	r0, r0, #31
80203292:	b118      	cbz	r0, 8020329c <MPU_Setup+0x18>
80203294:	e7ff      	b.n	80203296 <MPU_Setup+0x12>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:181
    {
        /* Disable the MPU before operating on the table */
        ARM_MPU_Disable();
80203296:	f7ff f99b 	bl	802025d0 <ARM_MPU_Disable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:182
    }
8020329a:	e7ff      	b.n	8020329c <MPU_Setup+0x18>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:185

    /* Clear all the regions */
    MPU_Clear_All_Regions();
8020329c:	f7ff ffb6 	bl	8020320c <MPU_Clear_All_Regions>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:188

    /* Load the new table: mpu_table */
    MPU_Load_Regions();
802032a0:	f7ff ffd2 	bl	80203248 <MPU_Load_Regions>
802032a4:	2006      	movs	r0, #6
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:191

    /* Enable the MPU now */
    ARM_MPU_Enable(MPU_CONTROL);
802032a6:	f7ff f9ab 	bl	80202600 <ARM_MPU_Enable>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:192
}
802032aa:	bd80      	pop	{r7, pc}

802032ac <MemManage_Handler>:
MemManage_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:324
    __asm("MOVS R0, #1\n\t"
802032ac:	2001      	movs	r0, #1
802032ae:	f002 b88d 	b.w	802053cc <CommonAsmFaultHandler>
	...

802032b4 <Reset_Handler>:
Reset_Handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1078
  __asm (
802032b4:	4803      	ldr	r0, [pc, #12]	@ (802032c4 <Reset_Handler+0x10>)
802032b6:	4904      	ldr	r1, [pc, #16]	@ (802032c8 <Reset_Handler+0x14>)
802032b8:	f380 880a 	msr	MSPLIM, r0
802032bc:	f381 8808 	msr	MSP, r1
802032c0:	f000 f804 	bl	802032cc <Reset_Handler_C>
802032c4:	200fe000 	.word	0x200fe000
802032c8:	20100000 	.word	0x20100000

802032cc <Reset_Handler_C>:
Reset_Handler_C():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1092
  SystemInit();                             /* CMSIS System Initialization */
802032cc:	f000 fae0 	bl	80203890 <SystemInit>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1093
  __PROGRAM_START();                        /* Enter PreMain (C library entry point) */
802032d0:	f7fd fa76 	bl	802007c0 <__main>

802032d4 <SAU_TCM_NS_Setup>:
SAU_TCM_NS_Setup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:70

#define SAU_BASE                            (SCS_BASE +  0x0DD0UL)                        /*!< Security Attribution Unit */
#define SAU                                 ((SAU_Type       *)     SAU_BASE)             /*!< Security Attribution Unit */

__STATIC_INLINE void SAU_TCM_NS_Setup (void)
{
802032d4:	f64e 51d8 	movw	r1, #60888	@ 0xedd8
802032d8:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802032dc:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:71
    SAU->RNR = 0;
802032de:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:72
    SAU->RBAR = (uint32_t)&ns_region_0_start & SAU_RBAR_BADDR_Msk;
802032e0:	f244 0000 	movw	r0, #16384	@ 0x4000
802032e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802032e8:	f020 001f 	bic.w	r0, r0, #31
802032ec:	f64e 51dc 	movw	r1, #60892	@ 0xeddc
802032f0:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802032f4:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:73
    SAU->RLAR = (((uint32_t)&ns_region_0_end - 1) & SAU_RLAR_LADDR_Msk) | \
802032f6:	f244 0000 	movw	r0, #16384	@ 0x4000
802032fa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802032fe:	1e41      	subs	r1, r0, #1
80203300:	2001      	movs	r0, #1
80203302:	f360 0104 	bfi	r1, r0, #0, #5
80203306:	f64e 52e0 	movw	r2, #60896	@ 0xede0
8020330a:	f2ce 0200 	movt	r2, #57344	@ 0xe000
8020330e:	6011      	str	r1, [r2, #0]
80203310:	f64e 51d0 	movw	r1, #60880	@ 0xedd0
80203314:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:76
                SAU_RLAR_ENABLE_Msk;

    SAU->CTRL = ((1U << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk);
80203318:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:77
}
8020331a:	4770      	bx	lr

8020331c <SEGGER_RTT_ConfigUpBuffer>:
SEGGER_RTT_ConfigUpBuffer():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1659
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
8020331c:	b580      	push	{r7, lr}
8020331e:	b08a      	sub	sp, #40	@ 0x28
80203320:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
80203324:	9009      	str	r0, [sp, #36]	@ 0x24
80203326:	9108      	str	r1, [sp, #32]
80203328:	9207      	str	r2, [sp, #28]
8020332a:	9306      	str	r3, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1664
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_UP* pUp;

  INIT();
8020332c:	e7ff      	b.n	8020332e <SEGGER_RTT_ConfigUpBuffer+0x12>
8020332e:	f240 708c 	movw	r0, #1932	@ 0x78c
80203332:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203336:	9002      	str	r0, [sp, #8]
80203338:	9802      	ldr	r0, [sp, #8]
8020333a:	7800      	ldrb	r0, [r0, #0]
8020333c:	2853      	cmp	r0, #83	@ 0x53
8020333e:	d003      	beq.n	80203348 <SEGGER_RTT_ConfigUpBuffer+0x2c>
80203340:	e7ff      	b.n	80203342 <SEGGER_RTT_ConfigUpBuffer+0x26>
80203342:	f000 fca9 	bl	80203c98 <_DoInit>
80203346:	e7ff      	b.n	80203348 <SEGGER_RTT_ConfigUpBuffer+0x2c>
80203348:	e7ff      	b.n	8020334a <SEGGER_RTT_ConfigUpBuffer+0x2e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1665
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
8020334a:	f240 708c 	movw	r0, #1932	@ 0x78c
8020334e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203352:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1666
  if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
80203354:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203356:	2802      	cmp	r0, #2
80203358:	d82a      	bhi.n	802033b0 <SEGGER_RTT_ConfigUpBuffer+0x94>
8020335a:	e7ff      	b.n	8020335c <SEGGER_RTT_ConfigUpBuffer+0x40>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1667
    SEGGER_RTT_LOCK();
8020335c:	f3ef 8011 	mrs	r0, BASEPRI
80203360:	f04f 0120 	mov.w	r1, #32
80203364:	f381 8811 	msr	BASEPRI, r1
80203368:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1668
    pUp = &pRTTCB->aUp[BufferIndex];
8020336a:	9804      	ldr	r0, [sp, #16]
8020336c:	9909      	ldr	r1, [sp, #36]	@ 0x24
8020336e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
80203372:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
80203376:	3018      	adds	r0, #24
80203378:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1669
    if (BufferIndex) {
8020337a:	9809      	ldr	r0, [sp, #36]	@ 0x24
8020337c:	b178      	cbz	r0, 8020339e <SEGGER_RTT_ConfigUpBuffer+0x82>
8020337e:	e7ff      	b.n	80203380 <SEGGER_RTT_ConfigUpBuffer+0x64>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1670
      pUp->sName        = sName;
80203380:	9808      	ldr	r0, [sp, #32]
80203382:	9903      	ldr	r1, [sp, #12]
80203384:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1671
      pUp->pBuffer      = (char*)pBuffer;
80203386:	9807      	ldr	r0, [sp, #28]
80203388:	9903      	ldr	r1, [sp, #12]
8020338a:	6048      	str	r0, [r1, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1672
      pUp->SizeOfBuffer = BufferSize;
8020338c:	9806      	ldr	r0, [sp, #24]
8020338e:	9903      	ldr	r1, [sp, #12]
80203390:	6088      	str	r0, [r1, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1673
      pUp->RdOff        = 0u;
80203392:	9903      	ldr	r1, [sp, #12]
80203394:	2000      	movs	r0, #0
80203396:	6108      	str	r0, [r1, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1674
      pUp->WrOff        = 0u;
80203398:	9903      	ldr	r1, [sp, #12]
8020339a:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1675
    }
8020339c:	e7ff      	b.n	8020339e <SEGGER_RTT_ConfigUpBuffer+0x82>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1676
    pUp->Flags          = Flags;
8020339e:	980c      	ldr	r0, [sp, #48]	@ 0x30
802033a0:	9903      	ldr	r1, [sp, #12]
802033a2:	6148      	str	r0, [r1, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1677
    SEGGER_RTT_UNLOCK();
802033a4:	9801      	ldr	r0, [sp, #4]
802033a6:	f380 8811 	msr	BASEPRI, r0
802033aa:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1678
    r =  0;
802033ac:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1679
  } else {
802033ae:	e003      	b.n	802033b8 <SEGGER_RTT_ConfigUpBuffer+0x9c>
802033b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1680
    r = -1;
802033b4:	9005      	str	r0, [sp, #20]
802033b6:	e7ff      	b.n	802033b8 <SEGGER_RTT_ConfigUpBuffer+0x9c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1682
  }
  return r;
802033b8:	9805      	ldr	r0, [sp, #20]
802033ba:	b00a      	add	sp, #40	@ 0x28
802033bc:	bd80      	pop	{r7, pc}
	...

802033c0 <SEGGER_RTT_Write>:
SEGGER_RTT_Write():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1194
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
802033c0:	b580      	push	{r7, lr}
802033c2:	b086      	sub	sp, #24
802033c4:	9005      	str	r0, [sp, #20]
802033c6:	9104      	str	r1, [sp, #16]
802033c8:	9203      	str	r2, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1197
  INIT();
802033ca:	e7ff      	b.n	802033cc <SEGGER_RTT_Write+0xc>
802033cc:	f240 708c 	movw	r0, #1932	@ 0x78c
802033d0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802033d4:	9001      	str	r0, [sp, #4]
802033d6:	9801      	ldr	r0, [sp, #4]
802033d8:	7800      	ldrb	r0, [r0, #0]
802033da:	2853      	cmp	r0, #83	@ 0x53
802033dc:	d003      	beq.n	802033e6 <SEGGER_RTT_Write+0x26>
802033de:	e7ff      	b.n	802033e0 <SEGGER_RTT_Write+0x20>
802033e0:	f000 fc5a 	bl	80203c98 <_DoInit>
802033e4:	e7ff      	b.n	802033e6 <SEGGER_RTT_Write+0x26>
802033e6:	e7ff      	b.n	802033e8 <SEGGER_RTT_Write+0x28>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1198
  SEGGER_RTT_LOCK();
802033e8:	f3ef 8011 	mrs	r0, BASEPRI
802033ec:	f04f 0120 	mov.w	r1, #32
802033f0:	f381 8811 	msr	BASEPRI, r1
802033f4:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1199
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
802033f6:	9805      	ldr	r0, [sp, #20]
802033f8:	9904      	ldr	r1, [sp, #16]
802033fa:	9a03      	ldr	r2, [sp, #12]
802033fc:	f000 f808 	bl	80203410 <SEGGER_RTT_WriteNoLock>
80203400:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1200
  SEGGER_RTT_UNLOCK();
80203402:	9800      	ldr	r0, [sp, #0]
80203404:	f380 8811 	msr	BASEPRI, r0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1201
  return Status;
80203408:	9802      	ldr	r0, [sp, #8]
8020340a:	b006      	add	sp, #24
8020340c:	bd80      	pop	{r7, pc}
	...

80203410 <SEGGER_RTT_WriteNoLock>:
SEGGER_RTT_WriteNoLock():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1089
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
80203410:	b580      	push	{r7, lr}
80203412:	b08a      	sub	sp, #40	@ 0x28
80203414:	9009      	str	r0, [sp, #36]	@ 0x24
80203416:	9108      	str	r1, [sp, #32]
80203418:	9207      	str	r2, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1097
  pData = (const char *)pBuffer;
8020341a:	9808      	ldr	r0, [sp, #32]
8020341c:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1098
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
8020341e:	9809      	ldr	r0, [sp, #36]	@ 0x24
80203420:	eb00 0140 	add.w	r1, r0, r0, lsl #1
80203424:	f240 708c 	movw	r0, #1932	@ 0x78c
80203428:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020342c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
80203430:	3018      	adds	r0, #24
80203432:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1102
  switch (pRing->Flags) {
80203434:	9803      	ldr	r0, [sp, #12]
80203436:	6940      	ldr	r0, [r0, #20]
80203438:	9002      	str	r0, [sp, #8]
8020343a:	b140      	cbz	r0, 8020344e <SEGGER_RTT_WriteNoLock+0x3e>
8020343c:	e7ff      	b.n	8020343e <SEGGER_RTT_WriteNoLock+0x2e>
8020343e:	9802      	ldr	r0, [sp, #8]
80203440:	2801      	cmp	r0, #1
80203442:	d019      	beq.n	80203478 <SEGGER_RTT_WriteNoLock+0x68>
80203444:	e7ff      	b.n	80203446 <SEGGER_RTT_WriteNoLock+0x36>
80203446:	9802      	ldr	r0, [sp, #8]
80203448:	2802      	cmp	r0, #2
8020344a:	d02c      	beq.n	802034a6 <SEGGER_RTT_WriteNoLock+0x96>
8020344c:	e032      	b.n	802034b4 <SEGGER_RTT_WriteNoLock+0xa4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1108
    Avail = _GetAvailWriteSpace(pRing);
8020344e:	9803      	ldr	r0, [sp, #12]
80203450:	f000 fc74 	bl	80203d3c <_GetAvailWriteSpace>
80203454:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1109
    if (Avail < NumBytes) {
80203456:	9805      	ldr	r0, [sp, #20]
80203458:	9907      	ldr	r1, [sp, #28]
8020345a:	4288      	cmp	r0, r1
8020345c:	d203      	bcs.n	80203466 <SEGGER_RTT_WriteNoLock+0x56>
8020345e:	e7ff      	b.n	80203460 <SEGGER_RTT_WriteNoLock+0x50>
80203460:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1110
      Status = 0u;
80203462:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1111
    } else {
80203464:	e007      	b.n	80203476 <SEGGER_RTT_WriteNoLock+0x66>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1112
      Status = NumBytes;
80203466:	9807      	ldr	r0, [sp, #28]
80203468:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1113
      _WriteNoCheck(pRing, pData, NumBytes);
8020346a:	9803      	ldr	r0, [sp, #12]
8020346c:	9904      	ldr	r1, [sp, #16]
8020346e:	9a07      	ldr	r2, [sp, #28]
80203470:	f000 feea 	bl	80204248 <_WriteNoCheck>
80203474:	e7ff      	b.n	80203476 <SEGGER_RTT_WriteNoLock+0x66>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1115
    break;
80203476:	e020      	b.n	802034ba <SEGGER_RTT_WriteNoLock+0xaa>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1120
    Avail = _GetAvailWriteSpace(pRing);
80203478:	9803      	ldr	r0, [sp, #12]
8020347a:	f000 fc5f 	bl	80203d3c <_GetAvailWriteSpace>
8020347e:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1121
    Status = Avail < NumBytes ? Avail : NumBytes;
80203480:	9805      	ldr	r0, [sp, #20]
80203482:	9907      	ldr	r1, [sp, #28]
80203484:	4288      	cmp	r0, r1
80203486:	d203      	bcs.n	80203490 <SEGGER_RTT_WriteNoLock+0x80>
80203488:	e7ff      	b.n	8020348a <SEGGER_RTT_WriteNoLock+0x7a>
8020348a:	9805      	ldr	r0, [sp, #20]
8020348c:	9001      	str	r0, [sp, #4]
8020348e:	e002      	b.n	80203496 <SEGGER_RTT_WriteNoLock+0x86>
80203490:	9807      	ldr	r0, [sp, #28]
80203492:	9001      	str	r0, [sp, #4]
80203494:	e7ff      	b.n	80203496 <SEGGER_RTT_WriteNoLock+0x86>
80203496:	9801      	ldr	r0, [sp, #4]
80203498:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1122
    _WriteNoCheck(pRing, pData, Status);
8020349a:	9803      	ldr	r0, [sp, #12]
8020349c:	9904      	ldr	r1, [sp, #16]
8020349e:	9a06      	ldr	r2, [sp, #24]
802034a0:	f000 fed2 	bl	80204248 <_WriteNoCheck>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1123
    break;
802034a4:	e009      	b.n	802034ba <SEGGER_RTT_WriteNoLock+0xaa>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1128
    Status = _WriteBlocking(pRing, pData, NumBytes);
802034a6:	9803      	ldr	r0, [sp, #12]
802034a8:	9904      	ldr	r1, [sp, #16]
802034aa:	9a07      	ldr	r2, [sp, #28]
802034ac:	f000 fe5a 	bl	80204164 <_WriteBlocking>
802034b0:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1129
    break;
802034b2:	e002      	b.n	802034ba <SEGGER_RTT_WriteNoLock+0xaa>
802034b4:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1131
    Status = 0u;
802034b6:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1132
    break;
802034b8:	e7ff      	b.n	802034ba <SEGGER_RTT_WriteNoLock+0xaa>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1137
  return Status;
802034ba:	9806      	ldr	r0, [sp, #24]
802034bc:	b00a      	add	sp, #40	@ 0x28
802034be:	bd80      	pop	{r7, pc}

802034c0 <SEGGER_RTT_printf>:
SEGGER_RTT_printf():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:508
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
802034c0:	b082      	sub	sp, #8
802034c2:	b580      	push	{r7, lr}
802034c4:	b084      	sub	sp, #16
802034c6:	9307      	str	r3, [sp, #28]
802034c8:	9206      	str	r2, [sp, #24]
802034ca:	9003      	str	r0, [sp, #12]
802034cc:	9102      	str	r1, [sp, #8]
802034ce:	a806      	add	r0, sp, #24
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:512
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
802034d0:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:513
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
802034d2:	9803      	ldr	r0, [sp, #12]
802034d4:	9902      	ldr	r1, [sp, #8]
802034d6:	466a      	mov	r2, sp
802034d8:	f000 f808 	bl	802034ec <SEGGER_RTT_vprintf>
802034dc:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:515
  va_end(ParamList);
  return r;
802034de:	9801      	ldr	r0, [sp, #4]
802034e0:	b004      	add	sp, #16
802034e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
802034e6:	b002      	add	sp, #8
802034e8:	4770      	bx	lr
	...

802034ec <SEGGER_RTT_vprintf>:
SEGGER_RTT_vprintf():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:317
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
802034ec:	b580      	push	{r7, lr}
802034ee:	b0a4      	sub	sp, #144	@ 0x90
802034f0:	9023      	str	r0, [sp, #140]	@ 0x8c
802034f2:	9122      	str	r1, [sp, #136]	@ 0x88
802034f4:	9221      	str	r2, [sp, #132]	@ 0x84
802034f6:	a806      	add	r0, sp, #24
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:327
  BufferDesc.pBuffer        = acBuffer;
802034f8:	901b      	str	r0, [sp, #108]	@ 0x6c
802034fa:	2040      	movs	r0, #64	@ 0x40
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:328
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
802034fc:	901c      	str	r0, [sp, #112]	@ 0x70
802034fe:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:329
  BufferDesc.Cnt            = 0u;
80203500:	901d      	str	r0, [sp, #116]	@ 0x74
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:330
  BufferDesc.RTTBufferIndex = BufferIndex;
80203502:	9923      	ldr	r1, [sp, #140]	@ 0x8c
80203504:	911f      	str	r1, [sp, #124]	@ 0x7c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:331
  BufferDesc.ReturnValue    = 0;
80203506:	901e      	str	r0, [sp, #120]	@ 0x78
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:333
  do {
80203508:	e7ff      	b.n	8020350a <SEGGER_RTT_vprintf+0x1e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:334
    c = *sFormat;
8020350a:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020350c:	7800      	ldrb	r0, [r0, #0]
8020350e:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:335
    sFormat++;
80203512:	9822      	ldr	r0, [sp, #136]	@ 0x88
80203514:	3001      	adds	r0, #1
80203516:	9022      	str	r0, [sp, #136]	@ 0x88
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:336
    if (c == 0u) {
80203518:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
8020351c:	b908      	cbnz	r0, 80203522 <SEGGER_RTT_vprintf+0x36>
8020351e:	e7ff      	b.n	80203520 <SEGGER_RTT_vprintf+0x34>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:337
      break;
80203520:	e19d      	b.n	8020385e <SEGGER_RTT_vprintf+0x372>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:339
    if (c == '%') {
80203522:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
80203526:	2825      	cmp	r0, #37	@ 0x25
80203528:	f040 818c 	bne.w	80203844 <SEGGER_RTT_vprintf+0x358>
8020352c:	e7ff      	b.n	8020352e <SEGGER_RTT_vprintf+0x42>
8020352e:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:343
      FormatFlags = 0u;
80203530:	9017      	str	r0, [sp, #92]	@ 0x5c
80203532:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:344
      v = 1;
80203534:	901a      	str	r0, [sp, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:345
      do {
80203536:	e7ff      	b.n	80203538 <SEGGER_RTT_vprintf+0x4c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:346
        c = *sFormat;
80203538:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020353a:	7800      	ldrb	r0, [r0, #0]
8020353c:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:347
        switch (c) {
80203540:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
80203544:	3823      	subs	r0, #35	@ 0x23
80203546:	4601      	mov	r1, r0
80203548:	9103      	str	r1, [sp, #12]
8020354a:	280d      	cmp	r0, #13
8020354c:	d829      	bhi.n	802035a2 <SEGGER_RTT_vprintf+0xb6>
8020354e:	9903      	ldr	r1, [sp, #12]
80203550:	e8df f001 	tbb	[pc, r1]
80203554:	2727271f 	.word	0x2727271f
80203558:	27272727 	.word	0x27272727
8020355c:	27072717 	.word	0x27072717
80203560:	0f27      	.short	0x0f27
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:348
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
80203562:	9817      	ldr	r0, [sp, #92]	@ 0x5c
80203564:	f040 0001 	orr.w	r0, r0, #1
80203568:	9017      	str	r0, [sp, #92]	@ 0x5c
8020356a:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020356c:	3001      	adds	r0, #1
8020356e:	9022      	str	r0, [sp, #136]	@ 0x88
80203570:	e01a      	b.n	802035a8 <SEGGER_RTT_vprintf+0xbc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:349
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
80203572:	9817      	ldr	r0, [sp, #92]	@ 0x5c
80203574:	f040 0002 	orr.w	r0, r0, #2
80203578:	9017      	str	r0, [sp, #92]	@ 0x5c
8020357a:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020357c:	3001      	adds	r0, #1
8020357e:	9022      	str	r0, [sp, #136]	@ 0x88
80203580:	e012      	b.n	802035a8 <SEGGER_RTT_vprintf+0xbc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:350
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
80203582:	9817      	ldr	r0, [sp, #92]	@ 0x5c
80203584:	f040 0004 	orr.w	r0, r0, #4
80203588:	9017      	str	r0, [sp, #92]	@ 0x5c
8020358a:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020358c:	3001      	adds	r0, #1
8020358e:	9022      	str	r0, [sp, #136]	@ 0x88
80203590:	e00a      	b.n	802035a8 <SEGGER_RTT_vprintf+0xbc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:351
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
80203592:	9817      	ldr	r0, [sp, #92]	@ 0x5c
80203594:	f040 0008 	orr.w	r0, r0, #8
80203598:	9017      	str	r0, [sp, #92]	@ 0x5c
8020359a:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020359c:	3001      	adds	r0, #1
8020359e:	9022      	str	r0, [sp, #136]	@ 0x88
802035a0:	e002      	b.n	802035a8 <SEGGER_RTT_vprintf+0xbc>
802035a2:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:352
        default:  v = 0; break;
802035a4:	901a      	str	r0, [sp, #104]	@ 0x68
802035a6:	e7ff      	b.n	802035a8 <SEGGER_RTT_vprintf+0xbc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:354
      } while (v);
802035a8:	e7ff      	b.n	802035aa <SEGGER_RTT_vprintf+0xbe>
802035aa:	981a      	ldr	r0, [sp, #104]	@ 0x68
802035ac:	b108      	cbz	r0, 802035b2 <SEGGER_RTT_vprintf+0xc6>
802035ae:	f02f c83d 	le	80203538 <SEGGER_RTT_vprintf+0x4c>
802035b2:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:358
      FieldWidth = 0u;
802035b4:	9016      	str	r0, [sp, #88]	@ 0x58
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:359
      do {
802035b6:	e7ff      	b.n	802035b8 <SEGGER_RTT_vprintf+0xcc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:360
        c = *sFormat;
802035b8:	9822      	ldr	r0, [sp, #136]	@ 0x88
802035ba:	7800      	ldrb	r0, [r0, #0]
802035bc:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:361
        if ((c < '0') || (c > '9')) {
802035c0:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
802035c4:	2830      	cmp	r0, #48	@ 0x30
802035c6:	db05      	blt.n	802035d4 <SEGGER_RTT_vprintf+0xe8>
802035c8:	e7ff      	b.n	802035ca <SEGGER_RTT_vprintf+0xde>
802035ca:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
802035ce:	283a      	cmp	r0, #58	@ 0x3a
802035d0:	db01      	blt.n	802035d6 <SEGGER_RTT_vprintf+0xea>
802035d2:	e7ff      	b.n	802035d4 <SEGGER_RTT_vprintf+0xe8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:362
          break;
802035d4:	e010      	b.n	802035f8 <SEGGER_RTT_vprintf+0x10c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:364
        sFormat++;
802035d6:	9822      	ldr	r0, [sp, #136]	@ 0x88
802035d8:	3001      	adds	r0, #1
802035da:	9022      	str	r0, [sp, #136]	@ 0x88
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:365
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
802035dc:	9816      	ldr	r0, [sp, #88]	@ 0x58
802035de:	eb00 0180 	add.w	r1, r0, r0, lsl #2
802035e2:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
802035e6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
802035ea:	3830      	subs	r0, #48	@ 0x30
802035ec:	9016      	str	r0, [sp, #88]	@ 0x58
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:366
      } while (1);
802035ee:	e7ff      	b.n	802035f0 <SEGGER_RTT_vprintf+0x104>
802035f0:	2001      	movs	r0, #1
802035f2:	b108      	cbz	r0, 802035f8 <SEGGER_RTT_vprintf+0x10c>
802035f4:	f02f c021 	le	802035b8 <SEGGER_RTT_vprintf+0xcc>
802035f8:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:371
      PrecisionSet = 0;
802035fa:	f88d 0067 	strb.w	r0, [sp, #103]	@ 0x67
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:372
      Precision = 0u;
802035fe:	9018      	str	r0, [sp, #96]	@ 0x60
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:373
      c = *sFormat;
80203600:	9822      	ldr	r0, [sp, #136]	@ 0x88
80203602:	7800      	ldrb	r0, [r0, #0]
80203604:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:374
      if (c == '.') {
80203608:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
8020360c:	282e      	cmp	r0, #46	@ 0x2e
8020360e:	d13b      	bne.n	80203688 <SEGGER_RTT_vprintf+0x19c>
80203610:	e7ff      	b.n	80203612 <SEGGER_RTT_vprintf+0x126>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:375
        sFormat++;
80203612:	9822      	ldr	r0, [sp, #136]	@ 0x88
80203614:	3001      	adds	r0, #1
80203616:	9022      	str	r0, [sp, #136]	@ 0x88
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:376
        if (*sFormat == '*') {
80203618:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020361a:	7800      	ldrb	r0, [r0, #0]
8020361c:	282a      	cmp	r0, #42	@ 0x2a
8020361e:	d10d      	bne.n	8020363c <SEGGER_RTT_vprintf+0x150>
80203620:	e7ff      	b.n	80203622 <SEGGER_RTT_vprintf+0x136>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:377
          sFormat++;
80203622:	9822      	ldr	r0, [sp, #136]	@ 0x88
80203624:	3001      	adds	r0, #1
80203626:	9022      	str	r0, [sp, #136]	@ 0x88
80203628:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:378
          PrecisionSet = 1;
8020362a:	f88d 0067 	strb.w	r0, [sp, #103]	@ 0x67
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:379
          Precision = va_arg(*pParamList, int);
8020362e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
80203630:	6810      	ldr	r0, [r2, #0]
80203632:	1d01      	adds	r1, r0, #4
80203634:	6011      	str	r1, [r2, #0]
80203636:	6800      	ldr	r0, [r0, #0]
80203638:	9018      	str	r0, [sp, #96]	@ 0x60
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:380
        } else {
8020363a:	e024      	b.n	80203686 <SEGGER_RTT_vprintf+0x19a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:381
          do {
8020363c:	e7ff      	b.n	8020363e <SEGGER_RTT_vprintf+0x152>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:382
            c = *sFormat;
8020363e:	9822      	ldr	r0, [sp, #136]	@ 0x88
80203640:	7800      	ldrb	r0, [r0, #0]
80203642:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:383
            if ((c < '0') || (c > '9')) {
80203646:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
8020364a:	2830      	cmp	r0, #48	@ 0x30
8020364c:	db05      	blt.n	8020365a <SEGGER_RTT_vprintf+0x16e>
8020364e:	e7ff      	b.n	80203650 <SEGGER_RTT_vprintf+0x164>
80203650:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
80203654:	283a      	cmp	r0, #58	@ 0x3a
80203656:	db01      	blt.n	8020365c <SEGGER_RTT_vprintf+0x170>
80203658:	e7ff      	b.n	8020365a <SEGGER_RTT_vprintf+0x16e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:384
              break;
8020365a:	e013      	b.n	80203684 <SEGGER_RTT_vprintf+0x198>
8020365c:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:386
            PrecisionSet = 1;
8020365e:	f88d 0067 	strb.w	r0, [sp, #103]	@ 0x67
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:387
            sFormat++;
80203662:	9822      	ldr	r0, [sp, #136]	@ 0x88
80203664:	3001      	adds	r0, #1
80203666:	9022      	str	r0, [sp, #136]	@ 0x88
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:388
            Precision = Precision * 10u + ((unsigned)c - '0');
80203668:	9818      	ldr	r0, [sp, #96]	@ 0x60
8020366a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
8020366e:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
80203672:	eb00 0041 	add.w	r0, r0, r1, lsl #1
80203676:	3830      	subs	r0, #48	@ 0x30
80203678:	9018      	str	r0, [sp, #96]	@ 0x60
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:389
          } while (1);
8020367a:	e7ff      	b.n	8020367c <SEGGER_RTT_vprintf+0x190>
8020367c:	2001      	movs	r0, #1
8020367e:	b108      	cbz	r0, 80203684 <SEGGER_RTT_vprintf+0x198>
80203680:	f02f c823 	le	8020363e <SEGGER_RTT_vprintf+0x152>
80203684:	e7ff      	b.n	80203686 <SEGGER_RTT_vprintf+0x19a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:391
      }
80203686:	e7ff      	b.n	80203688 <SEGGER_RTT_vprintf+0x19c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:395
      c = *sFormat;
80203688:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020368a:	7800      	ldrb	r0, [r0, #0]
8020368c:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:396
      do {
80203690:	e7ff      	b.n	80203692 <SEGGER_RTT_vprintf+0x1a6>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:397
        if ((c == 'l') || (c == 'h')) {
80203692:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
80203696:	286c      	cmp	r0, #108	@ 0x6c
80203698:	d005      	beq.n	802036a6 <SEGGER_RTT_vprintf+0x1ba>
8020369a:	e7ff      	b.n	8020369c <SEGGER_RTT_vprintf+0x1b0>
8020369c:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
802036a0:	2868      	cmp	r0, #104	@ 0x68
802036a2:	d108      	bne.n	802036b6 <SEGGER_RTT_vprintf+0x1ca>
802036a4:	e7ff      	b.n	802036a6 <SEGGER_RTT_vprintf+0x1ba>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:398
          sFormat++;
802036a6:	9822      	ldr	r0, [sp, #136]	@ 0x88
802036a8:	3001      	adds	r0, #1
802036aa:	9022      	str	r0, [sp, #136]	@ 0x88
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:399
          c = *sFormat;
802036ac:	9822      	ldr	r0, [sp, #136]	@ 0x88
802036ae:	7800      	ldrb	r0, [r0, #0]
802036b0:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:400
        } else {
802036b4:	e000      	b.n	802036b8 <SEGGER_RTT_vprintf+0x1cc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:401
          break;
802036b6:	e004      	b.n	802036c2 <SEGGER_RTT_vprintf+0x1d6>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:403
      } while (1);
802036b8:	e7ff      	b.n	802036ba <SEGGER_RTT_vprintf+0x1ce>
802036ba:	2001      	movs	r0, #1
802036bc:	b108      	cbz	r0, 802036c2 <SEGGER_RTT_vprintf+0x1d6>
802036be:	f02f c019 	le	80203692 <SEGGER_RTT_vprintf+0x1a6>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:407
      switch (c) {
802036c2:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
802036c6:	4601      	mov	r1, r0
802036c8:	9102      	str	r1, [sp, #8]
802036ca:	2825      	cmp	r0, #37	@ 0x25
802036cc:	f000 80b0 	beq.w	80203830 <SEGGER_RTT_vprintf+0x344>
802036d0:	e7ff      	b.n	802036d2 <SEGGER_RTT_vprintf+0x1e6>
802036d2:	9802      	ldr	r0, [sp, #8]
802036d4:	2858      	cmp	r0, #88	@ 0x58
802036d6:	d050      	beq.n	8020377a <SEGGER_RTT_vprintf+0x28e>
802036d8:	e7ff      	b.n	802036da <SEGGER_RTT_vprintf+0x1ee>
802036da:	9802      	ldr	r0, [sp, #8]
802036dc:	2863      	cmp	r0, #99	@ 0x63
802036de:	d015      	beq.n	8020370c <SEGGER_RTT_vprintf+0x220>
802036e0:	e7ff      	b.n	802036e2 <SEGGER_RTT_vprintf+0x1f6>
802036e2:	9802      	ldr	r0, [sp, #8]
802036e4:	2864      	cmp	r0, #100	@ 0x64
802036e6:	d020      	beq.n	8020372a <SEGGER_RTT_vprintf+0x23e>
802036e8:	e7ff      	b.n	802036ea <SEGGER_RTT_vprintf+0x1fe>
802036ea:	9802      	ldr	r0, [sp, #8]
802036ec:	2870      	cmp	r0, #112	@ 0x70
802036ee:	f000 808e 	beq.w	8020380e <SEGGER_RTT_vprintf+0x322>
802036f2:	e7ff      	b.n	802036f4 <SEGGER_RTT_vprintf+0x208>
802036f4:	9802      	ldr	r0, [sp, #8]
802036f6:	2873      	cmp	r0, #115	@ 0x73
802036f8:	d053      	beq.n	802037a2 <SEGGER_RTT_vprintf+0x2b6>
802036fa:	e7ff      	b.n	802036fc <SEGGER_RTT_vprintf+0x210>
802036fc:	9802      	ldr	r0, [sp, #8]
802036fe:	2875      	cmp	r0, #117	@ 0x75
80203700:	d027      	beq.n	80203752 <SEGGER_RTT_vprintf+0x266>
80203702:	e7ff      	b.n	80203704 <SEGGER_RTT_vprintf+0x218>
80203704:	9802      	ldr	r0, [sp, #8]
80203706:	2878      	cmp	r0, #120	@ 0x78
80203708:	d037      	beq.n	8020377a <SEGGER_RTT_vprintf+0x28e>
8020370a:	e096      	b.n	8020383a <SEGGER_RTT_vprintf+0x34e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:410
        v = va_arg(*pParamList, int);
8020370c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
8020370e:	6810      	ldr	r0, [r2, #0]
80203710:	1d01      	adds	r1, r0, #4
80203712:	6011      	str	r1, [r2, #0]
80203714:	6800      	ldr	r0, [r0, #0]
80203716:	901a      	str	r0, [sp, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:411
        c0 = (char)v;
80203718:	981a      	ldr	r0, [sp, #104]	@ 0x68
8020371a:	f88d 0017 	strb.w	r0, [sp, #23]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:412
        _StoreChar(&BufferDesc, c0);
8020371e:	f89d 1017 	ldrb.w	r1, [sp, #23]
80203722:	a81b      	add	r0, sp, #108	@ 0x6c
80203724:	f000 fce2 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:413
        break;
80203728:	e088      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:416
        v = va_arg(*pParamList, int);
8020372a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
8020372c:	6810      	ldr	r0, [r2, #0]
8020372e:	1d01      	adds	r1, r0, #4
80203730:	6011      	str	r1, [r2, #0]
80203732:	6800      	ldr	r0, [r0, #0]
80203734:	901a      	str	r0, [sp, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:417
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
80203736:	991a      	ldr	r1, [sp, #104]	@ 0x68
80203738:	9b18      	ldr	r3, [sp, #96]	@ 0x60
8020373a:	9816      	ldr	r0, [sp, #88]	@ 0x58
8020373c:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
80203740:	466a      	mov	r2, sp
80203742:	f8c2 c004 	str.w	ip, [r2, #4]
80203746:	6010      	str	r0, [r2, #0]
80203748:	a81b      	add	r0, sp, #108	@ 0x6c
8020374a:	220a      	movs	r2, #10
8020374c:	f000 fb16 	bl	80203d7c <_PrintInt>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:418
        break;
80203750:	e074      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:420
        v = va_arg(*pParamList, int);
80203752:	9a21      	ldr	r2, [sp, #132]	@ 0x84
80203754:	6810      	ldr	r0, [r2, #0]
80203756:	1d01      	adds	r1, r0, #4
80203758:	6011      	str	r1, [r2, #0]
8020375a:	6800      	ldr	r0, [r0, #0]
8020375c:	901a      	str	r0, [sp, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:421
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
8020375e:	991a      	ldr	r1, [sp, #104]	@ 0x68
80203760:	9b18      	ldr	r3, [sp, #96]	@ 0x60
80203762:	9816      	ldr	r0, [sp, #88]	@ 0x58
80203764:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
80203768:	466a      	mov	r2, sp
8020376a:	f8c2 c004 	str.w	ip, [r2, #4]
8020376e:	6010      	str	r0, [r2, #0]
80203770:	a81b      	add	r0, sp, #108	@ 0x6c
80203772:	220a      	movs	r2, #10
80203774:	f000 fbe6 	bl	80203f44 <_PrintUnsigned>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:422
        break;
80203778:	e060      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:425
        v = va_arg(*pParamList, int);
8020377a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
8020377c:	6810      	ldr	r0, [r2, #0]
8020377e:	1d01      	adds	r1, r0, #4
80203780:	6011      	str	r1, [r2, #0]
80203782:	6800      	ldr	r0, [r0, #0]
80203784:	901a      	str	r0, [sp, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:426
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
80203786:	991a      	ldr	r1, [sp, #104]	@ 0x68
80203788:	9b18      	ldr	r3, [sp, #96]	@ 0x60
8020378a:	9816      	ldr	r0, [sp, #88]	@ 0x58
8020378c:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
80203790:	466a      	mov	r2, sp
80203792:	f8c2 c004 	str.w	ip, [r2, #4]
80203796:	6010      	str	r0, [r2, #0]
80203798:	a81b      	add	r0, sp, #108	@ 0x6c
8020379a:	2210      	movs	r2, #16
8020379c:	f000 fbd2 	bl	80203f44 <_PrintUnsigned>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:427
        break;
802037a0:	e04c      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:430
          const char * s = va_arg(*pParamList, const char *);
802037a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
802037a4:	6810      	ldr	r0, [r2, #0]
802037a6:	1d01      	adds	r1, r0, #4
802037a8:	6011      	str	r1, [r2, #0]
802037aa:	6800      	ldr	r0, [r0, #0]
802037ac:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:431
          if (s == NULL) {
802037ae:	9804      	ldr	r0, [sp, #16]
802037b0:	b948      	cbnz	r0, 802037c6 <SEGGER_RTT_vprintf+0x2da>
802037b2:	e7ff      	b.n	802037b4 <SEGGER_RTT_vprintf+0x2c8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:432
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
802037b4:	f246 604e 	movw	r0, #26190	@ 0x664e
802037b8:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802037bc:	9004      	str	r0, [sp, #16]
802037be:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:433
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
802037c0:	f88d 0067 	strb.w	r0, [sp, #103]	@ 0x67
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:434
          }
802037c4:	e7ff      	b.n	802037c6 <SEGGER_RTT_vprintf+0x2da>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:435
          do {
802037c6:	e7ff      	b.n	802037c8 <SEGGER_RTT_vprintf+0x2dc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:436
            c = *s;
802037c8:	9804      	ldr	r0, [sp, #16]
802037ca:	7800      	ldrb	r0, [r0, #0]
802037cc:	f88d 0083 	strb.w	r0, [sp, #131]	@ 0x83
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:437
            s++;
802037d0:	9804      	ldr	r0, [sp, #16]
802037d2:	3001      	adds	r0, #1
802037d4:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:438
            if (c == '\0') {
802037d6:	f89d 0083 	ldrb.w	r0, [sp, #131]	@ 0x83
802037da:	b908      	cbnz	r0, 802037e0 <SEGGER_RTT_vprintf+0x2f4>
802037dc:	e7ff      	b.n	802037de <SEGGER_RTT_vprintf+0x2f2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:439
              break;
802037de:	e015      	b.n	8020380c <SEGGER_RTT_vprintf+0x320>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:441
            if ((PrecisionSet != 0) && (Precision == 0)) {
802037e0:	f89d 0067 	ldrb.w	r0, [sp, #103]	@ 0x67
802037e4:	b120      	cbz	r0, 802037f0 <SEGGER_RTT_vprintf+0x304>
802037e6:	e7ff      	b.n	802037e8 <SEGGER_RTT_vprintf+0x2fc>
802037e8:	9818      	ldr	r0, [sp, #96]	@ 0x60
802037ea:	b908      	cbnz	r0, 802037f0 <SEGGER_RTT_vprintf+0x304>
802037ec:	e7ff      	b.n	802037ee <SEGGER_RTT_vprintf+0x302>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:442
              break;
802037ee:	e00d      	b.n	8020380c <SEGGER_RTT_vprintf+0x320>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:444
            _StoreChar(&BufferDesc, c);
802037f0:	f89d 1083 	ldrb.w	r1, [sp, #131]	@ 0x83
802037f4:	a81b      	add	r0, sp, #108	@ 0x6c
802037f6:	f000 fc79 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:445
            Precision--;
802037fa:	9818      	ldr	r0, [sp, #96]	@ 0x60
802037fc:	3801      	subs	r0, #1
802037fe:	9018      	str	r0, [sp, #96]	@ 0x60
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:446
          } while (BufferDesc.ReturnValue >= 0);
80203800:	e7ff      	b.n	80203802 <SEGGER_RTT_vprintf+0x316>
80203802:	981e      	ldr	r0, [sp, #120]	@ 0x78
80203804:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80203808:	dcde      	bgt.n	802037c8 <SEGGER_RTT_vprintf+0x2dc>
8020380a:	e7ff      	b.n	8020380c <SEGGER_RTT_vprintf+0x320>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:448
        break;
8020380c:	e016      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:450
        v = va_arg(*pParamList, int);
8020380e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
80203810:	6810      	ldr	r0, [r2, #0]
80203812:	1d01      	adds	r1, r0, #4
80203814:	6011      	str	r1, [r2, #0]
80203816:	6800      	ldr	r0, [r0, #0]
80203818:	901a      	str	r0, [sp, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:451
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
8020381a:	991a      	ldr	r1, [sp, #104]	@ 0x68
8020381c:	4668      	mov	r0, sp
8020381e:	2200      	movs	r2, #0
80203820:	6042      	str	r2, [r0, #4]
80203822:	2308      	movs	r3, #8
80203824:	6003      	str	r3, [r0, #0]
80203826:	a81b      	add	r0, sp, #108	@ 0x6c
80203828:	2210      	movs	r2, #16
8020382a:	f000 fb8b 	bl	80203f44 <_PrintUnsigned>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:452
        break;
8020382e:	e005      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
80203830:	a81b      	add	r0, sp, #108	@ 0x6c
80203832:	2125      	movs	r1, #37	@ 0x25
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:454
        _StoreChar(&BufferDesc, '%');
80203834:	f000 fc5a 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:455
        break;
80203838:	e000      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:457
        break;
8020383a:	e7ff      	b.n	8020383c <SEGGER_RTT_vprintf+0x350>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:459
      sFormat++;
8020383c:	9822      	ldr	r0, [sp, #136]	@ 0x88
8020383e:	3001      	adds	r0, #1
80203840:	9022      	str	r0, [sp, #136]	@ 0x88
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:460
    } else {
80203842:	e005      	b.n	80203850 <SEGGER_RTT_vprintf+0x364>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:461
      _StoreChar(&BufferDesc, c);
80203844:	f89d 1083 	ldrb.w	r1, [sp, #131]	@ 0x83
80203848:	a81b      	add	r0, sp, #108	@ 0x6c
8020384a:	f000 fc4f 	bl	802040ec <_StoreChar>
8020384e:	e7ff      	b.n	80203850 <SEGGER_RTT_vprintf+0x364>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:463
  } while (BufferDesc.ReturnValue >= 0);
80203850:	e7ff      	b.n	80203852 <SEGGER_RTT_vprintf+0x366>
80203852:	981e      	ldr	r0, [sp, #120]	@ 0x78
80203854:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80203858:	f73f ae57 	bgt.w	8020350a <SEGGER_RTT_vprintf+0x1e>
8020385c:	e7ff      	b.n	8020385e <SEGGER_RTT_vprintf+0x372>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:465
  if (BufferDesc.ReturnValue > 0) {
8020385e:	981e      	ldr	r0, [sp, #120]	@ 0x78
80203860:	2801      	cmp	r0, #1
80203862:	db0e      	blt.n	80203882 <SEGGER_RTT_vprintf+0x396>
80203864:	e7ff      	b.n	80203866 <SEGGER_RTT_vprintf+0x37a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:469
    if (BufferDesc.Cnt != 0u) {
80203866:	981d      	ldr	r0, [sp, #116]	@ 0x74
80203868:	b130      	cbz	r0, 80203878 <SEGGER_RTT_vprintf+0x38c>
8020386a:	e7ff      	b.n	8020386c <SEGGER_RTT_vprintf+0x380>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:470
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
8020386c:	9823      	ldr	r0, [sp, #140]	@ 0x8c
8020386e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
80203870:	a906      	add	r1, sp, #24
80203872:	f7ff fda5 	bl	802033c0 <SEGGER_RTT_Write>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:471
    }
80203876:	e7ff      	b.n	80203878 <SEGGER_RTT_vprintf+0x38c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:472
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
80203878:	991d      	ldr	r1, [sp, #116]	@ 0x74
8020387a:	981e      	ldr	r0, [sp, #120]	@ 0x78
8020387c:	4408      	add	r0, r1
8020387e:	901e      	str	r0, [sp, #120]	@ 0x78
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:473
  }
80203880:	e7ff      	b.n	80203882 <SEGGER_RTT_vprintf+0x396>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:474
  return BufferDesc.ReturnValue;
80203882:	981e      	ldr	r0, [sp, #120]	@ 0x78
80203884:	b024      	add	sp, #144	@ 0x90
80203886:	bd80      	pop	{r7, pc}

80203888 <SecureFault_Handler>:
SecureFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:345
}

__attribute__((naked))
void SecureFault_Handler(void)
{
    __asm("MOVS R0, #4\n\t"
80203888:	2004      	movs	r0, #4
8020388a:	f001 bd9f 	b.w	802053cc <CommonAsmFaultHandler>
	...

80203890 <SystemInit>:
SystemInit():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:156

/*----------------------------------------------------------------------------
  System initialization function
 *----------------------------------------------------------------------------*/
void SystemInit (void)
{
80203890:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:162
  // Avoid DSB as long as possible, as it will block until cache
  // auto-invalidation has completed. First DSB is currently at the
  // end of MPU_Setup.

#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
  SCB->VTOR = (uint32_t) __VECTOR_TABLE;
80203892:	f240 0000 	movw	r0, #0
80203896:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020389a:	f64e 5108 	movw	r1, #60680	@ 0xed08
8020389e:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802038a2:	6008      	str	r0, [r1, #0]
802038a4:	f64e 5124 	movw	r1, #60708	@ 0xed24
802038a8:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:167
#endif

  /* Enable UsageFault, BusFault, MemFault and SecurityFault exceptions */
  /* Otherwise all you see is HardFault, even in the debugger */
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk |
802038ac:	6808      	ldr	r0, [r1, #0]
802038ae:	f440 2070 	orr.w	r0, r0, #983040	@ 0xf0000
802038b2:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:173
                SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_SECUREFAULTENA_Msk;

  /*
   * Handle Spurious Wakeup
   */
  System_HandleSpuriousWakeup();
802038b4:	f000 f83e 	bl	80203934 <System_HandleSpuriousWakeup>
802038b8:	f244 0100 	movw	r1, #16384	@ 0x4000
802038bc:	f6c1 2160 	movt	r1, #6752	@ 0x1a60
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:176

  /* Clear the WIC Sleep */
  WICCONTROL &= ~WICCONTROL_WIC_Msk;
802038c0:	6808      	ldr	r0, [r1, #0]
802038c2:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
802038c6:	6008      	str	r0, [r1, #0]
802038c8:	f64e 5188 	movw	r1, #60808	@ 0xed88
802038cc:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:180

#if (defined (__FPU_USED) && (__FPU_USED == 1U)) || \
    (defined (__ARM_FEATURE_MVE) && (__ARM_FEATURE_MVE > 0U))
  SCB->CPACR |= ((3U << 10U*2U) |           /* enable CP10 Full Access */
802038d0:	6808      	ldr	r0, [r1, #0]
802038d2:	f440 0070 	orr.w	r0, r0, #15728640	@ 0xf00000
802038d6:	6008      	str	r0, [r1, #0]
802038d8:	f24e 0104 	movw	r1, #57348	@ 0xe004
802038dc:	f2ce 0101 	movt	r1, #57345	@ 0xe001
802038e0:	f240 20e5 	movw	r0, #741	@ 0x2e5
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:200
  *
  * Here we modify only the MAX_OS based on the performance achieved in our
  * trials.
  *
  */
 MEMSYSCTL->PFCR = (MEMSYSCTL_PFCR_MAX_OS_DEFAULT_VALUE << MEMSYSCTL_PFCR_MAX_OS_Pos) |
802038e4:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:212
 * Do not do MPU_Setup() if running from the OSPI XIP regions as MPU_Setup() temporarily
 * disables the MPU which causes the default Device/XN attributes to take effect for the
 * OSPI XIP regions.
 */
#if !BOOT_FROM_OSPI_FLASH
  MPU_Setup();
802038e6:	f7ff fccd 	bl	80203284 <MPU_Setup>
802038ea:	f64e 5114 	movw	r1, #60692	@ 0xed14
802038ee:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:224
  // We do not use the CMSIS functions, as these manually invalidate the
  // cache - this is not required on the M55, as it is auto-invalidated
  // (and we implicitly rely on this already before activating, if booting
  // from MRAM).
  // Enable Loop and branch info cache
  SCB->CCR |= SCB_CCR_IC_Msk | SCB_CCR_DC_Msk | SCB_CCR_LOB_Msk;
802038f2:	6808      	ldr	r0, [r1, #0]
802038f4:	f440 2030 	orr.w	r0, r0, #720896	@ 0xb0000
802038f8:	6008      	str	r0, [r1, #0]
802038fa:	f24e 0108 	movw	r1, #57352	@ 0xe008
802038fe:	f2ce 0100 	movt	r1, #57344	@ 0xe000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:227

  // Enable limited static branch prediction using low overhead loops
  ICB->ACTLR &= ~ICB_ACTLR_DISLOBR_Msk;
80203902:	6808      	ldr	r0, [r1, #0]
80203904:	f020 0020 	bic.w	r0, r0, #32
80203908:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:229

  __DSB();
8020390a:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:230
  __ISB();
8020390e:	f3bf 8f6f 	isb	sy
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:236

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  TZ_SAU_Setup();
  TGU_Setup();
#else
  setup_tcm_ns_partition();
80203912:	f001 fa19 	bl	80204d48 <setup_tcm_ns_partition>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:239
#endif

  SystemCoreClock = SYSTEM_CLOCK;
80203916:	f240 31cc 	movw	r1, #972	@ 0x3cc
8020391a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
8020391e:	f248 4000 	movw	r0, #33792	@ 0x8400
80203922:	f2c1 70d7 	movt	r0, #6103	@ 0x17d7
80203926:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:248
   * Note: This will be removed in the future release
   */
#define FORCE_ENABLE_SYSTEM_CLOCKS 1
#if FORCE_ENABLE_SYSTEM_CLOCKS
  /* Bypass clock gating */
  enable_force_peripheral_functional_clk();
80203928:	f001 f934 	bl	80204b94 <enable_force_peripheral_functional_clk>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:251

  /* Bypass clock gating */
  enable_force_apb_interface_clk();
8020392c:	f001 f928 	bl	80204b80 <enable_force_apb_interface_clk>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:253
#endif
}
80203930:	bd80      	pop	{r7, pc}
	...

80203934 <System_HandleSpuriousWakeup>:
System_HandleSpuriousWakeup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:131
}
80203934:	4770      	bx	lr
	...

80203938 <TGU_Setup>:
TGU_Setup():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:38
  and ending at NS_REGION_1_END as Non Secure in the TGU look up tables. The
  region should be in the DTCM area. Can be extended to include the ITCM region
  and multiple discontigous regions if needed.
 *----------------------------------------------------------------------------*/
void TGU_Setup(void)
{
80203938:	b08d      	sub	sp, #52	@ 0x34
8020393a:	f24e 5004 	movw	r0, #58628	@ 0xe504
8020393e:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:45
    uint32_t start_offset, end_offset, lut_val_l, lut_val_h;
    uint32_t base, itcm_blksize, dtcm_blksize, blksize;
    uint32_t i;

    /* Find out the TGU block size for ITCM */
    blksize = *((volatile unsigned int *) ITGU_CFG) & ITGU_CFG_BLKSZ;
80203942:	6800      	ldr	r0, [r0, #0]
80203944:	f000 000f 	and.w	r0, r0, #15
80203948:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:47
    /* ITCM blksize is 2^(blksize + 5)*/
    itcm_blksize = 1 << (blksize + 5);
8020394a:	9801      	ldr	r0, [sp, #4]
8020394c:	1d41      	adds	r1, r0, #5
8020394e:	2001      	movs	r0, #1
80203950:	fa00 f101 	lsl.w	r1, r0, r1
80203954:	9103      	str	r1, [sp, #12]
80203956:	f24e 6104 	movw	r1, #58884	@ 0xe604
8020395a:	f2ce 0101 	movt	r1, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:50

    /* Find out the TGU block size for DTCM */
    blksize = *((volatile unsigned int *) DTGU_CFG) & DTGU_CFG_BLKSZ;
8020395e:	6809      	ldr	r1, [r1, #0]
80203960:	f001 010f 	and.w	r1, r1, #15
80203964:	9101      	str	r1, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:52
    /* DTCM block size is 2^(blksize + 5) */
    dtcm_blksize = 1 << (blksize + 5);
80203966:	9901      	ldr	r1, [sp, #4]
80203968:	3105      	adds	r1, #5
8020396a:	4088      	lsls	r0, r1
8020396c:	9002      	str	r0, [sp, #8]
8020396e:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:54

    for (i = 0; i < (sizeof(ns_regions) / sizeof(ns_regions[0])); i++) {
80203970:	9000      	str	r0, [sp, #0]
80203972:	e7ff      	b.n	80203974 <TGU_Setup+0x3c>
80203974:	9800      	ldr	r0, [sp, #0]
80203976:	2800      	cmp	r0, #0
80203978:	f040 80a4 	bne.w	80203ac4 <TGU_Setup+0x18c>
8020397c:	e7ff      	b.n	8020397e <TGU_Setup+0x46>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:55
        if (ns_regions[i].type == DTCM) {
8020397e:	9800      	ldr	r0, [sp, #0]
80203980:	eb00 0140 	add.w	r1, r0, r0, lsl #1
80203984:	f646 007c 	movw	r0, #26748	@ 0x687c
80203988:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020398c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80203990:	6880      	ldr	r0, [r0, #8]
80203992:	2801      	cmp	r0, #1
80203994:	d121      	bne.n	802039da <TGU_Setup+0xa2>
80203996:	e7ff      	b.n	80203998 <TGU_Setup+0x60>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:56
            start_block =  (ns_regions[i].start - DTCM_BASE) / dtcm_blksize;
80203998:	9800      	ldr	r0, [sp, #0]
8020399a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
8020399e:	f646 007c 	movw	r0, #26748	@ 0x687c
802039a2:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802039a6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
802039aa:	f101 4160 	add.w	r1, r1, #3758096384	@ 0xe0000000
802039ae:	9a02      	ldr	r2, [sp, #8]
802039b0:	fbb1 f1f2 	udiv	r1, r1, r2
802039b4:	910c      	str	r1, [sp, #48]	@ 0x30
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:57
            end_block = (ns_regions[i].end - DTCM_BASE) / dtcm_blksize;
802039b6:	9900      	ldr	r1, [sp, #0]
802039b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
802039bc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
802039c0:	6840      	ldr	r0, [r0, #4]
802039c2:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
802039c6:	9902      	ldr	r1, [sp, #8]
802039c8:	fbb0 f0f1 	udiv	r0, r0, r1
802039cc:	900b      	str	r0, [sp, #44]	@ 0x2c
802039ce:	f24e 6000 	movw	r0, #58880	@ 0xe600
802039d2:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:58
            base = DTGU_BASE;
802039d6:	9004      	str	r0, [sp, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:59
        } else {
802039d8:	e01c      	b.n	80203a14 <TGU_Setup+0xdc>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:60
            start_block =  (ns_regions[i].start - ITCM_BASE) / itcm_blksize;
802039da:	9800      	ldr	r0, [sp, #0]
802039dc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
802039e0:	f646 007c 	movw	r0, #26748	@ 0x687c
802039e4:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802039e8:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
802039ec:	9a03      	ldr	r2, [sp, #12]
802039ee:	fbb1 f1f2 	udiv	r1, r1, r2
802039f2:	910c      	str	r1, [sp, #48]	@ 0x30
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:61
            end_block = (ns_regions[i].end - ITCM_BASE) / itcm_blksize;
802039f4:	9900      	ldr	r1, [sp, #0]
802039f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
802039fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
802039fe:	6840      	ldr	r0, [r0, #4]
80203a00:	9903      	ldr	r1, [sp, #12]
80203a02:	fbb0 f0f1 	udiv	r0, r0, r1
80203a06:	900b      	str	r0, [sp, #44]	@ 0x2c
80203a08:	f24e 5000 	movw	r0, #58624	@ 0xe500
80203a0c:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:62
            base = ITGU_BASE;
80203a10:	9004      	str	r0, [sp, #16]
80203a12:	e7ff      	b.n	80203a14 <TGU_Setup+0xdc>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:65
        }

        start_lut = start_block / 32;
80203a14:	980c      	ldr	r0, [sp, #48]	@ 0x30
80203a16:	0940      	lsrs	r0, r0, #5
80203a18:	900a      	str	r0, [sp, #40]	@ 0x28
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:66
        end_lut = end_block / 32;
80203a1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203a1c:	0940      	lsrs	r0, r0, #5
80203a1e:	9009      	str	r0, [sp, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:68

        start_offset = start_block % 32;
80203a20:	980c      	ldr	r0, [sp, #48]	@ 0x30
80203a22:	f000 001f 	and.w	r0, r0, #31
80203a26:	9008      	str	r0, [sp, #32]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:69
        end_offset = end_block % 32;
80203a28:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203a2a:	f000 001f 	and.w	r0, r0, #31
80203a2e:	9007      	str	r0, [sp, #28]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:71

        if (start_lut == end_lut) {
80203a30:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203a32:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203a34:	4288      	cmp	r0, r1
80203a36:	d114      	bne.n	80203a62 <TGU_Setup+0x12a>
80203a38:	e7ff      	b.n	80203a3a <TGU_Setup+0x102>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:73
            /* same LUT register */
            lut_val_l = SET_BIT_RANGE(start_offset, end_offset);
80203a3a:	9807      	ldr	r0, [sp, #28]
80203a3c:	f1c0 001f 	rsb	r0, r0, #31
80203a40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
80203a44:	fa21 f000 	lsr.w	r0, r1, r0
80203a48:	9a08      	ldr	r2, [sp, #32]
80203a4a:	4091      	lsls	r1, r2
80203a4c:	4008      	ands	r0, r1
80203a4e:	9006      	str	r0, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:74
            *((volatile uint32_t *) TGU_LUT(base, start_lut)) |= lut_val_l;
80203a50:	9a06      	ldr	r2, [sp, #24]
80203a52:	9804      	ldr	r0, [sp, #16]
80203a54:	990a      	ldr	r1, [sp, #40]	@ 0x28
80203a56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
80203a5a:	6908      	ldr	r0, [r1, #16]
80203a5c:	4310      	orrs	r0, r2
80203a5e:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:75
        } else {
80203a60:	e02b      	b.n	80203aba <TGU_Setup+0x182>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:77
            /* the range spans multiple LUT registers */
            lut_val_l = SET_BIT_RANGE(start_offset, 31);
80203a62:	9908      	ldr	r1, [sp, #32]
80203a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
80203a68:	fa00 f101 	lsl.w	r1, r0, r1
80203a6c:	9106      	str	r1, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:78
            lut_val_h = SET_BIT_RANGE(0, end_offset);
80203a6e:	9907      	ldr	r1, [sp, #28]
80203a70:	f1c1 011f 	rsb	r1, r1, #31
80203a74:	40c8      	lsrs	r0, r1
80203a76:	9005      	str	r0, [sp, #20]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:81

            /* Write into the first LUT register */
            *((volatile uint32_t *) TGU_LUT(base, start_lut)) = lut_val_l;
80203a78:	9806      	ldr	r0, [sp, #24]
80203a7a:	9904      	ldr	r1, [sp, #16]
80203a7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
80203a7e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
80203a82:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:84

            /* Now write to all the intermediate LUT registers */
            while (start_lut != (end_lut - 1)) {
80203a84:	e7ff      	b.n	80203a86 <TGU_Setup+0x14e>
80203a86:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203a88:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203a8a:	3901      	subs	r1, #1
80203a8c:	4288      	cmp	r0, r1
80203a8e:	d00b      	beq.n	80203aa8 <TGU_Setup+0x170>
80203a90:	e7ff      	b.n	80203a92 <TGU_Setup+0x15a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:85
                start_lut++;
80203a92:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203a94:	3001      	adds	r0, #1
80203a96:	900a      	str	r0, [sp, #40]	@ 0x28
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:86
                *((volatile uint32_t *) TGU_LUT(base, start_lut)) = 0xFFFFFFFFU;
80203a98:	9804      	ldr	r0, [sp, #16]
80203a9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
80203a9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
80203aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
80203aa4:	6108      	str	r0, [r1, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:84
            while (start_lut != (end_lut - 1)) {
80203aa6:	e7ee      	b.n	80203a86 <TGU_Setup+0x14e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:90
            }

            /* Write into the last LUT register*/
            *((volatile uint32_t *) TGU_LUT(base, end_lut)) |= lut_val_h;
80203aa8:	9a05      	ldr	r2, [sp, #20]
80203aaa:	9804      	ldr	r0, [sp, #16]
80203aac:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203aae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
80203ab2:	6908      	ldr	r0, [r1, #16]
80203ab4:	4310      	orrs	r0, r2
80203ab6:	6108      	str	r0, [r1, #16]
80203ab8:	e7ff      	b.n	80203aba <TGU_Setup+0x182>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:92
        }
    }
80203aba:	e7ff      	b.n	80203abc <TGU_Setup+0x184>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:54
    for (i = 0; i < (sizeof(ns_regions) / sizeof(ns_regions[0])); i++) {
80203abc:	9800      	ldr	r0, [sp, #0]
80203abe:	3001      	adds	r0, #1
80203ac0:	9000      	str	r0, [sp, #0]
80203ac2:	e757      	b.n	80203974 <TGU_Setup+0x3c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:93
}
80203ac4:	b00d      	add	sp, #52	@ 0x34
80203ac6:	4770      	bx	lr

80203ac8 <UART0_IRQHandler>:
UART0_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1722
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART0_IRQHandler (void)
{
80203ac8:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1723
    UART_IRQHandler(&UART0);
80203aca:	f240 30d0 	movw	r0, #976	@ 0x3d0
80203ace:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203ad2:	f000 f839 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1724
}
80203ad6:	bd80      	pop	{r7, pc}

80203ad8 <UART1_IRQHandler>:
UART1_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1890
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART1_IRQHandler (void)
{
80203ad8:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1891
    UART_IRQHandler(&UART1);
80203ada:	f240 401c 	movw	r0, #1052	@ 0x41c
80203ade:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203ae2:	f000 f831 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1892
}
80203ae6:	bd80      	pop	{r7, pc}

80203ae8 <UART2_IRQHandler>:
UART2_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2059
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART2_IRQHandler (void)
{
80203ae8:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2060
    UART_IRQHandler(&UART2);
80203aea:	f240 4068 	movw	r0, #1128	@ 0x468
80203aee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203af2:	f000 f829 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2061
}
80203af6:	bd80      	pop	{r7, pc}

80203af8 <UART3_IRQHandler>:
UART3_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2227
    .rs485_cfg        = {0},
#endif /* END of RS485_SUPPORT */
};

void UART3_IRQHandler (void)
{
80203af8:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2228
    UART_IRQHandler(&UART3);
80203afa:	f240 40b4 	movw	r0, #1204	@ 0x4b4
80203afe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203b02:	f000 f821 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2229
}
80203b06:	bd80      	pop	{r7, pc}

80203b08 <UART4_IRQHandler>:
UART4_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2406

#endif /* END of RS485_SUPPORT */
};

void UART4_IRQHandler (void)
{
80203b08:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2407
    UART_IRQHandler(&UART4);
80203b0a:	f240 5000 	movw	r0, #1280	@ 0x500
80203b0e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203b12:	f000 f819 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2408
}
80203b16:	bd80      	pop	{r7, pc}

80203b18 <UART5_IRQHandler>:
UART5_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2585

#endif /* END of RS485_SUPPORT */
};

void UART5_IRQHandler (void)
{
80203b18:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2586
    UART_IRQHandler(&UART5);
80203b1a:	f240 504c 	movw	r0, #1356	@ 0x54c
80203b1e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203b22:	f000 f811 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2587
}
80203b26:	bd80      	pop	{r7, pc}

80203b28 <UART6_IRQHandler>:
UART6_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2764

#endif /* END of RS485_SUPPORT */
};

void UART6_IRQHandler (void)
{
80203b28:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2765
    UART_IRQHandler(&UART6);
80203b2a:	f240 5098 	movw	r0, #1432	@ 0x598
80203b2e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203b32:	f000 f809 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2766
}
80203b36:	bd80      	pop	{r7, pc}

80203b38 <UART7_IRQHandler>:
UART7_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2943

#endif /* END of RS485_SUPPORT */
};

void UART7_IRQHandler (void)
{
80203b38:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2944
    UART_IRQHandler(&UART7);
80203b3a:	f240 50e4 	movw	r0, #1508	@ 0x5e4
80203b3e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203b42:	f000 f801 	bl	80203b48 <UART_IRQHandler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2945
}
80203b46:	bd80      	pop	{r7, pc}

80203b48 <UART_IRQHandler>:
UART_IRQHandler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1454
{
80203b48:	b580      	push	{r7, lr}
80203b4a:	b084      	sub	sp, #16
80203b4c:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1455
    UART_TRANSFER *transfer = &(uart->transfer);
80203b4e:	9803      	ldr	r0, [sp, #12]
80203b50:	3008      	adds	r0, #8
80203b52:	9002      	str	r0, [sp, #8]
80203b54:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1456
    uint32_t cb_event = 0U;
80203b56:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1458
    uart_irq_handler(uart->regs, transfer);
80203b58:	9803      	ldr	r0, [sp, #12]
80203b5a:	6800      	ldr	r0, [r0, #0]
80203b5c:	9902      	ldr	r1, [sp, #8]
80203b5e:	f001 fd31 	bl	802055c4 <uart_irq_handler>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1461
    if(transfer->status & UART_TRANSFER_STATUS_ERROR)
80203b62:	9802      	ldr	r0, [sp, #8]
80203b64:	6980      	ldr	r0, [r0, #24]
80203b66:	0700      	lsls	r0, r0, #28
80203b68:	2800      	cmp	r0, #0
80203b6a:	d54d      	bpl.n	80203c08 <UART_IRQHandler+0xc0>
80203b6c:	e7ff      	b.n	80203b6e <UART_IRQHandler+0x26>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1468
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_BREAK)
80203b6e:	9802      	ldr	r0, [sp, #8]
80203b70:	6980      	ldr	r0, [r0, #24]
80203b72:	0600      	lsls	r0, r0, #24
80203b74:	2800      	cmp	r0, #0
80203b76:	d50a      	bpl.n	80203b8e <UART_IRQHandler+0x46>
80203b78:	e7ff      	b.n	80203b7a <UART_IRQHandler+0x32>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1470
            uart->status.rx_break = 1;
80203b7a:	9903      	ldr	r1, [sp, #12]
80203b7c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203b7e:	f040 0010 	orr.w	r0, r0, #16
80203b82:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1471
            cb_event |= ARM_USART_EVENT_RX_BREAK;
80203b84:	9801      	ldr	r0, [sp, #4]
80203b86:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
80203b8a:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1472
        }
80203b8c:	e7ff      	b.n	80203b8e <UART_IRQHandler+0x46>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1474
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_FRAMING)
80203b8e:	9802      	ldr	r0, [sp, #8]
80203b90:	6980      	ldr	r0, [r0, #24]
80203b92:	0640      	lsls	r0, r0, #25
80203b94:	2800      	cmp	r0, #0
80203b96:	d50a      	bpl.n	80203bae <UART_IRQHandler+0x66>
80203b98:	e7ff      	b.n	80203b9a <UART_IRQHandler+0x52>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1476
            uart->status.rx_framing_error = 1;
80203b9a:	9903      	ldr	r1, [sp, #12]
80203b9c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203b9e:	f040 0020 	orr.w	r0, r0, #32
80203ba2:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1477
            cb_event |= ARM_USART_EVENT_RX_FRAMING_ERROR;
80203ba4:	9801      	ldr	r0, [sp, #4]
80203ba6:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
80203baa:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1478
        }
80203bac:	e7ff      	b.n	80203bae <UART_IRQHandler+0x66>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1480
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_PARITY)
80203bae:	9802      	ldr	r0, [sp, #8]
80203bb0:	6980      	ldr	r0, [r0, #24]
80203bb2:	0680      	lsls	r0, r0, #26
80203bb4:	2800      	cmp	r0, #0
80203bb6:	d50a      	bpl.n	80203bce <UART_IRQHandler+0x86>
80203bb8:	e7ff      	b.n	80203bba <UART_IRQHandler+0x72>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1482
            uart->status.rx_parity_error = 1;
80203bba:	9903      	ldr	r1, [sp, #12]
80203bbc:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203bbe:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
80203bc2:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1483
            cb_event |= ARM_USART_EVENT_RX_PARITY_ERROR;
80203bc4:	9801      	ldr	r0, [sp, #4]
80203bc6:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
80203bca:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1484
        }
80203bcc:	e7ff      	b.n	80203bce <UART_IRQHandler+0x86>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1486
        if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_OVERRUN)
80203bce:	9802      	ldr	r0, [sp, #8]
80203bd0:	6980      	ldr	r0, [r0, #24]
80203bd2:	06c0      	lsls	r0, r0, #27
80203bd4:	2800      	cmp	r0, #0
80203bd6:	d50a      	bpl.n	80203bee <UART_IRQHandler+0xa6>
80203bd8:	e7ff      	b.n	80203bda <UART_IRQHandler+0x92>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1488
            uart->status.rx_overflow = 1;
80203bda:	9903      	ldr	r1, [sp, #12]
80203bdc:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203bde:	f040 0008 	orr.w	r0, r0, #8
80203be2:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1489
            cb_event |= ARM_USART_EVENT_RX_OVERFLOW;
80203be4:	9801      	ldr	r0, [sp, #4]
80203be6:	f040 0020 	orr.w	r0, r0, #32
80203bea:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1490
        }
80203bec:	e7ff      	b.n	80203bee <UART_IRQHandler+0xa6>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1493
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203bee:	9902      	ldr	r1, [sp, #8]
80203bf0:	2000      	movs	r0, #0
80203bf2:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1501
        if(uart->cb_event)
80203bf4:	9803      	ldr	r0, [sp, #12]
80203bf6:	6840      	ldr	r0, [r0, #4]
80203bf8:	b128      	cbz	r0, 80203c06 <UART_IRQHandler+0xbe>
80203bfa:	e7ff      	b.n	80203bfc <UART_IRQHandler+0xb4>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1502
            uart->cb_event(cb_event);
80203bfc:	9803      	ldr	r0, [sp, #12]
80203bfe:	6841      	ldr	r1, [r0, #4]
80203c00:	9801      	ldr	r0, [sp, #4]
80203c02:	4788      	blx	r1
80203c04:	e7ff      	b.n	80203c06 <UART_IRQHandler+0xbe>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1503
    }
80203c06:	e7ff      	b.n	80203c08 <UART_IRQHandler+0xc0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1506
    if(transfer->status & UART_TRANSFER_STATUS_SEND_COMPLETE)
80203c08:	9802      	ldr	r0, [sp, #8]
80203c0a:	6980      	ldr	r0, [r0, #24]
80203c0c:	07c0      	lsls	r0, r0, #31
80203c0e:	b190      	cbz	r0, 80203c36 <UART_IRQHandler+0xee>
80203c10:	e7ff      	b.n	80203c12 <UART_IRQHandler+0xca>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1509
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203c12:	9902      	ldr	r1, [sp, #8]
80203c14:	2000      	movs	r0, #0
80203c16:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1512
        uart->status.tx_busy = UART_STATUS_FREE;
80203c18:	9903      	ldr	r1, [sp, #12]
80203c1a:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203c1c:	f020 0001 	bic.w	r0, r0, #1
80203c20:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1515
        if(uart->cb_event)
80203c22:	9803      	ldr	r0, [sp, #12]
80203c24:	6840      	ldr	r0, [r0, #4]
80203c26:	b128      	cbz	r0, 80203c34 <UART_IRQHandler+0xec>
80203c28:	e7ff      	b.n	80203c2a <UART_IRQHandler+0xe2>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1516
            uart->cb_event(ARM_USART_EVENT_SEND_COMPLETE);
80203c2a:	9803      	ldr	r0, [sp, #12]
80203c2c:	6841      	ldr	r1, [r0, #4]
80203c2e:	2001      	movs	r0, #1
80203c30:	4788      	blx	r1
80203c32:	e7ff      	b.n	80203c34 <UART_IRQHandler+0xec>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1517
    }
80203c34:	e7ff      	b.n	80203c36 <UART_IRQHandler+0xee>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1520
    if(transfer->status & UART_TRANSFER_STATUS_RECEIVE_COMPLETE)
80203c36:	9802      	ldr	r0, [sp, #8]
80203c38:	6980      	ldr	r0, [r0, #24]
80203c3a:	0780      	lsls	r0, r0, #30
80203c3c:	2800      	cmp	r0, #0
80203c3e:	d512      	bpl.n	80203c66 <UART_IRQHandler+0x11e>
80203c40:	e7ff      	b.n	80203c42 <UART_IRQHandler+0xfa>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1523
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203c42:	9902      	ldr	r1, [sp, #8]
80203c44:	2000      	movs	r0, #0
80203c46:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1526
        uart->status.rx_busy = UART_STATUS_FREE;
80203c48:	9903      	ldr	r1, [sp, #12]
80203c4a:	6a48      	ldr	r0, [r1, #36]	@ 0x24
80203c4c:	f020 0002 	bic.w	r0, r0, #2
80203c50:	6248      	str	r0, [r1, #36]	@ 0x24
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1529
        if(uart->cb_event)
80203c52:	9803      	ldr	r0, [sp, #12]
80203c54:	6840      	ldr	r0, [r0, #4]
80203c56:	b128      	cbz	r0, 80203c64 <UART_IRQHandler+0x11c>
80203c58:	e7ff      	b.n	80203c5a <UART_IRQHandler+0x112>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1530
            uart->cb_event(ARM_USART_EVENT_RECEIVE_COMPLETE);
80203c5a:	9803      	ldr	r0, [sp, #12]
80203c5c:	6841      	ldr	r1, [r0, #4]
80203c5e:	2002      	movs	r0, #2
80203c60:	4788      	blx	r1
80203c62:	e7ff      	b.n	80203c64 <UART_IRQHandler+0x11c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1531
    }
80203c64:	e7ff      	b.n	80203c66 <UART_IRQHandler+0x11e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1534
    if(transfer->status & UART_TRANSFER_STATUS_RX_TIMEOUT)
80203c66:	9802      	ldr	r0, [sp, #8]
80203c68:	6980      	ldr	r0, [r0, #24]
80203c6a:	0740      	lsls	r0, r0, #29
80203c6c:	2800      	cmp	r0, #0
80203c6e:	d50d      	bpl.n	80203c8c <UART_IRQHandler+0x144>
80203c70:	e7ff      	b.n	80203c72 <UART_IRQHandler+0x12a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1537
        transfer->status = UART_TRANSFER_STATUS_NONE;
80203c72:	9902      	ldr	r1, [sp, #8]
80203c74:	2000      	movs	r0, #0
80203c76:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1545
        if(uart->cb_event)
80203c78:	9803      	ldr	r0, [sp, #12]
80203c7a:	6840      	ldr	r0, [r0, #4]
80203c7c:	b128      	cbz	r0, 80203c8a <UART_IRQHandler+0x142>
80203c7e:	e7ff      	b.n	80203c80 <UART_IRQHandler+0x138>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1546
            uart->cb_event(ARM_USART_EVENT_RX_TIMEOUT);
80203c80:	9803      	ldr	r0, [sp, #12]
80203c82:	6841      	ldr	r1, [r0, #4]
80203c84:	2040      	movs	r0, #64	@ 0x40
80203c86:	4788      	blx	r1
80203c88:	e7ff      	b.n	80203c8a <UART_IRQHandler+0x142>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1547
    }
80203c8a:	e7ff      	b.n	80203c8c <UART_IRQHandler+0x144>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1548
}
80203c8c:	b004      	add	sp, #16
80203c8e:	bd80      	pop	{r7, pc}

80203c90 <UsageFault_Handler>:
UsageFault_Handler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:338
    __asm("MOVS R0, #3\n\t"
80203c90:	2003      	movs	r0, #3
80203c92:	f001 bb9b 	b.w	802053cc <CommonAsmFaultHandler>
	...

80203c98 <_DoInit>:
_DoInit():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:303
static void _DoInit(void) {
80203c98:	b580      	push	{r7, lr}
80203c9a:	b082      	sub	sp, #8
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:310
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
80203c9c:	f240 708c 	movw	r0, #1932	@ 0x78c
80203ca0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203ca4:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:311
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
80203ca6:	9801      	ldr	r0, [sp, #4]
80203ca8:	21a8      	movs	r1, #168	@ 0xa8
80203caa:	f7fc fef0 	bl	80200a8e <__aeabi_memclr4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:312
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
80203cae:	9901      	ldr	r1, [sp, #4]
80203cb0:	2003      	movs	r0, #3
80203cb2:	6108      	str	r0, [r1, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:313
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
80203cb4:	9901      	ldr	r1, [sp, #4]
80203cb6:	6148      	str	r0, [r1, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:317
  p->aUp[0].sName         = "Terminal";
80203cb8:	9801      	ldr	r0, [sp, #4]
80203cba:	f246 6145 	movw	r1, #26181	@ 0x6645
80203cbe:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80203cc2:	6181      	str	r1, [r0, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:318
  p->aUp[0].pBuffer       = _acUpBuffer;
80203cc4:	9a01      	ldr	r2, [sp, #4]
80203cc6:	f640 005d 	movw	r0, #2141	@ 0x85d
80203cca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80203cce:	61d0      	str	r0, [r2, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:319
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
80203cd0:	9a01      	ldr	r2, [sp, #4]
80203cd2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
80203cd6:	6210      	str	r0, [r2, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:320
  p->aUp[0].RdOff         = 0u;
80203cd8:	9a01      	ldr	r2, [sp, #4]
80203cda:	2000      	movs	r0, #0
80203cdc:	6290      	str	r0, [r2, #40]	@ 0x28
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:321
  p->aUp[0].WrOff         = 0u;
80203cde:	9a01      	ldr	r2, [sp, #4]
80203ce0:	6250      	str	r0, [r2, #36]	@ 0x24
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:322
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
80203ce2:	9a01      	ldr	r2, [sp, #4]
80203ce4:	62d0      	str	r0, [r2, #44]	@ 0x2c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:326
  p->aDown[0].sName         = "Terminal";
80203ce6:	9a01      	ldr	r2, [sp, #4]
80203ce8:	6611      	str	r1, [r2, #96]	@ 0x60
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:327
  p->aDown[0].pBuffer       = _acDownBuffer;
80203cea:	9a01      	ldr	r2, [sp, #4]
80203cec:	f640 014d 	movw	r1, #2125	@ 0x84d
80203cf0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80203cf4:	6651      	str	r1, [r2, #100]	@ 0x64
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:328
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
80203cf6:	9a01      	ldr	r2, [sp, #4]
80203cf8:	2110      	movs	r1, #16
80203cfa:	6691      	str	r1, [r2, #104]	@ 0x68
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:329
  p->aDown[0].RdOff         = 0u;
80203cfc:	9901      	ldr	r1, [sp, #4]
80203cfe:	6708      	str	r0, [r1, #112]	@ 0x70
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:330
  p->aDown[0].WrOff         = 0u;
80203d00:	9901      	ldr	r1, [sp, #4]
80203d02:	66c8      	str	r0, [r1, #108]	@ 0x6c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:331
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
80203d04:	9901      	ldr	r1, [sp, #4]
80203d06:	6748      	str	r0, [r1, #116]	@ 0x74
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:337
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
80203d08:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:338
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
80203d0c:	9000      	str	r0, [sp, #0]
80203d0e:	e7ff      	b.n	80203d10 <_DoInit+0x78>
80203d10:	9800      	ldr	r0, [sp, #0]
80203d12:	280f      	cmp	r0, #15
80203d14:	d80e      	bhi.n	80203d34 <_DoInit+0x9c>
80203d16:	e7ff      	b.n	80203d18 <_DoInit+0x80>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:339
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
80203d18:	9a00      	ldr	r2, [sp, #0]
80203d1a:	f246 10bc 	movw	r0, #25020	@ 0x61bc
80203d1e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80203d22:	1a80      	subs	r0, r0, r2
80203d24:	7bc0      	ldrb	r0, [r0, #15]
80203d26:	9901      	ldr	r1, [sp, #4]
80203d28:	5488      	strb	r0, [r1, r2]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:340
  }
80203d2a:	e7ff      	b.n	80203d2c <_DoInit+0x94>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:338
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
80203d2c:	9800      	ldr	r0, [sp, #0]
80203d2e:	3001      	adds	r0, #1
80203d30:	9000      	str	r0, [sp, #0]
80203d32:	e7ed      	b.n	80203d10 <_DoInit+0x78>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:341
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
80203d34:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:342
}
80203d38:	b002      	add	sp, #8
80203d3a:	bd80      	pop	{r7, pc}

80203d3c <_GetAvailWriteSpace>:
_GetAvailWriteSpace():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:515
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
80203d3c:	b084      	sub	sp, #16
80203d3e:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:523
  RdOff = pRing->RdOff;
80203d40:	9803      	ldr	r0, [sp, #12]
80203d42:	6900      	ldr	r0, [r0, #16]
80203d44:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:524
  WrOff = pRing->WrOff;
80203d46:	9803      	ldr	r0, [sp, #12]
80203d48:	68c0      	ldr	r0, [r0, #12]
80203d4a:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:525
  if (RdOff <= WrOff) {
80203d4c:	9802      	ldr	r0, [sp, #8]
80203d4e:	9901      	ldr	r1, [sp, #4]
80203d50:	4288      	cmp	r0, r1
80203d52:	d809      	bhi.n	80203d68 <_GetAvailWriteSpace+0x2c>
80203d54:	e7ff      	b.n	80203d56 <_GetAvailWriteSpace+0x1a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:526
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
80203d56:	9803      	ldr	r0, [sp, #12]
80203d58:	6881      	ldr	r1, [r0, #8]
80203d5a:	9801      	ldr	r0, [sp, #4]
80203d5c:	43c0      	mvns	r0, r0
80203d5e:	4408      	add	r0, r1
80203d60:	9902      	ldr	r1, [sp, #8]
80203d62:	4408      	add	r0, r1
80203d64:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:527
  } else {
80203d66:	e005      	b.n	80203d74 <_GetAvailWriteSpace+0x38>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:528
    r = RdOff - WrOff - 1u;
80203d68:	9902      	ldr	r1, [sp, #8]
80203d6a:	9801      	ldr	r0, [sp, #4]
80203d6c:	43c0      	mvns	r0, r0
80203d6e:	4408      	add	r0, r1
80203d70:	9000      	str	r0, [sp, #0]
80203d72:	e7ff      	b.n	80203d74 <_GetAvailWriteSpace+0x38>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:530
  return r;
80203d74:	9800      	ldr	r0, [sp, #0]
80203d76:	b004      	add	sp, #16
80203d78:	4770      	bx	lr
	...

80203d7c <_PrintInt>:
_PrintInt():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:222
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
80203d7c:	b510      	push	{r4, lr}
80203d7e:	b08c      	sub	sp, #48	@ 0x30
80203d80:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
80203d84:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
80203d88:	900b      	str	r0, [sp, #44]	@ 0x2c
80203d8a:	910a      	str	r1, [sp, #40]	@ 0x28
80203d8c:	9209      	str	r2, [sp, #36]	@ 0x24
80203d8e:	9308      	str	r3, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:226
  Number = (v < 0) ? -v : v;
80203d90:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203d92:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80203d96:	dc04      	bgt.n	80203da2 <_PrintInt+0x26>
80203d98:	e7ff      	b.n	80203d9a <_PrintInt+0x1e>
80203d9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203d9c:	4240      	negs	r0, r0
80203d9e:	9005      	str	r0, [sp, #20]
80203da0:	e002      	b.n	80203da8 <_PrintInt+0x2c>
80203da2:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203da4:	9005      	str	r0, [sp, #20]
80203da6:	e7ff      	b.n	80203da8 <_PrintInt+0x2c>
80203da8:	9805      	ldr	r0, [sp, #20]
80203daa:	9006      	str	r0, [sp, #24]
80203dac:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:231
  Width = 1u;
80203dae:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:232
  while (Number >= (int)Base) {
80203db0:	e7ff      	b.n	80203db2 <_PrintInt+0x36>
80203db2:	9806      	ldr	r0, [sp, #24]
80203db4:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203db6:	4288      	cmp	r0, r1
80203db8:	db09      	blt.n	80203dce <_PrintInt+0x52>
80203dba:	e7ff      	b.n	80203dbc <_PrintInt+0x40>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:233
    Number = (Number / (int)Base);
80203dbc:	9806      	ldr	r0, [sp, #24]
80203dbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203dc0:	fb90 f0f1 	sdiv	r0, r0, r1
80203dc4:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:234
    Width++;
80203dc6:	9807      	ldr	r0, [sp, #28]
80203dc8:	3001      	adds	r0, #1
80203dca:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:232
  while (Number >= (int)Base) {
80203dcc:	e7f1      	b.n	80203db2 <_PrintInt+0x36>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:236
  if (NumDigits > Width) {
80203dce:	9808      	ldr	r0, [sp, #32]
80203dd0:	9907      	ldr	r1, [sp, #28]
80203dd2:	4288      	cmp	r0, r1
80203dd4:	d903      	bls.n	80203dde <_PrintInt+0x62>
80203dd6:	e7ff      	b.n	80203dd8 <_PrintInt+0x5c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:237
    Width = NumDigits;
80203dd8:	9808      	ldr	r0, [sp, #32]
80203dda:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:238
  }
80203ddc:	e7ff      	b.n	80203dde <_PrintInt+0x62>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:239
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
80203dde:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203de0:	b170      	cbz	r0, 80203e00 <_PrintInt+0x84>
80203de2:	e7ff      	b.n	80203de4 <_PrintInt+0x68>
80203de4:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203de6:	2800      	cmp	r0, #0
80203de8:	d406      	bmi.n	80203df8 <_PrintInt+0x7c>
80203dea:	e7ff      	b.n	80203dec <_PrintInt+0x70>
80203dec:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203df0:	0740      	lsls	r0, r0, #29
80203df2:	2800      	cmp	r0, #0
80203df4:	d504      	bpl.n	80203e00 <_PrintInt+0x84>
80203df6:	e7ff      	b.n	80203df8 <_PrintInt+0x7c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:240
    FieldWidth--;
80203df8:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203dfa:	3801      	subs	r0, #1
80203dfc:	900e      	str	r0, [sp, #56]	@ 0x38
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:241
  }
80203dfe:	e7ff      	b.n	80203e00 <_PrintInt+0x84>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:246
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
80203e00:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203e04:	0780      	lsls	r0, r0, #30
80203e06:	2800      	cmp	r0, #0
80203e08:	d503      	bpl.n	80203e12 <_PrintInt+0x96>
80203e0a:	e7ff      	b.n	80203e0c <_PrintInt+0x90>
80203e0c:	9808      	ldr	r0, [sp, #32]
80203e0e:	b350      	cbz	r0, 80203e66 <_PrintInt+0xea>
80203e10:	e7ff      	b.n	80203e12 <_PrintInt+0x96>
80203e12:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203e16:	07c0      	lsls	r0, r0, #31
80203e18:	bb28      	cbnz	r0, 80203e66 <_PrintInt+0xea>
80203e1a:	e7ff      	b.n	80203e1c <_PrintInt+0xa0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:247
    if (FieldWidth != 0u) {
80203e1c:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203e1e:	b308      	cbz	r0, 80203e64 <_PrintInt+0xe8>
80203e20:	e7ff      	b.n	80203e22 <_PrintInt+0xa6>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:248
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
80203e22:	e7ff      	b.n	80203e24 <_PrintInt+0xa8>
80203e24:	990e      	ldr	r1, [sp, #56]	@ 0x38
80203e26:	2000      	movs	r0, #0
80203e28:	9004      	str	r0, [sp, #16]
80203e2a:	b139      	cbz	r1, 80203e3c <_PrintInt+0xc0>
80203e2c:	e7ff      	b.n	80203e2e <_PrintInt+0xb2>
80203e2e:	9807      	ldr	r0, [sp, #28]
80203e30:	990e      	ldr	r1, [sp, #56]	@ 0x38
80203e32:	4288      	cmp	r0, r1
80203e34:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
80203e38:	9004      	str	r0, [sp, #16]
80203e3a:	e7ff      	b.n	80203e3c <_PrintInt+0xc0>
80203e3c:	9804      	ldr	r0, [sp, #16]
80203e3e:	07c0      	lsls	r0, r0, #31
80203e40:	b178      	cbz	r0, 80203e62 <_PrintInt+0xe6>
80203e42:	e7ff      	b.n	80203e44 <_PrintInt+0xc8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:249
        FieldWidth--;
80203e44:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203e46:	3801      	subs	r0, #1
80203e48:	900e      	str	r0, [sp, #56]	@ 0x38
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:250
        _StoreChar(pBufferDesc, ' ');
80203e4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203e4c:	2120      	movs	r1, #32
80203e4e:	f000 f94d 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:251
        if (pBufferDesc->ReturnValue < 0) {
80203e52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203e54:	68c0      	ldr	r0, [r0, #12]
80203e56:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80203e5a:	dc01      	bgt.n	80203e60 <_PrintInt+0xe4>
80203e5c:	e7ff      	b.n	80203e5e <_PrintInt+0xe2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:252
          break;
80203e5e:	e000      	b.n	80203e62 <_PrintInt+0xe6>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:248
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
80203e60:	e7e0      	b.n	80203e24 <_PrintInt+0xa8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:255
    }
80203e62:	e7ff      	b.n	80203e64 <_PrintInt+0xe8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:256
  }
80203e64:	e7ff      	b.n	80203e66 <_PrintInt+0xea>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:260
  if (pBufferDesc->ReturnValue >= 0) {
80203e66:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203e68:	68c0      	ldr	r0, [r0, #12]
80203e6a:	2800      	cmp	r0, #0
80203e6c:	d468      	bmi.n	80203f40 <_PrintInt+0x1c4>
80203e6e:	e7ff      	b.n	80203e70 <_PrintInt+0xf4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:261
    if (v < 0) {
80203e70:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203e72:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80203e76:	dc08      	bgt.n	80203e8a <_PrintInt+0x10e>
80203e78:	e7ff      	b.n	80203e7a <_PrintInt+0xfe>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:262
      v = -v;
80203e7a:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203e7c:	4240      	negs	r0, r0
80203e7e:	900a      	str	r0, [sp, #40]	@ 0x28
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:263
      _StoreChar(pBufferDesc, '-');
80203e80:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203e82:	212d      	movs	r1, #45	@ 0x2d
80203e84:	f000 f932 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:264
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
80203e88:	e00c      	b.n	80203ea4 <_PrintInt+0x128>
80203e8a:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203e8e:	0740      	lsls	r0, r0, #29
80203e90:	2800      	cmp	r0, #0
80203e92:	d505      	bpl.n	80203ea0 <_PrintInt+0x124>
80203e94:	e7ff      	b.n	80203e96 <_PrintInt+0x11a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:265
      _StoreChar(pBufferDesc, '+');
80203e96:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203e98:	212b      	movs	r1, #43	@ 0x2b
80203e9a:	f000 f927 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:266
    } else {
80203e9e:	e000      	b.n	80203ea2 <_PrintInt+0x126>
80203ea0:	e7ff      	b.n	80203ea2 <_PrintInt+0x126>
80203ea2:	e7ff      	b.n	80203ea4 <_PrintInt+0x128>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:269
    if (pBufferDesc->ReturnValue >= 0) {
80203ea4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203ea6:	68c0      	ldr	r0, [r0, #12]
80203ea8:	2800      	cmp	r0, #0
80203eaa:	d448      	bmi.n	80203f3e <_PrintInt+0x1c2>
80203eac:	e7ff      	b.n	80203eae <_PrintInt+0x132>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:273
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
80203eae:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203eb2:	0780      	lsls	r0, r0, #30
80203eb4:	2800      	cmp	r0, #0
80203eb6:	d52d      	bpl.n	80203f14 <_PrintInt+0x198>
80203eb8:	e7ff      	b.n	80203eba <_PrintInt+0x13e>
80203eba:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203ebe:	07c0      	lsls	r0, r0, #31
80203ec0:	bb40      	cbnz	r0, 80203f14 <_PrintInt+0x198>
80203ec2:	e7ff      	b.n	80203ec4 <_PrintInt+0x148>
80203ec4:	9808      	ldr	r0, [sp, #32]
80203ec6:	bb28      	cbnz	r0, 80203f14 <_PrintInt+0x198>
80203ec8:	e7ff      	b.n	80203eca <_PrintInt+0x14e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:274
        if (FieldWidth != 0u) {
80203eca:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203ecc:	b308      	cbz	r0, 80203f12 <_PrintInt+0x196>
80203ece:	e7ff      	b.n	80203ed0 <_PrintInt+0x154>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:275
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
80203ed0:	e7ff      	b.n	80203ed2 <_PrintInt+0x156>
80203ed2:	990e      	ldr	r1, [sp, #56]	@ 0x38
80203ed4:	2000      	movs	r0, #0
80203ed6:	9003      	str	r0, [sp, #12]
80203ed8:	b139      	cbz	r1, 80203eea <_PrintInt+0x16e>
80203eda:	e7ff      	b.n	80203edc <_PrintInt+0x160>
80203edc:	9807      	ldr	r0, [sp, #28]
80203ede:	990e      	ldr	r1, [sp, #56]	@ 0x38
80203ee0:	4288      	cmp	r0, r1
80203ee2:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
80203ee6:	9003      	str	r0, [sp, #12]
80203ee8:	e7ff      	b.n	80203eea <_PrintInt+0x16e>
80203eea:	9803      	ldr	r0, [sp, #12]
80203eec:	07c0      	lsls	r0, r0, #31
80203eee:	b178      	cbz	r0, 80203f10 <_PrintInt+0x194>
80203ef0:	e7ff      	b.n	80203ef2 <_PrintInt+0x176>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:276
            FieldWidth--;
80203ef2:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203ef4:	3801      	subs	r0, #1
80203ef6:	900e      	str	r0, [sp, #56]	@ 0x38
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:277
            _StoreChar(pBufferDesc, '0');
80203ef8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203efa:	2130      	movs	r1, #48	@ 0x30
80203efc:	f000 f8f6 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:278
            if (pBufferDesc->ReturnValue < 0) {
80203f00:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203f02:	68c0      	ldr	r0, [r0, #12]
80203f04:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80203f08:	dc01      	bgt.n	80203f0e <_PrintInt+0x192>
80203f0a:	e7ff      	b.n	80203f0c <_PrintInt+0x190>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:279
              break;
80203f0c:	e000      	b.n	80203f10 <_PrintInt+0x194>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:275
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
80203f0e:	e7e0      	b.n	80203ed2 <_PrintInt+0x156>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:282
        }
80203f10:	e7ff      	b.n	80203f12 <_PrintInt+0x196>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:283
      }
80203f12:	e7ff      	b.n	80203f14 <_PrintInt+0x198>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:284
      if (pBufferDesc->ReturnValue >= 0) {
80203f14:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203f16:	68c0      	ldr	r0, [r0, #12]
80203f18:	2800      	cmp	r0, #0
80203f1a:	d40f      	bmi.n	80203f3c <_PrintInt+0x1c0>
80203f1c:	e7ff      	b.n	80203f1e <_PrintInt+0x1a2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:288
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
80203f1e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203f20:	990a      	ldr	r1, [sp, #40]	@ 0x28
80203f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
80203f24:	9b08      	ldr	r3, [sp, #32]
80203f26:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
80203f2a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
80203f2c:	46ee      	mov	lr, sp
80203f2e:	f8ce 4004 	str.w	r4, [lr, #4]
80203f32:	f8ce c000 	str.w	ip, [lr]
80203f36:	f000 f805 	bl	80203f44 <_PrintUnsigned>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:289
      }
80203f3a:	e7ff      	b.n	80203f3c <_PrintInt+0x1c0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:290
    }
80203f3c:	e7ff      	b.n	80203f3e <_PrintInt+0x1c2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:291
  }
80203f3e:	e7ff      	b.n	80203f40 <_PrintInt+0x1c4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:292
}
80203f40:	b00c      	add	sp, #48	@ 0x30
80203f42:	bd10      	pop	{r4, pc}

80203f44 <_PrintUnsigned>:
_PrintUnsigned():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:132
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
80203f44:	b580      	push	{r7, lr}
80203f46:	b08c      	sub	sp, #48	@ 0x30
80203f48:	f8dd c03c 	ldr.w	ip, [sp, #60]	@ 0x3c
80203f4c:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
80203f50:	900b      	str	r0, [sp, #44]	@ 0x2c
80203f52:	910a      	str	r1, [sp, #40]	@ 0x28
80203f54:	9209      	str	r2, [sp, #36]	@ 0x24
80203f56:	9308      	str	r3, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:140
  Number = v;
80203f58:	980a      	ldr	r0, [sp, #40]	@ 0x28
80203f5a:	9005      	str	r0, [sp, #20]
80203f5c:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:141
  Digit = 1u;
80203f5e:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:145
  Width = 1u;
80203f60:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:146
  while (Number >= Base) {
80203f62:	e7ff      	b.n	80203f64 <_PrintUnsigned+0x20>
80203f64:	9805      	ldr	r0, [sp, #20]
80203f66:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203f68:	4288      	cmp	r0, r1
80203f6a:	d309      	bcc.n	80203f80 <_PrintUnsigned+0x3c>
80203f6c:	e7ff      	b.n	80203f6e <_PrintUnsigned+0x2a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:147
    Number = (Number / Base);
80203f6e:	9805      	ldr	r0, [sp, #20]
80203f70:	9909      	ldr	r1, [sp, #36]	@ 0x24
80203f72:	fbb0 f0f1 	udiv	r0, r0, r1
80203f76:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:148
    Width++;
80203f78:	9804      	ldr	r0, [sp, #16]
80203f7a:	3001      	adds	r0, #1
80203f7c:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:146
  while (Number >= Base) {
80203f7e:	e7f1      	b.n	80203f64 <_PrintUnsigned+0x20>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:150
  if (NumDigits > Width) {
80203f80:	9808      	ldr	r0, [sp, #32]
80203f82:	9904      	ldr	r1, [sp, #16]
80203f84:	4288      	cmp	r0, r1
80203f86:	d903      	bls.n	80203f90 <_PrintUnsigned+0x4c>
80203f88:	e7ff      	b.n	80203f8a <_PrintUnsigned+0x46>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:151
    Width = NumDigits;
80203f8a:	9808      	ldr	r0, [sp, #32]
80203f8c:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:152
  }
80203f8e:	e7ff      	b.n	80203f90 <_PrintUnsigned+0x4c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:156
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
80203f90:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203f94:	07c0      	lsls	r0, r0, #31
80203f96:	bbb8      	cbnz	r0, 80204008 <_PrintUnsigned+0xc4>
80203f98:	e7ff      	b.n	80203f9a <_PrintUnsigned+0x56>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:157
    if (FieldWidth != 0u) {
80203f9a:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203f9c:	b398      	cbz	r0, 80204006 <_PrintUnsigned+0xc2>
80203f9e:	e7ff      	b.n	80203fa0 <_PrintUnsigned+0x5c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:158
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
80203fa0:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80203fa4:	0780      	lsls	r0, r0, #30
80203fa6:	2800      	cmp	r0, #0
80203fa8:	d507      	bpl.n	80203fba <_PrintUnsigned+0x76>
80203faa:	e7ff      	b.n	80203fac <_PrintUnsigned+0x68>
80203fac:	9808      	ldr	r0, [sp, #32]
80203fae:	b920      	cbnz	r0, 80203fba <_PrintUnsigned+0x76>
80203fb0:	e7ff      	b.n	80203fb2 <_PrintUnsigned+0x6e>
80203fb2:	2030      	movs	r0, #48	@ 0x30
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:159
        c = '0';
80203fb4:	f88d 000f 	strb.w	r0, [sp, #15]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:160
      } else {
80203fb8:	e003      	b.n	80203fc2 <_PrintUnsigned+0x7e>
80203fba:	2020      	movs	r0, #32
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:161
        c = ' ';
80203fbc:	f88d 000f 	strb.w	r0, [sp, #15]
80203fc0:	e7ff      	b.n	80203fc2 <_PrintUnsigned+0x7e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:163
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
80203fc2:	e7ff      	b.n	80203fc4 <_PrintUnsigned+0x80>
80203fc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
80203fc6:	2000      	movs	r0, #0
80203fc8:	9002      	str	r0, [sp, #8]
80203fca:	b139      	cbz	r1, 80203fdc <_PrintUnsigned+0x98>
80203fcc:	e7ff      	b.n	80203fce <_PrintUnsigned+0x8a>
80203fce:	9804      	ldr	r0, [sp, #16]
80203fd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
80203fd2:	4288      	cmp	r0, r1
80203fd4:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
80203fd8:	9002      	str	r0, [sp, #8]
80203fda:	e7ff      	b.n	80203fdc <_PrintUnsigned+0x98>
80203fdc:	9802      	ldr	r0, [sp, #8]
80203fde:	07c0      	lsls	r0, r0, #31
80203fe0:	b180      	cbz	r0, 80204004 <_PrintUnsigned+0xc0>
80203fe2:	e7ff      	b.n	80203fe4 <_PrintUnsigned+0xa0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:164
        FieldWidth--;
80203fe4:	980e      	ldr	r0, [sp, #56]	@ 0x38
80203fe6:	3801      	subs	r0, #1
80203fe8:	900e      	str	r0, [sp, #56]	@ 0x38
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:165
        _StoreChar(pBufferDesc, c);
80203fea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203fec:	f89d 100f 	ldrb.w	r1, [sp, #15]
80203ff0:	f000 f87c 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:166
        if (pBufferDesc->ReturnValue < 0) {
80203ff4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80203ff6:	68c0      	ldr	r0, [r0, #12]
80203ff8:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80203ffc:	dc01      	bgt.n	80204002 <_PrintUnsigned+0xbe>
80203ffe:	e7ff      	b.n	80204000 <_PrintUnsigned+0xbc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:167
          break;
80204000:	e000      	b.n	80204004 <_PrintUnsigned+0xc0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:163
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
80204002:	e7df      	b.n	80203fc4 <_PrintUnsigned+0x80>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:170
    }
80204004:	e7ff      	b.n	80204006 <_PrintUnsigned+0xc2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:171
  }
80204006:	e7ff      	b.n	80204008 <_PrintUnsigned+0xc4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:172
  if (pBufferDesc->ReturnValue >= 0) {
80204008:	980b      	ldr	r0, [sp, #44]	@ 0x2c
8020400a:	68c0      	ldr	r0, [r0, #12]
8020400c:	2800      	cmp	r0, #0
8020400e:	d46b      	bmi.n	802040e8 <_PrintUnsigned+0x1a4>
80204010:	e7ff      	b.n	80204012 <_PrintUnsigned+0xce>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:178
    while (1) {
80204012:	e7ff      	b.n	80204014 <_PrintUnsigned+0xd0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:179
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
80204014:	9808      	ldr	r0, [sp, #32]
80204016:	2802      	cmp	r0, #2
80204018:	d304      	bcc.n	80204024 <_PrintUnsigned+0xe0>
8020401a:	e7ff      	b.n	8020401c <_PrintUnsigned+0xd8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:180
        NumDigits--;
8020401c:	9808      	ldr	r0, [sp, #32]
8020401e:	3801      	subs	r0, #1
80204020:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:181
      } else {
80204022:	e00b      	b.n	8020403c <_PrintUnsigned+0xf8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:182
        Div = v / Digit;
80204024:	980a      	ldr	r0, [sp, #40]	@ 0x28
80204026:	9906      	ldr	r1, [sp, #24]
80204028:	fbb0 f0f1 	udiv	r0, r0, r1
8020402c:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:183
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
8020402e:	9807      	ldr	r0, [sp, #28]
80204030:	9909      	ldr	r1, [sp, #36]	@ 0x24
80204032:	4288      	cmp	r0, r1
80204034:	d201      	bcs.n	8020403a <_PrintUnsigned+0xf6>
80204036:	e7ff      	b.n	80204038 <_PrintUnsigned+0xf4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:184
          break;
80204038:	e005      	b.n	80204046 <_PrintUnsigned+0x102>
8020403a:	e7ff      	b.n	8020403c <_PrintUnsigned+0xf8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:187
      Digit *= Base;
8020403c:	9909      	ldr	r1, [sp, #36]	@ 0x24
8020403e:	9806      	ldr	r0, [sp, #24]
80204040:	4348      	muls	r0, r1
80204042:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:178
    while (1) {
80204044:	e7e6      	b.n	80204014 <_PrintUnsigned+0xd0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:192
    do {
80204046:	e7ff      	b.n	80204048 <_PrintUnsigned+0x104>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:193
      Div = v / Digit;
80204048:	980a      	ldr	r0, [sp, #40]	@ 0x28
8020404a:	9906      	ldr	r1, [sp, #24]
8020404c:	fbb0 f0f1 	udiv	r0, r0, r1
80204050:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:194
      v -= Div * Digit;
80204052:	9807      	ldr	r0, [sp, #28]
80204054:	9906      	ldr	r1, [sp, #24]
80204056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
80204058:	fb00 2011 	mls	r0, r0, r1, r2
8020405c:	900a      	str	r0, [sp, #40]	@ 0x28
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:195
      _StoreChar(pBufferDesc, _aV2C[Div]);
8020405e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80204060:	9a07      	ldr	r2, [sp, #28]
80204062:	f246 11cd 	movw	r1, #25037	@ 0x61cd
80204066:	f2c8 0120 	movt	r1, #32800	@ 0x8020
8020406a:	5c89      	ldrb	r1, [r1, r2]
8020406c:	f000 f83e 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:196
      if (pBufferDesc->ReturnValue < 0) {
80204070:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80204072:	68c0      	ldr	r0, [r0, #12]
80204074:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
80204078:	dc01      	bgt.n	8020407e <_PrintUnsigned+0x13a>
8020407a:	e7ff      	b.n	8020407c <_PrintUnsigned+0x138>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:197
        break;
8020407c:	e009      	b.n	80204092 <_PrintUnsigned+0x14e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:199
      Digit /= Base;
8020407e:	9909      	ldr	r1, [sp, #36]	@ 0x24
80204080:	9806      	ldr	r0, [sp, #24]
80204082:	fbb0 f0f1 	udiv	r0, r0, r1
80204086:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:200
    } while (Digit);
80204088:	e7ff      	b.n	8020408a <_PrintUnsigned+0x146>
8020408a:	9806      	ldr	r0, [sp, #24]
8020408c:	b108      	cbz	r0, 80204092 <_PrintUnsigned+0x14e>
8020408e:	f02f c825 	le	80204048 <_PrintUnsigned+0x104>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:204
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
80204092:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
80204096:	07c0      	lsls	r0, r0, #31
80204098:	b328      	cbz	r0, 802040e6 <_PrintUnsigned+0x1a2>
8020409a:	e7ff      	b.n	8020409c <_PrintUnsigned+0x158>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:205
      if (FieldWidth != 0u) {
8020409c:	980e      	ldr	r0, [sp, #56]	@ 0x38
8020409e:	b308      	cbz	r0, 802040e4 <_PrintUnsigned+0x1a0>
802040a0:	e7ff      	b.n	802040a2 <_PrintUnsigned+0x15e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:206
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
802040a2:	e7ff      	b.n	802040a4 <_PrintUnsigned+0x160>
802040a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
802040a6:	2000      	movs	r0, #0
802040a8:	9001      	str	r0, [sp, #4]
802040aa:	b139      	cbz	r1, 802040bc <_PrintUnsigned+0x178>
802040ac:	e7ff      	b.n	802040ae <_PrintUnsigned+0x16a>
802040ae:	9804      	ldr	r0, [sp, #16]
802040b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
802040b2:	4288      	cmp	r0, r1
802040b4:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
802040b8:	9001      	str	r0, [sp, #4]
802040ba:	e7ff      	b.n	802040bc <_PrintUnsigned+0x178>
802040bc:	9801      	ldr	r0, [sp, #4]
802040be:	07c0      	lsls	r0, r0, #31
802040c0:	b178      	cbz	r0, 802040e2 <_PrintUnsigned+0x19e>
802040c2:	e7ff      	b.n	802040c4 <_PrintUnsigned+0x180>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:207
          FieldWidth--;
802040c4:	980e      	ldr	r0, [sp, #56]	@ 0x38
802040c6:	3801      	subs	r0, #1
802040c8:	900e      	str	r0, [sp, #56]	@ 0x38
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:208
          _StoreChar(pBufferDesc, ' ');
802040ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
802040cc:	2120      	movs	r1, #32
802040ce:	f000 f80d 	bl	802040ec <_StoreChar>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:209
          if (pBufferDesc->ReturnValue < 0) {
802040d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
802040d4:	68c0      	ldr	r0, [r0, #12]
802040d6:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
802040da:	dc01      	bgt.n	802040e0 <_PrintUnsigned+0x19c>
802040dc:	e7ff      	b.n	802040de <_PrintUnsigned+0x19a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:210
            break;
802040de:	e000      	b.n	802040e2 <_PrintUnsigned+0x19e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:206
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
802040e0:	e7e0      	b.n	802040a4 <_PrintUnsigned+0x160>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:213
      }
802040e2:	e7ff      	b.n	802040e4 <_PrintUnsigned+0x1a0>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:214
    }
802040e4:	e7ff      	b.n	802040e6 <_PrintUnsigned+0x1a2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:215
  }
802040e6:	e7ff      	b.n	802040e8 <_PrintUnsigned+0x1a4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:216
}
802040e8:	b00c      	add	sp, #48	@ 0x30
802040ea:	bd80      	pop	{r7, pc}

802040ec <_StoreChar>:
_StoreChar():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:107
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
802040ec:	b580      	push	{r7, lr}
802040ee:	b084      	sub	sp, #16
802040f0:	9003      	str	r0, [sp, #12]
802040f2:	f88d 100b 	strb.w	r1, [sp, #11]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:110
  Cnt = p->Cnt;
802040f6:	9803      	ldr	r0, [sp, #12]
802040f8:	6880      	ldr	r0, [r0, #8]
802040fa:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:111
  if ((Cnt + 1u) <= p->BufferSize) {
802040fc:	9801      	ldr	r0, [sp, #4]
802040fe:	3001      	adds	r0, #1
80204100:	9903      	ldr	r1, [sp, #12]
80204102:	6849      	ldr	r1, [r1, #4]
80204104:	4288      	cmp	r0, r1
80204106:	d80f      	bhi.n	80204128 <_StoreChar+0x3c>
80204108:	e7ff      	b.n	8020410a <_StoreChar+0x1e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:112
    *(p->pBuffer + Cnt) = c;
8020410a:	f89d 000b 	ldrb.w	r0, [sp, #11]
8020410e:	9903      	ldr	r1, [sp, #12]
80204110:	6809      	ldr	r1, [r1, #0]
80204112:	9a01      	ldr	r2, [sp, #4]
80204114:	5488      	strb	r0, [r1, r2]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:113
    p->Cnt = Cnt + 1u;
80204116:	9801      	ldr	r0, [sp, #4]
80204118:	3001      	adds	r0, #1
8020411a:	9903      	ldr	r1, [sp, #12]
8020411c:	6088      	str	r0, [r1, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:114
    p->ReturnValue++;
8020411e:	9903      	ldr	r1, [sp, #12]
80204120:	68c8      	ldr	r0, [r1, #12]
80204122:	3001      	adds	r0, #1
80204124:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:115
  }
80204126:	e7ff      	b.n	80204128 <_StoreChar+0x3c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:119
  if (p->Cnt == p->BufferSize) {
80204128:	9803      	ldr	r0, [sp, #12]
8020412a:	6841      	ldr	r1, [r0, #4]
8020412c:	6880      	ldr	r0, [r0, #8]
8020412e:	4288      	cmp	r0, r1
80204130:	d115      	bne.n	8020415e <_StoreChar+0x72>
80204132:	e7ff      	b.n	80204134 <_StoreChar+0x48>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:120
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
80204134:	9803      	ldr	r0, [sp, #12]
80204136:	6801      	ldr	r1, [r0, #0]
80204138:	6882      	ldr	r2, [r0, #8]
8020413a:	6900      	ldr	r0, [r0, #16]
8020413c:	f7ff f940 	bl	802033c0 <SEGGER_RTT_Write>
80204140:	9903      	ldr	r1, [sp, #12]
80204142:	6889      	ldr	r1, [r1, #8]
80204144:	4288      	cmp	r0, r1
80204146:	d005      	beq.n	80204154 <_StoreChar+0x68>
80204148:	e7ff      	b.n	8020414a <_StoreChar+0x5e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:121
      p->ReturnValue = -1;
8020414a:	9903      	ldr	r1, [sp, #12]
8020414c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
80204150:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:122
    } else {
80204152:	e003      	b.n	8020415c <_StoreChar+0x70>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:123
      p->Cnt = 0u;
80204154:	9903      	ldr	r1, [sp, #12]
80204156:	2000      	movs	r0, #0
80204158:	6088      	str	r0, [r1, #8]
8020415a:	e7ff      	b.n	8020415c <_StoreChar+0x70>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:125
  }
8020415c:	e7ff      	b.n	8020415e <_StoreChar+0x72>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:126
}
8020415e:	b004      	add	sp, #16
80204160:	bd80      	pop	{r7, pc}
	...

80204164 <_WriteBlocking>:
_WriteBlocking():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:363
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
80204164:	b580      	push	{r7, lr}
80204166:	b08a      	sub	sp, #40	@ 0x28
80204168:	9009      	str	r0, [sp, #36]	@ 0x24
8020416a:	9108      	str	r1, [sp, #32]
8020416c:	9207      	str	r2, [sp, #28]
8020416e:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:372
  NumBytesWritten = 0u;
80204170:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:373
  WrOff = pRing->WrOff;
80204172:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204174:	68c0      	ldr	r0, [r0, #12]
80204176:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:374
  do {
80204178:	e7ff      	b.n	8020417a <_WriteBlocking+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:375
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
8020417a:	9809      	ldr	r0, [sp, #36]	@ 0x24
8020417c:	6900      	ldr	r0, [r0, #16]
8020417e:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:376
    if (RdOff > WrOff) {
80204180:	9804      	ldr	r0, [sp, #16]
80204182:	9903      	ldr	r1, [sp, #12]
80204184:	4288      	cmp	r0, r1
80204186:	d906      	bls.n	80204196 <_WriteBlocking+0x32>
80204188:	e7ff      	b.n	8020418a <_WriteBlocking+0x26>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:377
      NumBytesToWrite = RdOff - WrOff - 1u;
8020418a:	9904      	ldr	r1, [sp, #16]
8020418c:	9803      	ldr	r0, [sp, #12]
8020418e:	43c0      	mvns	r0, r0
80204190:	4408      	add	r0, r1
80204192:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:378
    } else {
80204194:	e008      	b.n	802041a8 <_WriteBlocking+0x44>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:379
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
80204196:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204198:	6881      	ldr	r1, [r0, #8]
8020419a:	9803      	ldr	r0, [sp, #12]
8020419c:	9a04      	ldr	r2, [sp, #16]
8020419e:	1a80      	subs	r0, r0, r2
802041a0:	43c0      	mvns	r0, r0
802041a2:	4408      	add	r0, r1
802041a4:	9006      	str	r0, [sp, #24]
802041a6:	e7ff      	b.n	802041a8 <_WriteBlocking+0x44>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:381
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
802041a8:	9806      	ldr	r0, [sp, #24]
802041aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
802041ac:	6889      	ldr	r1, [r1, #8]
802041ae:	9a03      	ldr	r2, [sp, #12]
802041b0:	1a89      	subs	r1, r1, r2
802041b2:	4288      	cmp	r0, r1
802041b4:	d203      	bcs.n	802041be <_WriteBlocking+0x5a>
802041b6:	e7ff      	b.n	802041b8 <_WriteBlocking+0x54>
802041b8:	9806      	ldr	r0, [sp, #24]
802041ba:	9001      	str	r0, [sp, #4]
802041bc:	e005      	b.n	802041ca <_WriteBlocking+0x66>
802041be:	9809      	ldr	r0, [sp, #36]	@ 0x24
802041c0:	6880      	ldr	r0, [r0, #8]
802041c2:	9903      	ldr	r1, [sp, #12]
802041c4:	1a40      	subs	r0, r0, r1
802041c6:	9001      	str	r0, [sp, #4]
802041c8:	e7ff      	b.n	802041ca <_WriteBlocking+0x66>
802041ca:	9801      	ldr	r0, [sp, #4]
802041cc:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:382
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
802041ce:	9806      	ldr	r0, [sp, #24]
802041d0:	9907      	ldr	r1, [sp, #28]
802041d2:	4288      	cmp	r0, r1
802041d4:	d203      	bcs.n	802041de <_WriteBlocking+0x7a>
802041d6:	e7ff      	b.n	802041d8 <_WriteBlocking+0x74>
802041d8:	9806      	ldr	r0, [sp, #24]
802041da:	9000      	str	r0, [sp, #0]
802041dc:	e002      	b.n	802041e4 <_WriteBlocking+0x80>
802041de:	9807      	ldr	r0, [sp, #28]
802041e0:	9000      	str	r0, [sp, #0]
802041e2:	e7ff      	b.n	802041e4 <_WriteBlocking+0x80>
802041e4:	9800      	ldr	r0, [sp, #0]
802041e6:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:383
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
802041e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
802041ea:	6840      	ldr	r0, [r0, #4]
802041ec:	9903      	ldr	r1, [sp, #12]
802041ee:	4408      	add	r0, r1
802041f0:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:392
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
802041f2:	9802      	ldr	r0, [sp, #8]
802041f4:	9908      	ldr	r1, [sp, #32]
802041f6:	9a06      	ldr	r2, [sp, #24]
802041f8:	f7fc fc04 	bl	80200a04 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:393
    NumBytesWritten += NumBytesToWrite;
802041fc:	9906      	ldr	r1, [sp, #24]
802041fe:	9805      	ldr	r0, [sp, #20]
80204200:	4408      	add	r0, r1
80204202:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:394
    pBuffer         += NumBytesToWrite;
80204204:	9906      	ldr	r1, [sp, #24]
80204206:	9808      	ldr	r0, [sp, #32]
80204208:	4408      	add	r0, r1
8020420a:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:395
    NumBytes        -= NumBytesToWrite;
8020420c:	9906      	ldr	r1, [sp, #24]
8020420e:	9807      	ldr	r0, [sp, #28]
80204210:	1a40      	subs	r0, r0, r1
80204212:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:396
    WrOff           += NumBytesToWrite;
80204214:	9906      	ldr	r1, [sp, #24]
80204216:	9803      	ldr	r0, [sp, #12]
80204218:	4408      	add	r0, r1
8020421a:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:398
    if (WrOff == pRing->SizeOfBuffer) {
8020421c:	9803      	ldr	r0, [sp, #12]
8020421e:	9909      	ldr	r1, [sp, #36]	@ 0x24
80204220:	6889      	ldr	r1, [r1, #8]
80204222:	4288      	cmp	r0, r1
80204224:	d103      	bne.n	8020422e <_WriteBlocking+0xca>
80204226:	e7ff      	b.n	80204228 <_WriteBlocking+0xc4>
80204228:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:399
      WrOff = 0u;
8020422a:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:400
    }
8020422c:	e7ff      	b.n	8020422e <_WriteBlocking+0xca>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:401
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
8020422e:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:402
    pRing->WrOff = WrOff;
80204232:	9803      	ldr	r0, [sp, #12]
80204234:	9909      	ldr	r1, [sp, #36]	@ 0x24
80204236:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:403
  } while (NumBytes);
80204238:	e7ff      	b.n	8020423a <_WriteBlocking+0xd6>
8020423a:	9807      	ldr	r0, [sp, #28]
8020423c:	b108      	cbz	r0, 80204242 <_WriteBlocking+0xde>
8020423e:	f02f c065 	le	8020417a <_WriteBlocking+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:404
  return NumBytesWritten;
80204242:	9805      	ldr	r0, [sp, #20]
80204244:	b00a      	add	sp, #40	@ 0x28
80204246:	bd80      	pop	{r7, pc}

80204248 <_WriteNoCheck>:
_WriteNoCheck():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:425
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
80204248:	b580      	push	{r7, lr}
8020424a:	b088      	sub	sp, #32
8020424c:	9007      	str	r0, [sp, #28]
8020424e:	9106      	str	r1, [sp, #24]
80204250:	9205      	str	r2, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:431
  WrOff = pRing->WrOff;
80204252:	9807      	ldr	r0, [sp, #28]
80204254:	68c0      	ldr	r0, [r0, #12]
80204256:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:432
  Rem = pRing->SizeOfBuffer - WrOff;
80204258:	9807      	ldr	r0, [sp, #28]
8020425a:	6880      	ldr	r0, [r0, #8]
8020425c:	9903      	ldr	r1, [sp, #12]
8020425e:	1a40      	subs	r0, r0, r1
80204260:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:433
  if (Rem > NumBytes) {
80204262:	9802      	ldr	r0, [sp, #8]
80204264:	9905      	ldr	r1, [sp, #20]
80204266:	4288      	cmp	r0, r1
80204268:	d912      	bls.n	80204290 <_WriteNoCheck+0x48>
8020426a:	e7ff      	b.n	8020426c <_WriteNoCheck+0x24>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:437
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
8020426c:	9807      	ldr	r0, [sp, #28]
8020426e:	6840      	ldr	r0, [r0, #4]
80204270:	9903      	ldr	r1, [sp, #12]
80204272:	4408      	add	r0, r1
80204274:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:446
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
80204276:	9801      	ldr	r0, [sp, #4]
80204278:	9906      	ldr	r1, [sp, #24]
8020427a:	9a05      	ldr	r2, [sp, #20]
8020427c:	f7fc fbc2 	bl	80200a04 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:447
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
80204280:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:448
    pRing->WrOff = WrOff + NumBytes;
80204284:	9803      	ldr	r0, [sp, #12]
80204286:	9905      	ldr	r1, [sp, #20]
80204288:	4408      	add	r0, r1
8020428a:	9907      	ldr	r1, [sp, #28]
8020428c:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:450
  } else {
8020428e:	e01f      	b.n	802042d0 <_WriteNoCheck+0x88>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:468
    NumBytesAtOnce = Rem;
80204290:	9802      	ldr	r0, [sp, #8]
80204292:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:469
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
80204294:	9807      	ldr	r0, [sp, #28]
80204296:	6840      	ldr	r0, [r0, #4]
80204298:	9903      	ldr	r1, [sp, #12]
8020429a:	4408      	add	r0, r1
8020429c:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:470
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
8020429e:	9801      	ldr	r0, [sp, #4]
802042a0:	9906      	ldr	r1, [sp, #24]
802042a2:	9a04      	ldr	r2, [sp, #16]
802042a4:	f7fc fbae 	bl	80200a04 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:471
    NumBytesAtOnce = NumBytes - Rem;
802042a8:	9805      	ldr	r0, [sp, #20]
802042aa:	9902      	ldr	r1, [sp, #8]
802042ac:	1a40      	subs	r0, r0, r1
802042ae:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:472
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
802042b0:	9807      	ldr	r0, [sp, #28]
802042b2:	6840      	ldr	r0, [r0, #4]
802042b4:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:473
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
802042b6:	9801      	ldr	r0, [sp, #4]
802042b8:	9906      	ldr	r1, [sp, #24]
802042ba:	9a02      	ldr	r2, [sp, #8]
802042bc:	4411      	add	r1, r2
802042be:	9a04      	ldr	r2, [sp, #16]
802042c0:	f7fc fba0 	bl	80200a04 <__rt_memcpy>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:474
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
802042c4:	f3bf 8f5f 	dmb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:475
    pRing->WrOff = NumBytesAtOnce;
802042c8:	9804      	ldr	r0, [sp, #16]
802042ca:	9907      	ldr	r1, [sp, #28]
802042cc:	60c8      	str	r0, [r1, #12]
802042ce:	e7ff      	b.n	802042d0 <_WriteNoCheck+0x88>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:478
}
802042d0:	b008      	add	sp, #32
802042d2:	bd80      	pop	{r7, pc}

802042d4 <JIT::Generators::Triad::generate(unsigned int)>:
JIT::Generators::Triad::generate(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:7
#include "instructions/Base.hpp"
#include "instructions/DataProcessing.hpp"
#include "instructions/Vector.hpp"
#include <cstdint>

void (*JIT::Generators::Triad::generate(uint32_t count)) (float const * a, float const * b, float * c, float const scalar) {
802042d4:	b580      	push	{r7, lr}
802042d6:	b08c      	sub	sp, #48	@ 0x30
802042d8:	900b      	str	r0, [sp, #44]	@ 0x2c
802042da:	910a      	str	r1, [sp, #40]	@ 0x28
802042dc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:9
    // push r4
    backend.addInstruction(Instructions::DataProcessing::push(Instructions::R4));
802042de:	9008      	str	r0, [sp, #32]
802042e0:	2004      	movs	r0, #4
802042e2:	9007      	str	r0, [sp, #28]
802042e4:	f000 f8f4 	bl	802044d0 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)>
802042e8:	4601      	mov	r1, r0
802042ea:	9808      	ldr	r0, [sp, #32]
802042ec:	f000 fa44 	bl	80204778 <JIT::Backend::addInstruction(unsigned short)>
802042f0:	200e      	movs	r0, #14
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:11
    // push {lr}
    backend.addInstruction(Instructions::DataProcessing::push(Instructions::Register::LR));
802042f2:	f000 f8ed 	bl	802044d0 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)>
802042f6:	4601      	mov	r1, r0
802042f8:	9808      	ldr	r0, [sp, #32]
802042fa:	f000 fa3d 	bl	80204778 <JIT::Backend::addInstruction(unsigned short)>
802042fe:	2001      	movs	r0, #1
80204300:	9004      	str	r0, [sp, #16]
80204302:	2100      	movs	r1, #0
80204304:	9106      	str	r1, [sp, #24]
80204306:	2203      	movs	r2, #3
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:13
    // vmov.f32 r3, s0
    backend.addInstruction(Instructions::Vector::vmovGPxScalar(true, Instructions::S0, Instructions::R3));
80204308:	9203      	str	r2, [sp, #12]
8020430a:	f000 f955 	bl	802045b8 <JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)>
8020430e:	4601      	mov	r1, r0
80204310:	9808      	ldr	r0, [sp, #32]
80204312:	f000 fa19 	bl	80204748 <JIT::Backend::addInstruction(unsigned int)>
80204316:	9807      	ldr	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:16

    // set count
    backend.addInstruction(Instructions::DataProcessing::mov(Instructions::R4, count));
80204318:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
8020431c:	f000 f89a 	bl	80204454 <JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)>
80204320:	4601      	mov	r1, r0
80204322:	9808      	ldr	r0, [sp, #32]
80204324:	f000 fa28 	bl	80204778 <JIT::Backend::addInstruction(unsigned short)>
80204328:	9807      	ldr	r0, [sp, #28]
8020432a:	2102      	movs	r1, #2
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:19

    // dlstp
    Instructions::Instruction16 * dlstpStart = backend.addBranchInstruction(Instructions::Base::dlstp(Instructions::Register::R4, Instructions::Size32)); // todo
8020432c:	9105      	str	r1, [sp, #20]
8020432e:	f000 f929 	bl	80204584 <JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)>
80204332:	4601      	mov	r1, r0
80204334:	9808      	ldr	r0, [sp, #32]
80204336:	f000 fa3d 	bl	802047b4 <JIT::Backend::addBranchInstruction(unsigned int)>
8020433a:	9b06      	ldr	r3, [sp, #24]
8020433c:	9a07      	ldr	r2, [sp, #28]
8020433e:	4601      	mov	r1, r0
80204340:	9804      	ldr	r0, [sp, #16]
80204342:	9109      	str	r1, [sp, #36]	@ 0x24
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:21
    // vldrw.f32 q0, [r0], #16
    backend.addInstruction(Instructions::Vector::vldrw(Instructions::Q0, Instructions::R0, 4, 0, 1, 0));
80204344:	4669      	mov	r1, sp
80204346:	604b      	str	r3, [r1, #4]
80204348:	6008      	str	r0, [r1, #0]
8020434a:	4618      	mov	r0, r3
8020434c:	4619      	mov	r1, r3
8020434e:	f000 f981 	bl	80204654 <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>
80204352:	4601      	mov	r1, r0
80204354:	9808      	ldr	r0, [sp, #32]
80204356:	f000 f9f7 	bl	80204748 <JIT::Backend::addInstruction(unsigned int)>
8020435a:	9904      	ldr	r1, [sp, #16]
8020435c:	9b06      	ldr	r3, [sp, #24]
8020435e:	9a07      	ldr	r2, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:23
    // vldrw.f32 q0, [r1], #16
    backend.addInstruction(Instructions::Vector::vldrw(Instructions::Q0, Instructions::R1, 4, 0, 1, 0));
80204360:	4668      	mov	r0, sp
80204362:	6043      	str	r3, [r0, #4]
80204364:	6001      	str	r1, [r0, #0]
80204366:	4618      	mov	r0, r3
80204368:	f000 f974 	bl	80204654 <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>
8020436c:	4601      	mov	r1, r0
8020436e:	9808      	ldr	r0, [sp, #32]
80204370:	f000 f9ea 	bl	80204748 <JIT::Backend::addInstruction(unsigned int)>
80204374:	9a03      	ldr	r2, [sp, #12]
80204376:	9805      	ldr	r0, [sp, #20]
80204378:	9b06      	ldr	r3, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:25
    // vfma.f32 q2, q0, r3
    backend.addInstruction(Instructions::Vector::vfmaVectorByScalarPlusVector(Instructions::Q2, Instructions::Q0, Instructions::R3, 0));
8020437a:	4619      	mov	r1, r3
8020437c:	f000 f940 	bl	80204600 <JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)>
80204380:	4601      	mov	r1, r0
80204382:	9808      	ldr	r0, [sp, #32]
80204384:	f000 f9e0 	bl	80204748 <JIT::Backend::addInstruction(unsigned int)>
80204388:	9804      	ldr	r0, [sp, #16]
8020438a:	9905      	ldr	r1, [sp, #20]
8020438c:	9b06      	ldr	r3, [sp, #24]
8020438e:	9a07      	ldr	r2, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:27
    // vstrw.f32 q2, [r2], #16
    backend.addInstruction(Instructions::Vector::vstrw(Instructions::Q2, Instructions::R2, 4, 0, 1, 0));
80204390:	46ec      	mov	ip, sp
80204392:	f8cc 3004 	str.w	r3, [ip, #4]
80204396:	f8cc 0000 	str.w	r0, [ip]
8020439a:	4608      	mov	r0, r1
8020439c:	f000 f9a0 	bl	802046e0 <JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>
802043a0:	4601      	mov	r1, r0
802043a2:	9808      	ldr	r0, [sp, #32]
802043a4:	f000 f9d0 	bl	80204748 <JIT::Backend::addInstruction(unsigned int)>
802043a8:	9808      	ldr	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:30

    // letp lr, -> branch to dlstpStart
    backend.addInstruction(Instructions::Base::letp(backend.getBranchOffset(dlstpStart) + 2));
802043aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
802043ac:	f000 f9f4 	bl	80204798 <JIT::Backend::getBranchOffset(unsigned short*)>
802043b0:	3002      	adds	r0, #2
802043b2:	b200      	sxth	r0, r0
802043b4:	f000 f8c2 	bl	8020453c <JIT::Instructions::Base::letp(short)>
802043b8:	4601      	mov	r1, r0
802043ba:	9808      	ldr	r0, [sp, #32]
802043bc:	f000 f9c4 	bl	80204748 <JIT::Backend::addInstruction(unsigned int)>
802043c0:	9807      	ldr	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:33

    // pop r4
    backend.addInstruction(Instructions::DataProcessing::pop(Instructions::R4));
802043c2:	f000 f863 	bl	8020448c <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)>
802043c6:	4601      	mov	r1, r0
802043c8:	9808      	ldr	r0, [sp, #32]
802043ca:	f000 f9d5 	bl	80204778 <JIT::Backend::addInstruction(unsigned short)>
802043ce:	200f      	movs	r0, #15
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:35
    // pop {pc}
    backend.addInstruction(Instructions::DataProcessing::pop(Instructions::PC));
802043d0:	f000 f85c 	bl	8020448c <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)>
802043d4:	4601      	mov	r1, r0
802043d6:	9808      	ldr	r0, [sp, #32]
802043d8:	f000 f9ce 	bl	80204778 <JIT::Backend::addInstruction(unsigned short)>
802043dc:	9808      	ldr	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:37

    __asm("dsb");
802043de:	f3bf 8f4f 	dsb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:38
    __asm("isb");
802043e2:	f3bf 8f6f 	isb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:40

    return reinterpret_cast<Func>(backend.getThumbAddress());
802043e6:	f000 fa91 	bl	8020490c <JIT::Backend::getThumbAddress() const>
802043ea:	b00c      	add	sp, #48	@ 0x30
802043ec:	bd80      	pop	{r7, pc}
	...

802043f0 <JIT::Generators::Triad::Triad()>:
JIT::Generators::Triad::Triad():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.hpp:13
    namespace Generators {
        class Triad;
    }
}

class JIT::Generators::Triad {
802043f0:	b580      	push	{r7, lr}
802043f2:	b082      	sub	sp, #8
802043f4:	9001      	str	r0, [sp, #4]
802043f6:	9801      	ldr	r0, [sp, #4]
802043f8:	9000      	str	r0, [sp, #0]
802043fa:	f000 f9ed 	bl	802047d8 <JIT::Backend::Backend()>
802043fe:	9800      	ldr	r0, [sp, #0]
80204400:	b002      	add	sp, #8
80204402:	bd80      	pop	{r7, pc}

80204404 <JIT::Generators::Simple::generate()>:
JIT::Generators::Simple::generate():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:8
#include "instructions/DataProcessing.hpp"
#include <cstdint>



uint32_t ( *JIT::Generators::Simple::generate())() {
80204404:	b580      	push	{r7, lr}
80204406:	b082      	sub	sp, #8
80204408:	9001      	str	r0, [sp, #4]
8020440a:	9801      	ldr	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:12

    // backend.addInstruction(Instructions::DataProcessing::ldr(Instructions::R0, Instructions::R1));

    backend.addInstruction(Instructions::DataProcessing::mov(Instructions::Register::R0, 3));
8020440c:	9000      	str	r0, [sp, #0]
8020440e:	2000      	movs	r0, #0
80204410:	2103      	movs	r1, #3
80204412:	f000 f81f 	bl	80204454 <JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)>
80204416:	4601      	mov	r1, r0
80204418:	9800      	ldr	r0, [sp, #0]
8020441a:	f000 f9ad 	bl	80204778 <JIT::Backend::addInstruction(unsigned short)>
8020441e:	200e      	movs	r0, #14
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:14

    backend.addInstruction(Instructions::Base::bx(Instructions::Register::LR));
80204420:	f000 f878 	bl	80204514 <JIT::Instructions::Base::bx(JIT::Instructions::Register)>
80204424:	4601      	mov	r1, r0
80204426:	9800      	ldr	r0, [sp, #0]
80204428:	f000 f9a6 	bl	80204778 <JIT::Backend::addInstruction(unsigned short)>
8020442c:	9800      	ldr	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:17


    __asm("dsb");
8020442e:	f3bf 8f4f 	dsb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:18
    __asm("isb");
80204432:	f3bf 8f6f 	isb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:19
    return reinterpret_cast<Func>(backend.getThumbAddress());
80204436:	f000 fa69 	bl	8020490c <JIT::Backend::getThumbAddress() const>
8020443a:	b002      	add	sp, #8
8020443c:	bd80      	pop	{r7, pc}
	...

80204440 <JIT::Generators::Simple::Simple()>:
JIT::Generators::Simple::Simple():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.hpp:13
    namespace Generators {
        class Simple;
    }
}

class JIT::Generators::Simple {
80204440:	b580      	push	{r7, lr}
80204442:	b082      	sub	sp, #8
80204444:	9001      	str	r0, [sp, #4]
80204446:	9801      	ldr	r0, [sp, #4]
80204448:	9000      	str	r0, [sp, #0]
8020444a:	f000 f9c5 	bl	802047d8 <JIT::Backend::Backend()>
8020444e:	9800      	ldr	r0, [sp, #0]
80204450:	b002      	add	sp, #8
80204452:	bd80      	pop	{r7, pc}

80204454 <JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)>:
JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:28
    instr |= Rt; // da Register enum ist, kann man sich mask off sparen
    instr |= Rn << 3U;
    return instr;
}

JIT::Instructions::Instruction16 JIT::Instructions::DataProcessing::mov(Register Rd, uint8_t imm8) {
80204454:	b081      	sub	sp, #4
80204456:	f88d 0003 	strb.w	r0, [sp, #3]
8020445a:	f88d 1002 	strb.w	r1, [sp, #2]
8020445e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:29
    Instruction16 instr = 0b0010'0000'0000'0000;
80204462:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:30
    instr |= imm8;
80204466:	f89d 1002 	ldrb.w	r1, [sp, #2]
8020446a:	f8bd 0000 	ldrh.w	r0, [sp]
8020446e:	4308      	orrs	r0, r1
80204470:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:31
    instr |= Rd << 8U;
80204474:	f89d 1003 	ldrb.w	r1, [sp, #3]
80204478:	f8bd 0000 	ldrh.w	r0, [sp]
8020447c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
80204480:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:32
    return instr;
80204484:	f8bd 0000 	ldrh.w	r0, [sp]
80204488:	b001      	add	sp, #4
8020448a:	4770      	bx	lr

8020448c <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)>:
JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:46
        instr |= 1U << Rd;
    }
    return instr;
}

JIT::Instructions::Instruction16 JIT::Instructions::DataProcessing::pop(Register const Rd) {
8020448c:	b081      	sub	sp, #4
8020448e:	f88d 0003 	strb.w	r0, [sp, #3]
80204492:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:47
    Instruction16 instr = 0b1011'1100'0000'0000;
80204496:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:49

    if (Rd == Register::PC) {
8020449a:	f89d 0003 	ldrb.w	r0, [sp, #3]
8020449e:	280f      	cmp	r0, #15
802044a0:	d107      	bne.n	802044b2 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)+0x26>
802044a2:	e7ff      	b.n	802044a4 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)+0x18>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:50
        instr |= 1U << 8U; // PC -> Bit 8 auf 1
802044a4:	f8bd 0000 	ldrh.w	r0, [sp]
802044a8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
802044ac:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:51
    } else {
802044b0:	e00a      	b.n	802044c8 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)+0x3c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:53
        // Man hat für jedes Low Register ein Bit von Bit 0-7. Wenn ein Bit davon auf 1 gesetzt wird, wird das Register gepopt
        instr |= 1U << Rd;
802044b2:	f89d 1003 	ldrb.w	r1, [sp, #3]
802044b6:	2001      	movs	r0, #1
802044b8:	fa00 f101 	lsl.w	r1, r0, r1
802044bc:	f8bd 0000 	ldrh.w	r0, [sp]
802044c0:	4308      	orrs	r0, r1
802044c2:	f8ad 0000 	strh.w	r0, [sp]
802044c6:	e7ff      	b.n	802044c8 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)+0x3c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:56
    }

    return instr;
802044c8:	f8bd 0000 	ldrh.w	r0, [sp]
802044cc:	b001      	add	sp, #4
802044ce:	4770      	bx	lr

802044d0 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)>:
JIT::Instructions::DataProcessing::push(JIT::Instructions::Register):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:35
JIT::Instructions::Instruction16 JIT::Instructions::DataProcessing::push(Register const Rd) {
802044d0:	b081      	sub	sp, #4
802044d2:	f88d 0003 	strb.w	r0, [sp, #3]
802044d6:	f44f 4034 	mov.w	r0, #46080	@ 0xb400
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:36
    Instruction16 instr = 0b1011'0100'0000'0000;
802044da:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:38
    if (Rd == Register::LR) {
802044de:	f89d 0003 	ldrb.w	r0, [sp, #3]
802044e2:	280e      	cmp	r0, #14
802044e4:	d107      	bne.n	802044f6 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)+0x26>
802044e6:	e7ff      	b.n	802044e8 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)+0x18>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:39
        instr |= 1U << 8U; // LR -> Bit 8 auf 1
802044e8:	f8bd 0000 	ldrh.w	r0, [sp]
802044ec:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
802044f0:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:40
    } else {
802044f4:	e00a      	b.n	8020450c <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)+0x3c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:41
        instr |= 1U << Rd;
802044f6:	f89d 1003 	ldrb.w	r1, [sp, #3]
802044fa:	2001      	movs	r0, #1
802044fc:	fa00 f101 	lsl.w	r1, r0, r1
80204500:	f8bd 0000 	ldrh.w	r0, [sp]
80204504:	4308      	orrs	r0, r1
80204506:	f8ad 0000 	strh.w	r0, [sp]
8020450a:	e7ff      	b.n	8020450c <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)+0x3c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:43
    return instr;
8020450c:	f8bd 0000 	ldrh.w	r0, [sp]
80204510:	b001      	add	sp, #4
80204512:	4770      	bx	lr

80204514 <JIT::Instructions::Base::bx(JIT::Instructions::Register)>:
JIT::Instructions::Base::bx(JIT::Instructions::Register):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:7

JIT::Instructions::Instruction16 JIT::Instructions::Base::nop() {
    return 0b1011'1111'0000'0000;
}

JIT::Instructions::Instruction16 JIT::Instructions::Base::bx(Register Rm) {
80204514:	b081      	sub	sp, #4
80204516:	f88d 0003 	strb.w	r0, [sp, #3]
8020451a:	f44f 408e 	mov.w	r0, #18176	@ 0x4700
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:8
    Instruction16 instr = 0b0100011100000000;
8020451e:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:9
    instr |= Rm << 3U;
80204522:	f89d 1003 	ldrb.w	r1, [sp, #3]
80204526:	f8bd 0000 	ldrh.w	r0, [sp]
8020452a:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
8020452e:	f8ad 0000 	strh.w	r0, [sp]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:10
    return instr;
80204532:	f8bd 0000 	ldrh.w	r0, [sp]
80204536:	b001      	add	sp, #4
80204538:	4770      	bx	lr
	...

8020453c <JIT::Instructions::Base::letp(short)>:
JIT::Instructions::Base::letp(short):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:23
    return instr;
}

// jumpAddr = PC - imm32
// imm32 = ZeroExtend(immh:imml:'0', 32)
JIT::Instructions::Instruction32  JIT::Instructions::Base::letp(int16_t imm11) {
8020453c:	b082      	sub	sp, #8
8020453e:	f8ad 0006 	strh.w	r0, [sp, #6]
80204542:	f24c 0001 	movw	r0, #49153	@ 0xc001
80204546:	f2cf 001f 	movt	r0, #61471	@ 0xf01f
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:24
    Instruction32 instr = 0xF01F'C001;
8020454a:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:26

    imm11 = -imm11; // wird von PC abgezogen, d.h. wenn imm11 negativ ist, dann muss es um zurückzuspringen positiv gesetzt werden
8020454c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
80204550:	4240      	negs	r0, r0
80204552:	f8ad 0006 	strh.w	r0, [sp, #6]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:27
    imm11 >>= 1U; // right shift, weil im Decode ein "Left Shift" gemacht wird
80204556:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
8020455a:	0840      	lsrs	r0, r0, #1
8020455c:	f8ad 0006 	strh.w	r0, [sp, #6]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:28
    instr |= (0x01 & imm11) << 11U; // set imml
80204560:	f8bd 0006 	ldrh.w	r0, [sp, #6]
80204564:	f000 0101 	and.w	r1, r0, #1
80204568:	9800      	ldr	r0, [sp, #0]
8020456a:	ea40 20c1 	orr.w	r0, r0, r1, lsl #11
8020456e:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:29
    instr |= (0xfe & imm11); // set immh
80204570:	f8bd 0006 	ldrh.w	r0, [sp, #6]
80204574:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
80204578:	9800      	ldr	r0, [sp, #0]
8020457a:	4308      	orrs	r0, r1
8020457c:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:30
    return instr;
8020457e:	9800      	ldr	r0, [sp, #0]
80204580:	b002      	add	sp, #8
80204582:	4770      	bx	lr

80204584 <JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)>:
JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:13
JIT::Instructions::Instruction32 JIT::Instructions::Base::dlstp(Register Rn, Size size) {
80204584:	b082      	sub	sp, #8
80204586:	f88d 0007 	strb.w	r0, [sp, #7]
8020458a:	f88d 1006 	strb.w	r1, [sp, #6]
8020458e:	f24e 0001 	movw	r0, #57345	@ 0xe001
80204592:	f2cf 0000 	movt	r0, #61440	@ 0xf000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:14
    Instruction32 instr = 0xF000'E001;
80204596:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:15
    instr |= Rn << 16U;
80204598:	f89d 1007 	ldrb.w	r1, [sp, #7]
8020459c:	9800      	ldr	r0, [sp, #0]
8020459e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
802045a2:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:16
    instr |= size << 20U;
802045a4:	f89d 1006 	ldrb.w	r1, [sp, #6]
802045a8:	9800      	ldr	r0, [sp, #0]
802045aa:	ea40 5001 	orr.w	r0, r0, r1, lsl #20
802045ae:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:18
    return instr;
802045b0:	9800      	ldr	r0, [sp, #0]
802045b2:	b002      	add	sp, #8
802045b4:	4770      	bx	lr
	...

802045b8 <JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)>:
JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:5
#include "Vector.hpp"
#include "instructions/Base.hpp"
#include <cstdint>

JIT::Instructions::Instruction32 JIT::Instructions::Vector::vmovGPxScalar(bool toGP, FloatRegister Vn, Register Rt) {
802045b8:	b082      	sub	sp, #8
802045ba:	f88d 0007 	strb.w	r0, [sp, #7]
802045be:	f88d 1006 	strb.w	r1, [sp, #6]
802045c2:	f88d 2005 	strb.w	r2, [sp, #5]
802045c6:	f640 2010 	movw	r0, #2576	@ 0xa10
802045ca:	f6ce 6000 	movt	r0, #60928	@ 0xee00
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:6
    Instruction32 instr = 0xEE000A10;
802045ce:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:8

    instr |= static_cast<uint8_t>(toGP) << 20U;  // set op
802045d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
802045d4:	f000 0101 	and.w	r1, r0, #1
802045d8:	9800      	ldr	r0, [sp, #0]
802045da:	ea40 5001 	orr.w	r0, r0, r1, lsl #20
802045de:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:9
    instr |= Vn << 16U; // Set Scalar Register
802045e0:	f89d 1006 	ldrb.w	r1, [sp, #6]
802045e4:	9800      	ldr	r0, [sp, #0]
802045e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
802045ea:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:10
    instr |= Rt << 12U; // Set GP Register
802045ec:	f89d 1005 	ldrb.w	r1, [sp, #5]
802045f0:	9800      	ldr	r0, [sp, #0]
802045f2:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
802045f6:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:12
    
    return instr;
802045f8:	9800      	ldr	r0, [sp, #0]
802045fa:	b002      	add	sp, #8
802045fc:	4770      	bx	lr
	...

80204600 <JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)>:
JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:35
    instr &= ~(1 << 20U); // 20th Bit is 0 instead of 1 (compared to vldrw) -> clear bit
    return instr;
}


JIT::Instructions::Instruction32 JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(VectorRegister Qda, VectorRegister Qn, Register Rm, bool bf16) {
80204600:	b082      	sub	sp, #8
80204602:	f88d 0007 	strb.w	r0, [sp, #7]
80204606:	f88d 1006 	strb.w	r1, [sp, #6]
8020460a:	f88d 2005 	strb.w	r2, [sp, #5]
8020460e:	f88d 3004 	strb.w	r3, [sp, #4]
80204612:	f640 6040 	movw	r0, #3648	@ 0xe40
80204616:	f6ce 6031 	movt	r0, #60977	@ 0xee31
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:36
    Instruction32 instr = 0xEE310E40;
8020461a:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:38

    instr |= bf16 << 28U; // use bf16 else use float32
8020461c:	f89d 0004 	ldrb.w	r0, [sp, #4]
80204620:	f000 0101 	and.w	r1, r0, #1
80204624:	9800      	ldr	r0, [sp, #0]
80204626:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
8020462a:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:39
    instr |= Qda << 13U;
8020462c:	f89d 1007 	ldrb.w	r1, [sp, #7]
80204630:	9800      	ldr	r0, [sp, #0]
80204632:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
80204636:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:40
    instr |= Qn << 17U;
80204638:	f89d 1006 	ldrb.w	r1, [sp, #6]
8020463c:	9800      	ldr	r0, [sp, #0]
8020463e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
80204642:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:41
    instr |= Rm;
80204644:	f89d 1005 	ldrb.w	r1, [sp, #5]
80204648:	9800      	ldr	r0, [sp, #0]
8020464a:	4308      	orrs	r0, r1
8020464c:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:43

    return instr;
8020464e:	9800      	ldr	r0, [sp, #0]
80204650:	b002      	add	sp, #8
80204652:	4770      	bx	lr

80204654 <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>:
JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:15
JIT::Instructions::Instruction32 JIT::Instructions::Vector::vldrw(VectorRegister Qd, Register Rn, uint8_t imm, bool preIndexed, bool writeBack, bool subtractImm) {
80204654:	b510      	push	{r4, lr}
80204656:	b083      	sub	sp, #12
80204658:	468c      	mov	ip, r1
8020465a:	4686      	mov	lr, r0
8020465c:	9806      	ldr	r0, [sp, #24]
8020465e:	9905      	ldr	r1, [sp, #20]
80204660:	f88d e00b 	strb.w	lr, [sp, #11]
80204664:	f88d c00a 	strb.w	ip, [sp, #10]
80204668:	f88d 2009 	strb.w	r2, [sp, #9]
8020466c:	f88d 3008 	strb.w	r3, [sp, #8]
80204670:	f88d 1007 	strb.w	r1, [sp, #7]
80204674:	f88d 0006 	strb.w	r0, [sp, #6]
80204678:	f641 7000 	movw	r0, #7936	@ 0x1f00
8020467c:	f6ce 4010 	movt	r0, #60432	@ 0xec10
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:16
    Instruction32 instr = 0xEC101F00;
80204680:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:18
    instr |= preIndexed << 24U; // Pre Indexed Variant (False -> Post-Indexed)
80204682:	f89d 0008 	ldrb.w	r0, [sp, #8]
80204686:	f000 0101 	and.w	r1, r0, #1
8020468a:	9800      	ldr	r0, [sp, #0]
8020468c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
80204690:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:19
    instr |= writeBack << 21U;
80204692:	f89d 0007 	ldrb.w	r0, [sp, #7]
80204696:	f000 0101 	and.w	r1, r0, #1
8020469a:	9800      	ldr	r0, [sp, #0]
8020469c:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
802046a0:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:20
    instr |= !subtractImm << 23U;
802046a2:	f89d 1006 	ldrb.w	r1, [sp, #6]
802046a6:	2001      	movs	r0, #1
802046a8:	ea20 0101 	bic.w	r1, r0, r1
802046ac:	9800      	ldr	r0, [sp, #0]
802046ae:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
802046b2:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:21
    instr |= 0x7f & imm; // mask off highest bit
802046b4:	f89d 0009 	ldrb.w	r0, [sp, #9]
802046b8:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
802046bc:	9800      	ldr	r0, [sp, #0]
802046be:	4308      	orrs	r0, r1
802046c0:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:22
    instr |= Qd << 13U;
802046c2:	f89d 100b 	ldrb.w	r1, [sp, #11]
802046c6:	9800      	ldr	r0, [sp, #0]
802046c8:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
802046cc:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:23
    instr |= Rn << 16U;
802046ce:	f89d 100a 	ldrb.w	r1, [sp, #10]
802046d2:	9800      	ldr	r0, [sp, #0]
802046d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
802046d8:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:25
    return instr;
802046da:	9800      	ldr	r0, [sp, #0]
802046dc:	b003      	add	sp, #12
802046de:	bd10      	pop	{r4, pc}

802046e0 <JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>:
JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:28
JIT::Instructions::Instruction32 JIT::Instructions::Vector::vstrw(VectorRegister Qd, Register Rn, uint8_t imm, bool preIndexed, bool writeBack, bool subtractImm) {
802046e0:	b510      	push	{r4, lr}
802046e2:	b086      	sub	sp, #24
802046e4:	468c      	mov	ip, r1
802046e6:	4686      	mov	lr, r0
802046e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
802046ea:	9908      	ldr	r1, [sp, #32]
802046ec:	f88d e017 	strb.w	lr, [sp, #23]
802046f0:	f88d c016 	strb.w	ip, [sp, #22]
802046f4:	f88d 2015 	strb.w	r2, [sp, #21]
802046f8:	f88d 3014 	strb.w	r3, [sp, #20]
802046fc:	f88d 1013 	strb.w	r1, [sp, #19]
80204700:	f88d 0012 	strb.w	r0, [sp, #18]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:29
    Instruction32 instr = vldrw(Qd, Rn, imm, preIndexed, writeBack, subtractImm);
80204704:	f89d 0017 	ldrb.w	r0, [sp, #23]
80204708:	f89d 1016 	ldrb.w	r1, [sp, #22]
8020470c:	f89d 2015 	ldrb.w	r2, [sp, #21]
80204710:	f89d 3014 	ldrb.w	r3, [sp, #20]
80204714:	f89d c013 	ldrb.w	ip, [sp, #19]
80204718:	f89d e012 	ldrb.w	lr, [sp, #18]
8020471c:	f00e 0401 	and.w	r4, lr, #1
80204720:	46ee      	mov	lr, sp
80204722:	f8ce 4004 	str.w	r4, [lr, #4]
80204726:	f00c 0c01 	and.w	ip, ip, #1
8020472a:	f8ce c000 	str.w	ip, [lr]
8020472e:	f003 0301 	and.w	r3, r3, #1
80204732:	f7ff ff8f 	bl	80204654 <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>
80204736:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:30
    instr &= ~(1 << 20U); // 20th Bit is 0 instead of 1 (compared to vldrw) -> clear bit
80204738:	9803      	ldr	r0, [sp, #12]
8020473a:	f420 1080 	bic.w	r0, r0, #1048576	@ 0x100000
8020473e:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:31
    return instr;
80204740:	9803      	ldr	r0, [sp, #12]
80204742:	b006      	add	sp, #24
80204744:	bd10      	pop	{r4, pc}
	...

80204748 <JIT::Backend::addInstruction(unsigned int)>:
JIT::Backend::addInstruction(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:9

void JIT::Backend::addInstruction(Instructions::Instruction16 instruction) {
    instructions[instructionCount++] = instruction;
}

void JIT::Backend::addInstruction(Instructions::Instruction32 instruction) {
80204748:	b082      	sub	sp, #8
8020474a:	9001      	str	r0, [sp, #4]
8020474c:	9100      	str	r1, [sp, #0]
8020474e:	9901      	ldr	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:10
    instructions[instructionCount++] = static_cast<Instructions::Instruction16>(instruction >> 16U); // select 16 highest bits
80204750:	f8bd 0002 	ldrh.w	r0, [sp, #2]
80204754:	f9b1 2800 	ldrsh.w	r2, [r1, #2048]	@ 0x800
80204758:	1c53      	adds	r3, r2, #1
8020475a:	f8a1 3800 	strh.w	r3, [r1, #2048]	@ 0x800
8020475e:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:11
    instructions[instructionCount++] = static_cast<Instructions::Instruction16>(instruction); // select 16 lowest bits
80204762:	9800      	ldr	r0, [sp, #0]
80204764:	f9b1 2800 	ldrsh.w	r2, [r1, #2048]	@ 0x800
80204768:	1c53      	adds	r3, r2, #1
8020476a:	f8a1 3800 	strh.w	r3, [r1, #2048]	@ 0x800
8020476e:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:12
}
80204772:	b002      	add	sp, #8
80204774:	4770      	bx	lr
	...

80204778 <JIT::Backend::addInstruction(unsigned short)>:
JIT::Backend::addInstruction(unsigned short):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:5
void JIT::Backend::addInstruction(Instructions::Instruction16 instruction) {
80204778:	b082      	sub	sp, #8
8020477a:	9001      	str	r0, [sp, #4]
8020477c:	f8ad 1002 	strh.w	r1, [sp, #2]
80204780:	9901      	ldr	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:6
    instructions[instructionCount++] = instruction;
80204782:	f8bd 0002 	ldrh.w	r0, [sp, #2]
80204786:	f9b1 2800 	ldrsh.w	r2, [r1, #2048]	@ 0x800
8020478a:	1c53      	adds	r3, r2, #1
8020478c:	f8a1 3800 	strh.w	r3, [r1, #2048]	@ 0x800
80204790:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:7
}
80204794:	b002      	add	sp, #8
80204796:	4770      	bx	lr

80204798 <JIT::Backend::getBranchOffset(unsigned short*)>:
JIT::Backend::getBranchOffset(unsigned short*):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:24
JIT::Instructions::Instruction16 * JIT::Backend::addBranchInstruction(Instructions::Instruction16 branchInstruction) {
    addInstruction(branchInstruction);
    return &instructions[instructionCount - 1];
}

int16_t JIT::Backend::getBranchOffset(Instructions::Instruction16 * instrStart) {
80204798:	b082      	sub	sp, #8
8020479a:	9001      	str	r0, [sp, #4]
8020479c:	9100      	str	r1, [sp, #0]
8020479e:	9901      	ldr	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:25
    return (instrStart - &instructions[instructionCount]) * 2; // jede Instruktion sind 16 Bit = 2 Byte
802047a0:	9800      	ldr	r0, [sp, #0]
802047a2:	f8b1 2800 	ldrh.w	r2, [r1, #2048]	@ 0x800
802047a6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
802047aa:	1a40      	subs	r0, r0, r1
802047ac:	b200      	sxth	r0, r0
802047ae:	b002      	add	sp, #8
802047b0:	4770      	bx	lr
	...

802047b4 <JIT::Backend::addBranchInstruction(unsigned int)>:
JIT::Backend::addBranchInstruction(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:14
JIT::Instructions::Instruction16 * JIT::Backend::addBranchInstruction(Instructions::Instruction32 branchInstruction) {
802047b4:	b580      	push	{r7, lr}
802047b6:	b084      	sub	sp, #16
802047b8:	9003      	str	r0, [sp, #12]
802047ba:	9102      	str	r1, [sp, #8]
802047bc:	9803      	ldr	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:15
    addInstruction(branchInstruction);
802047be:	9001      	str	r0, [sp, #4]
802047c0:	9902      	ldr	r1, [sp, #8]
802047c2:	f7ff ffc1 	bl	80204748 <JIT::Backend::addInstruction(unsigned int)>
802047c6:	9801      	ldr	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:16
    return &instructions[instructionCount - 2]; // eingefügte Instruction war 32 Bit = 2 16 Bit Instruktions lang
802047c8:	f9b0 1800 	ldrsh.w	r1, [r0, #2048]	@ 0x800
802047cc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
802047d0:	3804      	subs	r0, #4
802047d2:	b004      	add	sp, #16
802047d4:	bd80      	pop	{r7, pc}
	...

802047d8 <JIT::Backend::Backend()>:
JIT::Backend::Backend():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.hpp:11

namespace JIT {
    class Backend;
}

class JIT::Backend {
802047d8:	b085      	sub	sp, #20
802047da:	9003      	str	r0, [sp, #12]
802047dc:	9903      	ldr	r1, [sp, #12]
802047de:	9100      	str	r1, [sp, #0]
802047e0:	9104      	str	r1, [sp, #16]
802047e2:	2200      	movs	r2, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.hpp:23
        void insertWlsLabel(Instructions::Instruction16 wlsPosition, int16_t imm12);
        uintptr_t getThumbAddress() const;
        Instructions::Instruction16 * getInstructions();

    private:
        Instructions::Instruction16 instructions[1024] = {0};
802047e4:	4608      	mov	r0, r1
802047e6:	f820 2b02 	strh.w	r2, [r0], #2
802047ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
802047ee:	9101      	str	r1, [sp, #4]
802047f0:	9002      	str	r0, [sp, #8]
802047f2:	e7ff      	b.n	802047f4 <JIT::Backend::Backend()+0x1c>
802047f4:	9902      	ldr	r1, [sp, #8]
802047f6:	9a01      	ldr	r2, [sp, #4]
802047f8:	2000      	movs	r0, #0
802047fa:	f821 0b02 	strh.w	r0, [r1], #2
802047fe:	4608      	mov	r0, r1
80204800:	4291      	cmp	r1, r2
80204802:	9002      	str	r0, [sp, #8]
80204804:	d1f6      	bne.n	802047f4 <JIT::Backend::Backend()+0x1c>
80204806:	e7ff      	b.n	80204808 <JIT::Backend::Backend()+0x30>
80204808:	9900      	ldr	r1, [sp, #0]
8020480a:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.hpp:24
        int16_t instructionCount = 0;
8020480c:	f8a1 0800 	strh.w	r0, [r1, #2048]	@ 0x800
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.hpp:11
class JIT::Backend {
80204810:	9804      	ldr	r0, [sp, #16]
80204812:	b005      	add	sp, #20
80204814:	4770      	bx	lr
	...

80204818 <LPRTC::getInstance()>:
LPRTC::getInstance():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:38
        LPRTC(const LPRTC&) = delete;
        LPRTC& operator=(const LPRTC&) = delete;

        static LPRTC& getInstance() {
            static LPRTC instance;
            return instance;
80204818:	f640 004c 	movw	r0, #2124	@ 0x84c
8020481c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204820:	4770      	bx	lr
	...

80204824 <LPRTC::enable()>:
LPRTC::enable():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:41
        }

        void inline enable() {
80204824:	b580      	push	{r7, lr}
80204826:	b082      	sub	sp, #8
80204828:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:42
            RTC_CLK_EN.set(LPRTC_CCR_Bits::LPRTC_CLK_EN);
8020482a:	f640 0040 	movw	r0, #2112	@ 0x840
8020482e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204832:	2101      	movs	r1, #1
80204834:	f000 f848 	bl	802048c8 <Register<unsigned int, unsigned int, 16u>::set(unsigned int)>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:43
            CCR.set(LPRTC_CCR_Bits::LPRTC_EN);
80204838:	f640 0044 	movw	r0, #2116	@ 0x844
8020483c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204840:	2104      	movs	r1, #4
80204842:	f000 f81f 	bl	80204884 <Register<unsigned int, unsigned int, 12u>::set(unsigned int)>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:44
        }
80204846:	b002      	add	sp, #8
80204848:	bd80      	pop	{r7, pc}
	...

8020484c <LPRTC::disable()>:
LPRTC::disable():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:46
        
        void inline disable() {
8020484c:	b580      	push	{r7, lr}
8020484e:	b082      	sub	sp, #8
80204850:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:47
            CCR.clear(LPRTC_CCR_Bits::LPRTC_EN);
80204852:	f640 0044 	movw	r0, #2116	@ 0x844
80204856:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020485a:	2104      	movs	r1, #4
8020485c:	f000 f81e 	bl	8020489c <Register<unsigned int, unsigned int, 12u>::clear(unsigned int)>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:48
            RTC_CLK_EN.clear(LPRTC_CCR_Bits::LPRTC_CLK_EN);
80204860:	f640 0040 	movw	r0, #2112	@ 0x840
80204864:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204868:	2101      	movs	r1, #1
8020486a:	f000 f839 	bl	802048e0 <Register<unsigned int, unsigned int, 16u>::clear(unsigned int)>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:49
        }
8020486e:	b002      	add	sp, #8
80204870:	bd80      	pop	{r7, pc}
	...

80204874 <Register<unsigned int, unsigned int, 0u>::Register(unsigned int)>:
Register<unsigned int, unsigned int, 0u>::Register(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:11
class Register {
    protected:
        volatile RegisterType* const reg;

    public:
        explicit Register(AddressType base) : reg(reinterpret_cast<volatile RegisterType*>(base + Offset)) { }
80204874:	b082      	sub	sp, #8
80204876:	9001      	str	r0, [sp, #4]
80204878:	9100      	str	r1, [sp, #0]
8020487a:	9801      	ldr	r0, [sp, #4]
8020487c:	9900      	ldr	r1, [sp, #0]
8020487e:	6001      	str	r1, [r0, #0]
80204880:	b002      	add	sp, #8
80204882:	4770      	bx	lr

80204884 <Register<unsigned int, unsigned int, 12u>::set(unsigned int)>:
Register<unsigned int, unsigned int, 12u>::set(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:16
        
        /* Gibt den Inhalt des Registers zurück */
        RegisterType read() const { return *reg; }
        void inline write(RegisterType value) { *reg = value; }
        void inline set(RegisterType mask) { *reg |= mask; }
80204884:	b082      	sub	sp, #8
80204886:	9001      	str	r0, [sp, #4]
80204888:	9100      	str	r1, [sp, #0]
8020488a:	9801      	ldr	r0, [sp, #4]
8020488c:	9a00      	ldr	r2, [sp, #0]
8020488e:	6801      	ldr	r1, [r0, #0]
80204890:	6808      	ldr	r0, [r1, #0]
80204892:	4310      	orrs	r0, r2
80204894:	6008      	str	r0, [r1, #0]
80204896:	b002      	add	sp, #8
80204898:	4770      	bx	lr
	...

8020489c <Register<unsigned int, unsigned int, 12u>::clear(unsigned int)>:
Register<unsigned int, unsigned int, 12u>::clear(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:17
        void inline clear(RegisterType mask) { *reg &= ~mask; }
8020489c:	b082      	sub	sp, #8
8020489e:	9001      	str	r0, [sp, #4]
802048a0:	9100      	str	r1, [sp, #0]
802048a2:	9801      	ldr	r0, [sp, #4]
802048a4:	9a00      	ldr	r2, [sp, #0]
802048a6:	6801      	ldr	r1, [r0, #0]
802048a8:	6808      	ldr	r0, [r1, #0]
802048aa:	4390      	bics	r0, r2
802048ac:	6008      	str	r0, [r1, #0]
802048ae:	b002      	add	sp, #8
802048b0:	4770      	bx	lr
	...

802048b4 <Register<unsigned int, unsigned int, 12u>::Register(unsigned int)>:
Register<unsigned int, unsigned int, 12u>::Register(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:11
        explicit Register(AddressType base) : reg(reinterpret_cast<volatile RegisterType*>(base + Offset)) { }
802048b4:	b082      	sub	sp, #8
802048b6:	9001      	str	r0, [sp, #4]
802048b8:	9100      	str	r1, [sp, #0]
802048ba:	9801      	ldr	r0, [sp, #4]
802048bc:	9900      	ldr	r1, [sp, #0]
802048be:	310c      	adds	r1, #12
802048c0:	6001      	str	r1, [r0, #0]
802048c2:	b002      	add	sp, #8
802048c4:	4770      	bx	lr
	...

802048c8 <Register<unsigned int, unsigned int, 16u>::set(unsigned int)>:
Register<unsigned int, unsigned int, 16u>::set(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:16
        void inline set(RegisterType mask) { *reg |= mask; }
802048c8:	b082      	sub	sp, #8
802048ca:	9001      	str	r0, [sp, #4]
802048cc:	9100      	str	r1, [sp, #0]
802048ce:	9801      	ldr	r0, [sp, #4]
802048d0:	9a00      	ldr	r2, [sp, #0]
802048d2:	6801      	ldr	r1, [r0, #0]
802048d4:	6808      	ldr	r0, [r1, #0]
802048d6:	4310      	orrs	r0, r2
802048d8:	6008      	str	r0, [r1, #0]
802048da:	b002      	add	sp, #8
802048dc:	4770      	bx	lr
	...

802048e0 <Register<unsigned int, unsigned int, 16u>::clear(unsigned int)>:
Register<unsigned int, unsigned int, 16u>::clear(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:17
        void inline clear(RegisterType mask) { *reg &= ~mask; }
802048e0:	b082      	sub	sp, #8
802048e2:	9001      	str	r0, [sp, #4]
802048e4:	9100      	str	r1, [sp, #0]
802048e6:	9801      	ldr	r0, [sp, #4]
802048e8:	9a00      	ldr	r2, [sp, #0]
802048ea:	6801      	ldr	r1, [r0, #0]
802048ec:	6808      	ldr	r0, [r1, #0]
802048ee:	4390      	bics	r0, r2
802048f0:	6008      	str	r0, [r1, #0]
802048f2:	b002      	add	sp, #8
802048f4:	4770      	bx	lr
	...

802048f8 <Register<unsigned int, unsigned int, 16u>::Register(unsigned int)>:
Register<unsigned int, unsigned int, 16u>::Register(unsigned int):
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:11
        explicit Register(AddressType base) : reg(reinterpret_cast<volatile RegisterType*>(base + Offset)) { }
802048f8:	b082      	sub	sp, #8
802048fa:	9001      	str	r0, [sp, #4]
802048fc:	9100      	str	r1, [sp, #0]
802048fe:	9801      	ldr	r0, [sp, #4]
80204900:	9900      	ldr	r1, [sp, #0]
80204902:	3110      	adds	r1, #16
80204904:	6001      	str	r1, [r0, #0]
80204906:	b002      	add	sp, #8
80204908:	4770      	bx	lr
	...

8020490c <JIT::Backend::getThumbAddress() const>:
JIT::Backend::getThumbAddress() const:
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:33

JIT::Instructions::Instruction16 * JIT::Backend::getInstructions() {
    return instructions;
}

uintptr_t JIT::Backend::getThumbAddress() const {
8020490c:	b081      	sub	sp, #4
8020490e:	9000      	str	r0, [sp, #0]
80204910:	9800      	ldr	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:35
    //return reinterpret_cast<uintptr_t>(instructions);
    return reinterpret_cast<uintptr_t>(instructions) | 0x1U;
80204912:	f040 0001 	orr.w	r0, r0, #1
80204916:	b001      	add	sp, #4
80204918:	4770      	bx	lr
	...

8020491c <__cxx_global_var_init>:
__cxx_global_var_init():
8020491c:	b580      	push	{r7, lr}
8020491e:	f640 0034 	movw	r0, #2100	@ 0x834
80204922:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204926:	7800      	ldrb	r0, [r0, #0]
80204928:	f3bf 8f5f 	dmb	sy
8020492c:	07c0      	lsls	r0, r0, #31
8020492e:	b9c8      	cbnz	r0, 80204964 <__cxx_global_var_init+0x48>
80204930:	e7ff      	b.n	80204932 <__cxx_global_var_init+0x16>
80204932:	f640 0034 	movw	r0, #2100	@ 0x834
80204936:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020493a:	f000 ff69 	bl	80205810 <__cxa_guard_acquire>
8020493e:	b188      	cbz	r0, 80204964 <__cxx_global_var_init+0x48>
80204940:	e7ff      	b.n	80204942 <__cxx_global_var_init+0x26>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:27
        static inline Register<uint32_t, uintptr_t, LPRTC_Register::LPRTC_RTC_CLK_EN_OFFSET> RTC_CLK_EN{LPRTC_Register::LPRTC_VBAT_BASE_ADDRESS};
80204942:	f640 0040 	movw	r0, #2112	@ 0x840
80204946:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020494a:	f249 0100 	movw	r1, #36864	@ 0x9000
8020494e:	f6c1 2160 	movt	r1, #6752	@ 0x1a60
80204952:	f7ff ffd1 	bl	802048f8 <Register<unsigned int, unsigned int, 16u>::Register(unsigned int)>
80204956:	f640 0034 	movw	r0, #2100	@ 0x834
8020495a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020495e:	f000 ff6d 	bl	8020583c <__cxa_guard_release>
80204962:	e7ff      	b.n	80204964 <__cxx_global_var_init+0x48>
80204964:	bd80      	pop	{r7, pc}
	...

80204968 <__cxx_global_var_init.1>:
__cxx_global_var_init.1():
80204968:	b580      	push	{r7, lr}
8020496a:	f640 003c 	movw	r0, #2108	@ 0x83c
8020496e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204972:	7800      	ldrb	r0, [r0, #0]
80204974:	f3bf 8f5f 	dmb	sy
80204978:	07c0      	lsls	r0, r0, #31
8020497a:	b9b8      	cbnz	r0, 802049ac <__cxx_global_var_init.1+0x44>
8020497c:	e7ff      	b.n	8020497e <__cxx_global_var_init.1+0x16>
8020497e:	f640 003c 	movw	r0, #2108	@ 0x83c
80204982:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204986:	f000 ff43 	bl	80205810 <__cxa_guard_acquire>
8020498a:	b178      	cbz	r0, 802049ac <__cxx_global_var_init.1+0x44>
8020498c:	e7ff      	b.n	8020498e <__cxx_global_var_init.1+0x26>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:28
        static inline Register<uint32_t, uintptr_t, LPRTC_Register::CCVR_OFFSET> CCVR{LPRTC_Register::LPRTC_BASE_ADDRESS};
8020498e:	f640 0048 	movw	r0, #2120	@ 0x848
80204992:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204996:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
8020499a:	f7ff ff6b 	bl	80204874 <Register<unsigned int, unsigned int, 0u>::Register(unsigned int)>
8020499e:	f640 003c 	movw	r0, #2108	@ 0x83c
802049a2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802049a6:	f000 ff49 	bl	8020583c <__cxa_guard_release>
802049aa:	e7ff      	b.n	802049ac <__cxx_global_var_init.1+0x44>
802049ac:	bd80      	pop	{r7, pc}
	...

802049b0 <__cxx_global_var_init.2>:
__cxx_global_var_init.2():
802049b0:	b580      	push	{r7, lr}
802049b2:	f640 0038 	movw	r0, #2104	@ 0x838
802049b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802049ba:	7800      	ldrb	r0, [r0, #0]
802049bc:	f3bf 8f5f 	dmb	sy
802049c0:	07c0      	lsls	r0, r0, #31
802049c2:	b9b8      	cbnz	r0, 802049f4 <__cxx_global_var_init.2+0x44>
802049c4:	e7ff      	b.n	802049c6 <__cxx_global_var_init.2+0x16>
802049c6:	f640 0038 	movw	r0, #2104	@ 0x838
802049ca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802049ce:	f000 ff1f 	bl	80205810 <__cxa_guard_acquire>
802049d2:	b178      	cbz	r0, 802049f4 <__cxx_global_var_init.2+0x44>
802049d4:	e7ff      	b.n	802049d6 <__cxx_global_var_init.2+0x26>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:29
        static inline Register<uint32_t, uintptr_t, LPRTC_Register::CCR_OFFSET> CCR{LPRTC_Register::LPRTC_BASE_ADDRESS};
802049d6:	f640 0044 	movw	r0, #2116	@ 0x844
802049da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802049de:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
802049e2:	f7ff ff67 	bl	802048b4 <Register<unsigned int, unsigned int, 12u>::Register(unsigned int)>
802049e6:	f640 0038 	movw	r0, #2104	@ 0x838
802049ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
802049ee:	f000 ff25 	bl	8020583c <__cxa_guard_release>
802049f2:	e7ff      	b.n	802049f4 <__cxx_global_var_init.2+0x44>
802049f4:	bd80      	pop	{r7, pc}
	...

802049f8 <_platform_pre_stackheap_init>:
_platform_pre_stackheap_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:136
{
802049f8:	b580      	push	{r7, lr}
802049fa:	b084      	sub	sp, #16
802049fc:	f24e 0000 	movw	r0, #57344	@ 0xe000
80204a00:	f2ce 0001 	movt	r0, #57345	@ 0xe001
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:138
    if (!(MEMSYSCTL->MSCR & MEMSYSCTL_MSCR_DCCLEAN_Msk))
80204a04:	6800      	ldr	r0, [r0, #0]
80204a06:	03c0      	lsls	r0, r0, #15
80204a08:	2800      	cmp	r0, #0
80204a0a:	d433      	bmi.n	80204a74 <_platform_pre_stackheap_init+0x7c>
80204a0c:	e7ff      	b.n	80204a0e <_platform_pre_stackheap_init+0x16>
80204a0e:	f64e 5184 	movw	r1, #60804	@ 0xed84
80204a12:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80204a16:	2000      	movs	r0, #0
SCB_CleanDCache():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:289
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
80204a18:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:290
    __DSB();
80204a1a:	f3bf 8f4f 	dsb	sy
80204a1e:	f64e 5080 	movw	r0, #60800	@ 0xed80
80204a22:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:292

    ccsidr = SCB->CCSIDR;
80204a26:	6800      	ldr	r0, [r0, #0]
80204a28:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:295

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
80204a2a:	9803      	ldr	r0, [sp, #12]
80204a2c:	f3c0 304e 	ubfx	r0, r0, #13, #15
80204a30:	9002      	str	r0, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:296
    do {
80204a32:	e7ff      	b.n	80204a34 <_platform_pre_stackheap_init+0x3c>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:297
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
80204a34:	9803      	ldr	r0, [sp, #12]
80204a36:	f3c0 00c9 	ubfx	r0, r0, #3, #10
80204a3a:	9001      	str	r0, [sp, #4]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:298
      do {
80204a3c:	e7ff      	b.n	80204a3e <_platform_pre_stackheap_init+0x46>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:299
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
80204a3e:	9902      	ldr	r1, [sp, #8]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:300
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
80204a40:	9801      	ldr	r0, [sp, #4]
80204a42:	0780      	lsls	r0, r0, #30
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:299
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
80204a44:	f361 104d 	bfi	r0, r1, #5, #9
80204a48:	f64e 716c 	movw	r1, #61292	@ 0xef6c
80204a4c:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80204a50:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:304
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
80204a52:	9801      	ldr	r0, [sp, #4]
80204a54:	1e41      	subs	r1, r0, #1
80204a56:	9101      	str	r1, [sp, #4]
80204a58:	b108      	cbz	r0, 80204a5e <_platform_pre_stackheap_init+0x66>
80204a5a:	f02f c011 	le	80204a3e <_platform_pre_stackheap_init+0x46>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:305
    } while(sets-- != 0U);
80204a5e:	9802      	ldr	r0, [sp, #8]
80204a60:	1e41      	subs	r1, r0, #1
80204a62:	9102      	str	r1, [sp, #8]
80204a64:	b108      	cbz	r0, 80204a6a <_platform_pre_stackheap_init+0x72>
80204a66:	f02f c81b 	le	80204a34 <_platform_pre_stackheap_init+0x3c>
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:307

    __DSB();
80204a6a:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:308
    __ISB();
80204a6e:	f3bf 8f6f 	isb	sy
_platform_pre_stackheap_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:141
    }
80204a72:	e7ff      	b.n	80204a74 <_platform_pre_stackheap_init+0x7c>
SCB_InvalidateICache():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:96
    __DSB();
80204a74:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:97
    __ISB();
80204a78:	f3bf 8f6f 	isb	sy
80204a7c:	f64e 7150 	movw	r1, #61264	@ 0xef50
80204a80:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80204a84:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:98
    SCB->ICIALLU = 0UL;
80204a86:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:99
    __DSB();
80204a88:	f3bf 8f4f 	dsb	sy
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:100
    __ISB();
80204a8c:	f3bf 8f6f 	isb	sy
_platform_pre_stackheap_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:145
    sys_busy_loop_init();
80204a90:	f000 fd66 	bl	80205560 <sys_busy_loop_init>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:146
}
80204a94:	b004      	add	sp, #16
80204a96:	bd80      	pop	{r7, pc}

80204a98 <_sys_close>:
_sys_close():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:164
*
*  Return value:
*    0     - device/file closed
*
*/
int _sys_close(FILEHANDLE hFile) {
80204a98:	b081      	sub	sp, #4
80204a9a:	9000      	str	r0, [sp, #0]
80204a9c:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:166
  (void)hFile;
  return 0;  // Not implemented
80204a9e:	b001      	add	sp, #4
80204aa0:	4770      	bx	lr
	...

80204aa4 <_sys_flen>:
_sys_flen():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:256
*
*  Return value:
*    Length of the file
*
*/
long _sys_flen(FILEHANDLE hFile) {
80204aa4:	b081      	sub	sp, #4
80204aa6:	9000      	str	r0, [sp, #0]
80204aa8:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:258
  (void)hFile;
  return (0);  // Not implemented
80204aaa:	b001      	add	sp, #4
80204aac:	4770      	bx	lr
	...

80204ab0 <_sys_istty>:
_sys_istty():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:214
int _sys_istty(FILEHANDLE hFile) {
80204ab0:	b082      	sub	sp, #8
80204ab2:	9000      	str	r0, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:215
  if (hFile > 0x8000) {
80204ab4:	9800      	ldr	r0, [sp, #0]
80204ab6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
80204aba:	dd03      	ble.n	80204ac4 <_sys_istty+0x14>
80204abc:	e7ff      	b.n	80204abe <_sys_istty+0xe>
80204abe:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:216
    return (1);
80204ac0:	9001      	str	r0, [sp, #4]
80204ac2:	e002      	b.n	80204aca <_sys_istty+0x1a>
80204ac4:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:218
  return (0);  // Not implemented
80204ac6:	9001      	str	r0, [sp, #4]
80204ac8:	e7ff      	b.n	80204aca <_sys_istty+0x1a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:219
}
80204aca:	9801      	ldr	r0, [sp, #4]
80204acc:	b002      	add	sp, #8
80204ace:	4770      	bx	lr

80204ad0 <_sys_open>:
_sys_open():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:139
FILEHANDLE _sys_open(const char * sName, int OpenMode) {
80204ad0:	b580      	push	{r7, lr}
80204ad2:	b084      	sub	sp, #16
80204ad4:	9002      	str	r0, [sp, #8]
80204ad6:	9101      	str	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:142
  if (strcmp(sName, __stdout_name) == 0) {
80204ad8:	9802      	ldr	r0, [sp, #8]
80204ada:	f246 01b6 	movw	r1, #24758	@ 0x60b6
80204ade:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204ae2:	f7fb fffd 	bl	80200ae0 <strcmp>
80204ae6:	b920      	cbnz	r0, 80204af2 <_sys_open+0x22>
80204ae8:	e7ff      	b.n	80204aea <_sys_open+0x1a>
80204aea:	f248 0002 	movw	r0, #32770	@ 0x8002
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:143
    return (STDOUT);
80204aee:	9003      	str	r0, [sp, #12]
80204af0:	e00f      	b.n	80204b12 <_sys_open+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:144
  } else if (strcmp(sName, __stderr_name) == 0) {
80204af2:	9802      	ldr	r0, [sp, #8]
80204af4:	f246 01ba 	movw	r1, #24762	@ 0x60ba
80204af8:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204afc:	f7fb fff0 	bl	80200ae0 <strcmp>
80204b00:	b920      	cbnz	r0, 80204b0c <_sys_open+0x3c>
80204b02:	e7ff      	b.n	80204b04 <_sys_open+0x34>
80204b04:	f248 0003 	movw	r0, #32771	@ 0x8003
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:145
    return (STDERR);
80204b08:	9003      	str	r0, [sp, #12]
80204b0a:	e002      	b.n	80204b12 <_sys_open+0x42>
80204b0c:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:147
  return (0);  // Not implemented
80204b0e:	9003      	str	r0, [sp, #12]
80204b10:	e7ff      	b.n	80204b12 <_sys_open+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:148
}
80204b12:	9803      	ldr	r0, [sp, #12]
80204b14:	b004      	add	sp, #16
80204b16:	bd80      	pop	{r7, pc}

80204b18 <_sys_seek>:
_sys_seek():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:236
int _sys_seek(FILEHANDLE hFile, long Pos) {
80204b18:	b082      	sub	sp, #8
80204b1a:	9001      	str	r0, [sp, #4]
80204b1c:	9100      	str	r1, [sp, #0]
80204b1e:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:239
  return (0);  // Not implemented
80204b20:	b002      	add	sp, #8
80204b22:	4770      	bx	lr

80204b24 <_sys_write>:
_sys_write():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:187
int _sys_write(FILEHANDLE hFile, const unsigned char * pBuffer, unsigned NumBytes, int Mode) {
80204b24:	b580      	push	{r7, lr}
80204b26:	b088      	sub	sp, #32
80204b28:	9006      	str	r0, [sp, #24]
80204b2a:	9105      	str	r1, [sp, #20]
80204b2c:	9204      	str	r2, [sp, #16]
80204b2e:	9303      	str	r3, [sp, #12]
80204b30:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:188
  int r = 0;
80204b32:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:191
  if (hFile == STDOUT) {
80204b34:	9806      	ldr	r0, [sp, #24]
80204b36:	f248 0102 	movw	r1, #32770	@ 0x8002
80204b3a:	4288      	cmp	r0, r1
80204b3c:	d109      	bne.n	80204b52 <_sys_write+0x2e>
80204b3e:	e7ff      	b.n	80204b40 <_sys_write+0x1c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:192
    SEGGER_RTT_Write(0, (const char*)pBuffer, NumBytes);
80204b40:	9905      	ldr	r1, [sp, #20]
80204b42:	9a04      	ldr	r2, [sp, #16]
80204b44:	2000      	movs	r0, #0
80204b46:	9001      	str	r0, [sp, #4]
80204b48:	f7fe fc3a 	bl	802033c0 <SEGGER_RTT_Write>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:193
		return 0;
80204b4c:	9801      	ldr	r0, [sp, #4]
80204b4e:	9007      	str	r0, [sp, #28]
80204b50:	e002      	b.n	80204b58 <_sys_write+0x34>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:195
  return r;
80204b52:	9802      	ldr	r0, [sp, #8]
80204b54:	9007      	str	r0, [sp, #28]
80204b56:	e7ff      	b.n	80204b58 <_sys_write+0x34>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:196
}
80204b58:	9807      	ldr	r0, [sp, #28]
80204b5a:	b008      	add	sp, #32
80204b5c:	bd80      	pop	{r7, pc}
	...

80204b60 <_ttywrch>:
_ttywrch():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:118
void _ttywrch(int c) {
80204b60:	b580      	push	{r7, lr}
80204b62:	b082      	sub	sp, #8
80204b64:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:119
  fputc(c, stdout); // stdout
80204b66:	9801      	ldr	r0, [sp, #4]
80204b68:	f240 6184 	movw	r1, #1668	@ 0x684
80204b6c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204b70:	9100      	str	r1, [sp, #0]
80204b72:	f001 fa50 	bl	80206016 <fputc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:120
  fflush(stdout);
80204b76:	9800      	ldr	r0, [sp, #0]
80204b78:	f7fb ff15 	bl	802009a6 <fflush>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_KEIL.c:121
}
80204b7c:	b002      	add	sp, #8
80204b7e:	bd80      	pop	{r7, pc}

80204b80 <enable_force_apb_interface_clk>:
enable_force_apb_interface_clk():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:34
{
    CLKCTL_PER_SLV->EXPMST0_CTRL &= ~EXPMST0_CTRL_IPCLK_FORCE;
}

static inline void enable_force_apb_interface_clk(void)
{
80204b80:	f24f 0100 	movw	r1, #61440	@ 0xf000
80204b84:	f6c4 1102 	movt	r1, #18690	@ 0x4902
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:35
    CLKCTL_PER_SLV->EXPMST0_CTRL |= EXPMST0_CTRL_PCLK_FORCE;
80204b88:	6808      	ldr	r0, [r1, #0]
80204b8a:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
80204b8e:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:36
}
80204b90:	4770      	bx	lr
	...

80204b94 <enable_force_peripheral_functional_clk>:
enable_force_peripheral_functional_clk():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:24
{
80204b94:	f24f 0100 	movw	r1, #61440	@ 0xf000
80204b98:	f6c4 1102 	movt	r1, #18690	@ 0x4902
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:25
    CLKCTL_PER_SLV->EXPMST0_CTRL |= EXPMST0_CTRL_IPCLK_FORCE;
80204b9c:	6808      	ldr	r0, [r1, #0]
80204b9e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
80204ba2:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:26
}
80204ba4:	4770      	bx	lr
	...

80204ba8 <fault_dump_enable>:
fault_dump_enable():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:300
{
80204ba8:	b580      	push	{r7, lr}
80204baa:	b084      	sub	sp, #16
80204bac:	f88d 000b 	strb.w	r0, [sp, #11]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:301
    fault_dump_enabled = enable;
80204bb0:	f89d 000b 	ldrb.w	r0, [sp, #11]
80204bb4:	f000 0001 	and.w	r0, r0, #1
80204bb8:	f640 515d 	movw	r1, #3421	@ 0xd5d
80204bbc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204bc0:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:302
    fault_handler_active = false;
80204bc2:	f640 515e 	movw	r1, #3422	@ 0xd5e
80204bc6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204bca:	2000      	movs	r0, #0
80204bcc:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:305
    print_faults();
80204bce:	f000 f8cf 	bl	80204d70 <print_faults>
__get_IPSR():
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/./m-profile/cmsis_armclang_m.h:778
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
80204bd2:	f3ef 8005 	mrs	r0, IPSR
80204bd6:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/./m-profile/cmsis_armclang_m.h:779
  return (result);
80204bd8:	9803      	ldr	r0, [sp, #12]
fault_dump_enable():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:308
    ipsr.w = __get_IPSR();
80204bda:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:309
    if (ipsr.b.ISR != 0) {
80204bdc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
80204be0:	05c0      	lsls	r0, r0, #23
80204be2:	b150      	cbz	r0, 80204bfa <fault_dump_enable+0x52>
80204be4:	e7ff      	b.n	80204be6 <fault_dump_enable+0x3e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:310
        printf("!!! In exception %d !!!\n", ipsr.b.ISR);
80204be6:	9901      	ldr	r1, [sp, #4]
80204be8:	f36f 215f 	bfc	r1, #9, #23
80204bec:	f246 403b 	movw	r0, #25659	@ 0x643b
80204bf0:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204bf4:	f7fb feb0 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:311
    }
80204bf8:	e7ff      	b.n	80204bfa <fault_dump_enable+0x52>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:312
}
80204bfa:	b004      	add	sp, #16
80204bfc:	bd80      	pop	{r7, pc}
	...

80204c00 <gpio_interrupt_eoi>:
gpio_interrupt_eoi():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:348
  \param       gpio     Pointer to the GPIO register map
  \param       pin_no   pin number
  \return      none
*/
static inline void gpio_interrupt_eoi (GPIO_Type *gpio, uint8_t pin_no)
{
80204c00:	b082      	sub	sp, #8
80204c02:	9001      	str	r0, [sp, #4]
80204c04:	f88d 1003 	strb.w	r1, [sp, #3]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:349
    gpio->GPIO_PORTA_EOI |= (1 << pin_no);
80204c08:	f89d 1003 	ldrb.w	r1, [sp, #3]
80204c0c:	2001      	movs	r0, #1
80204c0e:	fa00 f201 	lsl.w	r2, r0, r1
80204c12:	9901      	ldr	r1, [sp, #4]
80204c14:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
80204c16:	4310      	orrs	r0, r2
80204c18:	64c8      	str	r0, [r1, #76]	@ 0x4c
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:350
    (void) gpio->GPIO_PORTA_EOI;
80204c1a:	9801      	ldr	r0, [sp, #4]
80204c1c:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:351
}
80204c1e:	b002      	add	sp, #8
80204c20:	4770      	bx	lr
	...

80204c24 <main>:
main():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:20

static void uart_callback(uint32_t event) { }

static char PRINTF_OUT_STRING[256] __attribute__((used, section(".bss.array_region_sram0")));

__NO_RETURN int main() {
80204c24:	b430      	push	{r4, r5}
80204c26:	f5ad 5d8e 	sub.w	sp, sp, #4544	@ 0x11c0
80204c2a:	f10d 0e14 	add.w	lr, sp, #20
80204c2e:	f50e 518d 	add.w	r1, lr, #4512	@ 0x11a0
80204c32:	9101      	str	r1, [sp, #4]
80204c34:	2000      	movs	r0, #0
80204c36:	9005      	str	r0, [sp, #20]
80204c38:	6088      	str	r0, [r1, #8]
80204c3a:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:21
 	fault_dump_enable(true);
80204c3c:	f7ff ffb4 	bl	80204ba8 <fault_dump_enable>
80204c40:	9b05      	ldr	r3, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:22
	SEGGER_RTT_ConfigUpBuffer(0, nullptr, nullptr, 0, SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
80204c42:	4669      	mov	r1, sp
80204c44:	2002      	movs	r0, #2
80204c46:	6008      	str	r0, [r1, #0]
80204c48:	4618      	mov	r0, r3
80204c4a:	4619      	mov	r1, r3
80204c4c:	461a      	mov	r2, r3
80204c4e:	f7fe fb65 	bl	8020331c <SEGGER_RTT_ConfigUpBuffer>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:23
	LPRTC::getInstance().enable();
80204c52:	f7ff fde1 	bl	80204818 <LPRTC::getInstance()>
80204c56:	f7ff fde5 	bl	80204824 <LPRTC::enable()>
80204c5a:	9801      	ldr	r0, [sp, #4]
80204c5c:	2103      	movs	r1, #3
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:26

	using jitTest = void(*)(uint32_t *);
	uint32_t val = 3;
80204c5e:	6041      	str	r1, [r0, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:38
		0xf101, // ADD.W R1, R1, #3
		0x0103, // ADD.W R1, R1, #3
		0x6001, // STR R1, [R0]
		0x4770 // BX LR
	};
	__DSB(); // Data Synchronization Barrier
80204c60:	f3bf 8f4f 	dsb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:39
	__ISB(); // Instruction Synchronization Barrier
80204c64:	f3bf 8f6f 	isb	sy
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:41

	jitTest jt = reinterpret_cast<jitTest>(reinterpret_cast<uintptr_t>(instr) | 1U); // LSB setzen für THUMB-Mode
80204c68:	f246 11de 	movw	r1, #25054	@ 0x61de
80204c6c:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204c70:	f041 0101 	orr.w	r1, r1, #1
80204c74:	6001      	str	r1, [r0, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:42
	jt(&val);
80204c76:	6801      	ldr	r1, [r0, #0]
80204c78:	f10d 0e18 	add.w	lr, sp, #24
80204c7c:	f50e 508d 	add.w	r0, lr, #4512	@ 0x11a0
80204c80:	4788      	blx	r1
80204c82:	f60d 10b2 	addw	r0, sp, #2482	@ 0x9b2
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:45


	JIT::Generators::Simple simpleGen;
80204c86:	9002      	str	r0, [sp, #8]
80204c88:	f7ff fbda 	bl	80204440 <JIT::Generators::Simple::Simple()>
80204c8c:	9802      	ldr	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:46
	JIT::Generators::Simple::Func simpleFunc = simpleGen.generate();
80204c8e:	f7ff fbb9 	bl	80204404 <JIT::Generators::Simple::generate()>
80204c92:	f8cd 09ac 	str.w	r0, [sp, #2476]	@ 0x9ac
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:47
	uint32_t ret = simpleFunc();
80204c96:	f8dd 09ac 	ldr.w	r0, [sp, #2476]	@ 0x9ac
80204c9a:	4780      	blx	r0
80204c9c:	f8cd 09a8 	str.w	r0, [sp, #2472]	@ 0x9a8
80204ca0:	f50d 70d3 	add.w	r0, sp, #422	@ 0x1a6
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:49

	JIT::Generators::Triad triadGen;
80204ca4:	9003      	str	r0, [sp, #12]
80204ca6:	f7ff fba3 	bl	802043f0 <JIT::Generators::Triad::Triad()>
80204caa:	9803      	ldr	r0, [sp, #12]
80204cac:	2120      	movs	r1, #32
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:50
	constexpr uint16_t count = 32;
80204cae:	f8ad 11a4 	strh.w	r1, [sp, #420]	@ 0x1a4
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:51
	JIT::Generators::Triad::Func triadFunc = triadGen.generate(count);
80204cb2:	f7ff fb0f 	bl	802042d4 <JIT::Generators::Triad::generate(unsigned int)>
80204cb6:	9068      	str	r0, [sp, #416]	@ 0x1a0
80204cb8:	a848      	add	r0, sp, #288	@ 0x120
80204cba:	2180      	movs	r1, #128	@ 0x80
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:52
	float a[count] = {0};
80204cbc:	9104      	str	r1, [sp, #16]
80204cbe:	f7fb fee6 	bl	80200a8e <__aeabi_memclr4>
80204cc2:	9904      	ldr	r1, [sp, #16]
80204cc4:	a828      	add	r0, sp, #160	@ 0xa0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:53
	float b[count] = {0};
80204cc6:	f7fb fee2 	bl	80200a8e <__aeabi_memclr4>
80204cca:	9904      	ldr	r1, [sp, #16]
80204ccc:	a808      	add	r0, sp, #32
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:54
	float c[count] = {0};
80204cce:	f7fb fede 	bl	80200a8e <__aeabi_memclr4>
80204cd2:	9805      	ldr	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:55
	for (uint32_t i = 0; i < count; i++) {
80204cd4:	9007      	str	r0, [sp, #28]
80204cd6:	e7ff      	b.n	80204cd8 <main+0xb4>
80204cd8:	9807      	ldr	r0, [sp, #28]
80204cda:	281f      	cmp	r0, #31
80204cdc:	d819      	bhi.n	80204d12 <main+0xee>
80204cde:	e7ff      	b.n	80204ce0 <main+0xbc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:56
		a[i] = i;
80204ce0:	9907      	ldr	r1, [sp, #28]
80204ce2:	ee00 1a10 	vmov	s0, r1
80204ce6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
80204cea:	a848      	add	r0, sp, #288	@ 0x120
80204cec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80204cf0:	ed80 0a00 	vstr	s0, [r0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:57
		b[i] = i;
80204cf4:	9907      	ldr	r1, [sp, #28]
80204cf6:	ee00 1a10 	vmov	s0, r1
80204cfa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
80204cfe:	a828      	add	r0, sp, #160	@ 0xa0
80204d00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
80204d04:	ed80 0a00 	vstr	s0, [r0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:58
	}
80204d08:	e7ff      	b.n	80204d0a <main+0xe6>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:55
	for (uint32_t i = 0; i < count; i++) {
80204d0a:	9807      	ldr	r0, [sp, #28]
80204d0c:	3001      	adds	r0, #1
80204d0e:	9007      	str	r0, [sp, #28]
80204d10:	e7e2      	b.n	80204cd8 <main+0xb4>
80204d12:	2000      	movs	r0, #0
80204d14:	f2c4 0040 	movt	r0, #16448	@ 0x4040
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:59
	float scalar = 3.0;
80204d18:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:60
	triadFunc(a, b, c, scalar);
80204d1a:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
80204d1c:	ed9d 0a06 	vldr	s0, [sp, #24]
80204d20:	a848      	add	r0, sp, #288	@ 0x120
80204d22:	a928      	add	r1, sp, #160	@ 0xa0
80204d24:	aa08      	add	r2, sp, #32
80204d26:	4798      	blx	r3
80204d28:	9801      	ldr	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:62
	
	SEGGER_RTT_printf(0, "Val New %d\n", val);
80204d2a:	6842      	ldr	r2, [r0, #4]
80204d2c:	f246 31fd 	movw	r1, #25597	@ 0x63fd
80204d30:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204d34:	2000      	movs	r0, #0
80204d36:	f7fe fbc3 	bl	802034c0 <SEGGER_RTT_printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:64

	LPRTC::getInstance().disable();
80204d3a:	f7ff fd6d 	bl	80204818 <LPRTC::getInstance()>
80204d3e:	f7ff fd85 	bl	8020484c <LPRTC::disable()>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:65
	while (1) {
80204d42:	e7ff      	b.n	80204d44 <main+0x120>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:66
		__WFE();
80204d44:	bf20      	wfe
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:65
	while (1) {
80204d46:	e7fd      	b.n	80204d44 <main+0x120>

80204d48 <setup_tcm_ns_partition>:
setup_tcm_ns_partition():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:80

void setup_tcm_ns_partition (void)
{
80204d48:	b580      	push	{r7, lr}
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:82
    /* Do nothing if partitions are not defined in the linker script */
    if (&ns_region_0_end == &ns_region_0_start)
80204d4a:	f244 0100 	movw	r1, #16384	@ 0x4000
80204d4e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204d52:	f244 0000 	movw	r0, #16384	@ 0x4000
80204d56:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204d5a:	4288      	cmp	r0, r1
80204d5c:	d101      	bne.n	80204d62 <setup_tcm_ns_partition+0x1a>
80204d5e:	e7ff      	b.n	80204d60 <setup_tcm_ns_partition+0x18>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:83
        return;
80204d60:	e004      	b.n	80204d6c <setup_tcm_ns_partition+0x24>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:85

    SAU_TCM_NS_Setup();
80204d62:	f7fe fab7 	bl	802032d4 <SAU_TCM_NS_Setup>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:86
    TGU_Setup();
80204d66:	f7fe fde7 	bl	80203938 <TGU_Setup>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:87
}
80204d6a:	e7ff      	b.n	80204d6c <setup_tcm_ns_partition+0x24>
80204d6c:	bd80      	pop	{r7, pc}
	...

80204d70 <print_faults>:
print_faults():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:284
{
80204d70:	b580      	push	{r7, lr}
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:285
    print_usagefault();
80204d72:	f000 f9b1 	bl	802050d8 <print_usagefault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:286
    print_memmanage();
80204d76:	f000 f9d3 	bl	80205120 <print_memmanage>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:287
    print_busfault();
80204d7a:	f000 fa07 	bl	8020518c <print_busfault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:288
    print_securefault();
80204d7e:	f000 fa53 	bl	80205228 <print_securefault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:289
    print_debugfault();
80204d82:	f000 fa75 	bl	80205270 <print_debugfault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:290
    print_hardfault();
80204d86:	f000 fa97 	bl	802052b8 <print_hardfault>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:291
}
80204d8a:	bd80      	pop	{r7, pc}

80204d8c <FaultDump>:
FaultDump():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:446
    JumpToDump(new_exc_return, new_sp);
}

FAULT_HANDLER_XO_MEMORY_LOCATION
static void FaultDump(void)
{
80204d8c:	b580      	push	{r7, lr}
80204d8e:	b08c      	sub	sp, #48	@ 0x30
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:447
    printf("\n==== %s exception ====\n\n", FaultNames[fault_type]);
80204d90:	f640 5064 	movw	r0, #3428	@ 0xd64
80204d94:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204d98:	6801      	ldr	r1, [r0, #0]
80204d9a:	f246 30d4 	movw	r0, #25556	@ 0x63d4
80204d9e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204da2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
80204da6:	f246 4009 	movw	r0, #25609	@ 0x6409
80204daa:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204dae:	f7fb fdd3 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:449

    print_faults();
80204db2:	f7ff ffdd 	bl	80204d70 <print_faults>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:452

    printf("\nEXC_RETURN = %08" PRIX32 "\n\n"
           "Register dump (stored at &%08" PRIXPTR ") is:\n", exc_return, (uintptr_t) regs);
80204db6:	f640 5060 	movw	r0, #3424	@ 0xd60
80204dba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204dbe:	6801      	ldr	r1, [r0, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:451
    printf("\nEXC_RETURN = %08" PRIX32 "\n\n"
80204dc0:	f246 4054 	movw	r0, #25684	@ 0x6454
80204dc4:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204dc8:	f640 5268 	movw	r2, #3432	@ 0xd68
80204dcc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
80204dd0:	f7fb fdc2 	bl	80200958 <printf>
80204dd4:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:453
    for (int i = 0; i < 13; i++) {
80204dd6:	900b      	str	r0, [sp, #44]	@ 0x2c
80204dd8:	e7ff      	b.n	80204dda <FaultDump+0x4e>
80204dda:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80204ddc:	280c      	cmp	r0, #12
80204dde:	dc1c      	bgt.n	80204e1a <FaultDump+0x8e>
80204de0:	e7ff      	b.n	80204de2 <FaultDump+0x56>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:454
        printf("R%-3d= %08" PRIX32 "%c", i, regs[i], i % 4 < 3 ? ' ' : '\n');
80204de2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
80204de4:	f640 5068 	movw	r0, #3432	@ 0xd68
80204de8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204dec:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
80204df0:	17c8      	asrs	r0, r1, #31
80204df2:	eb01 7090 	add.w	r0, r1, r0, lsr #30
80204df6:	f020 0003 	bic.w	r0, r0, #3
80204dfa:	1a08      	subs	r0, r1, r0
80204dfc:	230a      	movs	r3, #10
80204dfe:	2803      	cmp	r0, #3
80204e00:	bfb8      	it	lt
80204e02:	2320      	movlt	r3, #32
80204e04:	f246 50e0 	movw	r0, #26080	@ 0x65e0
80204e08:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204e0c:	f7fb fda4 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:455
    }
80204e10:	e7ff      	b.n	80204e12 <FaultDump+0x86>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:453
    for (int i = 0; i < 13; i++) {
80204e12:	980b      	ldr	r0, [sp, #44]	@ 0x2c
80204e14:	3001      	adds	r0, #1
80204e16:	900b      	str	r0, [sp, #44]	@ 0x2c
80204e18:	e7df      	b.n	80204dda <FaultDump+0x4e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:456
    printf("SP  = %08" PRIX32 " LR  = %08" PRIX32 " PC  = %08" PRIX32 "\n", regs[13], regs[14], regs[15]);
80204e1a:	f640 5068 	movw	r0, #3432	@ 0xd68
80204e1e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204e22:	6b41      	ldr	r1, [r0, #52]	@ 0x34
80204e24:	6b82      	ldr	r2, [r0, #56]	@ 0x38
80204e26:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
80204e28:	f246 40a8 	movw	r0, #25768	@ 0x64a8
80204e2c:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204e30:	f7fb fd92 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:457
    printf("Mode %-8sflags set: ", exc_return & 8 ? "Thread" : "Handler");
80204e34:	f640 5060 	movw	r0, #3424	@ 0xd60
80204e38:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204e3c:	6800      	ldr	r0, [r0, #0]
80204e3e:	0702      	lsls	r2, r0, #28
80204e40:	f246 50ee 	movw	r0, #26094	@ 0x65ee
80204e44:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204e48:	f246 51ff 	movw	r1, #26111	@ 0x65ff
80204e4c:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80204e50:	2a00      	cmp	r2, #0
80204e52:	bf48      	it	mi
80204e54:	4601      	movmi	r1, r0
80204e56:	f246 505d 	movw	r0, #25949	@ 0x655d
80204e5a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204e5e:	f7fb fd7b 	bl	80200958 <printf>
80204e62:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:458
    for (size_t i = 0, bit = 1u<<31; i < 24; i++) {
80204e64:	900a      	str	r0, [sp, #40]	@ 0x28
80204e66:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
80204e6a:	9009      	str	r0, [sp, #36]	@ 0x24
80204e6c:	e7ff      	b.n	80204e6e <FaultDump+0xe2>
80204e6e:	980a      	ldr	r0, [sp, #40]	@ 0x28
80204e70:	2817      	cmp	r0, #23
80204e72:	d840      	bhi.n	80204ef6 <FaultDump+0x16a>
80204e74:	e7ff      	b.n	80204e76 <FaultDump+0xea>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:459
        if (i < sizeof flag_names - 1) {
80204e76:	980a      	ldr	r0, [sp, #40]	@ 0x28
80204e78:	280f      	cmp	r0, #15
80204e7a:	d82f      	bhi.n	80204edc <FaultDump+0x150>
80204e7c:	e7ff      	b.n	80204e7e <FaultDump+0xf2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:460
            if (flag_names[i] != '0') {
80204e7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
80204e80:	f246 30ec 	movw	r0, #25580	@ 0x63ec
80204e84:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204e88:	5c40      	ldrb	r0, [r0, r1]
80204e8a:	2830      	cmp	r0, #48	@ 0x30
80204e8c:	d022      	beq.n	80204ed4 <FaultDump+0x148>
80204e8e:	e7ff      	b.n	80204e90 <FaultDump+0x104>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:461
                putchar(regs[16] & bit ? flag_names[i] : flag_names[i] + 'a' - 'A');
80204e90:	f640 5068 	movw	r0, #3432	@ 0xd68
80204e94:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204e98:	6c00      	ldr	r0, [r0, #64]	@ 0x40
80204e9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
80204e9c:	4208      	tst	r0, r1
80204e9e:	d008      	beq.n	80204eb2 <FaultDump+0x126>
80204ea0:	e7ff      	b.n	80204ea2 <FaultDump+0x116>
80204ea2:	990a      	ldr	r1, [sp, #40]	@ 0x28
80204ea4:	f246 30ec 	movw	r0, #25580	@ 0x63ec
80204ea8:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204eac:	5c40      	ldrb	r0, [r0, r1]
80204eae:	9002      	str	r0, [sp, #8]
80204eb0:	e008      	b.n	80204ec4 <FaultDump+0x138>
80204eb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
80204eb4:	f246 30ec 	movw	r0, #25580	@ 0x63ec
80204eb8:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204ebc:	5c40      	ldrb	r0, [r0, r1]
80204ebe:	3020      	adds	r0, #32
80204ec0:	9002      	str	r0, [sp, #8]
80204ec2:	e7ff      	b.n	80204ec4 <FaultDump+0x138>
80204ec4:	9802      	ldr	r0, [sp, #8]
80204ec6:	f240 6184 	movw	r1, #1668	@ 0x684
80204eca:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204ece:	f7fb fd81 	bl	802009d4 <putc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:462
            }
80204ed2:	e7ff      	b.n	80204ed4 <FaultDump+0x148>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:463
            bit >>= 1;
80204ed4:	9809      	ldr	r0, [sp, #36]	@ 0x24
80204ed6:	0840      	lsrs	r0, r0, #1
80204ed8:	9009      	str	r0, [sp, #36]	@ 0x24
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:464
        } else {
80204eda:	e007      	b.n	80204eec <FaultDump+0x160>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:465
            putchar(' ');
80204edc:	f240 6184 	movw	r1, #1668	@ 0x684
80204ee0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80204ee4:	2020      	movs	r0, #32
80204ee6:	f7fb fd75 	bl	802009d4 <putc>
80204eea:	e7ff      	b.n	80204eec <FaultDump+0x160>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:467
        }
    }
80204eec:	e7ff      	b.n	80204eee <FaultDump+0x162>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:458
    for (size_t i = 0, bit = 1u<<31; i < 24; i++) {
80204eee:	980a      	ldr	r0, [sp, #40]	@ 0x28
80204ef0:	3001      	adds	r0, #1
80204ef2:	900a      	str	r0, [sp, #40]	@ 0x28
80204ef4:	e7bb      	b.n	80204e6e <FaultDump+0xe2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:468
    printf("PSR = %08" PRIX32 "\n", regs[16]);
80204ef6:	f640 5068 	movw	r0, #3432	@ 0xd68
80204efa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204efe:	6c01      	ldr	r1, [r0, #64]	@ 0x40
80204f00:	f246 40e6 	movw	r0, #25830	@ 0x64e6
80204f04:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204f08:	f7fb fd26 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:469
    if (!(exc_return & 8)) {
80204f0c:	f640 5060 	movw	r0, #3424	@ 0xd60
80204f10:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204f14:	7800      	ldrb	r0, [r0, #0]
80204f16:	0700      	lsls	r0, r0, #28
80204f18:	2800      	cmp	r0, #0
80204f1a:	d40e      	bmi.n	80204f3a <FaultDump+0x1ae>
80204f1c:	e7ff      	b.n	80204f1e <FaultDump+0x192>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:470
        printf("Exception %" PRId32 "\n", regs[16] & 0x1FF);
80204f1e:	f640 5068 	movw	r0, #3432	@ 0xd68
80204f22:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204f26:	6c01      	ldr	r1, [r0, #64]	@ 0x40
80204f28:	f36f 215f 	bfc	r1, #9, #23
80204f2c:	f246 503f 	movw	r0, #25919	@ 0x653f
80204f30:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204f34:	f7fb fd10 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:471
    }
80204f38:	e7ff      	b.n	80204f3a <FaultDump+0x1ae>
80204f3a:	f64e 5008 	movw	r0, #60680	@ 0xed08
80204f3e:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:473

    uintptr_t stack_top = VTOR_STACK_TOP;
80204f42:	6800      	ldr	r0, [r0, #0]
80204f44:	6800      	ldr	r0, [r0, #0]
80204f46:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:474
    printf("Stack top from VTOR: %08" PRIXPTR "\n", stack_top);
80204f48:	9908      	ldr	r1, [sp, #32]
80204f4a:	f246 408d 	movw	r0, #25741	@ 0x648d
80204f4e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204f52:	f7fb fd01 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:475
    printf("\n==== Stack dump ====\n\n");
80204f56:	f246 4023 	movw	r0, #25635	@ 0x6423
80204f5a:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204f5e:	f7fb fcfb 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:476
    const uintptr_t stack_point = regs[13];
80204f62:	f640 5068 	movw	r0, #3432	@ 0xd68
80204f66:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80204f6a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
80204f6c:	9007      	str	r0, [sp, #28]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:480

    // not using the default stack so we have to just
    // print the defined maximum (STACK_DUMP_MAX_LINES)
    if (stack_top < stack_point) {
80204f6e:	9808      	ldr	r0, [sp, #32]
80204f70:	9907      	ldr	r1, [sp, #28]
80204f72:	4288      	cmp	r0, r1
80204f74:	d204      	bcs.n	80204f80 <FaultDump+0x1f4>
80204f76:	e7ff      	b.n	80204f78 <FaultDump+0x1ec>
80204f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:481
        stack_top = UINTPTR_MAX;
80204f7c:	9008      	str	r0, [sp, #32]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:482
    }
80204f7e:	e7ff      	b.n	80204f80 <FaultDump+0x1f4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:489
    // these are for readability(?), can't be changed without modifying code below
    #define VALUES_PER_LINE 4
    #define BYTES_IN_VALUE 4

    // start printing from aligned address
    const uintptr_t loop_start = stack_point - stack_point % (VALUES_PER_LINE * BYTES_IN_VALUE);
80204f80:	9807      	ldr	r0, [sp, #28]
80204f82:	f020 000f 	bic.w	r0, r0, #15
80204f86:	9006      	str	r0, [sp, #24]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:492

    // Dump uint32 values from SP until stack top or until defined number of lines is printed
    printf("Address  :     3 2 1 0     7 6 5 4     B A 9 8     F E D C       ASCII Data\n");
80204f88:	f246 40f2 	movw	r0, #25842	@ 0x64f2
80204f8c:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204f90:	f7fb fce2 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:494
    //      80008010 :    FFEEAABB    CC001133    12345678    1A2B3C4D    ....3...xV".M<+.
    for (uint32_t *p = (uint32_t *)loop_start; p < ((uint32_t *)loop_start + STACK_DUMP_MAX_LINES * VALUES_PER_LINE) && p < (uint32_t *)stack_top; p += VALUES_PER_LINE) {
80204f94:	9806      	ldr	r0, [sp, #24]
80204f96:	9005      	str	r0, [sp, #20]
80204f98:	e7ff      	b.n	80204f9a <FaultDump+0x20e>
80204f9a:	9905      	ldr	r1, [sp, #20]
80204f9c:	9806      	ldr	r0, [sp, #24]
80204f9e:	f500 72a0 	add.w	r2, r0, #320	@ 0x140
80204fa2:	2000      	movs	r0, #0
80204fa4:	4291      	cmp	r1, r2
80204fa6:	9001      	str	r0, [sp, #4]
80204fa8:	d207      	bcs.n	80204fba <FaultDump+0x22e>
80204faa:	e7ff      	b.n	80204fac <FaultDump+0x220>
80204fac:	9805      	ldr	r0, [sp, #20]
80204fae:	9908      	ldr	r1, [sp, #32]
80204fb0:	4288      	cmp	r0, r1
80204fb2:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
80204fb6:	9001      	str	r0, [sp, #4]
80204fb8:	e7ff      	b.n	80204fba <FaultDump+0x22e>
80204fba:	9801      	ldr	r0, [sp, #4]
80204fbc:	07c0      	lsls	r0, r0, #31
80204fbe:	2800      	cmp	r0, #0
80204fc0:	d07c      	beq.n	802050bc <FaultDump+0x330>
80204fc2:	e7ff      	b.n	80204fc4 <FaultDump+0x238>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:496

        printf("%08" PRIXPTR " :", (uintptr_t)p);
80204fc4:	9905      	ldr	r1, [sp, #20]
80204fc6:	f246 5075 	movw	r0, #25973	@ 0x6575
80204fca:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80204fce:	f7fb fcc3 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:498
        // print the stack values for 1 line
        for (uint32_t *vp = p; vp < p + VALUES_PER_LINE; vp++) {
80204fd2:	9805      	ldr	r0, [sp, #20]
80204fd4:	9004      	str	r0, [sp, #16]
80204fd6:	e7ff      	b.n	80204fd8 <FaultDump+0x24c>
80204fd8:	9804      	ldr	r0, [sp, #16]
80204fda:	9905      	ldr	r1, [sp, #20]
80204fdc:	3110      	adds	r1, #16
80204fde:	4288      	cmp	r0, r1
80204fe0:	d21f      	bcs.n	80205022 <FaultDump+0x296>
80204fe2:	e7ff      	b.n	80204fe4 <FaultDump+0x258>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:499
            if (vp >= (uint32_t*)stack_point && vp < (uint32_t*)stack_top) {
80204fe4:	9804      	ldr	r0, [sp, #16]
80204fe6:	9907      	ldr	r1, [sp, #28]
80204fe8:	4288      	cmp	r0, r1
80204fea:	d30e      	bcc.n	8020500a <FaultDump+0x27e>
80204fec:	e7ff      	b.n	80204fee <FaultDump+0x262>
80204fee:	9804      	ldr	r0, [sp, #16]
80204ff0:	9908      	ldr	r1, [sp, #32]
80204ff2:	4288      	cmp	r0, r1
80204ff4:	d209      	bcs.n	8020500a <FaultDump+0x27e>
80204ff6:	e7ff      	b.n	80204ff8 <FaultDump+0x26c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:500
                printf("    %08" PRIX32, *vp);
80204ff8:	9804      	ldr	r0, [sp, #16]
80204ffa:	6801      	ldr	r1, [r0, #0]
80204ffc:	f246 50a3 	movw	r0, #26019	@ 0x65a3
80205000:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80205004:	f7fb fca8 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:501
            }
80205008:	e006      	b.n	80205018 <FaultDump+0x28c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:503
            else {
                printf("            ");
8020500a:	f246 504d 	movw	r0, #25933	@ 0x654d
8020500e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80205012:	f7fb fca1 	bl	80200958 <printf>
80205016:	e7ff      	b.n	80205018 <FaultDump+0x28c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:505
            }
        }
80205018:	e7ff      	b.n	8020501a <FaultDump+0x28e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:498
        for (uint32_t *vp = p; vp < p + VALUES_PER_LINE; vp++) {
8020501a:	9804      	ldr	r0, [sp, #16]
8020501c:	3004      	adds	r0, #4
8020501e:	9004      	str	r0, [sp, #16]
80205020:	e7da      	b.n	80204fd8 <FaultDump+0x24c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:506
        printf("    ");
80205022:	f246 5055 	movw	r0, #25941	@ 0x6555
80205026:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020502a:	f7fb fc95 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:509

        // print the ascii characters for one line
        for (char *cp = (char *)p; cp < (char *)p + VALUES_PER_LINE * BYTES_IN_VALUE; cp++) {
8020502e:	9805      	ldr	r0, [sp, #20]
80205030:	9003      	str	r0, [sp, #12]
80205032:	e7ff      	b.n	80205034 <FaultDump+0x2a8>
80205034:	9803      	ldr	r0, [sp, #12]
80205036:	9905      	ldr	r1, [sp, #20]
80205038:	3110      	adds	r1, #16
8020503a:	4288      	cmp	r0, r1
8020503c:	d233      	bcs.n	802050a6 <FaultDump+0x31a>
8020503e:	e7ff      	b.n	80205040 <FaultDump+0x2b4>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:510
            if (cp >= (char*)stack_point && cp < (char*)stack_top) {
80205040:	9803      	ldr	r0, [sp, #12]
80205042:	9907      	ldr	r1, [sp, #28]
80205044:	4288      	cmp	r0, r1
80205046:	d321      	bcc.n	8020508c <FaultDump+0x300>
80205048:	e7ff      	b.n	8020504a <FaultDump+0x2be>
8020504a:	9803      	ldr	r0, [sp, #12]
8020504c:	9908      	ldr	r1, [sp, #32]
8020504e:	4288      	cmp	r0, r1
80205050:	d21c      	bcs.n	8020508c <FaultDump+0x300>
80205052:	e7ff      	b.n	80205054 <FaultDump+0x2c8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:512
                // only print printable ascii characters
                if(*cp > 31 && *cp < 127) {
80205054:	9803      	ldr	r0, [sp, #12]
80205056:	7800      	ldrb	r0, [r0, #0]
80205058:	2820      	cmp	r0, #32
8020505a:	db0e      	blt.n	8020507a <FaultDump+0x2ee>
8020505c:	e7ff      	b.n	8020505e <FaultDump+0x2d2>
8020505e:	9803      	ldr	r0, [sp, #12]
80205060:	7800      	ldrb	r0, [r0, #0]
80205062:	287e      	cmp	r0, #126	@ 0x7e
80205064:	dc09      	bgt.n	8020507a <FaultDump+0x2ee>
80205066:	e7ff      	b.n	80205068 <FaultDump+0x2dc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:513
                    putchar(*cp);
80205068:	9803      	ldr	r0, [sp, #12]
8020506a:	7800      	ldrb	r0, [r0, #0]
8020506c:	f240 6184 	movw	r1, #1668	@ 0x684
80205070:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80205074:	f7fb fcae 	bl	802009d4 <putc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:514
                }
80205078:	e007      	b.n	8020508a <FaultDump+0x2fe>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:516
                else {
                    putchar('.');
8020507a:	f240 6184 	movw	r1, #1668	@ 0x684
8020507e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80205082:	202e      	movs	r0, #46	@ 0x2e
80205084:	f7fb fca6 	bl	802009d4 <putc>
80205088:	e7ff      	b.n	8020508a <FaultDump+0x2fe>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:518
                }
            }
8020508a:	e007      	b.n	8020509c <FaultDump+0x310>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:520
            else {
                putchar(' ');
8020508c:	f240 6184 	movw	r1, #1668	@ 0x684
80205090:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80205094:	2020      	movs	r0, #32
80205096:	f7fb fc9d 	bl	802009d4 <putc>
8020509a:	e7ff      	b.n	8020509c <FaultDump+0x310>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:522
            }
        }
8020509c:	e7ff      	b.n	8020509e <FaultDump+0x312>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:509
        for (char *cp = (char *)p; cp < (char *)p + VALUES_PER_LINE * BYTES_IN_VALUE; cp++) {
8020509e:	9803      	ldr	r0, [sp, #12]
802050a0:	3001      	adds	r0, #1
802050a2:	9003      	str	r0, [sp, #12]
802050a4:	e7c6      	b.n	80205034 <FaultDump+0x2a8>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:523
        printf("\n");
802050a6:	f246 4007 	movw	r0, #25607	@ 0x6407
802050aa:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802050ae:	f7fb fc53 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:524
    }
802050b2:	e7ff      	b.n	802050b4 <FaultDump+0x328>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:494
    for (uint32_t *p = (uint32_t *)loop_start; p < ((uint32_t *)loop_start + STACK_DUMP_MAX_LINES * VALUES_PER_LINE) && p < (uint32_t *)stack_top; p += VALUES_PER_LINE) {
802050b4:	9805      	ldr	r0, [sp, #20]
802050b6:	3010      	adds	r0, #16
802050b8:	9005      	str	r0, [sp, #20]
802050ba:	e76e      	b.n	80204f9a <FaultDump+0x20e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:526

    for (;;) {
802050bc:	e7ff      	b.n	802050be <FaultDump+0x332>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:527
        __WFE();
802050be:	bf20      	wfe
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:526
    for (;;) {
802050c0:	e7fd      	b.n	802050be <FaultDump+0x332>
802050c2:	bf00      	nop

802050c4 <JumpToDump>:
JumpToDump():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:380
{
802050c4:	b082      	sub	sp, #8
802050c6:	9001      	str	r0, [sp, #4]
802050c8:	9100      	str	r1, [sp, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:382
          "BX    %1" :: "r"(sp), "r"(exc_return));
802050ca:	9800      	ldr	r0, [sp, #0]
802050cc:	9901      	ldr	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:381
    __asm("MOV   SP, %0\n\t" // sp parameter to SP
802050ce:	4685      	mov	sp, r0
802050d0:	4708      	bx	r1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:383
}
802050d2:	b002      	add	sp, #8
802050d4:	4770      	bx	lr
802050d6:	bf00      	nop

802050d8 <print_usagefault>:
print_usagefault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:236
{
802050d8:	b580      	push	{r7, lr}
802050da:	b082      	sub	sp, #8
802050dc:	f64e 502a 	movw	r0, #60714	@ 0xed2a
802050e0:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:237
     uint32_t ufsr = UFSR;
802050e4:	8800      	ldrh	r0, [r0, #0]
802050e6:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:238
     if (ufsr == 0) {
802050e8:	9801      	ldr	r0, [sp, #4]
802050ea:	b908      	cbnz	r0, 802050f0 <print_usagefault+0x18>
802050ec:	e7ff      	b.n	802050ee <print_usagefault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:239
         return;
802050ee:	e014      	b.n	8020511a <print_usagefault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:241
     printf("UFSR  = %04" PRIX32, ufsr);
802050f0:	9901      	ldr	r1, [sp, #4]
802050f2:	f246 5096 	movw	r0, #26006	@ 0x6596
802050f6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802050fa:	f7fb fc2d 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:242
     print_fsrbits(ufsr, ufsr_bits);
802050fe:	9801      	ldr	r0, [sp, #4]
80205100:	f246 11e8 	movw	r1, #25064	@ 0x61e8
80205104:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80205108:	f000 f8fa 	bl	80205300 <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:243
     UFSR = ufsr;
8020510c:	9801      	ldr	r0, [sp, #4]
8020510e:	f64e 512a 	movw	r1, #60714	@ 0xed2a
80205112:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80205116:	8008      	strh	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:244
}
80205118:	e7ff      	b.n	8020511a <print_usagefault+0x42>
8020511a:	b002      	add	sp, #8
8020511c:	bd80      	pop	{r7, pc}
8020511e:	bf00      	nop

80205120 <print_memmanage>:
print_memmanage():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:199
{
80205120:	b580      	push	{r7, lr}
80205122:	b082      	sub	sp, #8
80205124:	f64e 5028 	movw	r0, #60712	@ 0xed28
80205128:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:200
     uint32_t mmfsr = MMFSR;
8020512c:	7800      	ldrb	r0, [r0, #0]
8020512e:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:201
     if (mmfsr == 0) {
80205130:	9801      	ldr	r0, [sp, #4]
80205132:	b908      	cbnz	r0, 80205138 <print_memmanage+0x18>
80205134:	e7ff      	b.n	80205136 <print_memmanage+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:202
         return;
80205136:	e026      	b.n	80205186 <print_memmanage+0x66>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:204
     printf("MMFSR = %02" PRIX32, mmfsr);
80205138:	9901      	ldr	r1, [sp, #4]
8020513a:	f246 5089 	movw	r0, #25993	@ 0x6589
8020513e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80205142:	f7fb fc09 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:205
     print_fsrbits(mmfsr, mmfsr_bits);
80205146:	9801      	ldr	r0, [sp, #4]
80205148:	f246 2123 	movw	r1, #25123	@ 0x6223
8020514c:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80205150:	f000 f8d6 	bl	80205300 <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:206
     if (mmfsr & 0x80) {
80205154:	f89d 0004 	ldrb.w	r0, [sp, #4]
80205158:	0600      	lsls	r0, r0, #24
8020515a:	2800      	cmp	r0, #0
8020515c:	d50c      	bpl.n	80205178 <print_memmanage+0x58>
8020515e:	e7ff      	b.n	80205160 <print_memmanage+0x40>
80205160:	f64e 5034 	movw	r0, #60724	@ 0xed34
80205164:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:207
        printf("MMFAR = %08" PRIX32 "\n", SCB->MMFAR);
80205168:	6801      	ldr	r1, [r0, #0]
8020516a:	f246 40d8 	movw	r0, #25816	@ 0x64d8
8020516e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80205172:	f7fb fbf1 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:208
     }
80205176:	e7ff      	b.n	80205178 <print_memmanage+0x58>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:209
     MMFSR = mmfsr;
80205178:	9801      	ldr	r0, [sp, #4]
8020517a:	f64e 5128 	movw	r1, #60712	@ 0xed28
8020517e:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80205182:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:210
}
80205184:	e7ff      	b.n	80205186 <print_memmanage+0x66>
80205186:	b002      	add	sp, #8
80205188:	bd80      	pop	{r7, pc}
8020518a:	bf00      	nop

8020518c <print_busfault>:
print_busfault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:214
{
8020518c:	b580      	push	{r7, lr}
8020518e:	b084      	sub	sp, #16
80205190:	f64e 5029 	movw	r0, #60713	@ 0xed29
80205194:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:215
     uint32_t bfsr = BFSR;
80205198:	7800      	ldrb	r0, [r0, #0]
8020519a:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:216
     if (bfsr == 0) {
8020519c:	9803      	ldr	r0, [sp, #12]
8020519e:	b908      	cbnz	r0, 802051a4 <print_busfault+0x18>
802051a0:	e7ff      	b.n	802051a2 <print_busfault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:217
         return;
802051a2:	e03e      	b.n	80205222 <print_busfault+0x96>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:219
     printf("BFSR  = %02" PRIX32, bfsr);
802051a4:	9903      	ldr	r1, [sp, #12]
802051a6:	f246 507c 	movw	r0, #25980	@ 0x657c
802051aa:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802051ae:	f7fb fbd3 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:220
     print_fsrbits(bfsr, bfsr_bits);
802051b2:	9803      	ldr	r0, [sp, #12]
802051b4:	f246 215b 	movw	r1, #25179	@ 0x625b
802051b8:	f2c8 0120 	movt	r1, #32800	@ 0x8020
802051bc:	f000 f8a0 	bl	80205300 <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:221
     if (bfsr & 0x80) {
802051c0:	f89d 000c 	ldrb.w	r0, [sp, #12]
802051c4:	0600      	lsls	r0, r0, #24
802051c6:	2800      	cmp	r0, #0
802051c8:	d50c      	bpl.n	802051e4 <print_busfault+0x58>
802051ca:	e7ff      	b.n	802051cc <print_busfault+0x40>
802051cc:	f64e 5038 	movw	r0, #60728	@ 0xed38
802051d0:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:222
        printf("BFAR  = %08" PRIX32 "\n", SCB->BFAR);
802051d4:	6801      	ldr	r1, [r0, #0]
802051d6:	f246 40ca 	movw	r0, #25802	@ 0x64ca
802051da:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802051de:	f7fb fbbb 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:223
     }
802051e2:	e7ff      	b.n	802051e4 <print_busfault+0x58>
802051e4:	f64e 503c 	movw	r0, #60732	@ 0xed3c
802051e8:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:225
     uint32_t afsr = SCB->AFSR;
802051ec:	9001      	str	r0, [sp, #4]
802051ee:	6800      	ldr	r0, [r0, #0]
802051f0:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:226
     printf("AFSR  = %08" PRIX32, afsr);
802051f2:	9902      	ldr	r1, [sp, #8]
802051f4:	f246 50ac 	movw	r0, #26028	@ 0x65ac
802051f8:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802051fc:	f7fb fbac 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:228
     print_fsrbits(afsr, afsr_bits);
80205200:	9802      	ldr	r0, [sp, #8]
80205202:	f246 219c 	movw	r1, #25244	@ 0x629c
80205206:	f2c8 0120 	movt	r1, #32800	@ 0x8020
8020520a:	f000 f879 	bl	80205300 <print_fsrbits>
8020520e:	9901      	ldr	r1, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:229
     SCB->AFSR = afsr;
80205210:	9802      	ldr	r0, [sp, #8]
80205212:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:231
     BFSR = bfsr;
80205214:	9803      	ldr	r0, [sp, #12]
80205216:	f64e 5129 	movw	r1, #60713	@ 0xed29
8020521a:	f2ce 0100 	movt	r1, #57344	@ 0xe000
8020521e:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:232
}
80205220:	e7ff      	b.n	80205222 <print_busfault+0x96>
80205222:	b004      	add	sp, #16
80205224:	bd80      	pop	{r7, pc}
80205226:	bf00      	nop

80205228 <print_securefault>:
print_securefault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:260
{
80205228:	b580      	push	{r7, lr}
8020522a:	b082      	sub	sp, #8
8020522c:	f64e 50e4 	movw	r0, #60900	@ 0xede4
80205230:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:261
     uint32_t sfsr = SCB->SFSR;
80205234:	6800      	ldr	r0, [r0, #0]
80205236:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:262
     if (sfsr == 0) {
80205238:	9801      	ldr	r0, [sp, #4]
8020523a:	b908      	cbnz	r0, 80205240 <print_securefault+0x18>
8020523c:	e7ff      	b.n	8020523e <print_securefault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:263
         return;
8020523e:	e014      	b.n	8020526a <print_securefault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:265
     printf("SFSR  = %08" PRIX32, sfsr);
80205240:	9901      	ldr	r1, [sp, #4]
80205242:	f246 50d3 	movw	r0, #26067	@ 0x65d3
80205246:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020524a:	f7fb fb85 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:266
     print_fsrbits(sfsr, sfsr_bits);
8020524e:	9801      	ldr	r0, [sp, #4]
80205250:	f246 3156 	movw	r1, #25430	@ 0x6356
80205254:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80205258:	f000 f852 	bl	80205300 <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:267
     SCB->SFSR = sfsr;
8020525c:	9801      	ldr	r0, [sp, #4]
8020525e:	f64e 51e4 	movw	r1, #60900	@ 0xede4
80205262:	f2ce 0100 	movt	r1, #57344	@ 0xe000
80205266:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:268
}
80205268:	e7ff      	b.n	8020526a <print_securefault+0x42>
8020526a:	b002      	add	sp, #8
8020526c:	bd80      	pop	{r7, pc}
8020526e:	bf00      	nop

80205270 <print_debugfault>:
print_debugfault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:272
{
80205270:	b580      	push	{r7, lr}
80205272:	b082      	sub	sp, #8
80205274:	f64e 5030 	movw	r0, #60720	@ 0xed30
80205278:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:273
     uint32_t dfsr = SCB->DFSR;
8020527c:	6800      	ldr	r0, [r0, #0]
8020527e:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:274
     if (dfsr == 0) {
80205280:	9801      	ldr	r0, [sp, #4]
80205282:	b908      	cbnz	r0, 80205288 <print_debugfault+0x18>
80205284:	e7ff      	b.n	80205286 <print_debugfault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:275
         return;
80205286:	e014      	b.n	802052b2 <print_debugfault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:277
     printf("DFSR  = %08" PRIX32, dfsr);
80205288:	9901      	ldr	r1, [sp, #4]
8020528a:	f246 50b9 	movw	r0, #26041	@ 0x65b9
8020528e:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80205292:	f7fb fb61 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:278
     print_fsrbits(dfsr, dfsr_bits);
80205296:	9801      	ldr	r0, [sp, #4]
80205298:	f246 3190 	movw	r1, #25488	@ 0x6390
8020529c:	f2c8 0120 	movt	r1, #32800	@ 0x8020
802052a0:	f000 f82e 	bl	80205300 <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:279
     SCB->DFSR = dfsr;
802052a4:	9801      	ldr	r0, [sp, #4]
802052a6:	f64e 5130 	movw	r1, #60720	@ 0xed30
802052aa:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802052ae:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:280
}
802052b0:	e7ff      	b.n	802052b2 <print_debugfault+0x42>
802052b2:	b002      	add	sp, #8
802052b4:	bd80      	pop	{r7, pc}
802052b6:	bf00      	nop

802052b8 <print_hardfault>:
print_hardfault():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:248
{
802052b8:	b580      	push	{r7, lr}
802052ba:	b082      	sub	sp, #8
802052bc:	f64e 502c 	movw	r0, #60716	@ 0xed2c
802052c0:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:249
     uint32_t hfsr = SCB->HFSR;
802052c4:	6800      	ldr	r0, [r0, #0]
802052c6:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:250
     if (hfsr == 0) {
802052c8:	9801      	ldr	r0, [sp, #4]
802052ca:	b908      	cbnz	r0, 802052d0 <print_hardfault+0x18>
802052cc:	e7ff      	b.n	802052ce <print_hardfault+0x16>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:251
         return;
802052ce:	e014      	b.n	802052fa <print_hardfault+0x42>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:253
     printf("HFSR  = %08" PRIX32, hfsr);
802052d0:	9901      	ldr	r1, [sp, #4]
802052d2:	f246 50c6 	movw	r0, #26054	@ 0x65c6
802052d6:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802052da:	f7fb fb3d 	bl	80200958 <printf>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:254
     print_fsrbits(hfsr, hfsr_bits);
802052de:	9801      	ldr	r0, [sp, #4]
802052e0:	f246 31ba 	movw	r1, #25530	@ 0x63ba
802052e4:	f2c8 0120 	movt	r1, #32800	@ 0x8020
802052e8:	f000 f80a 	bl	80205300 <print_fsrbits>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:255
     SCB->HFSR = hfsr;
802052ec:	9801      	ldr	r0, [sp, #4]
802052ee:	f64e 512c 	movw	r1, #60716	@ 0xed2c
802052f2:	f2ce 0100 	movt	r1, #57344	@ 0xe000
802052f6:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:256
}
802052f8:	e7ff      	b.n	802052fa <print_hardfault+0x42>
802052fa:	b002      	add	sp, #8
802052fc:	bd80      	pop	{r7, pc}
802052fe:	bf00      	nop

80205300 <print_fsrbits>:
print_fsrbits():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:177
{
80205300:	b580      	push	{r7, lr}
80205302:	b086      	sub	sp, #24
80205304:	9005      	str	r0, [sp, #20]
80205306:	9104      	str	r1, [sp, #16]
80205308:	2001      	movs	r0, #1
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:178
     bool first = true;
8020530a:	f88d 000f 	strb.w	r0, [sp, #15]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:180
     while (val != 0 && *bitnames != ' ') {
8020530e:	e7ff      	b.n	80205310 <print_fsrbits+0x10>
80205310:	9905      	ldr	r1, [sp, #20]
80205312:	2000      	movs	r0, #0
80205314:	9000      	str	r0, [sp, #0]
80205316:	b139      	cbz	r1, 80205328 <print_fsrbits+0x28>
80205318:	e7ff      	b.n	8020531a <print_fsrbits+0x1a>
8020531a:	9804      	ldr	r0, [sp, #16]
8020531c:	7800      	ldrb	r0, [r0, #0]
8020531e:	2820      	cmp	r0, #32
80205320:	ea5f 900f 			@ <UNDEFINED> instruction: 0xea5f900f
80205324:	9000      	str	r0, [sp, #0]
80205326:	e7ff      	b.n	80205328 <print_fsrbits+0x28>
80205328:	9800      	ldr	r0, [sp, #0]
8020532a:	07c0      	lsls	r0, r0, #31
8020532c:	b3e0      	cbz	r0, 802053a8 <print_fsrbits+0xa8>
8020532e:	e7ff      	b.n	80205330 <print_fsrbits+0x30>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:181
         int bit = *bitnames++;
80205330:	9804      	ldr	r0, [sp, #16]
80205332:	1c41      	adds	r1, r0, #1
80205334:	9104      	str	r1, [sp, #16]
80205336:	7800      	ldrb	r0, [r0, #0]
80205338:	9002      	str	r0, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:182
         const char *next_bitname = bitnames;
8020533a:	9804      	ldr	r0, [sp, #16]
8020533c:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:183
         while (*next_bitname > ' ') {
8020533e:	e7ff      	b.n	80205340 <print_fsrbits+0x40>
80205340:	9801      	ldr	r0, [sp, #4]
80205342:	7800      	ldrb	r0, [r0, #0]
80205344:	2821      	cmp	r0, #33	@ 0x21
80205346:	db04      	blt.n	80205352 <print_fsrbits+0x52>
80205348:	e7ff      	b.n	8020534a <print_fsrbits+0x4a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:184
             next_bitname++;
8020534a:	9801      	ldr	r0, [sp, #4]
8020534c:	3001      	adds	r0, #1
8020534e:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:183
         while (*next_bitname > ' ') {
80205350:	e7f6      	b.n	80205340 <print_fsrbits+0x40>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:186
         if (val & (1U << bit)) {
80205352:	9805      	ldr	r0, [sp, #20]
80205354:	9902      	ldr	r1, [sp, #8]
80205356:	40c8      	lsrs	r0, r1
80205358:	07c0      	lsls	r0, r0, #31
8020535a:	b310      	cbz	r0, 802053a2 <print_fsrbits+0xa2>
8020535c:	e7ff      	b.n	8020535e <print_fsrbits+0x5e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:187
             val &=~ (1U << bit);
8020535e:	9902      	ldr	r1, [sp, #8]
80205360:	2001      	movs	r0, #1
80205362:	fa00 f101 	lsl.w	r1, r0, r1
80205366:	9805      	ldr	r0, [sp, #20]
80205368:	4388      	bics	r0, r1
8020536a:	9005      	str	r0, [sp, #20]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:188
             printf("%s%.*s", first ? " (" : ", ", next_bitname - bitnames, bitnames);
8020536c:	f89d 000f 	ldrb.w	r0, [sp, #15]
80205370:	07c2      	lsls	r2, r0, #31
80205372:	f246 5072 	movw	r0, #25970	@ 0x6572
80205376:	f2c8 0020 	movt	r0, #32800	@ 0x8020
8020537a:	f246 515a 	movw	r1, #25946	@ 0x655a
8020537e:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80205382:	2a00      	cmp	r2, #0
80205384:	bf18      	it	ne
80205386:	4601      	movne	r1, r0
80205388:	9801      	ldr	r0, [sp, #4]
8020538a:	9b04      	ldr	r3, [sp, #16]
8020538c:	1ac2      	subs	r2, r0, r3
8020538e:	f246 6014 	movw	r0, #26132	@ 0x6614
80205392:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80205396:	f7fb fadf 	bl	80200958 <printf>
8020539a:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:189
             first = false;
8020539c:	f88d 000f 	strb.w	r0, [sp, #15]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:190
         }
802053a0:	e7ff      	b.n	802053a2 <print_fsrbits+0xa2>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:191
         bitnames = next_bitname;
802053a2:	9801      	ldr	r0, [sp, #4]
802053a4:	9004      	str	r0, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:180
     while (val != 0 && *bitnames != ' ') {
802053a6:	e7b3      	b.n	80205310 <print_fsrbits+0x10>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:194
     puts(first ? "" : ")");
802053a8:	f89d 000f 	ldrb.w	r0, [sp, #15]
802053ac:	07c2      	lsls	r2, r0, #31
802053ae:	f246 6144 	movw	r1, #26180	@ 0x6644
802053b2:	f2c8 0120 	movt	r1, #32800	@ 0x8020
802053b6:	f246 6053 	movw	r0, #26195	@ 0x6653
802053ba:	f2c8 0020 	movt	r0, #32800	@ 0x8020
802053be:	2a00      	cmp	r2, #0
802053c0:	bf18      	it	ne
802053c2:	4608      	movne	r0, r1
802053c4:	f7fb fb08 	bl	802009d8 <puts>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:195
}
802053c8:	b006      	add	sp, #24
802053ca:	bd80      	pop	{r7, pc}

802053cc <CommonAsmFaultHandler>:
CommonAsmFaultHandler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:363
    __asm("LDR   R1, =regs+4*4\n\t"
802053cc:	490a      	ldr	r1, [pc, #40]	@ (802053f8 <CommonAsmFaultHandler+0x2c>)
802053ce:	e881 0ff0 	stmia.w	r1, {r4, r5, r6, r7, r8, r9, sl, fp}
802053d2:	f01e 0f04 	tst.w	lr, #4
802053d6:	bf07      	ittee	eq
802053d8:	4669      	moveq	r1, sp
802053da:	f3ef 830a 	mrseq	r3, MSPLIM
802053de:	f3ef 8109 	mrsne	r1, PSP
802053e2:	f3ef 830b 	mrsne	r3, PSPLIM
802053e6:	4672      	mov	r2, lr
802053e8:	f8df d010 	ldr.w	sp, [pc, #16]	@ 802053fc <CommonAsmFaultHandler+0x30>
802053ec:	4c04      	ldr	r4, [pc, #16]	@ (80205400 <CommonAsmFaultHandler+0x34>)
802053ee:	f384 880a 	msr	MSPLIM, r4
802053f2:	f000 b807 	b.w	80205404 <CommonFaultHandler>
802053f6:	0000      	movs	r0, r0
802053f8:	20000d78 	.word	0x20000d78
802053fc:	20001d90 	.word	0x20001d90
80205400:	20000db0 	.word	0x20000db0

80205404 <CommonFaultHandler>:
CommonFaultHandler():
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:388
{
80205404:	b580      	push	{r7, lr}
80205406:	b088      	sub	sp, #32
80205408:	9007      	str	r0, [sp, #28]
8020540a:	9106      	str	r1, [sp, #24]
8020540c:	9205      	str	r2, [sp, #20]
8020540e:	9304      	str	r3, [sp, #16]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:389
    if (!fault_dump_enabled) {
80205410:	f640 505d 	movw	r0, #3421	@ 0xd5d
80205414:	f2c2 0000 	movt	r0, #8192	@ 0x2000
80205418:	7800      	ldrb	r0, [r0, #0]
8020541a:	07c0      	lsls	r0, r0, #31
8020541c:	b918      	cbnz	r0, 80205426 <CommonFaultHandler+0x22>
8020541e:	e7ff      	b.n	80205420 <CommonFaultHandler+0x1c>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:390
        while (1) {
80205420:	e7ff      	b.n	80205422 <CommonFaultHandler+0x1e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:391
            __WFE();
80205422:	bf20      	wfe
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:390
        while (1) {
80205424:	e7fd      	b.n	80205422 <CommonFaultHandler+0x1e>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:396
    fault_dump_enabled = false;
80205426:	f640 515d 	movw	r1, #3421	@ 0xd5d
8020542a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
8020542e:	2000      	movs	r0, #0
80205430:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:399
    fault_handler_active = true;
80205432:	f640 515e 	movw	r1, #3422	@ 0xd5e
80205436:	f2c2 0100 	movt	r1, #8192	@ 0x2000
8020543a:	2001      	movs	r0, #1
8020543c:	7008      	strb	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:401
    exc_return = lr;
8020543e:	9805      	ldr	r0, [sp, #20]
80205440:	f640 5160 	movw	r1, #3424	@ 0xd60
80205444:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80205448:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:402
    fault_type = type;
8020544a:	9807      	ldr	r0, [sp, #28]
8020544c:	f640 5164 	movw	r1, #3428	@ 0xd64
80205450:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80205454:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:403
    uint32_t retpsr = sp[7];
80205456:	9806      	ldr	r0, [sp, #24]
80205458:	69c0      	ldr	r0, [r0, #28]
8020545a:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:406
    regs[0] = sp[0];
8020545c:	9806      	ldr	r0, [sp, #24]
8020545e:	6800      	ldr	r0, [r0, #0]
80205460:	f640 5168 	movw	r1, #3432	@ 0xd68
80205464:	f2c2 0100 	movt	r1, #8192	@ 0x2000
80205468:	6008      	str	r0, [r1, #0]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:407
    regs[1] = sp[1];
8020546a:	9806      	ldr	r0, [sp, #24]
8020546c:	6840      	ldr	r0, [r0, #4]
8020546e:	6048      	str	r0, [r1, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:408
    regs[2] = sp[2];
80205470:	9806      	ldr	r0, [sp, #24]
80205472:	6880      	ldr	r0, [r0, #8]
80205474:	6088      	str	r0, [r1, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:409
    regs[3] = sp[3];
80205476:	9806      	ldr	r0, [sp, #24]
80205478:	68c0      	ldr	r0, [r0, #12]
8020547a:	60c8      	str	r0, [r1, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:410
    regs[12] = sp[4];
8020547c:	9806      	ldr	r0, [sp, #24]
8020547e:	6900      	ldr	r0, [r0, #16]
80205480:	6308      	str	r0, [r1, #48]	@ 0x30
80205482:	f64e 502a 	movw	r0, #60714	@ 0xed2a
80205486:	f2ce 0000 	movt	r0, #57344	@ 0xe000
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:413
    if((UFSR & 0x10) && sp == orig_splim) {
8020548a:	8800      	ldrh	r0, [r0, #0]
8020548c:	06c0      	lsls	r0, r0, #27
8020548e:	2800      	cmp	r0, #0
80205490:	d50e      	bpl.n	802054b0 <CommonFaultHandler+0xac>
80205492:	e7ff      	b.n	80205494 <CommonFaultHandler+0x90>
80205494:	9806      	ldr	r0, [sp, #24]
80205496:	9904      	ldr	r1, [sp, #16]
80205498:	4288      	cmp	r0, r1
8020549a:	d109      	bne.n	802054b0 <CommonFaultHandler+0xac>
8020549c:	e7ff      	b.n	8020549e <CommonFaultHandler+0x9a>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:414
        regs[13] = (uint32_t)sp;
8020549e:	9806      	ldr	r0, [sp, #24]
802054a0:	f640 5168 	movw	r1, #3432	@ 0xd68
802054a4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
802054a8:	6348      	str	r0, [r1, #52]	@ 0x34
802054aa:	2000      	movs	r0, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:415
        retpsr = 0;  // can't trust that stack frame contains sane values as this is stack overflow fault
802054ac:	9003      	str	r0, [sp, #12]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:416
    }
802054ae:	e017      	b.n	802054e0 <CommonFaultHandler+0xdc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:418
        regs[13] = (uint32_t)sp + (exc_return & 0x10 ? 0x20 : 0x68) + (retpsr & 0x200 ? 4 : 0);
802054b0:	9806      	ldr	r0, [sp, #24]
802054b2:	f640 5160 	movw	r1, #3424	@ 0xd60
802054b6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
802054ba:	6809      	ldr	r1, [r1, #0]
802054bc:	06ca      	lsls	r2, r1, #27
802054be:	2168      	movs	r1, #104	@ 0x68
802054c0:	2a00      	cmp	r2, #0
802054c2:	bf48      	it	mi
802054c4:	2120      	movmi	r1, #32
802054c6:	4408      	add	r0, r1
802054c8:	9a03      	ldr	r2, [sp, #12]
802054ca:	1d01      	adds	r1, r0, #4
802054cc:	0592      	lsls	r2, r2, #22
802054ce:	2a00      	cmp	r2, #0
802054d0:	bf48      	it	mi
802054d2:	4608      	movmi	r0, r1
802054d4:	f640 5168 	movw	r1, #3432	@ 0xd68
802054d8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
802054dc:	6348      	str	r0, [r1, #52]	@ 0x34
802054de:	e7ff      	b.n	802054e0 <CommonFaultHandler+0xdc>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:420
    regs[14] = sp[5];
802054e0:	9806      	ldr	r0, [sp, #24]
802054e2:	6940      	ldr	r0, [r0, #20]
802054e4:	f640 5168 	movw	r1, #3432	@ 0xd68
802054e8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
802054ec:	6388      	str	r0, [r1, #56]	@ 0x38
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:421
    regs[15] = sp[6];
802054ee:	9806      	ldr	r0, [sp, #24]
802054f0:	6980      	ldr	r0, [r0, #24]
802054f2:	63c8      	str	r0, [r1, #60]	@ 0x3c
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:422
    regs[16] = sp[7];
802054f4:	9806      	ldr	r0, [sp, #24]
802054f6:	69c0      	ldr	r0, [r0, #28]
802054f8:	6408      	str	r0, [r1, #64]	@ 0x40
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:425
    fault_stack[FAULT_STACK_WORDS-1] = (1 << 24) | (retpsr & 0x1FF); // RETPSR, only set T32 state and exception state
802054fa:	9903      	ldr	r1, [sp, #12]
802054fc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
80205500:	f360 215f 	bfi	r1, r0, #9, #23
80205504:	f640 50b0 	movw	r0, #3504	@ 0xdb0
80205508:	f2c2 0000 	movt	r0, #8192	@ 0x2000
8020550c:	f8c0 13fc 	str.w	r1, [r0, #1020]	@ 0x3fc
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:426
    fault_stack[FAULT_STACK_WORDS-2] = (uint32_t) FaultDump;  // Return Address, this is where EXC_RETURN will return to later on
80205510:	f644 518d 	movw	r1, #19853	@ 0x4d8d
80205514:	f2c8 0120 	movt	r1, #32800	@ 0x8020
80205518:	f8c0 13f8 	str.w	r1, [r0, #1016]	@ 0x3f8
8020551c:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
80205520:	f6ce 71ff 	movt	r1, #61439	@ 0xefff
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:427
    fault_stack[FAULT_STACK_WORDS-3] = 0xEFFFFFFE;  // LR, deliberately set to 'illegal' execution address as we're not expecting FaultDump to return
80205524:	f8c0 13f4 	str.w	r1, [r0, #1012]	@ 0x3f4
80205528:	2100      	movs	r1, #0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:428
    fault_stack[FAULT_STACK_WORDS-4] = 0;  // R12
8020552a:	f8c0 13f0 	str.w	r1, [r0, #1008]	@ 0x3f0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:429
    fault_stack[FAULT_STACK_WORDS-5] = 0;  // R3
8020552e:	f8c0 13ec 	str.w	r1, [r0, #1004]	@ 0x3ec
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:430
    fault_stack[FAULT_STACK_WORDS-6] = 0;  // R2
80205532:	f8c0 13e8 	str.w	r1, [r0, #1000]	@ 0x3e8
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:431
    fault_stack[FAULT_STACK_WORDS-7] = 0;  // R1
80205536:	f8c0 13e4 	str.w	r1, [r0, #996]	@ 0x3e4
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:432
    fault_stack[FAULT_STACK_WORDS-8] = 0;  // R0
8020553a:	f8c0 13e0 	str.w	r1, [r0, #992]	@ 0x3e0
8020553e:	f500 7078 	add.w	r0, r0, #992	@ 0x3e0
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:438
    uint32_t new_exc_return = exc_return | 0x10;
80205542:	f640 5160 	movw	r1, #3424	@ 0xd60
80205546:	f2c2 0100 	movt	r1, #8192	@ 0x2000
8020554a:	6809      	ldr	r1, [r1, #0]
8020554c:	f041 0110 	orr.w	r1, r1, #16
80205550:	9102      	str	r1, [sp, #8]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:439
    uint32_t* new_sp = fault_stack + FAULT_STACK_WORDS - 8;
80205552:	9001      	str	r0, [sp, #4]
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:441
    JumpToDump(new_exc_return, new_sp);
80205554:	9802      	ldr	r0, [sp, #8]
80205556:	9901      	ldr	r1, [sp, #4]
80205558:	f7ff fdb4 	bl	802050c4 <JumpToDump>
/Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:442
}
8020555c:	b008      	add	sp, #32
8020555e:	bd80      	pop	{r7, pc}

80205560 <sys_busy_loop_init>:
sys_busy_loop_init():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:86
  \fn          void sys_busy_loop_init(void)
  \brief       Initialize the S32K Counter Module to use as busy loop
  \return      none
*/
void sys_busy_loop_init(void)
{
80205560:	f04f 51d2 	mov.w	r1, #440401920	@ 0x1a400000
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:87
    S32K_CNTControl->CNTCR |= CNTCR_EN;
80205564:	6808      	ldr	r0, [r1, #0]
80205566:	f040 0001 	orr.w	r0, r0, #1
8020556a:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:88
}
8020556c:	4770      	bx	lr
	...

80205570 <uart_disable_rx_irq>:
uart_disable_rx_irq():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:640
 * @note    none
 * @param   uart    : Pointer to uart register set structure
 * @retval  none
 */
static inline void uart_disable_rx_irq (UART_Type *uart)
{
80205570:	b081      	sub	sp, #4
80205572:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:644
    /* disable receiver interrupt */
    /* disable receive_data_available_interrupt bit in
     * ier interrupt enable register */
    uart->UART_IER &= ~UART_IER_ENABLE_RECEIVED_DATA_AVAILABLE;
80205574:	9900      	ldr	r1, [sp, #0]
80205576:	6848      	ldr	r0, [r1, #4]
80205578:	f020 0001 	bic.w	r0, r0, #1
8020557c:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:647

    /* also disable receiver line status interrupt. */
    uart->UART_IER &= ~UART_IER_ENABLE_RECEIVER_LINE_STATUS;
8020557e:	9900      	ldr	r1, [sp, #0]
80205580:	6848      	ldr	r0, [r1, #4]
80205582:	f020 0004 	bic.w	r0, r0, #4
80205586:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:648
}
80205588:	b001      	add	sp, #4
8020558a:	4770      	bx	lr

8020558c <uart_disable_tx_irq>:
uart_disable_tx_irq():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:608
{
8020558c:	b081      	sub	sp, #4
8020558e:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:611
    uart->UART_IER &= ~UART_IER_ENABLE_TRANSMIT_HOLD_REG_EMPTY;
80205590:	9900      	ldr	r1, [sp, #0]
80205592:	6848      	ldr	r0, [r1, #4]
80205594:	f020 0002 	bic.w	r0, r0, #2
80205598:	6048      	str	r0, [r1, #4]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:612
}
8020559a:	b001      	add	sp, #4
8020559c:	4770      	bx	lr
	...

802055a0 <uart_get_rx_fifo_available_count>:
uart_get_rx_fifo_available_count():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:94
 * @note    useful in interrupt callback
 * @param   uart: Pointer to uart register set structure
 * @retval  available receive fifo count
 */
static inline int32_t uart_get_rx_fifo_available_count (UART_Type *uart)
{
802055a0:	b081      	sub	sp, #4
802055a2:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:96
    /* read rfl receive FIFO level register */
    return (uart->UART_RFL);
802055a4:	9800      	ldr	r0, [sp, #0]
802055a6:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
802055aa:	b001      	add	sp, #4
802055ac:	4770      	bx	lr
	...

802055b0 <uart_get_tx_fifo_available_count>:
uart_get_tx_fifo_available_count():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:79
{
802055b0:	b081      	sub	sp, #4
802055b2:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:83
    return (UART_FIFO_DEPTH - uart->UART_TFL);
802055b4:	9800      	ldr	r0, [sp, #0]
802055b6:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
802055ba:	f1c0 0020 	rsb	r0, r0, #32
802055be:	b001      	add	sp, #4
802055c0:	4770      	bx	lr
	...

802055c4 <uart_irq_handler>:
uart_irq_handler():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:361
 * @param   uart     : Pointer to uart register set structure
 * @param   transfer : Pointer to uart transfer structure
 * @retval  none
 */
void uart_irq_handler (UART_Type *uart, UART_TRANSFER *transfer)
{
802055c4:	b580      	push	{r7, lr}
802055c6:	b08a      	sub	sp, #40	@ 0x28
802055c8:	9009      	str	r0, [sp, #36]	@ 0x24
802055ca:	9108      	str	r1, [sp, #32]
802055cc:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:362
    uint32_t uart_int_status        = 0U;   /* uart interrupt status    */
802055ce:	9007      	str	r0, [sp, #28]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:363
    uint32_t rx_line_status         = 0U;   /* uart rx line status      */
802055d0:	9006      	str	r0, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:364
    uint32_t tx_fifo_available_cnt  = 0U;   /* TX fifo Available count. */
802055d2:	9005      	str	r0, [sp, #20]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:365
    uint32_t rx_fifo_available_cnt  = 0U;   /* RX fifo Available count. */
802055d4:	9004      	str	r0, [sp, #16]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:366
    uint32_t i = 0U;
802055d6:	9003      	str	r0, [sp, #12]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:369

    /* get uart interrupt status from iir interrupt identity register */
    uart_int_status = (uart->UART_IIR) & UART_IIR_INTERRUPT_ID_MASK;
802055d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
802055da:	6880      	ldr	r0, [r0, #8]
802055dc:	f000 000f 	and.w	r0, r0, #15
802055e0:	9007      	str	r0, [sp, #28]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:371

    switch (uart_int_status)
802055e2:	9807      	ldr	r0, [sp, #28]
802055e4:	9002      	str	r0, [sp, #8]
802055e6:	280c      	cmp	r0, #12
802055e8:	f200 80ed 	bhi.w	802057c6 <uart_irq_handler+0x202>
802055ec:	9902      	ldr	r1, [sp, #8]
802055ee:	e8df f001 	tbb	[pc, r1]
802055f2:	ea07      	.short	0xea07
802055f4:	ea93ea48 	.word	0xea93ea48
802055f8:	eaeaea0a 	.word	0xeaeaea0a
802055fc:	0093eaea 	.word	0x0093eaea
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:374
    {
        case UART_IIR_MODEM_STATUS: /* modem status */
            (void)(uart->UART_MSR);
80205600:	9809      	ldr	r0, [sp, #36]	@ 0x24
80205602:	6980      	ldr	r0, [r0, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:376
            /* not yet implemented. */
            break;
80205604:	e0e2      	b.n	802057cc <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:379

        case UART_IIR_RECEIVER_LINE_STATUS: /* receiver line status */
            rx_line_status = uart->UART_LSR;
80205606:	9809      	ldr	r0, [sp, #36]	@ 0x24
80205608:	6940      	ldr	r0, [r0, #20]
8020560a:	9006      	str	r0, [sp, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:382

            /* check for any RX line status error. */
            if (rx_line_status & (UART_LSR_RECEIVER_FIFO_ERR | UART_LSR_OVERRUN_ERR) )
8020560c:	f89d 0018 	ldrb.w	r0, [sp, #24]
80205610:	f010 0f82 	tst.w	r0, #130	@ 0x82
80205614:	d034      	beq.n	80205680 <uart_irq_handler+0xbc>
80205616:	e7ff      	b.n	80205618 <uart_irq_handler+0x54>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:385
            {
                /* mark status as error. */
                transfer->status = UART_TRANSFER_STATUS_ERROR;
80205618:	9908      	ldr	r1, [sp, #32]
8020561a:	2008      	movs	r0, #8
8020561c:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:390

                /* there can be multiple RX line status,
                 * break character implicitly generates framing error / parity error.
                 */
                if (rx_line_status & UART_LSR_BREAK_INTERRUPT)
8020561e:	f89d 0018 	ldrb.w	r0, [sp, #24]
80205622:	06c0      	lsls	r0, r0, #27
80205624:	2800      	cmp	r0, #0
80205626:	d506      	bpl.n	80205636 <uart_irq_handler+0x72>
80205628:	e7ff      	b.n	8020562a <uart_irq_handler+0x66>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:392
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_BREAK;
8020562a:	9908      	ldr	r1, [sp, #32]
8020562c:	6988      	ldr	r0, [r1, #24]
8020562e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
80205632:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:393
                }
80205634:	e7ff      	b.n	80205636 <uart_irq_handler+0x72>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:395

                if (rx_line_status & UART_LSR_FRAME_ERR)
80205636:	f89d 0018 	ldrb.w	r0, [sp, #24]
8020563a:	0700      	lsls	r0, r0, #28
8020563c:	2800      	cmp	r0, #0
8020563e:	d506      	bpl.n	8020564e <uart_irq_handler+0x8a>
80205640:	e7ff      	b.n	80205642 <uart_irq_handler+0x7e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:397
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_FRAMING;
80205642:	9908      	ldr	r1, [sp, #32]
80205644:	6988      	ldr	r0, [r1, #24]
80205646:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
8020564a:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:398
                }
8020564c:	e7ff      	b.n	8020564e <uart_irq_handler+0x8a>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:400

                if (rx_line_status & UART_LSR_PARITY_ERR)
8020564e:	f89d 0018 	ldrb.w	r0, [sp, #24]
80205652:	0740      	lsls	r0, r0, #29
80205654:	2800      	cmp	r0, #0
80205656:	d506      	bpl.n	80205666 <uart_irq_handler+0xa2>
80205658:	e7ff      	b.n	8020565a <uart_irq_handler+0x96>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:402
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_PARITY;
8020565a:	9908      	ldr	r1, [sp, #32]
8020565c:	6988      	ldr	r0, [r1, #24]
8020565e:	f040 0020 	orr.w	r0, r0, #32
80205662:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:403
                }
80205664:	e7ff      	b.n	80205666 <uart_irq_handler+0xa2>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:405

                if (rx_line_status & UART_LSR_OVERRUN_ERR)
80205666:	f89d 0018 	ldrb.w	r0, [sp, #24]
8020566a:	0780      	lsls	r0, r0, #30
8020566c:	2800      	cmp	r0, #0
8020566e:	d506      	bpl.n	8020567e <uart_irq_handler+0xba>
80205670:	e7ff      	b.n	80205672 <uart_irq_handler+0xae>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:407
                {
                    transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_OVERRUN;
80205672:	9908      	ldr	r1, [sp, #32]
80205674:	6988      	ldr	r0, [r1, #24]
80205676:	f040 0010 	orr.w	r0, r0, #16
8020567a:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:408
                }
8020567c:	e7ff      	b.n	8020567e <uart_irq_handler+0xba>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:409
            }
8020567e:	e7ff      	b.n	80205680 <uart_irq_handler+0xbc>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:410
            break;
80205680:	e0a4      	b.n	802057cc <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:413

        case UART_IIR_TRANSMIT_HOLDING_REG_EMPTY: /* transmit holding register empty */
            do
80205682:	e7ff      	b.n	80205684 <uart_irq_handler+0xc0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:416
            {
                /* Query how many characters are available in TX fifo. */
                tx_fifo_available_cnt = uart_get_tx_fifo_available_count (uart);
80205684:	9809      	ldr	r0, [sp, #36]	@ 0x24
80205686:	f7ff ff93 	bl	802055b0 <uart_get_tx_fifo_available_count>
8020568a:	9005      	str	r0, [sp, #20]
8020568c:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:419

                /* Write maximum number of characters to the TX fifo as per available space. */
                for(i=0; i<tx_fifo_available_cnt; i++)
8020568e:	9003      	str	r0, [sp, #12]
80205690:	e7ff      	b.n	80205692 <uart_irq_handler+0xce>
80205692:	9803      	ldr	r0, [sp, #12]
80205694:	9905      	ldr	r1, [sp, #20]
80205696:	4288      	cmp	r0, r1
80205698:	d218      	bcs.n	802056cc <uart_irq_handler+0x108>
8020569a:	e7ff      	b.n	8020569c <uart_irq_handler+0xd8>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:421
                {
                    if(transfer->tx_curr_cnt >= transfer->tx_total_num)
8020569c:	9808      	ldr	r0, [sp, #32]
8020569e:	6880      	ldr	r0, [r0, #8]
802056a0:	9908      	ldr	r1, [sp, #32]
802056a2:	6849      	ldr	r1, [r1, #4]
802056a4:	4288      	cmp	r0, r1
802056a6:	d301      	bcc.n	802056ac <uart_irq_handler+0xe8>
802056a8:	e7ff      	b.n	802056aa <uart_irq_handler+0xe6>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:424
                    {
                        /* Come out as it transmitted all the user data. */
                        break;
802056aa:	e00f      	b.n	802056cc <uart_irq_handler+0x108>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:428
                    }

                    /* send character to thr register. */
                    uart_send_a_char_to_thr(uart, transfer->tx_buf[transfer->tx_curr_cnt]);
802056ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
802056ae:	9a08      	ldr	r2, [sp, #32]
802056b0:	6811      	ldr	r1, [r2, #0]
802056b2:	6892      	ldr	r2, [r2, #8]
802056b4:	5c89      	ldrb	r1, [r1, r2]
802056b6:	f000 f899 	bl	802057ec <uart_send_a_char_to_thr>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:429
                    transfer->tx_curr_cnt++; /* increment the tx current count */
802056ba:	9908      	ldr	r1, [sp, #32]
802056bc:	6888      	ldr	r0, [r1, #8]
802056be:	3001      	adds	r0, #1
802056c0:	6088      	str	r0, [r1, #8]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:430
                }
802056c2:	e7ff      	b.n	802056c4 <uart_irq_handler+0x100>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:419
                for(i=0; i<tx_fifo_available_cnt; i++)
802056c4:	9803      	ldr	r0, [sp, #12]
802056c6:	3001      	adds	r0, #1
802056c8:	9003      	str	r0, [sp, #12]
802056ca:	e7e2      	b.n	80205692 <uart_irq_handler+0xce>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:434

                /* write again to tx fifo if it is not full and
                 * still there is some user data which needs to be send. */
            } while( uart_tx_ready(uart) && (transfer->tx_curr_cnt < transfer->tx_total_num) );
802056cc:	e7ff      	b.n	802056ce <uart_irq_handler+0x10a>
802056ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
802056d0:	f000 f896 	bl	80205800 <uart_tx_ready>
802056d4:	4601      	mov	r1, r0
802056d6:	2000      	movs	r0, #0
802056d8:	9001      	str	r0, [sp, #4]
802056da:	b149      	cbz	r1, 802056f0 <uart_irq_handler+0x12c>
802056dc:	e7ff      	b.n	802056de <uart_irq_handler+0x11a>
802056de:	9808      	ldr	r0, [sp, #32]
802056e0:	6880      	ldr	r0, [r0, #8]
802056e2:	9908      	ldr	r1, [sp, #32]
802056e4:	6849      	ldr	r1, [r1, #4]
802056e6:	4288      	cmp	r0, r1
802056e8:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
802056ec:	9001      	str	r0, [sp, #4]
802056ee:	e7ff      	b.n	802056f0 <uart_irq_handler+0x12c>
802056f0:	9801      	ldr	r0, [sp, #4]
802056f2:	07c0      	lsls	r0, r0, #31
802056f4:	b108      	cbz	r0, 802056fa <uart_irq_handler+0x136>
802056f6:	f02f c83b 	le	80205684 <uart_irq_handler+0xc0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:437

            /* check whether it transmitted all the bytes? */
            if (transfer->tx_curr_cnt >= transfer->tx_total_num)
802056fa:	9808      	ldr	r0, [sp, #32]
802056fc:	6880      	ldr	r0, [r0, #8]
802056fe:	9908      	ldr	r1, [sp, #32]
80205700:	6849      	ldr	r1, [r1, #4]
80205702:	4288      	cmp	r0, r1
80205704:	d307      	bcc.n	80205716 <uart_irq_handler+0x152>
80205706:	e7ff      	b.n	80205708 <uart_irq_handler+0x144>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:440
            {
                /* yes then disable the transmitter interrupt */
                uart_disable_tx_irq(uart);
80205708:	9809      	ldr	r0, [sp, #36]	@ 0x24
8020570a:	f7ff ff3f 	bl	8020558c <uart_disable_tx_irq>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:443

                /* mark status as Send Complete */
                transfer->status = UART_TRANSFER_STATUS_SEND_COMPLETE;
8020570e:	9908      	ldr	r1, [sp, #32]
80205710:	2001      	movs	r0, #1
80205712:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:444
            }
80205714:	e7ff      	b.n	80205716 <uart_irq_handler+0x152>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:445
            break;
80205716:	e059      	b.n	802057cc <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:449

        case UART_IIR_CHARACTER_TIMEOUT:        /* character timeout */
        case UART_IIR_RECEIVED_DATA_AVAILABLE:  /* received data available. */
            do
80205718:	e7ff      	b.n	8020571a <uart_irq_handler+0x156>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:452
            {
                /* Query how many characters are available in RX fifo. */
                rx_fifo_available_cnt = uart_get_rx_fifo_available_count (uart);
8020571a:	9809      	ldr	r0, [sp, #36]	@ 0x24
8020571c:	f7ff ff40 	bl	802055a0 <uart_get_rx_fifo_available_count>
80205720:	9004      	str	r0, [sp, #16]
80205722:	2000      	movs	r0, #0
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:455

                /* Read maximum number of characters available from the RX fifo or till rx total number. */
                for(i=0; i<rx_fifo_available_cnt; i++)
80205724:	9003      	str	r0, [sp, #12]
80205726:	e7ff      	b.n	80205728 <uart_irq_handler+0x164>
80205728:	9803      	ldr	r0, [sp, #12]
8020572a:	9904      	ldr	r1, [sp, #16]
8020572c:	4288      	cmp	r0, r1
8020572e:	d218      	bcs.n	80205762 <uart_irq_handler+0x19e>
80205730:	e7ff      	b.n	80205732 <uart_irq_handler+0x16e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:457
                {
                    if (transfer->rx_curr_cnt >= transfer->rx_total_num)
80205732:	9808      	ldr	r0, [sp, #32]
80205734:	6940      	ldr	r0, [r0, #20]
80205736:	9908      	ldr	r1, [sp, #32]
80205738:	6909      	ldr	r1, [r1, #16]
8020573a:	4288      	cmp	r0, r1
8020573c:	d301      	bcc.n	80205742 <uart_irq_handler+0x17e>
8020573e:	e7ff      	b.n	80205740 <uart_irq_handler+0x17c>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:460
                    {
                        /* Come out as it received all the user data. */
                        break;
80205740:	e00f      	b.n	80205762 <uart_irq_handler+0x19e>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:464
                    }

                    /* read character from rbr receive buffer register. */
                    transfer->rx_buf[transfer->rx_curr_cnt] = uart_receive_a_char_from_rbr(uart);
80205742:	9809      	ldr	r0, [sp, #36]	@ 0x24
80205744:	f000 f844 	bl	802057d0 <uart_receive_a_char_from_rbr>
80205748:	9a08      	ldr	r2, [sp, #32]
8020574a:	68d1      	ldr	r1, [r2, #12]
8020574c:	6952      	ldr	r2, [r2, #20]
8020574e:	5488      	strb	r0, [r1, r2]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:465
                    transfer->rx_curr_cnt++;
80205750:	9908      	ldr	r1, [sp, #32]
80205752:	6948      	ldr	r0, [r1, #20]
80205754:	3001      	adds	r0, #1
80205756:	6148      	str	r0, [r1, #20]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:466
                }
80205758:	e7ff      	b.n	8020575a <uart_irq_handler+0x196>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:455
                for(i=0; i<rx_fifo_available_cnt; i++)
8020575a:	9803      	ldr	r0, [sp, #12]
8020575c:	3001      	adds	r0, #1
8020575e:	9003      	str	r0, [sp, #12]
80205760:	e7e2      	b.n	80205728 <uart_irq_handler+0x164>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:469

                /* read again from rx fifo if it is not empty and user data is still remaining to read. */
            } while( uart_rx_ready(uart) && (transfer->rx_curr_cnt < transfer->rx_total_num) );
80205762:	e7ff      	b.n	80205764 <uart_irq_handler+0x1a0>
80205764:	9809      	ldr	r0, [sp, #36]	@ 0x24
80205766:	f000 f839 	bl	802057dc <uart_rx_ready>
8020576a:	4601      	mov	r1, r0
8020576c:	2000      	movs	r0, #0
8020576e:	9000      	str	r0, [sp, #0]
80205770:	b149      	cbz	r1, 80205786 <uart_irq_handler+0x1c2>
80205772:	e7ff      	b.n	80205774 <uart_irq_handler+0x1b0>
80205774:	9808      	ldr	r0, [sp, #32]
80205776:	6940      	ldr	r0, [r0, #20]
80205778:	9908      	ldr	r1, [sp, #32]
8020577a:	6909      	ldr	r1, [r1, #16]
8020577c:	4288      	cmp	r0, r1
8020577e:	ea5f 902f 			@ <UNDEFINED> instruction: 0xea5f902f
80205782:	9000      	str	r0, [sp, #0]
80205784:	e7ff      	b.n	80205786 <uart_irq_handler+0x1c2>
80205786:	9800      	ldr	r0, [sp, #0]
80205788:	07c0      	lsls	r0, r0, #31
8020578a:	b108      	cbz	r0, 80205790 <uart_irq_handler+0x1cc>
8020578c:	f02f c83b 	le	8020571a <uart_irq_handler+0x156>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:472

            /* check whether it received all the bytes? */
            if (transfer->rx_curr_cnt >= transfer->rx_total_num)
80205790:	9808      	ldr	r0, [sp, #32]
80205792:	6940      	ldr	r0, [r0, #20]
80205794:	9908      	ldr	r1, [sp, #32]
80205796:	6909      	ldr	r1, [r1, #16]
80205798:	4288      	cmp	r0, r1
8020579a:	d307      	bcc.n	802057ac <uart_irq_handler+0x1e8>
8020579c:	e7ff      	b.n	8020579e <uart_irq_handler+0x1da>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:475
            {
                /* yes than disable the receiver interrupt */
                uart_disable_rx_irq(uart);
8020579e:	9809      	ldr	r0, [sp, #36]	@ 0x24
802057a0:	f7ff fee6 	bl	80205570 <uart_disable_rx_irq>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:478

                /* mark status as Receive Complete */
                transfer->status = UART_TRANSFER_STATUS_RECEIVE_COMPLETE;
802057a4:	9908      	ldr	r1, [sp, #32]
802057a6:	2002      	movs	r0, #2
802057a8:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:479
            }
802057aa:	e003      	b.n	802057b4 <uart_irq_handler+0x1f0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:500
                 * it is up to user to decide whether
                 * to wait for remaining bytes or call the abort rx.
                */

                /* mark status as RX Timeout */
                transfer->status = UART_TRANSFER_STATUS_RX_TIMEOUT;
802057ac:	9908      	ldr	r1, [sp, #32]
802057ae:	2004      	movs	r0, #4
802057b0:	6188      	str	r0, [r1, #24]
802057b2:	e7ff      	b.n	802057b4 <uart_irq_handler+0x1f0>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:504
            }

            /* got character Timeout? mark status as a RX Timeout. */
            if (uart_int_status == UART_IIR_CHARACTER_TIMEOUT)
802057b4:	9807      	ldr	r0, [sp, #28]
802057b6:	280c      	cmp	r0, #12
802057b8:	d104      	bne.n	802057c4 <uart_irq_handler+0x200>
802057ba:	e7ff      	b.n	802057bc <uart_irq_handler+0x1f8>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:512
                 * it is up to user to decide whether
                 * to wait for remaining bytes or call the abort rx.
                 */

                /* mark status as RX Timeout */
                transfer->status = UART_TRANSFER_STATUS_RX_TIMEOUT;
802057bc:	9908      	ldr	r1, [sp, #32]
802057be:	2004      	movs	r0, #4
802057c0:	6188      	str	r0, [r1, #24]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:513
            }
802057c2:	e7ff      	b.n	802057c4 <uart_irq_handler+0x200>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:515

            break;
802057c4:	e002      	b.n	802057cc <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:519

        default:
            /* read the usr uart status register */
            (void)(uart->UART_USR);
802057c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
802057c8:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:520
            break;
802057ca:	e7ff      	b.n	802057cc <uart_irq_handler+0x208>
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:523
    }

    return;
802057cc:	b00a      	add	sp, #40	@ 0x28
802057ce:	bd80      	pop	{r7, pc}

802057d0 <uart_receive_a_char_from_rbr>:
uart_receive_a_char_from_rbr():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:66
{
802057d0:	b081      	sub	sp, #4
802057d2:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:68
    return uart->UART_RBR;
802057d4:	9800      	ldr	r0, [sp, #0]
802057d6:	6800      	ldr	r0, [r0, #0]
802057d8:	b001      	add	sp, #4
802057da:	4770      	bx	lr

802057dc <uart_rx_ready>:
uart_rx_ready():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:37
{
802057dc:	b081      	sub	sp, #4
802057de:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:39
    return ((uart->UART_USR & UART_USR_RECEIVE_FIFO_NOT_EMPTY) ? 1 : 0);
802057e0:	9800      	ldr	r0, [sp, #0]
802057e2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
802057e4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
802057e8:	b001      	add	sp, #4
802057ea:	4770      	bx	lr

802057ec <uart_send_a_char_to_thr>:
uart_send_a_char_to_thr():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:53
{
802057ec:	b082      	sub	sp, #8
802057ee:	9001      	str	r0, [sp, #4]
802057f0:	f88d 1003 	strb.w	r1, [sp, #3]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:55
    uart->UART_THR = chr;
802057f4:	f89d 0003 	ldrb.w	r0, [sp, #3]
802057f8:	9901      	ldr	r1, [sp, #4]
802057fa:	6008      	str	r0, [r1, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:56
}
802057fc:	b002      	add	sp, #8
802057fe:	4770      	bx	lr

80205800 <uart_tx_ready>:
uart_tx_ready():
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:24
{
80205800:	b081      	sub	sp, #4
80205802:	9000      	str	r0, [sp, #0]
/Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:26
    return ((uart->UART_USR & UART_USR_TRANSMIT_FIFO_NOT_FULL) ? 1 : 0);
80205804:	9800      	ldr	r0, [sp, #0]
80205806:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
80205808:	f3c0 0040 	ubfx	r0, r0, #1, #1
8020580c:	b001      	add	sp, #4
8020580e:	4770      	bx	lr

80205810 <__cxa_guard_acquire>:
__cxa_guard_acquire():
80205810:	7801      	ldrb	r1, [r0, #0]
80205812:	b109      	cbz	r1, 80205818 <__cxa_guard_acquire+0x8>
80205814:	2000      	movs	r0, #0
80205816:	4770      	bx	lr
80205818:	7841      	ldrb	r1, [r0, #1]
8020581a:	2901      	cmp	r1, #1
8020581c:	d003      	beq.n	80205826 <__cxa_guard_acquire+0x16>
8020581e:	078a      	lsls	r2, r1, #30
80205820:	d405      	bmi.n	8020582e <__cxa_guard_acquire+0x1e>
80205822:	2202      	movs	r2, #2
80205824:	7042      	strb	r2, [r0, #1]
80205826:	1e48      	subs	r0, r1, #1
80205828:	bf18      	it	ne
8020582a:	2001      	movne	r0, #1
8020582c:	4770      	bx	lr
8020582e:	b580      	push	{r7, lr}
80205830:	f246 6055 	movw	r0, #26197	@ 0x6655
80205834:	f2c8 0020 	movt	r0, #32800	@ 0x8020
80205838:	f000 f804 	bl	80205844 <abort_message>

8020583c <__cxa_guard_release>:
__cxa_guard_release():
8020583c:	2101      	movs	r1, #1
8020583e:	7001      	strb	r1, [r0, #0]
80205840:	7041      	strb	r1, [r0, #1]
80205842:	4770      	bx	lr

80205844 <abort_message>:
abort_message():
80205844:	f7fc fcd4 	bl	802021f0 <abort>

80205848 <_btod_d2e>:
_btod_d2e():
80205848:	ea5f 0c40 	movs.w	ip, r0, lsl #1
8020584c:	bf08      	it	eq
8020584e:	f091 0f00 	teqeq	r1, #0
80205852:	ea4f 238c 	mov.w	r3, ip, lsl #10
80205856:	ea4f 22c1 	mov.w	r2, r1, lsl #11
8020585a:	ea43 5151 	orr.w	r1, r3, r1, lsr #21
8020585e:	ea4f 501c 	mov.w	r0, ip, lsr #20
80205862:	bf18      	it	ne
80205864:	f500 40f0 	addne.w	r0, r0, #30720	@ 0x7800
80205868:	ea4f 0030 	mov.w	r0, r0, rrx
8020586c:	bf18      	it	ne
8020586e:	f041 4100 	orrne.w	r1, r1, #2147483648	@ 0x80000000
80205872:	ea5f 5c6c 	movs.w	ip, ip, asr #21
80205876:	f000 8029 	beq.w	802058cc <_d2e_norm_op1>
8020587a:	f1bc 3fff 	cmp.w	ip, #4294967295	@ 0xffffffff
8020587e:	bf08      	it	eq
80205880:	f040 4080 	orreq.w	r0, r0, #1073741824	@ 0x40000000
80205884:	4770      	bx	lr

80205886 <_d2e_denorm_low>:
_d2e_denorm_low():
80205886:	0c13      	lsrs	r3, r2, #16
80205888:	bf06      	itte	eq
8020588a:	0412      	lsleq	r2, r2, #16
8020588c:	f04f 0c10 	moveq.w	ip, #16
80205890:	f04f 0c00 	movne.w	ip, #0
80205894:	0e13      	lsrs	r3, r2, #24
80205896:	bf04      	itt	eq
80205898:	0212      	lsleq	r2, r2, #8
8020589a:	f10c 0c08 	addeq.w	ip, ip, #8
8020589e:	0f13      	lsrs	r3, r2, #28
802058a0:	bf04      	itt	eq
802058a2:	0112      	lsleq	r2, r2, #4
802058a4:	f10c 0c04 	addeq.w	ip, ip, #4
802058a8:	0f93      	lsrs	r3, r2, #30
802058aa:	bf04      	itt	eq
802058ac:	0092      	lsleq	r2, r2, #2
802058ae:	f10c 0c02 	addeq.w	ip, ip, #2
802058b2:	0fd3      	lsrs	r3, r2, #31
802058b4:	bf04      	itt	eq
802058b6:	0052      	lsleq	r2, r2, #1
802058b8:	f10c 0c01 	addeq.w	ip, ip, #1
802058bc:	4611      	mov	r1, r2
802058be:	f04f 0200 	mov.w	r2, #0
802058c2:	f1a0 001f 	sub.w	r0, r0, #31
802058c6:	eba0 000c 	sub.w	r0, r0, ip
802058ca:	4770      	bx	lr

802058cc <_d2e_norm_op1>:
_d2e_norm_op1():
802058cc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
802058d0:	bf08      	it	eq
802058d2:	4770      	bxeq	lr
802058d4:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
802058d8:	f43f afd5 	beq.w	80205886 <_d2e_denorm_low>
802058dc:	0c0b      	lsrs	r3, r1, #16
802058de:	bf06      	itte	eq
802058e0:	0409      	lsleq	r1, r1, #16
802058e2:	f04f 0c10 	moveq.w	ip, #16
802058e6:	f04f 0c00 	movne.w	ip, #0
802058ea:	0e0b      	lsrs	r3, r1, #24
802058ec:	bf04      	itt	eq
802058ee:	0209      	lsleq	r1, r1, #8
802058f0:	f10c 0c08 	addeq.w	ip, ip, #8
802058f4:	0f0b      	lsrs	r3, r1, #28
802058f6:	bf04      	itt	eq
802058f8:	0109      	lsleq	r1, r1, #4
802058fa:	f10c 0c04 	addeq.w	ip, ip, #4
802058fe:	0f8b      	lsrs	r3, r1, #30
80205900:	bf04      	itt	eq
80205902:	0089      	lsleq	r1, r1, #2
80205904:	f10c 0c02 	addeq.w	ip, ip, #2
80205908:	0fcb      	lsrs	r3, r1, #31
8020590a:	bf04      	itt	eq
8020590c:	0049      	lsleq	r1, r1, #1
8020590e:	f10c 0c01 	addeq.w	ip, ip, #1
80205912:	f1cc 0320 	rsb	r3, ip, #32
80205916:	fa22 f303 	lsr.w	r3, r2, r3
8020591a:	ea41 0103 	orr.w	r1, r1, r3
8020591e:	fa02 f20c 	lsl.w	r2, r2, ip
80205922:	eba0 000c 	sub.w	r0, r0, ip
80205926:	f100 0001 	add.w	r0, r0, #1
8020592a:	4770      	bx	lr

8020592c <__btod_div_common>:
__btod_div_common():
8020592c:	f023 477f 	bic.w	r7, r3, #4278190080	@ 0xff000000
80205930:	f020 4c7f 	bic.w	ip, r0, #4278190080	@ 0xff000000
80205934:	ea80 0003 	eor.w	r0, r0, r3
80205938:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
8020593c:	ebac 0307 	sub.w	r3, ip, r7
80205940:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
80205944:	f103 03ff 	add.w	r3, r3, #255	@ 0xff
80205948:	e92d 4980 	stmdb	sp!, {r7, r8, fp, lr}
8020594c:	b409      	push	{r0, r3}
8020594e:	ea4f 4314 	mov.w	r3, r4, lsr #16
80205952:	ea24 4803 	bic.w	r8, r4, r3, lsl #16
80205956:	ea4f 4b15 	mov.w	fp, r5, lsr #16
8020595a:	ea25 4e0b 	bic.w	lr, r5, fp, lsl #16
8020595e:	f20f 2604 	addw	r6, pc, #516	@ 0x204
80205962:	eb06 2713 	add.w	r7, r6, r3, lsr #8
80205966:	783e      	ldrb	r6, [r7, #0]
80205968:	fb03 6706 	mla	r7, r3, r6, r6
8020596c:	f5c7 0700 	rsb	r7, r7, #8388608	@ 0x800000
80205970:	fb07 f606 	mul.w	r6, r7, r6
80205974:	ea4f 46d6 	mov.w	r6, r6, lsr #19
80205978:	f106 0602 	add.w	r6, r6, #2
8020597c:	ea4f 3754 	mov.w	r7, r4, lsr #13
80205980:	fb07 6c06 	mla	ip, r7, r6, r6
80205984:	f1cc 5c00 	rsb	ip, ip, #536870912	@ 0x20000000
80205988:	ea4f 471c 	mov.w	r7, ip, lsr #16
8020598c:	ea2c 4c07 	bic.w	ip, ip, r7, lsl #16
80205990:	fb0c f506 	mul.w	r5, ip, r6
80205994:	fb07 f406 	mul.w	r4, r7, r6
80205998:	eb04 4615 	add.w	r6, r4, r5, lsr #16
8020599c:	ea4f 1696 	mov.w	r6, r6, lsr #6
802059a0:	0849      	lsrs	r1, r1, #1
802059a2:	ea5f 0232 	movs.w	r2, r2, rrx
802059a6:	bf34      	ite	cc
802059a8:	2000      	movcc	r0, #0
802059aa:	f04f 4000 	movcs.w	r0, #2147483648	@ 0x80000000
802059ae:	ea4f 37d1 	mov.w	r7, r1, lsr #15
802059b2:	fb06 fc07 	mul.w	ip, r6, r7
802059b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
802059ba:	fb0c f70b 	mul.w	r7, ip, fp
802059be:	1bd2      	subs	r2, r2, r7
802059c0:	fb03 f70c 	mul.w	r7, r3, ip
802059c4:	eb61 0107 	sbc.w	r1, r1, r7
802059c8:	fb0c f70e 	mul.w	r7, ip, lr
802059cc:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
802059d0:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
802059d4:	fb0c f708 	mul.w	r7, ip, r8
802059d8:	bf34      	ite	cc
802059da:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
802059de:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
802059e2:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
802059e6:	ea4f 440c 	mov.w	r4, ip, lsl #16
802059ea:	ea4f 0791 	mov.w	r7, r1, lsr #2
802059ee:	fb06 fc07 	mul.w	ip, r6, r7
802059f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
802059f6:	fb0c f70b 	mul.w	r7, ip, fp
802059fa:	ebb0 40c7 	subs.w	r0, r0, r7, lsl #19
802059fe:	eb72 3257 	sbcs.w	r2, r2, r7, lsr #13
80205a02:	fb03 f70c 	mul.w	r7, r3, ip
80205a06:	bf34      	ite	cc
80205a08:	eba2 42c7 	subcc.w	r2, r2, r7, lsl #19
80205a0c:	ebb2 42c7 	subscs.w	r2, r2, r7, lsl #19
80205a10:	eb61 3157 	sbc.w	r1, r1, r7, lsr #13
80205a14:	fb0c f70e 	mul.w	r7, ip, lr
80205a18:	ebb0 00c7 	subs.w	r0, r0, r7, lsl #3
80205a1c:	eb72 7257 	sbcs.w	r2, r2, r7, lsr #29
80205a20:	fb0c f708 	mul.w	r7, ip, r8
80205a24:	bf34      	ite	cc
80205a26:	eba2 02c7 	subcc.w	r2, r2, r7, lsl #3
80205a2a:	ebb2 02c7 	subscs.w	r2, r2, r7, lsl #3
80205a2e:	eb61 7157 	sbc.w	r1, r1, r7, lsr #29
80205a32:	ea4f 6181 	mov.w	r1, r1, lsl #26
80205a36:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
80205a3a:	ea4f 6282 	mov.w	r2, r2, lsl #26
80205a3e:	ea42 1290 	orr.w	r2, r2, r0, lsr #6
80205a42:	ea4f 6080 	mov.w	r0, r0, lsl #26
80205a46:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
80205a4a:	9f03      	ldr	r7, [sp, #12]
80205a4c:	ea4f 37d1 	mov.w	r7, r1, lsr #15
80205a50:	fb06 fc07 	mul.w	ip, r6, r7
80205a54:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
80205a58:	fb0c f70b 	mul.w	r7, ip, fp
80205a5c:	1bd2      	subs	r2, r2, r7
80205a5e:	fb03 f70c 	mul.w	r7, r3, ip
80205a62:	eb61 0107 	sbc.w	r1, r1, r7
80205a66:	fb0c f70e 	mul.w	r7, ip, lr
80205a6a:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
80205a6e:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
80205a72:	fb0c f708 	mul.w	r7, ip, r8
80205a76:	bf34      	ite	cc
80205a78:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
80205a7c:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
80205a80:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
80205a84:	ea4f 558c 	mov.w	r5, ip, lsl #22
80205a88:	eb04 249c 	add.w	r4, r4, ip, lsr #10
80205a8c:	ea4f 0791 	mov.w	r7, r1, lsr #2
80205a90:	fb06 fc07 	mul.w	ip, r6, r7
80205a94:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
80205a98:	fb0c f70b 	mul.w	r7, ip, fp
80205a9c:	ebb0 40c7 	subs.w	r0, r0, r7, lsl #19
80205aa0:	eb72 3257 	sbcs.w	r2, r2, r7, lsr #13
80205aa4:	fb03 f70c 	mul.w	r7, r3, ip
80205aa8:	bf34      	ite	cc
80205aaa:	eba2 42c7 	subcc.w	r2, r2, r7, lsl #19
80205aae:	ebb2 42c7 	subscs.w	r2, r2, r7, lsl #19
80205ab2:	eb61 3157 	sbc.w	r1, r1, r7, lsr #13
80205ab6:	fb0c f70e 	mul.w	r7, ip, lr
80205aba:	ebb0 00c7 	subs.w	r0, r0, r7, lsl #3
80205abe:	eb72 7257 	sbcs.w	r2, r2, r7, lsr #29
80205ac2:	fb0c f708 	mul.w	r7, ip, r8
80205ac6:	bf34      	ite	cc
80205ac8:	eba2 02c7 	subcc.w	r2, r2, r7, lsl #3
80205acc:	ebb2 02c7 	subscs.w	r2, r2, r7, lsl #3
80205ad0:	eb61 7157 	sbc.w	r1, r1, r7, lsr #29
80205ad4:	ea4f 6181 	mov.w	r1, r1, lsl #26
80205ad8:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
80205adc:	ea4f 6282 	mov.w	r2, r2, lsl #26
80205ae0:	ea42 1290 	orr.w	r2, r2, r0, lsr #6
80205ae4:	ea4f 6080 	mov.w	r0, r0, lsl #26
80205ae8:	eb15 254c 	adds.w	r5, r5, ip, lsl #9
80205aec:	f144 0400 	adc.w	r4, r4, #0
80205af0:	ea4f 37d1 	mov.w	r7, r1, lsr #15
80205af4:	fb06 fc07 	mul.w	ip, r6, r7
80205af8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
80205afc:	fb0c f70b 	mul.w	r7, ip, fp
80205b00:	1bd2      	subs	r2, r2, r7
80205b02:	fb03 f70c 	mul.w	r7, r3, ip
80205b06:	eb61 0107 	sbc.w	r1, r1, r7
80205b0a:	fb0c f70e 	mul.w	r7, ip, lr
80205b0e:	ebb0 4007 	subs.w	r0, r0, r7, lsl #16
80205b12:	eb72 4217 	sbcs.w	r2, r2, r7, lsr #16
80205b16:	fb0c f708 	mul.w	r7, ip, r8
80205b1a:	bf34      	ite	cc
80205b1c:	eba2 4207 	subcc.w	r2, r2, r7, lsl #16
80205b20:	ebb2 4207 	subscs.w	r2, r2, r7, lsl #16
80205b24:	eb61 4117 	sbc.w	r1, r1, r7, lsr #16
80205b28:	ea4f 3181 	mov.w	r1, r1, lsl #14
80205b2c:	ea41 4192 	orr.w	r1, r1, r2, lsr #18
80205b30:	ea4f 3282 	mov.w	r2, r2, lsl #14
80205b34:	ea42 4290 	orr.w	r2, r2, r0, lsr #18
80205b38:	ea4f 3080 	mov.w	r0, r0, lsl #14
80205b3c:	ea4f 760c 	mov.w	r6, ip, lsl #28
80205b40:	eb15 151c 	adds.w	r5, r5, ip, lsr #4
80205b44:	f144 0400 	adc.w	r4, r4, #0
80205b48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
80205b4c:	ea4e 480b 	orr.w	r8, lr, fp, lsl #16
80205b50:	f04f 0e00 	mov.w	lr, #0
80205b54:	ebb2 0c08 	subs.w	ip, r2, r8
80205b58:	eb71 0703 	sbcs.w	r7, r1, r3
80205b5c:	bf24      	itt	cs
80205b5e:	4662      	movcs	r2, ip
80205b60:	4639      	movcs	r1, r7
80205b62:	eb4e 0e0e 	adc.w	lr, lr, lr
80205b66:	f04f 0b00 	mov.w	fp, #0
80205b6a:	1800      	adds	r0, r0, r0
80205b6c:	4152      	adcs	r2, r2
80205b6e:	4149      	adcs	r1, r1
80205b70:	eb4b 0b0b 	adc.w	fp, fp, fp
80205b74:	ebb2 0c08 	subs.w	ip, r2, r8
80205b78:	eb71 0703 	sbcs.w	r7, r1, r3
80205b7c:	f17b 0b00 	sbcs.w	fp, fp, #0
80205b80:	bf24      	itt	cs
80205b82:	4662      	movcs	r2, ip
80205b84:	4639      	movcs	r1, r7
80205b86:	eb4e 0e0e 	adc.w	lr, lr, lr
80205b8a:	f04f 0b00 	mov.w	fp, #0
80205b8e:	1800      	adds	r0, r0, r0
80205b90:	4152      	adcs	r2, r2
80205b92:	4149      	adcs	r1, r1
80205b94:	eb4b 0b0b 	adc.w	fp, fp, fp
80205b98:	ebb2 0c08 	subs.w	ip, r2, r8
80205b9c:	eb71 0703 	sbcs.w	r7, r1, r3
80205ba0:	f17b 0b00 	sbcs.w	fp, fp, #0
80205ba4:	bf24      	itt	cs
80205ba6:	4662      	movcs	r2, ip
80205ba8:	4639      	movcs	r1, r7
80205baa:	eb4e 0e0e 	adc.w	lr, lr, lr
80205bae:	ea51 0702 	orrs.w	r7, r1, r2
80205bb2:	bf18      	it	ne
80205bb4:	f046 0601 	orrne.w	r6, r6, #1
80205bb8:	eb16 760e 	adds.w	r6, r6, lr, lsl #28
80205bbc:	f155 0200 	adcs.w	r2, r5, #0
80205bc0:	f154 0100 	adcs.w	r1, r4, #0
80205bc4:	d503      	bpl.n	80205bce <__btod_div_common+0x2a2>
80205bc6:	e8bd 0189 	ldmia.w	sp!, {r0, r3, r7, r8}
80205bca:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
80205bce:	e8bd 0189 	ldmia.w	sp!, {r0, r3, r7, r8}
80205bd2:	e8bd 4800 	ldmia.w	sp!, {fp, lr}
80205bd6:	19b6      	adds	r6, r6, r6
80205bd8:	4152      	adcs	r2, r2
80205bda:	eb41 0101 	adc.w	r1, r1, r1
80205bde:	f1a3 0301 	sub.w	r3, r3, #1
80205be2:	4770      	bx	lr
80205be4:	7e7f8080 	.word	0x7e7f8080
80205be8:	7a7b7c7d 	.word	0x7a7b7c7d
80205bec:	76777879 	.word	0x76777879
80205bf0:	73747576 	.word	0x73747576
80205bf4:	70717172 	.word	0x70717172
80205bf8:	6d6e6e6f 	.word	0x6d6e6e6f
80205bfc:	6a6b6c6c 	.word	0x6a6b6c6c
80205c00:	6868696a 	.word	0x6868696a
80205c04:	65666667 	.word	0x65666667
80205c08:	63636464 	.word	0x63636464
80205c0c:	60616162 	.word	0x60616162
80205c10:	5e5f5f60 	.word	0x5e5f5f60
80205c14:	5c5d5d5e 	.word	0x5c5d5d5e
80205c18:	5a5b5b5c 	.word	0x5a5b5b5c
80205c1c:	5859595a 	.word	0x5859595a
80205c20:	56575758 	.word	0x56575758
80205c24:	55555556 	.word	0x55555556
80205c28:	53535454 	.word	0x53535454
80205c2c:	51525252 	.word	0x51525252
80205c30:	50505051 	.word	0x50505051
80205c34:	4e4f4f4f 	.word	0x4e4f4f4f
80205c38:	4d4d4d4e 	.word	0x4d4d4d4e
80205c3c:	4b4c4c4c 	.word	0x4b4c4c4c
80205c40:	4a4a4b4b 	.word	0x4a4a4b4b
80205c44:	4949494a 	.word	0x4949494a
80205c48:	47484848 	.word	0x47484848
80205c4c:	46474747 	.word	0x46474747
80205c50:	45454646 	.word	0x45454646
80205c54:	44444445 	.word	0x44444445
80205c58:	43434344 	.word	0x43434344
80205c5c:	42424243 	.word	0x42424243
80205c60:	41414142 	.word	0x41414142

80205c64 <_e2e>:
_e2e():
80205c64:	469c      	mov	ip, r3
80205c66:	2b00      	cmp	r3, #0
80205c68:	d430      	bmi.n	80205ccc <_e2e+0x68>
80205c6a:	0077      	lsls	r7, r6, #1
80205c6c:	d02b      	beq.n	80205cc6 <_e2e+0x62>
80205c6e:	ea4f 0737 	mov.w	r7, r7, rrx
80205c72:	b51c      	push	{r2, r3, r4, lr}
80205c74:	b403      	push	{r0, r1}
80205c76:	f04f 0010 	mov.w	r0, #16
80205c7a:	f04f 0110 	mov.w	r1, #16
80205c7e:	f1ba 0f00 	cmp.w	sl, #0
80205c82:	d006      	beq.n	80205c92 <_e2e+0x2e>
80205c84:	f1bc 0f00 	cmp.w	ip, #0
80205c88:	bfdc      	itt	le
80205c8a:	f040 0008 	orrle.w	r0, r0, #8
80205c8e:	f040 0108 	orrle.w	r1, r0, #8
80205c92:	f04f 0000 	mov.w	r0, #0
80205c96:	bc0f      	pop	{r0, r1, r2, r3}
80205c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
80205c9c:	f10b 0b01 	add.w	fp, fp, #1
80205ca0:	f1bb 0f01 	cmp.w	fp, #1
80205ca4:	bf08      	it	eq
80205ca6:	ea5f 0717 	movseq.w	r7, r7, lsr #32
80205caa:	bf22      	ittt	cs
80205cac:	f112 0201 	addscs.w	r2, r2, #1
80205cb0:	f111 0101 	addscs.w	r1, r1, #1
80205cb4:	f04f 4100 	movcs.w	r1, #2147483648	@ 0x80000000
80205cb8:	f143 0300 	adc.w	r3, r3, #0
80205cbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
80205cc0:	ea43 0000 	orr.w	r0, r3, r0
80205cc4:	4770      	bx	lr
80205cc6:	d3f9      	bcc.n	80205cbc <_e2e+0x58>
80205cc8:	0857      	lsrs	r7, r2, #1
80205cca:	e7d0      	b.n	80205c6e <_e2e+0xa>
80205ccc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
80205cd0:	ea4f 4616 	mov.w	r6, r6, lsr #16
80205cd4:	f113 0f40 	cmn.w	r3, #64	@ 0x40
80205cd8:	dd1f      	ble.n	80205d1a <_e2e+0xb6>
80205cda:	f113 0f20 	cmn.w	r3, #32
80205cde:	bfdf      	itttt	le
80205ce0:	4316      	orrle	r6, r2
80205ce2:	460a      	movle	r2, r1
80205ce4:	2100      	movle	r1, #0
80205ce6:	3320      	addle	r3, #32
80205ce8:	425b      	negs	r3, r3
80205cea:	d0be      	beq.n	80205c6a <_e2e+0x6>
80205cec:	f1c3 0720 	rsb	r7, r3, #32
80205cf0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
80205cf4:	ea4f 4616 	mov.w	r6, r6, lsr #16
80205cf8:	fa02 f707 	lsl.w	r7, r2, r7
80205cfc:	ea46 0607 	orr.w	r6, r6, r7
80205d00:	fa22 f203 	lsr.w	r2, r2, r3
80205d04:	f1c3 0720 	rsb	r7, r3, #32
80205d08:	fa01 f707 	lsl.w	r7, r1, r7
80205d0c:	ea42 0207 	orr.w	r2, r2, r7
80205d10:	fa21 f103 	lsr.w	r1, r1, r3
80205d14:	f04f 0300 	mov.w	r3, #0
80205d18:	e7a7      	b.n	80205c6a <_e2e+0x6>
80205d1a:	ea46 0602 	orr.w	r6, r6, r2
80205d1e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
80205d22:	ea4f 4616 	mov.w	r6, r6, lsr #16
80205d26:	ea46 0601 	orr.w	r6, r6, r1
80205d2a:	bfbc      	itt	lt
80205d2c:	ea46 4606 	orrlt.w	r6, r6, r6, lsl #16
80205d30:	0c36      	lsrlt	r6, r6, #16
80205d32:	f04f 0300 	mov.w	r3, #0
80205d36:	f04f 0200 	mov.w	r2, #0
80205d3a:	f04f 0100 	mov.w	r1, #0
80205d3e:	e794      	b.n	80205c6a <_e2e+0x6>

80205d40 <_btod_ediv>:
_btod_ediv():
80205d40:	e92d 4c80 	stmdb	sp!, {r7, sl, fp, lr}
80205d44:	b470      	push	{r4, r5, r6}
80205d46:	469a      	mov	sl, r3
80205d48:	4693      	mov	fp, r2
80205d4a:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
80205d4e:	c807      	ldmia	r0, {r0, r1, r2}
80205d50:	ea31 0c40 	bics.w	ip, r1, r0, lsl #1
80205d54:	bf48      	it	mi
80205d56:	ea34 0c43 	bicsmi.w	ip, r4, r3, lsl #1
80205d5a:	d503      	bpl.n	80205d64 <_btod_ediv+0x24>
80205d5c:	f7ff fde6 	bl	8020592c <__btod_div_common>
80205d60:	f7ff ff80 	bl	80205c64 <_e2e>
80205d64:	bcf0      	pop	{r4, r5, r6, r7}
80205d66:	e8bd 8c00 	ldmia.w	sp!, {sl, fp, pc}

80205d6a <_btod_emul>:
_btod_emul():
80205d6a:	e92d 4c80 	stmdb	sp!, {r7, sl, fp, lr}
80205d6e:	b470      	push	{r4, r5, r6}
80205d70:	469a      	mov	sl, r3
80205d72:	4693      	mov	fp, r2
80205d74:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
80205d78:	c807      	ldmia	r0, {r0, r1, r2}
80205d7a:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
80205d7e:	bf08      	it	eq
80205d80:	f013 4f80 	tsteq.w	r3, #1073741824	@ 0x40000000
80205d84:	d103      	bne.n	80205d8e <_btod_emul+0x24>
80205d86:	f000 f805 	bl	80205d94 <__btod_mult_common>
80205d8a:	f7ff ff6b 	bl	80205c64 <_e2e>
80205d8e:	bcf0      	pop	{r4, r5, r6, r7}
80205d90:	e8bd 8c00 	ldmia.w	sp!, {sl, fp, pc}

80205d94 <__btod_mult_common>:
__btod_mult_common():
80205d94:	f020 477f 	bic.w	r7, r0, #4278190080	@ 0xff000000
80205d98:	f023 4c7f 	bic.w	ip, r3, #4278190080	@ 0xff000000
80205d9c:	ea80 0003 	eor.w	r0, r0, r3
80205da0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
80205da4:	eb07 030c 	add.w	r3, r7, ip
80205da8:	f5a3 537c 	sub.w	r3, r3, #16128	@ 0x3f00
80205dac:	f1a3 03fe 	sub.w	r3, r3, #254	@ 0xfe
80205db0:	f092 0f00 	teq	r2, #0
80205db4:	f000 80b3 	beq.w	80205f1e <__btod_mult_common+0x18a>
80205db8:	f095 0f00 	teq	r5, #0
80205dbc:	f000 8077 	beq.w	80205eae <__btod_mult_common+0x11a>
80205dc0:	e92d 4901 	stmdb	sp!, {r0, r8, fp, lr}
80205dc4:	ea4f 4011 	mov.w	r0, r1, lsr #16
80205dc8:	ea21 4800 	bic.w	r8, r1, r0, lsl #16
80205dcc:	ea4f 4614 	mov.w	r6, r4, lsr #16
80205dd0:	ea24 4706 	bic.w	r7, r4, r6, lsl #16
80205dd4:	fb00 fc06 	mul.w	ip, r0, r6
80205dd8:	fb08 f606 	mul.w	r6, r8, r6
80205ddc:	fb07 f808 	mul.w	r8, r7, r8
80205de0:	eb18 4806 	adds.w	r8, r8, r6, lsl #16
80205de4:	eb4c 4c16 	adc.w	ip, ip, r6, lsr #16
80205de8:	fb00 f707 	mul.w	r7, r0, r7
80205dec:	eb18 4807 	adds.w	r8, r8, r7, lsl #16
80205df0:	eb4c 4017 	adc.w	r0, ip, r7, lsr #16
80205df4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
80205df8:	ea22 4e0b 	bic.w	lr, r2, fp, lsl #16
80205dfc:	ea4f 4615 	mov.w	r6, r5, lsr #16
80205e00:	ea25 4706 	bic.w	r7, r5, r6, lsl #16
80205e04:	fb0b fc06 	mul.w	ip, fp, r6
80205e08:	fb0e f606 	mul.w	r6, lr, r6
80205e0c:	fb07 fe0e 	mul.w	lr, r7, lr
80205e10:	eb1e 4e06 	adds.w	lr, lr, r6, lsl #16
80205e14:	eb4c 4c16 	adc.w	ip, ip, r6, lsr #16
80205e18:	fb0b f707 	mul.w	r7, fp, r7
80205e1c:	eb1e 4e07 	adds.w	lr, lr, r7, lsl #16
80205e20:	eb4c 4b17 	adc.w	fp, ip, r7, lsr #16
80205e24:	eb18 080b 	adds.w	r8, r8, fp
80205e28:	f140 0000 	adc.w	r0, r0, #0
80205e2c:	eb18 0b0e 	adds.w	fp, r8, lr
80205e30:	eb58 0800 	adcs.w	r8, r8, r0
80205e34:	f140 0000 	adc.w	r0, r0, #0
80205e38:	1a8f      	subs	r7, r1, r2
80205e3a:	f04f 0100 	mov.w	r1, #0
80205e3e:	f04f 0600 	mov.w	r6, #0
80205e42:	bf3c      	itt	cc
80205e44:	43c9      	mvncc	r1, r1
80205e46:	1b66      	subcc	r6, r4, r5
80205e48:	bf14      	ite	ne
80205e4a:	ebb5 0c04 	subsne.w	ip, r5, r4
80205e4e:	2100      	moveq	r1, #0
80205e50:	bf3c      	itt	cc
80205e52:	43c9      	mvncc	r1, r1
80205e54:	1bf6      	subcc	r6, r6, r7
80205e56:	ea4f 4417 	mov.w	r4, r7, lsr #16
80205e5a:	ea27 4504 	bic.w	r5, r7, r4, lsl #16
80205e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
80205e62:	ea2c 4c07 	bic.w	ip, ip, r7, lsl #16
80205e66:	fb04 6207 	mla	r2, r4, r7, r6
80205e6a:	fb05 f707 	mul.w	r7, r5, r7
80205e6e:	fb0c f605 	mul.w	r6, ip, r5
80205e72:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
80205e76:	eb42 4217 	adc.w	r2, r2, r7, lsr #16
80205e7a:	fb04 fc0c 	mul.w	ip, r4, ip
80205e7e:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
80205e82:	eb42 421c 	adc.w	r2, r2, ip, lsr #16
80205e86:	eb1b 0606 	adds.w	r6, fp, r6
80205e8a:	eb58 0202 	adcs.w	r2, r8, r2
80205e8e:	4141      	adcs	r1, r0
80205e90:	ea4e 0e8e 	orr.w	lr, lr, lr, lsl #2
80205e94:	ea46 069e 	orr.w	r6, r6, lr, lsr #2
80205e98:	d501      	bpl.n	80205e9e <__btod_mult_common+0x10a>
80205e9a:	e8bd 8901 	ldmia.w	sp!, {r0, r8, fp, pc}
80205e9e:	19b6      	adds	r6, r6, r6
80205ea0:	4152      	adcs	r2, r2
80205ea2:	eb41 0101 	adc.w	r1, r1, r1
80205ea6:	f1a3 0301 	sub.w	r3, r3, #1
80205eaa:	e8bd 8901 	ldmia.w	sp!, {r0, r8, fp, pc}
80205eae:	ea4f 4514 	mov.w	r5, r4, lsr #16
80205eb2:	ea24 4605 	bic.w	r6, r4, r5, lsl #16
80205eb6:	ea4f 4711 	mov.w	r7, r1, lsr #16
80205eba:	ea21 4c07 	bic.w	ip, r1, r7, lsl #16
80205ebe:	fb05 f407 	mul.w	r4, r5, r7
80205ec2:	fb06 f707 	mul.w	r7, r6, r7
80205ec6:	fb0c f106 	mul.w	r1, ip, r6
80205eca:	eb11 4107 	adds.w	r1, r1, r7, lsl #16
80205ece:	eb44 4417 	adc.w	r4, r4, r7, lsr #16
80205ed2:	fb05 fc0c 	mul.w	ip, r5, ip
80205ed6:	eb11 410c 	adds.w	r1, r1, ip, lsl #16
80205eda:	eb44 441c 	adc.w	r4, r4, ip, lsr #16
80205ede:	ea4f 4712 	mov.w	r7, r2, lsr #16
80205ee2:	ea22 4c07 	bic.w	ip, r2, r7, lsl #16
80205ee6:	fb05 f207 	mul.w	r2, r5, r7
80205eea:	fb06 f707 	mul.w	r7, r6, r7
80205eee:	fb0c f606 	mul.w	r6, ip, r6
80205ef2:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
80205ef6:	eb42 4217 	adc.w	r2, r2, r7, lsr #16
80205efa:	fb05 fc0c 	mul.w	ip, r5, ip
80205efe:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
80205f02:	eb42 451c 	adc.w	r5, r2, ip, lsr #16
80205f06:	186a      	adds	r2, r5, r1
80205f08:	f154 0100 	adcs.w	r1, r4, #0
80205f0c:	bf48      	it	mi
80205f0e:	4770      	bxmi	lr
80205f10:	19b6      	adds	r6, r6, r6
80205f12:	4152      	adcs	r2, r2
80205f14:	eb41 0101 	adc.w	r1, r1, r1
80205f18:	f1a3 0301 	sub.w	r3, r3, #1
80205f1c:	4770      	bx	lr
80205f1e:	f095 0f00 	teq	r5, #0
80205f22:	d037      	beq.n	80205f94 <__btod_mult_common+0x200>
80205f24:	ea4f 4211 	mov.w	r2, r1, lsr #16
80205f28:	ea21 4602 	bic.w	r6, r1, r2, lsl #16
80205f2c:	ea4f 4714 	mov.w	r7, r4, lsr #16
80205f30:	ea24 4c07 	bic.w	ip, r4, r7, lsl #16
80205f34:	fb02 f107 	mul.w	r1, r2, r7
80205f38:	fb06 f707 	mul.w	r7, r6, r7
80205f3c:	fb0c f406 	mul.w	r4, ip, r6
80205f40:	eb14 4407 	adds.w	r4, r4, r7, lsl #16
80205f44:	eb41 4117 	adc.w	r1, r1, r7, lsr #16
80205f48:	fb02 fc0c 	mul.w	ip, r2, ip
80205f4c:	eb14 440c 	adds.w	r4, r4, ip, lsl #16
80205f50:	eb41 411c 	adc.w	r1, r1, ip, lsr #16
80205f54:	ea4f 4715 	mov.w	r7, r5, lsr #16
80205f58:	ea25 4c07 	bic.w	ip, r5, r7, lsl #16
80205f5c:	fb02 f507 	mul.w	r5, r2, r7
80205f60:	fb06 f707 	mul.w	r7, r6, r7
80205f64:	fb0c f606 	mul.w	r6, ip, r6
80205f68:	eb16 4607 	adds.w	r6, r6, r7, lsl #16
80205f6c:	eb45 4517 	adc.w	r5, r5, r7, lsr #16
80205f70:	fb02 fc0c 	mul.w	ip, r2, ip
80205f74:	eb16 460c 	adds.w	r6, r6, ip, lsl #16
80205f78:	eb45 421c 	adc.w	r2, r5, ip, lsr #16
80205f7c:	1912      	adds	r2, r2, r4
80205f7e:	f151 0100 	adcs.w	r1, r1, #0
80205f82:	bf48      	it	mi
80205f84:	4770      	bxmi	lr
80205f86:	19b6      	adds	r6, r6, r6
80205f88:	4152      	adcs	r2, r2
80205f8a:	eb41 0101 	adc.w	r1, r1, r1
80205f8e:	f1a3 0301 	sub.w	r3, r3, #1
80205f92:	4770      	bx	lr
80205f94:	ea4f 4514 	mov.w	r5, r4, lsr #16
80205f98:	ea24 4605 	bic.w	r6, r4, r5, lsl #16
80205f9c:	ea4f 4711 	mov.w	r7, r1, lsr #16
80205fa0:	ea21 4c07 	bic.w	ip, r1, r7, lsl #16
80205fa4:	fb05 f107 	mul.w	r1, r5, r7
80205fa8:	fb06 f707 	mul.w	r7, r6, r7
80205fac:	fb0c f206 	mul.w	r2, ip, r6
80205fb0:	eb12 4207 	adds.w	r2, r2, r7, lsl #16
80205fb4:	eb41 4117 	adc.w	r1, r1, r7, lsr #16
80205fb8:	fb05 fc0c 	mul.w	ip, r5, ip
80205fbc:	eb12 420c 	adds.w	r2, r2, ip, lsl #16
80205fc0:	eb51 411c 	adcs.w	r1, r1, ip, lsr #16
80205fc4:	f04f 0600 	mov.w	r6, #0
80205fc8:	bf48      	it	mi
80205fca:	4770      	bxmi	lr
80205fcc:	1892      	adds	r2, r2, r2
80205fce:	eb41 0101 	adc.w	r1, r1, r1
80205fd2:	f1a3 0301 	sub.w	r3, r3, #1
80205fd6:	4770      	bx	lr

80205fd8 <__ARM_fpclassify>:
__ARM_fpclassify():
80205fd8:	b403      	push	{r0, r1}
80205fda:	9801      	ldr	r0, [sp, #4]
80205fdc:	0041      	lsls	r1, r0, #1
80205fde:	9800      	ldr	r0, [sp, #0]
80205fe0:	ea50 20c1 	orrs.w	r0, r0, r1, lsl #11
80205fe4:	bf18      	it	ne
80205fe6:	2004      	movne	r0, #4
80205fe8:	0d4a      	lsrs	r2, r1, #21
80205fea:	bf18      	it	ne
80205fec:	f040 0001 	orrne.w	r0, r0, #1
80205ff0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
80205ff4:	ebb2 5f51 	cmp.w	r2, r1, lsr #21
80205ff8:	bf08      	it	eq
80205ffa:	f040 0002 	orreq.w	r0, r0, #2
80205ffe:	2801      	cmp	r0, #1
80206000:	bf08      	it	eq
80206002:	2005      	moveq	r0, #5
80206004:	b002      	add	sp, #8
80206006:	4770      	bx	lr

80206008 <_is_digit>:
_is_digit():
80206008:	3830      	subs	r0, #48	@ 0x30
8020600a:	280a      	cmp	r0, #10
8020600c:	d201      	bcs.n	80206012 <_is_digit+0xa>
8020600e:	2001      	movs	r0, #1
80206010:	4770      	bx	lr
80206012:	2000      	movs	r0, #0
80206014:	4770      	bx	lr

80206016 <fputc>:
fputc():
80206016:	688a      	ldr	r2, [r1, #8]
80206018:	2a00      	cmp	r2, #0
8020601a:	dc02      	bgt.n	80206022 <fputc+0xc>
8020601c:	2200      	movs	r2, #0
8020601e:	f7fb b859 	b.w	802010d4 <__flsbuf>
80206022:	1e52      	subs	r2, r2, #1
80206024:	608a      	str	r2, [r1, #8]
80206026:	684a      	ldr	r2, [r1, #4]
80206028:	b2c0      	uxtb	r0, r0
8020602a:	1c53      	adds	r3, r2, #1
8020602c:	604b      	str	r3, [r1, #4]
8020602e:	7010      	strb	r0, [r2, #0]
80206030:	4770      	bx	lr
	...

80206034 <_get_lc_numeric>:
_get_lc_numeric():
80206034:	b510      	push	{r4, lr}
80206036:	2900      	cmp	r1, #0
80206038:	d00a      	beq.n	80206050 <_get_lc_numeric+0x1c>
8020603a:	7808      	ldrb	r0, [r1, #0]
8020603c:	2800      	cmp	r0, #0
8020603e:	d007      	beq.n	80206050 <_get_lc_numeric+0x1c>
80206040:	4805      	ldr	r0, [pc, #20]	@ (80206058 <_get_lc_numeric+0x24>)
80206042:	4478      	add	r0, pc
80206044:	f7fa fd4c 	bl	80200ae0 <strcmp>
80206048:	2800      	cmp	r0, #0
8020604a:	d001      	beq.n	80206050 <_get_lc_numeric+0x1c>
8020604c:	2000      	movs	r0, #0
8020604e:	bd10      	pop	{r4, pc}
80206050:	4802      	ldr	r0, [pc, #8]	@ (8020605c <_get_lc_numeric+0x28>)
80206052:	4478      	add	r0, pc
80206054:	bd10      	pop	{r4, pc}
80206056:	0000      	.short	0x0000
80206058:	000006c6 	.word	0x000006c6
8020605c:	000006be 	.word	0x000006be

80206060 <_get_lc_ctype>:
_get_lc_ctype():
80206060:	b510      	push	{r4, lr}
80206062:	2900      	cmp	r1, #0
80206064:	d00a      	beq.n	8020607c <_get_lc_ctype+0x1c>
80206066:	7808      	ldrb	r0, [r1, #0]
80206068:	2800      	cmp	r0, #0
8020606a:	d007      	beq.n	8020607c <_get_lc_ctype+0x1c>
8020606c:	4805      	ldr	r0, [pc, #20]	@ (80206084 <_get_lc_ctype+0x24>)
8020606e:	4478      	add	r0, pc
80206070:	f7fa fd36 	bl	80200ae0 <strcmp>
80206074:	2800      	cmp	r0, #0
80206076:	d001      	beq.n	8020607c <_get_lc_ctype+0x1c>
80206078:	2000      	movs	r0, #0
8020607a:	bd10      	pop	{r4, pc}
8020607c:	4802      	ldr	r0, [pc, #8]	@ (80206088 <_get_lc_ctype+0x28>)
8020607e:	4478      	add	r0, pc
80206080:	bd10      	pop	{r4, pc}
80206082:	0000      	.short	0x0000
80206084:	000006b6 	.word	0x000006b6
80206088:	000006ae 	.word	0x000006ae

8020608c <_fp_init>:
_fp_init():
8020608c:	eef1 0a10 	vmrs	r0, fpscr
80206090:	f64f 71ff 	movw	r1, #65535	@ 0xffff
80206094:	f2c0 31c0 	movt	r1, #960	@ 0x3c0
80206098:	ea20 0001 	bic.w	r0, r0, r1
8020609c:	f040 7040 	orr.w	r0, r0, #50331648	@ 0x3000000
802060a0:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
802060a4:	eee1 0a10 	vmsr	fpscr, r0

802060a8 <__fplib_config_fpu_vfp>:
__fplib_config_fpu_vfp():
802060a8:	4770      	bx	lr

802060aa <_printf_fp_dec>:
_printf_fp_dec():
802060aa:	f7fb bc9f 	b.w	802019ec <_printf_fp_dec_real>

802060ae <_printf_fp_hex>:
_printf_fp_hex():
802060ae:	f7fb bdd3 	b.w	80201c58 <_printf_fp_hex_real>

802060b2 <__stdin_name>:
__I$use$fp():
802060b2:	743a 0074                                   :tt.

802060b6 <__stdout_name>:
802060b6:	743a 0074                                   :tt.

802060ba <__stderr_name>:
802060ba:	743a 0074 0000                              :tt...

802060c0 <initial_mbstate>:
	...

802060c8 <uc_hextab>:
802060c8:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
802060d8:	3040 0058                                   @0X.

802060dc <lc_hextab>:
802060dc:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
802060ec:	3040 0078                                   @0x.

802060f0 <maptable>:
802060f0:	0004 0800 0000 0000 0000 0200 0100 0000     ................
80206100:	                                             .

80206101 <lc_hextab>:
80206101:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
80206111:	7078                                         xp.

80206114 <uc_hextab>:
80206114:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
80206124:	5058 0000                                   XP..

80206128 <tenpwrs_x>:
80206128:	4002 0000 0000 a000 0000 0000 4005 0000     .@...........@..
80206138:	0000 c800 0000 0000 400c 0000 0000 9c40     .........@....@.
80206148:	0000 0000 4019 0000 2000 bebc 0000 0000     .....@... ......
80206158:	4034 0000 c9bf 8e1b 0000 0400               4@..........

80206164 <tenpwrs_i>:
80206164:	40b5 0000 4b50 d0cf 0766 cfe2 0001 0000     .@..PK..f.......
80206174:	416c 0000 823e aa51 eedf 34a7 0001 0000     lA..>.Q....4....
80206184:	42d9 0000 b5dc e2a0 303a 971f ffff ffff     .B......:0......
80206194:	45b4 0000 25fd c8a0 a3e9 4fc1 ffff ffff     .E...%.....O....
802061a4:	3fff 0000 0000 8000 0000 0000 3fff 0000     .?...........?..
802061b4:	0000 8000 0000 0000                         ........

802061bc <_DoInit._aInitStr>:
802061bc:	0000 0000 0000 5454 2052 4552 4747 5345     ......TTR REGGES
	...

802061cd <_PrintUnsigned._aV2C>:
802061cd:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
	...

802061de <main::instr>:
802061de:	6801 f101 0103 6001 4770                    .h.....`pG

802061e8 <ufsr_bits>:
802061e8:	4409 5649 5942 455a 4f52 5508 414e 494c     .DIVBYZERO.UNALI
802061f8:	4e47 4445 5304 4b54 464f 4e03 434f 0250     GNED.STKOF.NOCP.
80206208:	4e49 5056 0143 4e49 5356 4154 4554 5500     INVPC.INVSTATE.U
80206218:	444e 4645 4e49 5453 2052                     NDEFINSTR .

80206223 <mmfsr_bits>:
80206223:	4d07 414d 5652 4c41 4449 4d05 534c 4550     .MMARVALID.MLSPE
80206233:	5252 4d04 5453 454b 5252 4d03 4e55 5453     RR.MSTKERR.MUNST
80206243:	454b 5252 4401 4341 5643 4f49 004c 4149     KERR.DACCVIOL.IA
80206253:	4343 4956 4c4f 0020                         CCVIOL .

8020625b <bfsr_bits>:
8020625b:	4207 4146 5652 4c41 4449 4c05 5053 5245     .BFARVALID.LSPER
8020626b:	0452 5453 454b 5252 5503 534e 4b54 5245     R.STKERR.UNSTKER
8020627b:	0252 4d49 5250 4345 5349 5245 0152 5250     R.IMPRECISERR.PR
8020628b:	4345 5349 5245 0052 4249 5355 5245 2052     ECISERR.IBUSERR 
	...

8020629c <afsr_bits>:
8020629c:	461e 4f50 5349 4e4f 461d 4754 1c55 4546     .FPOISON.FTGU.FE
802062ac:	4343 4618 414d 4958 461b 414d 4958 5954     CC.FMAXI.FMAXITY
802062bc:	4550 443d 4345 5245 1652 4446 4354 154d     PE=DECERR.FDTCM.
802062cc:	4946 4354 134d 5050 494f 4f53 124e 5450     FITCM.PPOISON.PT
802062dc:	5547 5011 4345 0f43 4950 5050 0e42 4550     GU.PECC.PIPPB.PE
802062ec:	5050 0d42 4d50 5841 1049 4d50 5841 5449     PPB.PMAXI.PMAXIT
802062fc:	5059 3d45 4544 4543 5252 500c 4150 4248     YPE=DECERR.PPAHB
8020630c:	500b 5444 4d43 500a 5449 4d43 4909 4f50     .PDTCM.PITCM.IPO
8020631c:	5349 4e4f 4907 4345 0443 4549 5050 0342     ISON.IECC.IEPPB.
8020632c:	4d49 5841 0649 4d49 5841 5449 5059 3d45     IMAXI.IMAXITYPE=
8020633c:	4544 4543 5252 4902 4150 4248 4901 5444     DECERR.IPAHB.IDT
8020634c:	4d43 4900 5449 4d43 0020                    CM.IITCM .

80206356 <sfsr_bits>:
80206356:	4c07 4553 5252 5306 4146 5652 4c41 4449     .LSERR.SFARVALID
80206366:	4c05 5053 5245 0452 4e49 5456 4152 034e     .LSPERR.INVTRAN.
80206376:	5541 4956 4c4f 4902 564e 5245 4901 564e     AUVIOL.INVER.INV
80206386:	5349 4900 564e 5045 0020                    IS.INVEP .

80206390 <dfsr_bits>:
80206390:	5005 554d 4504 5458 5245 414e 034c 4356     .PMU.EXTERNAL.VC
802063a0:	5441 4843 4402 5457 5254 5041 4201 504b     ATCH.DWTTRAP.BKP
802063b0:	0054 4148 544c 4445 0020                    T.HALTED .

802063ba <hfsr_bits>:
802063ba:	441f 4245 4755 5645 1e54 4f46 4352 4445     .DEBUGEVT.FORCED
802063ca:	5601 4345 4254 204c 0000                    .VECTBL ..

802063d4 <FaultNames>:
802063d4:	661b 8020 65f5 8020 663c 8020 6625 8020     .f ..e .<f .%f .
802063e4:	6630 8020 6607 8020                         0f ..f .

802063ec <flag_names>:
802063ec:	5a4e 5643 4951 5449 3030 3042 4747 4747     NZCVQIIT00B0GGGG
	...

802063fd <.L.str>:
802063fd:	6156 206c 654e 2077 6425                    Val New %d

80206407 <.L.str.31>:
80206407:	000a                                        ..

80206409 <.L.str.15>:
80206409:	3d0a 3d3d 203d 7325 6520 6378 7065 6974     .==== %s excepti
80206419:	6e6f 3d20 3d3d 0a3d 000a                    on ====...

80206423 <.L.str.25>:
80206423:	3d0a 3d3d 203d 7453 6361 206b 7564 706d     .==== Stack dump
80206433:	3d20 3d3d 0a3d 000a                          ====...

8020643b <.L.str>:
8020643b:	2121 2021 6e49 6520 6378 7065 6974 6e6f     !!! In exception
8020644b:	2520 2064 2121 0a21                           %d !!!..

80206454 <.L.str.16>:
80206454:	450a 4358 525f 5445 5255 204e 203d 3025     .EXC_RETURN = %0
80206464:	5838 0a0a 6552 6967 7473 7265 6420 6d75     8X..Register dum
80206474:	2070 7328 6f74 6572 2064 7461 2620 3025     p (stored at &%0
80206484:	5838 2029 7369 0a3a                          8X) is:..

8020648d <.L.str.24>:
8020648d:	7453 6361 206b 6f74 2070 7266 6d6f 5620     Stack top from V
8020649d:	4f54 3a52 2520 3830 0a58                     TOR: %08X..

802064a8 <.L.str.18>:
802064a8:	5053 2020 203d 3025 5838 4c20 2052 3d20     SP  = %08X LR  =
802064b8:	2520 3830 2058 4350 2020 203d 3025 5838      %08X PC  = %08X
802064c8:	000a                                        ..

802064ca <.L.str.10>:
802064ca:	4642 5241 2020 203d 3025 5838 000a          BFAR  = %08X..

802064d8 <.L.str.8>:
802064d8:	4d4d 4146 2052 203d 3025 5838 000a          MMFAR = %08X..

802064e6 <.L.str.22>:
802064e6:	5350 2052 203d 3025 5838 000a               PSR = %08X..

802064f2 <.L.str.26>:
802064f2:	6441 7264 7365 2073 3a20 2020 2020 3320     Address  :     3
80206502:	3220 3120 3020 2020 2020 3720 3620 3520      2 1 0     7 6 5
80206512:	3420 2020 2020 4220 4120 3920 3820 2020      4     B A 9 8  
80206522:	2020 4620 4520 4420 4320 2020 2020 2020        F E D C      
80206532:	4120 4353 4949 4420 7461 0a61                 ASCII Data..

8020653f <.L.str.23>:
8020653f:	7845 6563 7470 6f69 206e 6425 000a          Exception %d..

8020654d <.L.str.29>:
8020654d:	2020 2020 2020 2020                                 

80206555 <.L.str.30>:
80206555:	2020 2020                                        .

8020655a <.L.str.4>:
8020655a:	202c                                         , .

8020655d <.L.str.19>:
8020655d:	6f4d 6564 2520 382d 6673 616c 7367 7320     Mode %-8sflags s
8020656d:	7465 203a                                    et: .

80206572 <.L.str.3>:
80206572:	2820                                          (.

80206575 <.L.str.27>:
80206575:	3025 5838 3a20                               %08X :.

8020657c <.L.str.9>:
8020657c:	4642 5253 2020 203d 3025 5832                BFSR  = %02X.

80206589 <.L.str.7>:
80206589:	4d4d 5346 2052 203d 3025 5832                MMFSR = %02X.

80206596 <.L.str.1>:
80206596:	4655 5253 2020 203d 3025 5834                UFSR  = %04X.

802065a3 <.L.str.28>:
802065a3:	2020 2020 3025 5838                              %08X.

802065ac <.L.str.11>:
802065ac:	4641 5253 2020 203d 3025 5838                AFSR  = %08X.

802065b9 <.L.str.13>:
802065b9:	4644 5253 2020 203d 3025 5838                DFSR  = %08X.

802065c6 <.L.str.14>:
802065c6:	4648 5253 2020 203d 3025 5838                HFSR  = %08X.

802065d3 <.L.str.12>:
802065d3:	4653 5253 2020 203d 3025 5838                SFSR  = %08X.

802065e0 <.L.str.17>:
802065e0:	2552 332d 3d64 2520 3830 2558 0063          R%-3d= %08X%c.

802065ee <.L.str.20>:
802065ee:	6854 6572 6461 4d00 6d65 614d 616e 6567     Thread.MemManage
	...

802065ff <.L.str.21>:
802065ff:	6148 646e 656c 0072 6544 7562 4d67 6e6f     Handler.DebugMon
8020660f:	7469 726f                                    itor.

80206614 <.L.str.2>:
80206614:	7325 2e25 732a 4800 7261 4664 7561 746c     %s%.*s.HardFault
80206624:	5500 6173 6567 6146 6c75 0074 6553 7563     .UsageFault.Secu
80206634:	6572 6146 6c75 0074 7542 4673 7561 746c     reFault.BusFault

80206644 <.L.str.5>:
	...

80206645 <.L.str>:
80206645:	6554 6d72 6e69 6c61                          Terminal.

8020664e <.L.str>:
8020664e:	4e28 4c55                                    (NULL

80206653 <.L.str.6>:
80206653:	0029                                        ).

80206655 <.L.str>:
80206655:	5f5f 7863 5f61 7567 7261 5f64 6361 7571     __cxa_guard_acqu
80206665:	7269 2065 6564 6574 7463 6465 7220 6365     ire detected rec
80206675:	7275 6973 6576 6920 696e 6974 6c61 7a69     ursive initializ
80206685:	7461 6f69 3a6e 6420 206f 6f79 2075 6168     ation: do you ha
80206695:	6576 6120 6620 6e75 7463 6f69 2d6e 6f6c     ve a function-lo
802066a5:	6163 206c 7473 7461 6369 7620 7261 6169     cal static varia
802066b5:	6c62 2065 6877 736f 2065 6e69 7469 6169     ble whose initia
802066c5:	696c 617a 6974 6e6f 6420 7065 6e65 7364     lization depends
802066d5:	6f20 206e 6874 7461 6620 6e75 7463 6f69      on that functio
802066e5:	3f6e                                         n?.

802066e8 <Region$$Table$$Base>:
Region$$Table$$Base():
802066e8:	80206898 	.word	0x80206898
802066ec:	20000000 	.word	0x20000000
802066f0:	00000630 	.word	0x00000630
802066f4:	80200824 	.word	0x80200824
802066f8:	80206ec8 	.word	0x80206ec8
802066fc:	20000630 	.word	0x20000630
80206700:	00000b80 	.word	0x00000b80
80206704:	80200844 	.word	0x80200844

80206708 <Region$$Table$$Limit>:
Region$$Table$$Limit():
80206708:	0000001c 	.word	0x0000001c

8020670c <__lcnum_c_name>:
8020670c:	00000043 fffffff8                       C.......

80206714 <__lcnum_c_start>:
80206714:	0000000c 0000000e 0000000f              ............

80206720 <__lcnum_c_point>:
80206720:	                                         ..

80206722 <__lcnum_c_thousands>:
	...

80206723 <__lcnum_c_grouping>:
	...

80206724 <__lcnum_c_end>:
80206724:	00000110                                ....

80206728 <__lcctype_c_name>:
80206728:	00000043 fffffff8                       C.......

80206730 <__lcctype_c_start>:
	...

80206731 <__ctype>:
80206731:	40404040 40404040 41414140 40404141     @@@@@@@@@AAAAA@@
80206741:	40404040 40404040 40404040 40404040     @@@@@@@@@@@@@@@@
80206751:	02020205 02020202 02020202 02020202     ................
80206761:	20202020 20202020 02022020 02020202               ......
80206771:	90909002 10909090 10101010 10101010     ................
80206781:	10101010 10101010 02101010 02020202     ................
80206791:	88888802 08888888 08080808 08080808     ................
802067a1:	08080808 08080808 02080808 40020202     ...............@
	...

80206834 <MPU_Load_Regions.mpu_table>:
80206834:	02000002 023fffe1 08000002 0827ffe5     ......?.......'.
80206844:	1a000003 1affffe3 58000012 5803ffe5     ...........X...X
80206854:	58800012 5883ffe5 80000006 8057ffe7     ...X...X......W.
80206864:	83000003 83ffffe3 a0000002 bfffffe5     ................
80206874:	c0000006 dfffffe7                       ........

8020687c <ns_regions>:
8020687c:	20004000 20003fff 00000001              .@. .?. ....

80206888 <SHT$$INIT_ARRAY$$Base>:
SHT$$INIT_ARRAY$$Base():
80206888:	ffffe095 	.word	0xffffe095
8020688c:	ffffe0dd 	.word	0xffffe0dd
80206890:	ffffe121 	.word	0xffffe121
