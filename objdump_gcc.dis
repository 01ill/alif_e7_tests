
out/jit_test/HP/debug/jit_test.elf:	file format elf32-littlearm
architecture: arm
start address: 0x802007c1

Sections:
Idx Name               Size     VMA      LMA      Type
  0                    00000000 00000000 00000000 
  1 .startup.at_mram   00001200 80200000 80200000 TEXT
  2 .copy.table        00000020 80201200 80201200 DATA
  3 .data.at_dtcm      00000d80 20000000 80210a60 DATA
  4 .code.at_itcm      0000f820 00000000 80201240 TEXT
  5 .zero.table        00000020 80201220 80201220 DATA
  6 .bss               00000c60 20000d80 20000d80 BSS
  7 .nonsecure0_region 00002620 200019e0 200019e0 BSS
  8 .__app_heap        00004000 20004000 20004000 BSS
  9 .heap              00004000 20008000 20008000 BSS
 10 .stack             00002000 200fe000 200fe000 BSS
 11 .readonly.at_mram  00000950 802117e0 802117e0 TEXT
 12 .ARM.attributes    0000003a 00000000 00000000 
 13 .comment           00000045 00000000 00000000 
 14 .debug_line_str    000002c1 00000000 00000000 DEBUG
 15 .debug_info        00011beb 00000000 00000000 DEBUG
 16 .debug_abbrev      00002e08 00000000 00000000 DEBUG
 17 .debug_aranges     00000350 00000000 00000000 DEBUG
 18 .debug_rnglists    000000c7 00000000 00000000 DEBUG
 19 .debug_macro       000152c6 00000000 00000000 DEBUG
 20 .debug_line        0000ae9f 00000000 00000000 DEBUG
 21 .debug_str         00042382 00000000 00000000 DEBUG
 22 .debug_frame       00006b70 00000000 00000000 DEBUG
 23 .symtab            0000a5b0 00000000 00000000 
 24 .strtab            0000589e 00000000 00000000 
 25 .shstrtab          00000136 00000000 00000000 

SYMBOL TABLE:
80200000 l    d  .startup.at_mram	00000000 .startup.at_mram
80201200 l    d  .copy.table	00000000 .copy.table
20000000 l    d  .data.at_dtcm	00000000 .data.at_dtcm
00000000 l    d  .code.at_itcm	00000000 .code.at_itcm
80201220 l    d  .zero.table	00000000 .zero.table
20000d80 l    d  .bss	00000000 .bss
200019e0 l    d  .nonsecure0_region	00000000 .nonsecure0_region
20004000 l    d  .__app_heap	00000000 .__app_heap
20008000 l    d  .heap	00000000 .heap
200fe000 l    d  .stack	00000000 .stack
802117e0 l    d  .readonly.at_mram	00000000 .readonly.at_mram
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_M55_HP.c
80200000 l       .startup.at_mram	00000000 $d
802007c0 l       .startup.at_mram	00000000 $t
8020085c l       .startup.at_mram	00000000 $d
8020086c l       .startup.at_mram	00000000 $t
8020087c l       .startup.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 system_M55.c
80200884 l       .startup.at_mram	00000000 $t
80200884 l     F .startup.at_mram	00000020 enable_force_peripheral_functional_clk
802008a0 l       .startup.at_mram	00000000 $d
802008a4 l       .startup.at_mram	00000000 $t
802008a4 l     F .startup.at_mram	00000020 enable_force_apb_interface_clk
802008c0 l       .startup.at_mram	00000000 $d
200005b4 l       .data.at_dtcm	00000000 $d
802008c4 l       .startup.at_mram	00000000 $t
802008d8 l       .startup.at_mram	00000000 $d
802008e0 l       .startup.at_mram	00000000 $t
802008f4 l       .startup.at_mram	00000000 $d
802008f8 l       .startup.at_mram	00000000 $t
802009a8 l       .startup.at_mram	00000000 $d
802117f8 l       .readonly.at_mram	00000000 $d
802009b0 l       .startup.at_mram	00000000 $t
80200a30 l       .startup.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 system_utils.c
80200a48 l       .startup.at_mram	00000000 $t
80200b08 l       .startup.at_mram	00000000 $d
80200b24 l       .startup.at_mram	00000000 $t
80200ba0 l       .startup.at_mram	00000000 $d
80200ba8 l       .startup.at_mram	00000000 $t
00000000 l    df *ABS*	00000000 tgu_M55.c
802011e8 l       .startup.at_mram	00000000 $d
802011e8 l     O .startup.at_mram	0000000c ns_regions
80200c50 l       .startup.at_mram	00000000 $t
80200dfc l       .startup.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 mpu_M55.c
80200e10 l       .startup.at_mram	00000000 $t
80200e10 l     F .startup.at_mram	00000044 ARM_MPU_Enable
80200e4c l       .startup.at_mram	00000000 $d
80200e54 l       .startup.at_mram	00000000 $t
80200e54 l     F .startup.at_mram	00000040 ARM_MPU_Disable
80200e8c l       .startup.at_mram	00000000 $d
80200e94 l       .startup.at_mram	00000000 $t
80200e94 l     F .startup.at_mram	0000006a ARM_MPU_SetMemAttrEx
80200efe l     F .startup.at_mram	0000002a ARM_MPU_SetMemAttr
80200f24 l       .startup.at_mram	00000000 $d
80200f28 l       .startup.at_mram	00000000 $t
80200f28 l     F .startup.at_mram	00000022 ARM_MPU_ClrRegionEx
80200f4a l     F .startup.at_mram	0000001e ARM_MPU_ClrRegion
80200f64 l       .startup.at_mram	00000000 $d
80200f68 l       .startup.at_mram	00000000 $t
80200f68 l     F .startup.at_mram	00000042 ARM_MPU_OrderedMemcpy
80200faa l     F .startup.at_mram	000000ba ARM_MPU_LoadEx
80201064 l     F .startup.at_mram	00000024 ARM_MPU_Load
80201084 l       .startup.at_mram	00000000 $d
802011a0 l       .startup.at_mram	00000000 $d
802011a0 l     O .startup.at_mram	00000048 mpu_table.0
80201088 l       .startup.at_mram	00000000 $t
802010bc l       .startup.at_mram	00000000 $d
802010c0 l       .startup.at_mram	00000000 $t
802010f8 l       .startup.at_mram	00000000 $d
802010fc l       .startup.at_mram	00000000 $t
80201124 l       .startup.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 tcm_partition.c
80201128 l       .startup.at_mram	00000000 $t
80201128 l     F .startup.at_mram	00000040 SAU_TCM_NS_Setup
8020115c l       .startup.at_mram	00000000 $d
80201168 l       .startup.at_mram	00000000 $t
80201184 l       .startup.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 Driver_GPIO.c
00002c88 l       .code.at_itcm	00000000 $t
00002c88 l     F .code.at_itcm	0000003c __NVIC_EnableIRQ
00002cc0 l       .code.at_itcm	00000000 $d
00002cc4 l       .code.at_itcm	00000000 $t
00002cc4 l     F .code.at_itcm	00000048 __NVIC_DisableIRQ
00002d08 l       .code.at_itcm	00000000 $d
00002d0c l       .code.at_itcm	00000000 $t
00002d0c l     F .code.at_itcm	0000003c __NVIC_ClearPendingIRQ
00002d44 l       .code.at_itcm	00000000 $d
00002d48 l       .code.at_itcm	00000000 $t
00002d48 l     F .code.at_itcm	00000050 __NVIC_SetPriority
00002d90 l       .code.at_itcm	00000000 $d
00002d98 l       .code.at_itcm	00000000 $t
00002d98 l     F .code.at_itcm	0000002c gpio_set_direction_input
00002dc4 l     F .code.at_itcm	0000002a gpio_set_direction_output
00002dee l     F .code.at_itcm	00000036 gpio_get_direction
00002e24 l     F .code.at_itcm	0000002c gpio_set_value_low
00002e50 l     F .code.at_itcm	0000002a gpio_set_value_high
00002e7a l     F .code.at_itcm	0000002a gpio_toggle_value
00002ea4 l     F .code.at_itcm	00000030 gpio_get_value
00002ed4 l     F .code.at_itcm	00000018 gpio_read_config1
00002eec l     F .code.at_itcm	00000018 gpio_read_config2
00002f04 l     F .code.at_itcm	0000002a gpio_enable_interrupt
00002f2e l     F .code.at_itcm	0000002c gpio_disable_interrupt
00002f5a l     F .code.at_itcm	0000002a gpio_mask_interrupt
00002f84 l     F .code.at_itcm	0000002c gpio_unmask_interrupt
00002fb0 l     F .code.at_itcm	0000002a gpio_interrupt_set_both_edge_trigger
00002fda l     F .code.at_itcm	0000002c gpio_interrupt_set_level_trigger
00003006 l     F .code.at_itcm	0000002a gpio_interrupt_set_edge_trigger
00003030 l     F .code.at_itcm	0000002a gpio_interrupt_set_polarity_high
0000305a l     F .code.at_itcm	0000002c gpio_interrupt_set_polarity_low
00003086 l     F .code.at_itcm	0000002a gpio_enable_debounce
000030b0 l     F .code.at_itcm	0000002c gpio_disable_debounce
000030dc l     F .code.at_itcm	0000002e gpio_interrupt_eoi
0000310a l     F .code.at_itcm	00000034 gpio_is_flexio
0000313e l     F .code.at_itcm	00000034 lpgpio_is_flexio
00003172 l     F .code.at_itcm	0000002a gpio_set_hardware_mode
0000319c l     F .code.at_itcm	0000002c gpio_set_software_mode
000031c8 l     F .code.at_itcm	00000030 enable_gpio_debounce_clk
000031f4 l       .code.at_itcm	00000000 $d
000031f8 l       .code.at_itcm	00000000 $t
000031f8 l     F .code.at_itcm	00000030 disable_gpio_debounce_clk
00003224 l       .code.at_itcm	00000000 $d
00003228 l       .code.at_itcm	00000000 $t
00003228 l     F .code.at_itcm	00000038 set_gpio_debounce_clkdiv
0000325c l       .code.at_itcm	00000000 $d
00003260 l       .code.at_itcm	00000000 $t
00003260 l     F .code.at_itcm	00000018 set_flexio_gpio_voltage_1v8
00003274 l       .code.at_itcm	00000000 $d
00003278 l       .code.at_itcm	00000000 $t
00003278 l     F .code.at_itcm	0000001c set_flexio_gpio_voltage_3v3
00003290 l       .code.at_itcm	00000000 $d
00003294 l       .code.at_itcm	00000000 $t
00003294 l     F .code.at_itcm	00000048 GPIO_Initialize
000032dc l     F .code.at_itcm	0000007a GPIO_PowerControl
00003356 l     F .code.at_itcm	0000006c GPIO_SetDirection
000033c2 l     F .code.at_itcm	00000066 GPIO_GetDirection
00003428 l     F .code.at_itcm	00000084 GPIO_SetValue
000034ac l     F .code.at_itcm	0000005a GPIO_GetValue
00003506 l     F .code.at_itcm	0000031a GPIO_Control
00003548 l       .code.at_itcm	00000000 $d
00003564 l       .code.at_itcm	00000000 $t
00003820 l     F .code.at_itcm	0000004e GPIO_Uninitialize
0000386e l     F .code.at_itcm	0000003e GPIO_IRQ_Handler
20000000 l       .data.at_dtcm	00000000 $d
20000000 l     O .data.at_dtcm	00000038 GPIO0_RES
000038bc l       .code.at_itcm	00000000 $d
000038c0 l       .code.at_itcm	00000000 $t
000038d0 l       .code.at_itcm	00000000 $d
000038d4 l       .code.at_itcm	00000000 $t
000038e4 l       .code.at_itcm	00000000 $d
000038e8 l       .code.at_itcm	00000000 $t
000038f8 l       .code.at_itcm	00000000 $d
000038fc l       .code.at_itcm	00000000 $t
0000390c l       .code.at_itcm	00000000 $d
00003910 l       .code.at_itcm	00000000 $t
00003920 l       .code.at_itcm	00000000 $d
00003924 l       .code.at_itcm	00000000 $t
00003934 l       .code.at_itcm	00000000 $d
00003938 l       .code.at_itcm	00000000 $t
00003948 l       .code.at_itcm	00000000 $d
0000394c l       .code.at_itcm	00000000 $t
0000394c l     F .code.at_itcm	00000028 ARM_GPIO0_Initialize
00003970 l       .code.at_itcm	00000000 $d
00003974 l       .code.at_itcm	00000000 $t
00003974 l     F .code.at_itcm	0000002c ARM_GPIO0_PowerControl
0000399c l       .code.at_itcm	00000000 $d
000039a0 l       .code.at_itcm	00000000 $t
000039a0 l     F .code.at_itcm	0000002c ARM_GPIO0_SetDirection
000039c8 l       .code.at_itcm	00000000 $d
000039cc l       .code.at_itcm	00000000 $t
000039cc l     F .code.at_itcm	00000028 ARM_GPIO0_GetDirection
000039f0 l       .code.at_itcm	00000000 $d
000039f4 l       .code.at_itcm	00000000 $t
000039f4 l     F .code.at_itcm	0000002c ARM_GPIO0_SetValue
00003a1c l       .code.at_itcm	00000000 $d
00003a20 l       .code.at_itcm	00000000 $t
00003a20 l     F .code.at_itcm	00000028 ARM_GPIO0_GetValue
00003a44 l       .code.at_itcm	00000000 $d
00003a48 l       .code.at_itcm	00000000 $t
00003a48 l     F .code.at_itcm	0000002c ARM_GPIO0_Control
00003a70 l       .code.at_itcm	00000000 $d
00003a74 l       .code.at_itcm	00000000 $t
00003a74 l     F .code.at_itcm	00000024 ARM_GPIO0_Uninitialize
00003a94 l       .code.at_itcm	00000000 $d
20000038 l       .data.at_dtcm	00000000 $d
20000038 l     O .data.at_dtcm	00000038 GPIO1_RES
00003a98 l       .code.at_itcm	00000000 $t
00003aa8 l       .code.at_itcm	00000000 $d
00003aac l       .code.at_itcm	00000000 $t
00003abc l       .code.at_itcm	00000000 $d
00003ac0 l       .code.at_itcm	00000000 $t
00003ad0 l       .code.at_itcm	00000000 $d
00003ad4 l       .code.at_itcm	00000000 $t
00003ae4 l       .code.at_itcm	00000000 $d
00003ae8 l       .code.at_itcm	00000000 $t
00003af8 l       .code.at_itcm	00000000 $d
00003afc l       .code.at_itcm	00000000 $t
00003b0c l       .code.at_itcm	00000000 $d
00003b10 l       .code.at_itcm	00000000 $t
00003b20 l       .code.at_itcm	00000000 $d
00003b24 l       .code.at_itcm	00000000 $t
00003b34 l       .code.at_itcm	00000000 $d
00003b38 l       .code.at_itcm	00000000 $t
00003b38 l     F .code.at_itcm	00000028 ARM_GPIO1_Initialize
00003b5c l       .code.at_itcm	00000000 $d
00003b60 l       .code.at_itcm	00000000 $t
00003b60 l     F .code.at_itcm	0000002c ARM_GPIO1_PowerControl
00003b88 l       .code.at_itcm	00000000 $d
00003b8c l       .code.at_itcm	00000000 $t
00003b8c l     F .code.at_itcm	0000002c ARM_GPIO1_SetDirection
00003bb4 l       .code.at_itcm	00000000 $d
00003bb8 l       .code.at_itcm	00000000 $t
00003bb8 l     F .code.at_itcm	00000028 ARM_GPIO1_GetDirection
00003bdc l       .code.at_itcm	00000000 $d
00003be0 l       .code.at_itcm	00000000 $t
00003be0 l     F .code.at_itcm	0000002c ARM_GPIO1_SetValue
00003c08 l       .code.at_itcm	00000000 $d
00003c0c l       .code.at_itcm	00000000 $t
00003c0c l     F .code.at_itcm	00000028 ARM_GPIO1_GetValue
00003c30 l       .code.at_itcm	00000000 $d
00003c34 l       .code.at_itcm	00000000 $t
00003c34 l     F .code.at_itcm	0000002c ARM_GPIO1_Control
00003c5c l       .code.at_itcm	00000000 $d
00003c60 l       .code.at_itcm	00000000 $t
00003c60 l     F .code.at_itcm	00000024 ARM_GPIO1_Uninitialize
00003c80 l       .code.at_itcm	00000000 $d
20000070 l       .data.at_dtcm	00000000 $d
20000070 l     O .data.at_dtcm	00000038 GPIO2_RES
00003c84 l       .code.at_itcm	00000000 $t
00003c94 l       .code.at_itcm	00000000 $d
00003c98 l       .code.at_itcm	00000000 $t
00003ca8 l       .code.at_itcm	00000000 $d
00003cac l       .code.at_itcm	00000000 $t
00003cbc l       .code.at_itcm	00000000 $d
00003cc0 l       .code.at_itcm	00000000 $t
00003cd0 l       .code.at_itcm	00000000 $d
00003cd4 l       .code.at_itcm	00000000 $t
00003ce4 l       .code.at_itcm	00000000 $d
00003ce8 l       .code.at_itcm	00000000 $t
00003cf8 l       .code.at_itcm	00000000 $d
00003cfc l       .code.at_itcm	00000000 $t
00003d0c l       .code.at_itcm	00000000 $d
00003d10 l       .code.at_itcm	00000000 $t
00003d20 l       .code.at_itcm	00000000 $d
00003d24 l       .code.at_itcm	00000000 $t
00003d24 l     F .code.at_itcm	00000028 ARM_GPIO2_Initialize
00003d48 l       .code.at_itcm	00000000 $d
00003d4c l       .code.at_itcm	00000000 $t
00003d4c l     F .code.at_itcm	0000002c ARM_GPIO2_PowerControl
00003d74 l       .code.at_itcm	00000000 $d
00003d78 l       .code.at_itcm	00000000 $t
00003d78 l     F .code.at_itcm	0000002c ARM_GPIO2_SetDirection
00003da0 l       .code.at_itcm	00000000 $d
00003da4 l       .code.at_itcm	00000000 $t
00003da4 l     F .code.at_itcm	00000028 ARM_GPIO2_GetDirection
00003dc8 l       .code.at_itcm	00000000 $d
00003dcc l       .code.at_itcm	00000000 $t
00003dcc l     F .code.at_itcm	0000002c ARM_GPIO2_SetValue
00003df4 l       .code.at_itcm	00000000 $d
00003df8 l       .code.at_itcm	00000000 $t
00003df8 l     F .code.at_itcm	00000028 ARM_GPIO2_GetValue
00003e1c l       .code.at_itcm	00000000 $d
00003e20 l       .code.at_itcm	00000000 $t
00003e20 l     F .code.at_itcm	0000002c ARM_GPIO2_Control
00003e48 l       .code.at_itcm	00000000 $d
00003e4c l       .code.at_itcm	00000000 $t
00003e4c l     F .code.at_itcm	00000024 ARM_GPIO2_Uninitialize
00003e6c l       .code.at_itcm	00000000 $d
200000a8 l       .data.at_dtcm	00000000 $d
200000a8 l     O .data.at_dtcm	00000038 GPIO3_RES
00003e70 l       .code.at_itcm	00000000 $t
00003e80 l       .code.at_itcm	00000000 $d
00003e84 l       .code.at_itcm	00000000 $t
00003e94 l       .code.at_itcm	00000000 $d
00003e98 l       .code.at_itcm	00000000 $t
00003ea8 l       .code.at_itcm	00000000 $d
00003eac l       .code.at_itcm	00000000 $t
00003ebc l       .code.at_itcm	00000000 $d
00003ec0 l       .code.at_itcm	00000000 $t
00003ed0 l       .code.at_itcm	00000000 $d
00003ed4 l       .code.at_itcm	00000000 $t
00003ee4 l       .code.at_itcm	00000000 $d
00003ee8 l       .code.at_itcm	00000000 $t
00003ef8 l       .code.at_itcm	00000000 $d
00003efc l       .code.at_itcm	00000000 $t
00003f0c l       .code.at_itcm	00000000 $d
00003f10 l       .code.at_itcm	00000000 $t
00003f10 l     F .code.at_itcm	00000028 ARM_GPIO3_Initialize
00003f34 l       .code.at_itcm	00000000 $d
00003f38 l       .code.at_itcm	00000000 $t
00003f38 l     F .code.at_itcm	0000002c ARM_GPIO3_PowerControl
00003f60 l       .code.at_itcm	00000000 $d
00003f64 l       .code.at_itcm	00000000 $t
00003f64 l     F .code.at_itcm	0000002c ARM_GPIO3_SetDirection
00003f8c l       .code.at_itcm	00000000 $d
00003f90 l       .code.at_itcm	00000000 $t
00003f90 l     F .code.at_itcm	00000028 ARM_GPIO3_GetDirection
00003fb4 l       .code.at_itcm	00000000 $d
00003fb8 l       .code.at_itcm	00000000 $t
00003fb8 l     F .code.at_itcm	0000002c ARM_GPIO3_SetValue
00003fe0 l       .code.at_itcm	00000000 $d
00003fe4 l       .code.at_itcm	00000000 $t
00003fe4 l     F .code.at_itcm	00000028 ARM_GPIO3_GetValue
00004008 l       .code.at_itcm	00000000 $d
0000400c l       .code.at_itcm	00000000 $t
0000400c l     F .code.at_itcm	0000002c ARM_GPIO3_Control
00004034 l       .code.at_itcm	00000000 $d
00004038 l       .code.at_itcm	00000000 $t
00004038 l     F .code.at_itcm	00000024 ARM_GPIO3_Uninitialize
00004058 l       .code.at_itcm	00000000 $d
200000e0 l       .data.at_dtcm	00000000 $d
200000e0 l     O .data.at_dtcm	00000038 GPIO4_RES
0000405c l       .code.at_itcm	00000000 $t
0000406c l       .code.at_itcm	00000000 $d
00004070 l       .code.at_itcm	00000000 $t
00004080 l       .code.at_itcm	00000000 $d
00004084 l       .code.at_itcm	00000000 $t
00004094 l       .code.at_itcm	00000000 $d
00004098 l       .code.at_itcm	00000000 $t
000040a8 l       .code.at_itcm	00000000 $d
000040ac l       .code.at_itcm	00000000 $t
000040bc l       .code.at_itcm	00000000 $d
000040c0 l       .code.at_itcm	00000000 $t
000040d0 l       .code.at_itcm	00000000 $d
000040d4 l       .code.at_itcm	00000000 $t
000040e4 l       .code.at_itcm	00000000 $d
000040e8 l       .code.at_itcm	00000000 $t
000040f8 l       .code.at_itcm	00000000 $d
000040fc l       .code.at_itcm	00000000 $t
000040fc l     F .code.at_itcm	00000028 ARM_GPIO4_Initialize
00004120 l       .code.at_itcm	00000000 $d
00004124 l       .code.at_itcm	00000000 $t
00004124 l     F .code.at_itcm	0000002c ARM_GPIO4_PowerControl
0000414c l       .code.at_itcm	00000000 $d
00004150 l       .code.at_itcm	00000000 $t
00004150 l     F .code.at_itcm	0000002c ARM_GPIO4_SetDirection
00004178 l       .code.at_itcm	00000000 $d
0000417c l       .code.at_itcm	00000000 $t
0000417c l     F .code.at_itcm	00000028 ARM_GPIO4_GetDirection
000041a0 l       .code.at_itcm	00000000 $d
000041a4 l       .code.at_itcm	00000000 $t
000041a4 l     F .code.at_itcm	0000002c ARM_GPIO4_SetValue
000041cc l       .code.at_itcm	00000000 $d
000041d0 l       .code.at_itcm	00000000 $t
000041d0 l     F .code.at_itcm	00000028 ARM_GPIO4_GetValue
000041f4 l       .code.at_itcm	00000000 $d
000041f8 l       .code.at_itcm	00000000 $t
000041f8 l     F .code.at_itcm	0000002c ARM_GPIO4_Control
00004220 l       .code.at_itcm	00000000 $d
00004224 l       .code.at_itcm	00000000 $t
00004224 l     F .code.at_itcm	00000024 ARM_GPIO4_Uninitialize
00004244 l       .code.at_itcm	00000000 $d
20000118 l       .data.at_dtcm	00000000 $d
20000118 l     O .data.at_dtcm	00000038 GPIO5_RES
00004248 l       .code.at_itcm	00000000 $t
00004258 l       .code.at_itcm	00000000 $d
0000425c l       .code.at_itcm	00000000 $t
0000426c l       .code.at_itcm	00000000 $d
00004270 l       .code.at_itcm	00000000 $t
00004280 l       .code.at_itcm	00000000 $d
00004284 l       .code.at_itcm	00000000 $t
00004294 l       .code.at_itcm	00000000 $d
00004298 l       .code.at_itcm	00000000 $t
000042a8 l       .code.at_itcm	00000000 $d
000042ac l       .code.at_itcm	00000000 $t
000042bc l       .code.at_itcm	00000000 $d
000042c0 l       .code.at_itcm	00000000 $t
000042d0 l       .code.at_itcm	00000000 $d
000042d4 l       .code.at_itcm	00000000 $t
000042e4 l       .code.at_itcm	00000000 $d
000042e8 l       .code.at_itcm	00000000 $t
000042e8 l     F .code.at_itcm	00000028 ARM_GPIO5_Initialize
0000430c l       .code.at_itcm	00000000 $d
00004310 l       .code.at_itcm	00000000 $t
00004310 l     F .code.at_itcm	0000002c ARM_GPIO5_PowerControl
00004338 l       .code.at_itcm	00000000 $d
0000433c l       .code.at_itcm	00000000 $t
0000433c l     F .code.at_itcm	0000002c ARM_GPIO5_SetDirection
00004364 l       .code.at_itcm	00000000 $d
00004368 l       .code.at_itcm	00000000 $t
00004368 l     F .code.at_itcm	00000028 ARM_GPIO5_GetDirection
0000438c l       .code.at_itcm	00000000 $d
00004390 l       .code.at_itcm	00000000 $t
00004390 l     F .code.at_itcm	0000002c ARM_GPIO5_SetValue
000043b8 l       .code.at_itcm	00000000 $d
000043bc l       .code.at_itcm	00000000 $t
000043bc l     F .code.at_itcm	00000028 ARM_GPIO5_GetValue
000043e0 l       .code.at_itcm	00000000 $d
000043e4 l       .code.at_itcm	00000000 $t
000043e4 l     F .code.at_itcm	0000002c ARM_GPIO5_Control
0000440c l       .code.at_itcm	00000000 $d
00004410 l       .code.at_itcm	00000000 $t
00004410 l     F .code.at_itcm	00000024 ARM_GPIO5_Uninitialize
00004430 l       .code.at_itcm	00000000 $d
20000150 l       .data.at_dtcm	00000000 $d
20000150 l     O .data.at_dtcm	00000038 GPIO6_RES
00004434 l       .code.at_itcm	00000000 $t
00004444 l       .code.at_itcm	00000000 $d
00004448 l       .code.at_itcm	00000000 $t
00004458 l       .code.at_itcm	00000000 $d
0000445c l       .code.at_itcm	00000000 $t
0000446c l       .code.at_itcm	00000000 $d
00004470 l       .code.at_itcm	00000000 $t
00004480 l       .code.at_itcm	00000000 $d
00004484 l       .code.at_itcm	00000000 $t
00004494 l       .code.at_itcm	00000000 $d
00004498 l       .code.at_itcm	00000000 $t
000044a8 l       .code.at_itcm	00000000 $d
000044ac l       .code.at_itcm	00000000 $t
000044bc l       .code.at_itcm	00000000 $d
000044c0 l       .code.at_itcm	00000000 $t
000044d0 l       .code.at_itcm	00000000 $d
000044d4 l       .code.at_itcm	00000000 $t
000044d4 l     F .code.at_itcm	00000028 ARM_GPIO6_Initialize
000044f8 l       .code.at_itcm	00000000 $d
000044fc l       .code.at_itcm	00000000 $t
000044fc l     F .code.at_itcm	0000002c ARM_GPIO6_PowerControl
00004524 l       .code.at_itcm	00000000 $d
00004528 l       .code.at_itcm	00000000 $t
00004528 l     F .code.at_itcm	0000002c ARM_GPIO6_SetDirection
00004550 l       .code.at_itcm	00000000 $d
00004554 l       .code.at_itcm	00000000 $t
00004554 l     F .code.at_itcm	00000028 ARM_GPIO6_GetDirection
00004578 l       .code.at_itcm	00000000 $d
0000457c l       .code.at_itcm	00000000 $t
0000457c l     F .code.at_itcm	0000002c ARM_GPIO6_SetValue
000045a4 l       .code.at_itcm	00000000 $d
000045a8 l       .code.at_itcm	00000000 $t
000045a8 l     F .code.at_itcm	00000028 ARM_GPIO6_GetValue
000045cc l       .code.at_itcm	00000000 $d
000045d0 l       .code.at_itcm	00000000 $t
000045d0 l     F .code.at_itcm	0000002c ARM_GPIO6_Control
000045f8 l       .code.at_itcm	00000000 $d
000045fc l       .code.at_itcm	00000000 $t
000045fc l     F .code.at_itcm	00000024 ARM_GPIO6_Uninitialize
0000461c l       .code.at_itcm	00000000 $d
20000188 l       .data.at_dtcm	00000000 $d
20000188 l     O .data.at_dtcm	00000038 GPIO7_RES
00004620 l       .code.at_itcm	00000000 $t
00004630 l       .code.at_itcm	00000000 $d
00004634 l       .code.at_itcm	00000000 $t
00004644 l       .code.at_itcm	00000000 $d
00004648 l       .code.at_itcm	00000000 $t
00004658 l       .code.at_itcm	00000000 $d
0000465c l       .code.at_itcm	00000000 $t
0000466c l       .code.at_itcm	00000000 $d
00004670 l       .code.at_itcm	00000000 $t
00004680 l       .code.at_itcm	00000000 $d
00004684 l       .code.at_itcm	00000000 $t
00004694 l       .code.at_itcm	00000000 $d
00004698 l       .code.at_itcm	00000000 $t
000046a8 l       .code.at_itcm	00000000 $d
000046ac l       .code.at_itcm	00000000 $t
000046bc l       .code.at_itcm	00000000 $d
000046c0 l       .code.at_itcm	00000000 $t
000046c0 l     F .code.at_itcm	00000028 ARM_GPIO7_Initialize
000046e4 l       .code.at_itcm	00000000 $d
000046e8 l       .code.at_itcm	00000000 $t
000046e8 l     F .code.at_itcm	0000002c ARM_GPIO7_PowerControl
00004710 l       .code.at_itcm	00000000 $d
00004714 l       .code.at_itcm	00000000 $t
00004714 l     F .code.at_itcm	0000002c ARM_GPIO7_SetDirection
0000473c l       .code.at_itcm	00000000 $d
00004740 l       .code.at_itcm	00000000 $t
00004740 l     F .code.at_itcm	00000028 ARM_GPIO7_GetDirection
00004764 l       .code.at_itcm	00000000 $d
00004768 l       .code.at_itcm	00000000 $t
00004768 l     F .code.at_itcm	0000002c ARM_GPIO7_SetValue
00004790 l       .code.at_itcm	00000000 $d
00004794 l       .code.at_itcm	00000000 $t
00004794 l     F .code.at_itcm	00000028 ARM_GPIO7_GetValue
000047b8 l       .code.at_itcm	00000000 $d
000047bc l       .code.at_itcm	00000000 $t
000047bc l     F .code.at_itcm	0000002c ARM_GPIO7_Control
000047e4 l       .code.at_itcm	00000000 $d
000047e8 l       .code.at_itcm	00000000 $t
000047e8 l     F .code.at_itcm	00000024 ARM_GPIO7_Uninitialize
00004808 l       .code.at_itcm	00000000 $d
200001c0 l       .data.at_dtcm	00000000 $d
200001c0 l     O .data.at_dtcm	00000038 GPIO8_RES
0000480c l       .code.at_itcm	00000000 $t
0000481c l       .code.at_itcm	00000000 $d
00004820 l       .code.at_itcm	00000000 $t
00004830 l       .code.at_itcm	00000000 $d
00004834 l       .code.at_itcm	00000000 $t
00004844 l       .code.at_itcm	00000000 $d
00004848 l       .code.at_itcm	00000000 $t
00004858 l       .code.at_itcm	00000000 $d
0000485c l       .code.at_itcm	00000000 $t
0000486c l       .code.at_itcm	00000000 $d
00004870 l       .code.at_itcm	00000000 $t
00004880 l       .code.at_itcm	00000000 $d
00004884 l       .code.at_itcm	00000000 $t
00004894 l       .code.at_itcm	00000000 $d
00004898 l       .code.at_itcm	00000000 $t
000048a8 l       .code.at_itcm	00000000 $d
000048ac l       .code.at_itcm	00000000 $t
000048ac l     F .code.at_itcm	00000028 ARM_GPIO8_Initialize
000048d0 l       .code.at_itcm	00000000 $d
000048d4 l       .code.at_itcm	00000000 $t
000048d4 l     F .code.at_itcm	0000002c ARM_GPIO8_PowerControl
000048fc l       .code.at_itcm	00000000 $d
00004900 l       .code.at_itcm	00000000 $t
00004900 l     F .code.at_itcm	0000002c ARM_GPIO8_SetDirection
00004928 l       .code.at_itcm	00000000 $d
0000492c l       .code.at_itcm	00000000 $t
0000492c l     F .code.at_itcm	00000028 ARM_GPIO8_GetDirection
00004950 l       .code.at_itcm	00000000 $d
00004954 l       .code.at_itcm	00000000 $t
00004954 l     F .code.at_itcm	0000002c ARM_GPIO8_SetValue
0000497c l       .code.at_itcm	00000000 $d
00004980 l       .code.at_itcm	00000000 $t
00004980 l     F .code.at_itcm	00000028 ARM_GPIO8_GetValue
000049a4 l       .code.at_itcm	00000000 $d
000049a8 l       .code.at_itcm	00000000 $t
000049a8 l     F .code.at_itcm	0000002c ARM_GPIO8_Control
000049d0 l       .code.at_itcm	00000000 $d
000049d4 l       .code.at_itcm	00000000 $t
000049d4 l     F .code.at_itcm	00000024 ARM_GPIO8_Uninitialize
000049f4 l       .code.at_itcm	00000000 $d
200001f8 l       .data.at_dtcm	00000000 $d
200001f8 l     O .data.at_dtcm	00000038 GPIO9_RES
000049f8 l       .code.at_itcm	00000000 $t
00004a08 l       .code.at_itcm	00000000 $d
00004a0c l       .code.at_itcm	00000000 $t
00004a1c l       .code.at_itcm	00000000 $d
00004a20 l       .code.at_itcm	00000000 $t
00004a30 l       .code.at_itcm	00000000 $d
00004a34 l       .code.at_itcm	00000000 $t
00004a44 l       .code.at_itcm	00000000 $d
00004a48 l       .code.at_itcm	00000000 $t
00004a58 l       .code.at_itcm	00000000 $d
00004a5c l       .code.at_itcm	00000000 $t
00004a6c l       .code.at_itcm	00000000 $d
00004a70 l       .code.at_itcm	00000000 $t
00004a80 l       .code.at_itcm	00000000 $d
00004a84 l       .code.at_itcm	00000000 $t
00004a94 l       .code.at_itcm	00000000 $d
00004a98 l       .code.at_itcm	00000000 $t
00004a98 l     F .code.at_itcm	00000028 ARM_GPIO9_Initialize
00004abc l       .code.at_itcm	00000000 $d
00004ac0 l       .code.at_itcm	00000000 $t
00004ac0 l     F .code.at_itcm	0000002c ARM_GPIO9_PowerControl
00004ae8 l       .code.at_itcm	00000000 $d
00004aec l       .code.at_itcm	00000000 $t
00004aec l     F .code.at_itcm	0000002c ARM_GPIO9_SetDirection
00004b14 l       .code.at_itcm	00000000 $d
00004b18 l       .code.at_itcm	00000000 $t
00004b18 l     F .code.at_itcm	00000028 ARM_GPIO9_GetDirection
00004b3c l       .code.at_itcm	00000000 $d
00004b40 l       .code.at_itcm	00000000 $t
00004b40 l     F .code.at_itcm	0000002c ARM_GPIO9_SetValue
00004b68 l       .code.at_itcm	00000000 $d
00004b6c l       .code.at_itcm	00000000 $t
00004b6c l     F .code.at_itcm	00000028 ARM_GPIO9_GetValue
00004b90 l       .code.at_itcm	00000000 $d
00004b94 l       .code.at_itcm	00000000 $t
00004b94 l     F .code.at_itcm	0000002c ARM_GPIO9_Control
00004bbc l       .code.at_itcm	00000000 $d
00004bc0 l       .code.at_itcm	00000000 $t
00004bc0 l     F .code.at_itcm	00000024 ARM_GPIO9_Uninitialize
00004be0 l       .code.at_itcm	00000000 $d
20000230 l       .data.at_dtcm	00000000 $d
20000230 l     O .data.at_dtcm	00000038 GPIO10_RES
00004be4 l       .code.at_itcm	00000000 $t
00004bf4 l       .code.at_itcm	00000000 $d
00004bf8 l       .code.at_itcm	00000000 $t
00004c08 l       .code.at_itcm	00000000 $d
00004c0c l       .code.at_itcm	00000000 $t
00004c1c l       .code.at_itcm	00000000 $d
00004c20 l       .code.at_itcm	00000000 $t
00004c30 l       .code.at_itcm	00000000 $d
00004c34 l       .code.at_itcm	00000000 $t
00004c44 l       .code.at_itcm	00000000 $d
00004c48 l       .code.at_itcm	00000000 $t
00004c58 l       .code.at_itcm	00000000 $d
00004c5c l       .code.at_itcm	00000000 $t
00004c6c l       .code.at_itcm	00000000 $d
00004c70 l       .code.at_itcm	00000000 $t
00004c80 l       .code.at_itcm	00000000 $d
00004c84 l       .code.at_itcm	00000000 $t
00004c84 l     F .code.at_itcm	00000028 ARM_GPIO10_Initialize
00004ca8 l       .code.at_itcm	00000000 $d
00004cac l       .code.at_itcm	00000000 $t
00004cac l     F .code.at_itcm	0000002c ARM_GPIO10_PowerControl
00004cd4 l       .code.at_itcm	00000000 $d
00004cd8 l       .code.at_itcm	00000000 $t
00004cd8 l     F .code.at_itcm	0000002c ARM_GPIO10_SetDirection
00004d00 l       .code.at_itcm	00000000 $d
00004d04 l       .code.at_itcm	00000000 $t
00004d04 l     F .code.at_itcm	00000028 ARM_GPIO10_GetDirection
00004d28 l       .code.at_itcm	00000000 $d
00004d2c l       .code.at_itcm	00000000 $t
00004d2c l     F .code.at_itcm	0000002c ARM_GPIO10_SetValue
00004d54 l       .code.at_itcm	00000000 $d
00004d58 l       .code.at_itcm	00000000 $t
00004d58 l     F .code.at_itcm	00000028 ARM_GPIO10_GetValue
00004d7c l       .code.at_itcm	00000000 $d
00004d80 l       .code.at_itcm	00000000 $t
00004d80 l     F .code.at_itcm	0000002c ARM_GPIO10_Control
00004da8 l       .code.at_itcm	00000000 $d
00004dac l       .code.at_itcm	00000000 $t
00004dac l     F .code.at_itcm	00000024 ARM_GPIO10_Uninitialize
00004dcc l       .code.at_itcm	00000000 $d
20000268 l       .data.at_dtcm	00000000 $d
20000268 l     O .data.at_dtcm	00000038 GPIO11_RES
00004dd0 l       .code.at_itcm	00000000 $t
00004de0 l       .code.at_itcm	00000000 $d
00004de4 l       .code.at_itcm	00000000 $t
00004df4 l       .code.at_itcm	00000000 $d
00004df8 l       .code.at_itcm	00000000 $t
00004e08 l       .code.at_itcm	00000000 $d
00004e0c l       .code.at_itcm	00000000 $t
00004e1c l       .code.at_itcm	00000000 $d
00004e20 l       .code.at_itcm	00000000 $t
00004e30 l       .code.at_itcm	00000000 $d
00004e34 l       .code.at_itcm	00000000 $t
00004e44 l       .code.at_itcm	00000000 $d
00004e48 l       .code.at_itcm	00000000 $t
00004e58 l       .code.at_itcm	00000000 $d
00004e5c l       .code.at_itcm	00000000 $t
00004e6c l       .code.at_itcm	00000000 $d
00004e70 l       .code.at_itcm	00000000 $t
00004e70 l     F .code.at_itcm	00000028 ARM_GPIO11_Initialize
00004e94 l       .code.at_itcm	00000000 $d
00004e98 l       .code.at_itcm	00000000 $t
00004e98 l     F .code.at_itcm	0000002c ARM_GPIO11_PowerControl
00004ec0 l       .code.at_itcm	00000000 $d
00004ec4 l       .code.at_itcm	00000000 $t
00004ec4 l     F .code.at_itcm	0000002c ARM_GPIO11_SetDirection
00004eec l       .code.at_itcm	00000000 $d
00004ef0 l       .code.at_itcm	00000000 $t
00004ef0 l     F .code.at_itcm	00000028 ARM_GPIO11_GetDirection
00004f14 l       .code.at_itcm	00000000 $d
00004f18 l       .code.at_itcm	00000000 $t
00004f18 l     F .code.at_itcm	0000002c ARM_GPIO11_SetValue
00004f40 l       .code.at_itcm	00000000 $d
00004f44 l       .code.at_itcm	00000000 $t
00004f44 l     F .code.at_itcm	00000028 ARM_GPIO11_GetValue
00004f68 l       .code.at_itcm	00000000 $d
00004f6c l       .code.at_itcm	00000000 $t
00004f6c l     F .code.at_itcm	0000002c ARM_GPIO11_Control
00004f94 l       .code.at_itcm	00000000 $d
00004f98 l       .code.at_itcm	00000000 $t
00004f98 l     F .code.at_itcm	00000024 ARM_GPIO11_Uninitialize
00004fb8 l       .code.at_itcm	00000000 $d
200002a0 l       .data.at_dtcm	00000000 $d
200002a0 l     O .data.at_dtcm	00000038 GPIO12_RES
00004fbc l       .code.at_itcm	00000000 $t
00004fcc l       .code.at_itcm	00000000 $d
00004fd0 l       .code.at_itcm	00000000 $t
00004fe0 l       .code.at_itcm	00000000 $d
00004fe4 l       .code.at_itcm	00000000 $t
00004ff4 l       .code.at_itcm	00000000 $d
00004ff8 l       .code.at_itcm	00000000 $t
00005008 l       .code.at_itcm	00000000 $d
0000500c l       .code.at_itcm	00000000 $t
0000501c l       .code.at_itcm	00000000 $d
00005020 l       .code.at_itcm	00000000 $t
00005030 l       .code.at_itcm	00000000 $d
00005034 l       .code.at_itcm	00000000 $t
00005044 l       .code.at_itcm	00000000 $d
00005048 l       .code.at_itcm	00000000 $t
00005058 l       .code.at_itcm	00000000 $d
0000505c l       .code.at_itcm	00000000 $t
0000505c l     F .code.at_itcm	00000028 ARM_GPIO12_Initialize
00005080 l       .code.at_itcm	00000000 $d
00005084 l       .code.at_itcm	00000000 $t
00005084 l     F .code.at_itcm	0000002c ARM_GPIO12_PowerControl
000050ac l       .code.at_itcm	00000000 $d
000050b0 l       .code.at_itcm	00000000 $t
000050b0 l     F .code.at_itcm	0000002c ARM_GPIO12_SetDirection
000050d8 l       .code.at_itcm	00000000 $d
000050dc l       .code.at_itcm	00000000 $t
000050dc l     F .code.at_itcm	00000028 ARM_GPIO12_GetDirection
00005100 l       .code.at_itcm	00000000 $d
00005104 l       .code.at_itcm	00000000 $t
00005104 l     F .code.at_itcm	0000002c ARM_GPIO12_SetValue
0000512c l       .code.at_itcm	00000000 $d
00005130 l       .code.at_itcm	00000000 $t
00005130 l     F .code.at_itcm	00000028 ARM_GPIO12_GetValue
00005154 l       .code.at_itcm	00000000 $d
00005158 l       .code.at_itcm	00000000 $t
00005158 l     F .code.at_itcm	0000002c ARM_GPIO12_Control
00005180 l       .code.at_itcm	00000000 $d
00005184 l       .code.at_itcm	00000000 $t
00005184 l     F .code.at_itcm	00000024 ARM_GPIO12_Uninitialize
000051a4 l       .code.at_itcm	00000000 $d
200002d8 l       .data.at_dtcm	00000000 $d
200002d8 l     O .data.at_dtcm	00000038 GPIO13_RES
000051a8 l       .code.at_itcm	00000000 $t
000051b8 l       .code.at_itcm	00000000 $d
000051bc l       .code.at_itcm	00000000 $t
000051cc l       .code.at_itcm	00000000 $d
000051d0 l       .code.at_itcm	00000000 $t
000051e0 l       .code.at_itcm	00000000 $d
000051e4 l       .code.at_itcm	00000000 $t
000051f4 l       .code.at_itcm	00000000 $d
000051f8 l       .code.at_itcm	00000000 $t
00005208 l       .code.at_itcm	00000000 $d
0000520c l       .code.at_itcm	00000000 $t
0000521c l       .code.at_itcm	00000000 $d
00005220 l       .code.at_itcm	00000000 $t
00005230 l       .code.at_itcm	00000000 $d
00005234 l       .code.at_itcm	00000000 $t
00005244 l       .code.at_itcm	00000000 $d
00005248 l       .code.at_itcm	00000000 $t
00005248 l     F .code.at_itcm	00000028 ARM_GPIO13_Initialize
0000526c l       .code.at_itcm	00000000 $d
00005270 l       .code.at_itcm	00000000 $t
00005270 l     F .code.at_itcm	0000002c ARM_GPIO13_PowerControl
00005298 l       .code.at_itcm	00000000 $d
0000529c l       .code.at_itcm	00000000 $t
0000529c l     F .code.at_itcm	0000002c ARM_GPIO13_SetDirection
000052c4 l       .code.at_itcm	00000000 $d
000052c8 l       .code.at_itcm	00000000 $t
000052c8 l     F .code.at_itcm	00000028 ARM_GPIO13_GetDirection
000052ec l       .code.at_itcm	00000000 $d
000052f0 l       .code.at_itcm	00000000 $t
000052f0 l     F .code.at_itcm	0000002c ARM_GPIO13_SetValue
00005318 l       .code.at_itcm	00000000 $d
0000531c l       .code.at_itcm	00000000 $t
0000531c l     F .code.at_itcm	00000028 ARM_GPIO13_GetValue
00005340 l       .code.at_itcm	00000000 $d
00005344 l       .code.at_itcm	00000000 $t
00005344 l     F .code.at_itcm	0000002c ARM_GPIO13_Control
0000536c l       .code.at_itcm	00000000 $d
00005370 l       .code.at_itcm	00000000 $t
00005370 l     F .code.at_itcm	00000024 ARM_GPIO13_Uninitialize
00005390 l       .code.at_itcm	00000000 $d
20000310 l       .data.at_dtcm	00000000 $d
20000310 l     O .data.at_dtcm	00000038 GPIO14_RES
00005394 l       .code.at_itcm	00000000 $t
000053a4 l       .code.at_itcm	00000000 $d
000053a8 l       .code.at_itcm	00000000 $t
000053b8 l       .code.at_itcm	00000000 $d
000053bc l       .code.at_itcm	00000000 $t
000053cc l       .code.at_itcm	00000000 $d
000053d0 l       .code.at_itcm	00000000 $t
000053e0 l       .code.at_itcm	00000000 $d
000053e4 l       .code.at_itcm	00000000 $t
000053f4 l       .code.at_itcm	00000000 $d
000053f8 l       .code.at_itcm	00000000 $t
00005408 l       .code.at_itcm	00000000 $d
0000540c l       .code.at_itcm	00000000 $t
0000541c l       .code.at_itcm	00000000 $d
00005420 l       .code.at_itcm	00000000 $t
00005430 l       .code.at_itcm	00000000 $d
00005434 l       .code.at_itcm	00000000 $t
00005434 l     F .code.at_itcm	00000028 ARM_GPIO14_Initialize
00005458 l       .code.at_itcm	00000000 $d
0000545c l       .code.at_itcm	00000000 $t
0000545c l     F .code.at_itcm	0000002c ARM_GPIO14_PowerControl
00005484 l       .code.at_itcm	00000000 $d
00005488 l       .code.at_itcm	00000000 $t
00005488 l     F .code.at_itcm	0000002c ARM_GPIO14_SetDirection
000054b0 l       .code.at_itcm	00000000 $d
000054b4 l       .code.at_itcm	00000000 $t
000054b4 l     F .code.at_itcm	00000028 ARM_GPIO14_GetDirection
000054d8 l       .code.at_itcm	00000000 $d
000054dc l       .code.at_itcm	00000000 $t
000054dc l     F .code.at_itcm	0000002c ARM_GPIO14_SetValue
00005504 l       .code.at_itcm	00000000 $d
00005508 l       .code.at_itcm	00000000 $t
00005508 l     F .code.at_itcm	00000028 ARM_GPIO14_GetValue
0000552c l       .code.at_itcm	00000000 $d
00005530 l       .code.at_itcm	00000000 $t
00005530 l     F .code.at_itcm	0000002c ARM_GPIO14_Control
00005558 l       .code.at_itcm	00000000 $d
0000555c l       .code.at_itcm	00000000 $t
0000555c l     F .code.at_itcm	00000024 ARM_GPIO14_Uninitialize
0000557c l       .code.at_itcm	00000000 $d
20000348 l       .data.at_dtcm	00000000 $d
20000348 l     O .data.at_dtcm	00000038 LPGPIO_RES
00005580 l       .code.at_itcm	00000000 $t
00005590 l       .code.at_itcm	00000000 $d
00005594 l       .code.at_itcm	00000000 $t
000055a4 l       .code.at_itcm	00000000 $d
000055a8 l       .code.at_itcm	00000000 $t
000055b8 l       .code.at_itcm	00000000 $d
000055bc l       .code.at_itcm	00000000 $t
000055cc l       .code.at_itcm	00000000 $d
000055d0 l       .code.at_itcm	00000000 $t
000055e0 l       .code.at_itcm	00000000 $d
000055e4 l       .code.at_itcm	00000000 $t
000055f4 l       .code.at_itcm	00000000 $d
000055f8 l       .code.at_itcm	00000000 $t
00005608 l       .code.at_itcm	00000000 $d
0000560c l       .code.at_itcm	00000000 $t
0000561c l       .code.at_itcm	00000000 $d
00005620 l       .code.at_itcm	00000000 $t
00005620 l     F .code.at_itcm	00000028 ARM_LPGPIO_Initialize
00005644 l       .code.at_itcm	00000000 $d
00005648 l       .code.at_itcm	00000000 $t
00005648 l     F .code.at_itcm	0000002c ARM_LPGPIO_PowerControl
00005670 l       .code.at_itcm	00000000 $d
00005674 l       .code.at_itcm	00000000 $t
00005674 l     F .code.at_itcm	0000002c ARM_LPGPIO_SetDirection
0000569c l       .code.at_itcm	00000000 $d
000056a0 l       .code.at_itcm	00000000 $t
000056a0 l     F .code.at_itcm	00000028 ARM_LPGPIO_GetDirection
000056c4 l       .code.at_itcm	00000000 $d
000056c8 l       .code.at_itcm	00000000 $t
000056c8 l     F .code.at_itcm	0000002c ARM_LPGPIO_SetValue
000056f0 l       .code.at_itcm	00000000 $d
000056f4 l       .code.at_itcm	00000000 $t
000056f4 l     F .code.at_itcm	00000028 ARM_LPGPIO_GetValue
00005718 l       .code.at_itcm	00000000 $d
0000571c l       .code.at_itcm	00000000 $t
0000571c l     F .code.at_itcm	0000002c ARM_LPGPIO_Control
00005744 l       .code.at_itcm	00000000 $d
00005748 l       .code.at_itcm	00000000 $t
00005748 l     F .code.at_itcm	00000024 ARM_LPGPIO_Uninitialize
00005768 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 Driver_USART.c
0000576c l       .code.at_itcm	00000000 $t
0000576c l     F .code.at_itcm	0000003c __NVIC_EnableIRQ
000057a4 l       .code.at_itcm	00000000 $d
000057a8 l       .code.at_itcm	00000000 $t
000057a8 l     F .code.at_itcm	00000048 __NVIC_DisableIRQ
000057ec l       .code.at_itcm	00000000 $d
000057f0 l       .code.at_itcm	00000000 $t
000057f0 l     F .code.at_itcm	0000003c __NVIC_ClearPendingIRQ
00005828 l       .code.at_itcm	00000000 $d
0000582c l       .code.at_itcm	00000000 $t
0000582c l     F .code.at_itcm	00000050 __NVIC_SetPriority
00005874 l       .code.at_itcm	00000000 $d
0000587c l       .code.at_itcm	00000000 $t
0000587c l     F .code.at_itcm	0000001c uart_software_reset
00005898 l     F .code.at_itcm	00000020 uart_set_tx_trigger
000058b8 l     F .code.at_itcm	00000020 uart_set_rx_trigger
000058d8 l     F .code.at_itcm	00000020 uart_set_break_control
000058f8 l     F .code.at_itcm	00000020 uart_clear_break_control
00005918 l     F .code.at_itcm	0000001a uart_enable_fifo
00005932 l     F .code.at_itcm	0000001c uart_reset_txfifo
0000594e l     F .code.at_itcm	0000001c uart_reset_rxfifo
0000596a l     F .code.at_itcm	00000020 uart_enable_tx_irq
0000598a l     F .code.at_itcm	00000020 uart_disable_tx_irq
000059aa l     F .code.at_itcm	0000002c uart_enable_rx_irq
000059d6 l     F .code.at_itcm	0000002c uart_disable_rx_irq
00005a02 l     F .code.at_itcm	0000001a enable_lpuart_clock
00005a18 l       .code.at_itcm	00000000 $d
00005a1c l       .code.at_itcm	00000000 $t
00005a1c l     F .code.at_itcm	00000020 disable_lpuart_clock
00005a38 l       .code.at_itcm	00000000 $d
00005a3c l       .code.at_itcm	00000000 $t
00005a3c l     F .code.at_itcm	0000002c enable_uart_clock
00005a64 l       .code.at_itcm	00000000 $d
00005a68 l       .code.at_itcm	00000000 $t
00005a68 l     F .code.at_itcm	00000030 disable_uart_clock
00005a94 l       .code.at_itcm	00000000 $d
00005a98 l       .code.at_itcm	00000000 $t
00005a98 l     F .code.at_itcm	00000030 select_uart_clock_hfosc_clk
00005ac4 l       .code.at_itcm	00000000 $d
00005ac8 l       .code.at_itcm	00000000 $t
00005ac8 l     F .code.at_itcm	0000002c select_uart_clock_syst_pclk
00005af0 l       .code.at_itcm	00000000 $d
80211d24 l       .readonly.at_mram	00000000 $d
80211d24 l     O .readonly.at_mram	00000004 DriverVersion
80211d28 l       .readonly.at_mram	00000000 $d
80211d28 l     O .readonly.at_mram	00000004 DriverCapabilities
00005af4 l       .code.at_itcm	00000000 $t
00005af4 l     F .code.at_itcm	0000002c ARM_USART_GetVersion
00005b1c l       .code.at_itcm	00000000 $d
00005b20 l       .code.at_itcm	00000000 $t
00005b20 l     F .code.at_itcm	00000018 ARM_USART_GetCapabilities
00005b34 l       .code.at_itcm	00000000 $d
00005b38 l       .code.at_itcm	00000000 $t
00005b38 l     F .code.at_itcm	0000001c ARM_USART_GetCapabilities_WO_RTS_CTS
00005b54 l     F .code.at_itcm	00000168 ARM_USART_PowerControl
00005cbc l     F .code.at_itcm	000000b2 ARM_USART_Initialize
00005d6e l     F .code.at_itcm	000000ea ARM_USART_Uninitialize
00005e58 l     F .code.at_itcm	00000090 ARM_USART_Send
00005ee8 l     F .code.at_itcm	000000c8 ARM_USART_Receive
00005fb0 l     F .code.at_itcm	0000001e ARM_USART_Transfer
00005fce l     F .code.at_itcm	00000018 ARM_USART_GetTxCount
00005fe6 l     F .code.at_itcm	00000018 ARM_USART_GetRxCount
00005ffe l     F .code.at_itcm	00000192 UartAsynchronousModeCtrl
00006190 l     F .code.at_itcm	000001d6 ARM_USART_Control
000061c8 l       .code.at_itcm	00000000 $d
0000622c l       .code.at_itcm	00000000 $t
00006366 l     F .code.at_itcm	00000018 ARM_USART_GetStatus
0000637e l     F .code.at_itcm	0000001c ARM_USART_SetModemControl
0000639a l     F .code.at_itcm	0000001a ARM_USART_GetModemStatus
000063b4 l     F .code.at_itcm	00000160 UART_IRQHandler
20000380 l       .data.at_dtcm	00000000 $d
20000380 l     O .data.at_dtcm	00000044 UART0
00006524 l       .code.at_itcm	00000000 $d
00006528 l       .code.at_itcm	00000000 $t
00006528 l     F .code.at_itcm	00000020 UART0_Initialize
00006544 l       .code.at_itcm	00000000 $d
00006548 l       .code.at_itcm	00000000 $t
00006548 l     F .code.at_itcm	00000014 UART0_Uninitialize
00006558 l       .code.at_itcm	00000000 $d
0000655c l       .code.at_itcm	00000000 $t
0000655c l     F .code.at_itcm	00000024 UART0_PowerControl
0000657c l       .code.at_itcm	00000000 $d
00006580 l       .code.at_itcm	00000000 $t
00006580 l     F .code.at_itcm	00000024 UART0_Send
000065a0 l       .code.at_itcm	00000000 $d
000065a4 l       .code.at_itcm	00000000 $t
000065a4 l     F .code.at_itcm	00000024 UART0_Receive
000065c4 l       .code.at_itcm	00000000 $d
000065c8 l       .code.at_itcm	00000000 $t
000065c8 l     F .code.at_itcm	00000028 UART0_Transfer
000065ec l       .code.at_itcm	00000000 $d
000065f0 l       .code.at_itcm	00000000 $t
000065f0 l     F .code.at_itcm	00000014 UART0_GetTxCount
00006600 l       .code.at_itcm	00000000 $d
00006604 l       .code.at_itcm	00000000 $t
00006604 l     F .code.at_itcm	00000014 UART0_GetRxCount
00006614 l       .code.at_itcm	00000000 $d
00006618 l       .code.at_itcm	00000000 $t
00006618 l     F .code.at_itcm	00000024 UART0_Control
00006638 l       .code.at_itcm	00000000 $d
0000663c l       .code.at_itcm	00000000 $t
0000663c l     F .code.at_itcm	00000014 UART0_GetStatus
0000664c l       .code.at_itcm	00000000 $d
00006650 l       .code.at_itcm	00000000 $t
00006650 l     F .code.at_itcm	00000014 UART0_GetModemStatus
00006660 l       .code.at_itcm	00000000 $d
00006664 l       .code.at_itcm	00000000 $t
00006664 l     F .code.at_itcm	00000024 UART0_SetModemControl
00006684 l       .code.at_itcm	00000000 $d
200003c4 l       .data.at_dtcm	00000000 $d
200003c4 l     O .data.at_dtcm	00000044 UART1
00006688 l       .code.at_itcm	00000000 $t
00006698 l       .code.at_itcm	00000000 $d
0000669c l       .code.at_itcm	00000000 $t
0000669c l     F .code.at_itcm	00000020 UART1_Initialize
000066b8 l       .code.at_itcm	00000000 $d
000066bc l       .code.at_itcm	00000000 $t
000066bc l     F .code.at_itcm	00000014 UART1_Uninitialize
000066cc l       .code.at_itcm	00000000 $d
000066d0 l       .code.at_itcm	00000000 $t
000066d0 l     F .code.at_itcm	00000024 UART1_PowerControl
000066f0 l       .code.at_itcm	00000000 $d
000066f4 l       .code.at_itcm	00000000 $t
000066f4 l     F .code.at_itcm	00000024 UART1_Send
00006714 l       .code.at_itcm	00000000 $d
00006718 l       .code.at_itcm	00000000 $t
00006718 l     F .code.at_itcm	00000024 UART1_Receive
00006738 l       .code.at_itcm	00000000 $d
0000673c l       .code.at_itcm	00000000 $t
0000673c l     F .code.at_itcm	00000028 UART1_Transfer
00006760 l       .code.at_itcm	00000000 $d
00006764 l       .code.at_itcm	00000000 $t
00006764 l     F .code.at_itcm	00000014 UART1_GetTxCount
00006774 l       .code.at_itcm	00000000 $d
00006778 l       .code.at_itcm	00000000 $t
00006778 l     F .code.at_itcm	00000014 UART1_GetRxCount
00006788 l       .code.at_itcm	00000000 $d
0000678c l       .code.at_itcm	00000000 $t
0000678c l     F .code.at_itcm	00000024 UART1_Control
000067ac l       .code.at_itcm	00000000 $d
000067b0 l       .code.at_itcm	00000000 $t
000067b0 l     F .code.at_itcm	00000014 UART1_GetStatus
000067c0 l       .code.at_itcm	00000000 $d
000067c4 l       .code.at_itcm	00000000 $t
000067c4 l     F .code.at_itcm	00000014 UART1_GetModemStatus
000067d4 l       .code.at_itcm	00000000 $d
000067d8 l       .code.at_itcm	00000000 $t
000067d8 l     F .code.at_itcm	00000024 UART1_SetModemControl
000067f8 l       .code.at_itcm	00000000 $d
20000408 l       .data.at_dtcm	00000000 $d
20000408 l     O .data.at_dtcm	00000044 UART2
000067fc l       .code.at_itcm	00000000 $t
0000680c l       .code.at_itcm	00000000 $d
00006810 l       .code.at_itcm	00000000 $t
00006810 l     F .code.at_itcm	00000020 UART2_Initialize
0000682c l       .code.at_itcm	00000000 $d
00006830 l       .code.at_itcm	00000000 $t
00006830 l     F .code.at_itcm	00000014 UART2_Uninitialize
00006840 l       .code.at_itcm	00000000 $d
00006844 l       .code.at_itcm	00000000 $t
00006844 l     F .code.at_itcm	00000024 UART2_PowerControl
00006864 l       .code.at_itcm	00000000 $d
00006868 l       .code.at_itcm	00000000 $t
00006868 l     F .code.at_itcm	00000024 UART2_Send
00006888 l       .code.at_itcm	00000000 $d
0000688c l       .code.at_itcm	00000000 $t
0000688c l     F .code.at_itcm	00000024 UART2_Receive
000068ac l       .code.at_itcm	00000000 $d
000068b0 l       .code.at_itcm	00000000 $t
000068b0 l     F .code.at_itcm	00000028 UART2_Transfer
000068d4 l       .code.at_itcm	00000000 $d
000068d8 l       .code.at_itcm	00000000 $t
000068d8 l     F .code.at_itcm	00000014 UART2_GetTxCount
000068e8 l       .code.at_itcm	00000000 $d
000068ec l       .code.at_itcm	00000000 $t
000068ec l     F .code.at_itcm	00000014 UART2_GetRxCount
000068fc l       .code.at_itcm	00000000 $d
00006900 l       .code.at_itcm	00000000 $t
00006900 l     F .code.at_itcm	00000024 UART2_Control
00006920 l       .code.at_itcm	00000000 $d
00006924 l       .code.at_itcm	00000000 $t
00006924 l     F .code.at_itcm	00000014 UART2_GetStatus
00006934 l       .code.at_itcm	00000000 $d
00006938 l       .code.at_itcm	00000000 $t
00006938 l     F .code.at_itcm	00000014 UART2_GetModemStatus
00006948 l       .code.at_itcm	00000000 $d
0000694c l       .code.at_itcm	00000000 $t
0000694c l     F .code.at_itcm	00000024 UART2_SetModemControl
0000696c l       .code.at_itcm	00000000 $d
2000044c l       .data.at_dtcm	00000000 $d
2000044c l     O .data.at_dtcm	00000044 UART3
00006970 l       .code.at_itcm	00000000 $t
00006980 l       .code.at_itcm	00000000 $d
00006984 l       .code.at_itcm	00000000 $t
00006984 l     F .code.at_itcm	00000020 UART3_Initialize
000069a0 l       .code.at_itcm	00000000 $d
000069a4 l       .code.at_itcm	00000000 $t
000069a4 l     F .code.at_itcm	00000014 UART3_Uninitialize
000069b4 l       .code.at_itcm	00000000 $d
000069b8 l       .code.at_itcm	00000000 $t
000069b8 l     F .code.at_itcm	00000024 UART3_PowerControl
000069d8 l       .code.at_itcm	00000000 $d
000069dc l       .code.at_itcm	00000000 $t
000069dc l     F .code.at_itcm	00000024 UART3_Send
000069fc l       .code.at_itcm	00000000 $d
00006a00 l       .code.at_itcm	00000000 $t
00006a00 l     F .code.at_itcm	00000024 UART3_Receive
00006a20 l       .code.at_itcm	00000000 $d
00006a24 l       .code.at_itcm	00000000 $t
00006a24 l     F .code.at_itcm	00000028 UART3_Transfer
00006a48 l       .code.at_itcm	00000000 $d
00006a4c l       .code.at_itcm	00000000 $t
00006a4c l     F .code.at_itcm	00000014 UART3_GetTxCount
00006a5c l       .code.at_itcm	00000000 $d
00006a60 l       .code.at_itcm	00000000 $t
00006a60 l     F .code.at_itcm	00000014 UART3_GetRxCount
00006a70 l       .code.at_itcm	00000000 $d
00006a74 l       .code.at_itcm	00000000 $t
00006a74 l     F .code.at_itcm	00000024 UART3_Control
00006a94 l       .code.at_itcm	00000000 $d
00006a98 l       .code.at_itcm	00000000 $t
00006a98 l     F .code.at_itcm	00000014 UART3_GetStatus
00006aa8 l       .code.at_itcm	00000000 $d
00006aac l       .code.at_itcm	00000000 $t
00006aac l     F .code.at_itcm	00000014 UART3_GetModemStatus
00006abc l       .code.at_itcm	00000000 $d
00006ac0 l       .code.at_itcm	00000000 $t
00006ac0 l     F .code.at_itcm	00000024 UART3_SetModemControl
00006ae0 l       .code.at_itcm	00000000 $d
20000490 l       .data.at_dtcm	00000000 $d
20000490 l     O .data.at_dtcm	00000044 UART4
00006ae4 l       .code.at_itcm	00000000 $t
00006af4 l       .code.at_itcm	00000000 $d
00006af8 l       .code.at_itcm	00000000 $t
00006af8 l     F .code.at_itcm	00000020 UART4_Initialize
00006b14 l       .code.at_itcm	00000000 $d
00006b18 l       .code.at_itcm	00000000 $t
00006b18 l     F .code.at_itcm	00000014 UART4_Uninitialize
00006b28 l       .code.at_itcm	00000000 $d
00006b2c l       .code.at_itcm	00000000 $t
00006b2c l     F .code.at_itcm	00000024 UART4_PowerControl
00006b4c l       .code.at_itcm	00000000 $d
00006b50 l       .code.at_itcm	00000000 $t
00006b50 l     F .code.at_itcm	00000024 UART4_Send
00006b70 l       .code.at_itcm	00000000 $d
00006b74 l       .code.at_itcm	00000000 $t
00006b74 l     F .code.at_itcm	00000024 UART4_Receive
00006b94 l       .code.at_itcm	00000000 $d
00006b98 l       .code.at_itcm	00000000 $t
00006b98 l     F .code.at_itcm	00000028 UART4_Transfer
00006bbc l       .code.at_itcm	00000000 $d
00006bc0 l       .code.at_itcm	00000000 $t
00006bc0 l     F .code.at_itcm	00000014 UART4_GetTxCount
00006bd0 l       .code.at_itcm	00000000 $d
00006bd4 l       .code.at_itcm	00000000 $t
00006bd4 l     F .code.at_itcm	00000014 UART4_GetRxCount
00006be4 l       .code.at_itcm	00000000 $d
00006be8 l       .code.at_itcm	00000000 $t
00006be8 l     F .code.at_itcm	00000024 UART4_Control
00006c08 l       .code.at_itcm	00000000 $d
00006c0c l       .code.at_itcm	00000000 $t
00006c0c l     F .code.at_itcm	00000014 UART4_GetStatus
00006c1c l       .code.at_itcm	00000000 $d
00006c20 l       .code.at_itcm	00000000 $t
00006c20 l     F .code.at_itcm	00000014 UART4_GetModemStatus
00006c30 l       .code.at_itcm	00000000 $d
00006c34 l       .code.at_itcm	00000000 $t
00006c34 l     F .code.at_itcm	00000024 UART4_SetModemControl
00006c54 l       .code.at_itcm	00000000 $d
200004d4 l       .data.at_dtcm	00000000 $d
200004d4 l     O .data.at_dtcm	00000044 UART5
00006c58 l       .code.at_itcm	00000000 $t
00006c68 l       .code.at_itcm	00000000 $d
00006c6c l       .code.at_itcm	00000000 $t
00006c6c l     F .code.at_itcm	00000020 UART5_Initialize
00006c88 l       .code.at_itcm	00000000 $d
00006c8c l       .code.at_itcm	00000000 $t
00006c8c l     F .code.at_itcm	00000014 UART5_Uninitialize
00006c9c l       .code.at_itcm	00000000 $d
00006ca0 l       .code.at_itcm	00000000 $t
00006ca0 l     F .code.at_itcm	00000024 UART5_PowerControl
00006cc0 l       .code.at_itcm	00000000 $d
00006cc4 l       .code.at_itcm	00000000 $t
00006cc4 l     F .code.at_itcm	00000024 UART5_Send
00006ce4 l       .code.at_itcm	00000000 $d
00006ce8 l       .code.at_itcm	00000000 $t
00006ce8 l     F .code.at_itcm	00000024 UART5_Receive
00006d08 l       .code.at_itcm	00000000 $d
00006d0c l       .code.at_itcm	00000000 $t
00006d0c l     F .code.at_itcm	00000028 UART5_Transfer
00006d30 l       .code.at_itcm	00000000 $d
00006d34 l       .code.at_itcm	00000000 $t
00006d34 l     F .code.at_itcm	00000014 UART5_GetTxCount
00006d44 l       .code.at_itcm	00000000 $d
00006d48 l       .code.at_itcm	00000000 $t
00006d48 l     F .code.at_itcm	00000014 UART5_GetRxCount
00006d58 l       .code.at_itcm	00000000 $d
00006d5c l       .code.at_itcm	00000000 $t
00006d5c l     F .code.at_itcm	00000024 UART5_Control
00006d7c l       .code.at_itcm	00000000 $d
00006d80 l       .code.at_itcm	00000000 $t
00006d80 l     F .code.at_itcm	00000014 UART5_GetStatus
00006d90 l       .code.at_itcm	00000000 $d
00006d94 l       .code.at_itcm	00000000 $t
00006d94 l     F .code.at_itcm	00000014 UART5_GetModemStatus
00006da4 l       .code.at_itcm	00000000 $d
00006da8 l       .code.at_itcm	00000000 $t
00006da8 l     F .code.at_itcm	00000024 UART5_SetModemControl
00006dc8 l       .code.at_itcm	00000000 $d
20000518 l       .data.at_dtcm	00000000 $d
20000518 l     O .data.at_dtcm	00000044 UART6
00006dcc l       .code.at_itcm	00000000 $t
00006ddc l       .code.at_itcm	00000000 $d
00006de0 l       .code.at_itcm	00000000 $t
00006de0 l     F .code.at_itcm	00000020 UART6_Initialize
00006dfc l       .code.at_itcm	00000000 $d
00006e00 l       .code.at_itcm	00000000 $t
00006e00 l     F .code.at_itcm	00000014 UART6_Uninitialize
00006e10 l       .code.at_itcm	00000000 $d
00006e14 l       .code.at_itcm	00000000 $t
00006e14 l     F .code.at_itcm	00000024 UART6_PowerControl
00006e34 l       .code.at_itcm	00000000 $d
00006e38 l       .code.at_itcm	00000000 $t
00006e38 l     F .code.at_itcm	00000024 UART6_Send
00006e58 l       .code.at_itcm	00000000 $d
00006e5c l       .code.at_itcm	00000000 $t
00006e5c l     F .code.at_itcm	00000024 UART6_Receive
00006e7c l       .code.at_itcm	00000000 $d
00006e80 l       .code.at_itcm	00000000 $t
00006e80 l     F .code.at_itcm	00000028 UART6_Transfer
00006ea4 l       .code.at_itcm	00000000 $d
00006ea8 l       .code.at_itcm	00000000 $t
00006ea8 l     F .code.at_itcm	00000014 UART6_GetTxCount
00006eb8 l       .code.at_itcm	00000000 $d
00006ebc l       .code.at_itcm	00000000 $t
00006ebc l     F .code.at_itcm	00000014 UART6_GetRxCount
00006ecc l       .code.at_itcm	00000000 $d
00006ed0 l       .code.at_itcm	00000000 $t
00006ed0 l     F .code.at_itcm	00000024 UART6_Control
00006ef0 l       .code.at_itcm	00000000 $d
00006ef4 l       .code.at_itcm	00000000 $t
00006ef4 l     F .code.at_itcm	00000014 UART6_GetStatus
00006f04 l       .code.at_itcm	00000000 $d
00006f08 l       .code.at_itcm	00000000 $t
00006f08 l     F .code.at_itcm	00000014 UART6_GetModemStatus
00006f18 l       .code.at_itcm	00000000 $d
00006f1c l       .code.at_itcm	00000000 $t
00006f1c l     F .code.at_itcm	00000024 UART6_SetModemControl
00006f3c l       .code.at_itcm	00000000 $d
2000055c l       .data.at_dtcm	00000000 $d
2000055c l     O .data.at_dtcm	00000044 UART7
00006f40 l       .code.at_itcm	00000000 $t
00006f50 l       .code.at_itcm	00000000 $d
00006f54 l       .code.at_itcm	00000000 $t
00006f54 l     F .code.at_itcm	00000020 UART7_Initialize
00006f70 l       .code.at_itcm	00000000 $d
00006f74 l       .code.at_itcm	00000000 $t
00006f74 l     F .code.at_itcm	00000014 UART7_Uninitialize
00006f84 l       .code.at_itcm	00000000 $d
00006f88 l       .code.at_itcm	00000000 $t
00006f88 l     F .code.at_itcm	00000024 UART7_PowerControl
00006fa8 l       .code.at_itcm	00000000 $d
00006fac l       .code.at_itcm	00000000 $t
00006fac l     F .code.at_itcm	00000024 UART7_Send
00006fcc l       .code.at_itcm	00000000 $d
00006fd0 l       .code.at_itcm	00000000 $t
00006fd0 l     F .code.at_itcm	00000024 UART7_Receive
00006ff0 l       .code.at_itcm	00000000 $d
00006ff4 l       .code.at_itcm	00000000 $t
00006ff4 l     F .code.at_itcm	00000028 UART7_Transfer
00007018 l       .code.at_itcm	00000000 $d
0000701c l       .code.at_itcm	00000000 $t
0000701c l     F .code.at_itcm	00000014 UART7_GetTxCount
0000702c l       .code.at_itcm	00000000 $d
00007030 l       .code.at_itcm	00000000 $t
00007030 l     F .code.at_itcm	00000014 UART7_GetRxCount
00007040 l       .code.at_itcm	00000000 $d
00007044 l       .code.at_itcm	00000000 $t
00007044 l     F .code.at_itcm	00000024 UART7_Control
00007064 l       .code.at_itcm	00000000 $d
00007068 l       .code.at_itcm	00000000 $t
00007068 l     F .code.at_itcm	00000014 UART7_GetStatus
00007078 l       .code.at_itcm	00000000 $d
0000707c l       .code.at_itcm	00000000 $t
0000707c l     F .code.at_itcm	00000014 UART7_GetModemStatus
0000708c l       .code.at_itcm	00000000 $d
00007090 l       .code.at_itcm	00000000 $t
00007090 l     F .code.at_itcm	00000024 UART7_SetModemControl
000070b0 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 clk.c
200005a0 l       .data.at_dtcm	00000000 $d
200005a4 l       .data.at_dtcm	00000000 $d
200005a8 l       .data.at_dtcm	00000000 $d
200005ac l       .data.at_dtcm	00000000 $d
200005b0 l       .data.at_dtcm	00000000 $d
00007770 l       .code.at_itcm	00000000 $t
00007784 l       .code.at_itcm	00000000 $d
00007788 l       .code.at_itcm	00000000 $t
0000779c l       .code.at_itcm	00000000 $d
000077a0 l       .code.at_itcm	00000000 $t
000077b4 l       .code.at_itcm	00000000 $d
000077b8 l       .code.at_itcm	00000000 $t
000077cc l       .code.at_itcm	00000000 $d
000077d0 l       .code.at_itcm	00000000 $t
000077e4 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 findfp.c
00008c0c l       .code.at_itcm	00000000 $t
00008c0c l     F .code.at_itcm	00000018 stdio_exit_handler
00008c18 l       .code.at_itcm	00000000 $d
00008c24 l       .code.at_itcm	00000000 $t
00008c24 l     F .code.at_itcm	00000040 cleanup_stdio
00008c58 l       .code.at_itcm	00000000 $d
00008c64 l       .code.at_itcm	00000000 $t
00008c64 l     F .code.at_itcm	000000f0 global_stdio_init.part.0
00008d30 l       .code.at_itcm	00000000 $d
00008d54 l       .code.at_itcm	00000000 $t
00008d84 l       .code.at_itcm	00000000 $d
00008d90 l       .code.at_itcm	00000000 $t
00008d98 l       .code.at_itcm	00000000 $d
00008d9c l       .code.at_itcm	00000000 $t
00008da4 l       .code.at_itcm	00000000 $d
200005b8 l       .data.at_dtcm	00000000 $d
200016c4 l       .bss	00000000 $d
200017fc l       .bss	00000000 $d
00000000 l    df *ABS*	00000000 impure.c
200005c4 l       .data.at_dtcm	00000000 $d
200005c8 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 __call_atexit.c
00009074 l       .code.at_itcm	00000000 $t
00009074 l     F .code.at_itcm	00000014 register_fini
00009080 l       .code.at_itcm	00000000 $d
802117fc l       .readonly.at_mram	00000000 $d
00009088 l       .code.at_itcm	00000000 $t
0000913c l       .code.at_itcm	00000000 $d
2000180c l       .bss	00000000 $d
20000708 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 mallocr.c
00009150 l       .code.at_itcm	00000000 $t
0000945c l       .code.at_itcm	00000000 $d
00009478 l       .code.at_itcm	00000000 $t
000096c4 l       .code.at_itcm	00000000 $d
20001810 l       .bss	00000000 $d
20001838 l       .bss	00000000 $d
2000183c l       .bss	00000000 $d
2000070c l       .data.at_dtcm	00000000 $d
20001840 l       .bss	00000000 $d
20000710 l       .data.at_dtcm	00000000 $d
20000718 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 locale.c
0000c5ac l       .code.at_itcm	00000000 $t
0000c5b4 l       .code.at_itcm	00000000 $d
80211d74 l       .readonly.at_mram	00000000 $d
20000b20 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 main.cpp
20000d9c l       .bss	00000000 $d
20000da0 l       .bss	00000000 $d
20000da4 l       .bss	00000000 $d
20000da8 l       .bss	00000000 $d
000003b0 l       .code.at_itcm	00000000 $t
000003c0 l       .code.at_itcm	00000000 $d
20000cd8 l       .data.at_dtcm	00000000 $d
000003c4 l       .code.at_itcm	00000000 $t
000003e4 l       .code.at_itcm	00000000 $d
20000cd8 l       .data.at_dtcm	00000000 $d
000003ec l       .code.at_itcm	00000000 $t
0000040c l       .code.at_itcm	00000000 $d
20000cd8 l       .data.at_dtcm	00000000 $d
0000010c l       .code.at_itcm	00000000 $t
0000010c l     F .code.at_itcm	00000014 uart_callback(unsigned long)
20000cc8 l       .data.at_dtcm	00000000 $d
8021180c l       .readonly.at_mram	00000000 $d
8021180c l     O .readonly.at_mram	0000000a main::instr
80211818 l       .readonly.at_mram	00000000 $d
00000320 l       .code.at_itcm	00000000 $d
20000c90 l       .data.at_dtcm	00000000 $d
00000414 l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
00000436 l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
00000454 l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
00000476 l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
0000049c l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
000004c2 l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
000004ea l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
20000dac l       .bss	00000000 $d
20000db0 l       .bss	00000000 $d
20000db4 l       .bss	00000000 $d
0000032c l       .code.at_itcm	00000000 $t
0000032c l     F .code.at_itcm	00000078 __static_initialization_and_destruction_0()
00000388 l       .code.at_itcm	00000000 $d
000003a4 l       .code.at_itcm	00000000 $t
000003a4 l     F .code.at_itcm	0000000a _GLOBAL__sub_I_main
80211804 l       .readonly.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 Simple.cpp
00000646 l       .code.at_itcm	00000000 $t
20000c9c l       .data.at_dtcm	00000000 $d
20000cd8 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 Triad.cpp
0000068e l       .code.at_itcm	00000000 $t
20000ca8 l       .data.at_dtcm	00000000 $d
20000ce0 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 unwind-arm.c
00007b64 l       .code.at_itcm	00000000 $t
00007b64 l     F .code.at_itcm	00000012 selfrel_offset31
20000cf0 l       .data.at_dtcm	00000000 $d
00007b78 l       .code.at_itcm	00000000 $t
00007b78 l     F .code.at_itcm	0000005a search_EIT_table
20000cf0 l       .data.at_dtcm	00000000 $d
00007bd4 l       .code.at_itcm	00000000 $t
00007bd4 l     F .code.at_itcm	00000028 __gnu_unwind_get_pr_addr
00007bf0 l       .code.at_itcm	00000000 $d
20000cf0 l       .data.at_dtcm	00000000 $d
00007bfc l       .code.at_itcm	00000000 $t
00007bfc l     F .code.at_itcm	00000098 get_eit_entry
00007c88 l       .code.at_itcm	00000000 $d
20000cf0 l       .data.at_dtcm	00000000 $d
00007c94 l       .code.at_itcm	00000000 $t
00007c94 l     F .code.at_itcm	00000058 restore_non_core_regs
20000cf8 l       .data.at_dtcm	00000000 $d
00007cec l       .code.at_itcm	00000000 $t
00007cec l     F .code.at_itcm	0000000a _Unwind_decode_typeinfo_ptr.constprop.0
20000d00 l       .data.at_dtcm	00000000 $d
00007cf8 l       .code.at_itcm	00000000 $t
00007cf8 l     F .code.at_itcm	00000002 _Unwind_DebugHook
20000d08 l       .data.at_dtcm	00000000 $d
00007cfc l       .code.at_itcm	00000000 $t
00007cfc l     F .code.at_itcm	0000003e unwind_phase2
20000d08 l       .data.at_dtcm	00000000 $d
00007d3c l       .code.at_itcm	00000000 $t
00007d3c l     F .code.at_itcm	000000da unwind_phase2_forced
20000d10 l       .data.at_dtcm	00000000 $d
00007e18 l       .code.at_itcm	00000000 $t
20000d18 l       .data.at_dtcm	00000000 $d
00007e84 l       .code.at_itcm	00000000 $t
20000d20 l       .data.at_dtcm	00000000 $d
00007e98 l       .code.at_itcm	00000000 $t
20000d28 l       .data.at_dtcm	00000000 $d
00007edc l       .code.at_itcm	00000000 $t
20000cb4 l       .data.at_dtcm	00000000 $d
20000d30 l       .data.at_dtcm	00000000 $d
00007efc l       .code.at_itcm	00000000 $t
00007f04 l       .code.at_itcm	00000000 $d
00007f0a l       .code.at_itcm	00000000 $t
20000d38 l       .data.at_dtcm	00000000 $d
00007f30 l       .code.at_itcm	00000000 $t
00007f30 l     F .code.at_itcm	00000018 _Unwind_GetGR
20000d40 l       .data.at_dtcm	00000000 $d
00007f48 l       .code.at_itcm	00000000 $t
00007f50 l       .code.at_itcm	00000000 $d
00007f56 l       .code.at_itcm	00000000 $t
20000d40 l       .data.at_dtcm	00000000 $d
00007f7c l       .code.at_itcm	00000000 $t
00007f7c l     F .code.at_itcm	00000018 _Unwind_SetGR
20000d40 l       .data.at_dtcm	00000000 $d
00007f94 l       .code.at_itcm	00000000 $t
20000d40 l       .data.at_dtcm	00000000 $d
0000801c l       .code.at_itcm	00000000 $t
0000801c l     F .code.at_itcm	000002ac __gnu_unwind_pr_common
000082c4 l       .code.at_itcm	00000000 $d
20000d48 l       .data.at_dtcm	00000000 $d
000082c8 l       .code.at_itcm	00000000 $t
20000d50 l       .data.at_dtcm	00000000 $d
000082d0 l       .code.at_itcm	00000000 $t
20000d58 l       .data.at_dtcm	00000000 $d
000082d8 l       .code.at_itcm	00000000 $t
20000d58 l       .data.at_dtcm	00000000 $d
000082e0 l       .code.at_itcm	00000000 $t
000082f2 l       .code.at_itcm	00000000 $d
000082f8 l       .code.at_itcm	00000000 $t
20000d58 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 crt0.o
00000090 l       .code.at_itcm	00000000 $t
20000cc0 l       .data.at_dtcm	00000000 $d
000000ec l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 Backend.cpp
00000512 l       .code.at_itcm	00000000 $t
20000cd8 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 Base.cpp
000007e0 l       .code.at_itcm	00000000 $t
20000ce8 l       .data.at_dtcm	00000000 $d
00000858 l       .code.at_itcm	00000000 $d
0000085c l       .code.at_itcm	00000000 $t
000008a4 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 DataProcessing.cpp
000008a8 l       .code.at_itcm	00000000 $t
20000cf0 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 Vector.cpp
000009a4 l       .code.at_itcm	00000000 $t
000009e8 l       .code.at_itcm	00000000 $d
20000cf0 l       .data.at_dtcm	00000000 $d
000009ec l       .code.at_itcm	00000000 $t
00000a60 l       .code.at_itcm	00000000 $d
00000a64 l       .code.at_itcm	00000000 $t
00000b04 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 libgcc2.c
00007818 l       .code.at_itcm	00000000 $t
20000cf0 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 pr-support.c
00008794 l       .code.at_itcm	00000000 $t
00008794 l     F .code.at_itcm	0000003c next_unwind_byte
20000d68 l       .data.at_dtcm	00000000 $d
000087d0 l       .code.at_itcm	00000000 $t
000088f8 l       .code.at_itcm	00000000 $d
20000d68 l       .data.at_dtcm	00000000 $d
000088fd l       .code.at_itcm	00000000 $d
000088fe l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 libc_a-memcpy.o
00008f2c l       .code.at_itcm	00000000 $t
20000d78 l       .data.at_dtcm	00000000 $d
00000000 l    df *ABS*	00000000 crtstuff.c
80212128 l     O .readonly.at_mram	00000000 __EH_FRAME_BEGIN__
00000000 l       .code.at_itcm	00000000 $t
00000000 l     F .code.at_itcm	00000000 deregister_tm_clones
00000010 l       .code.at_itcm	00000000 $d
0000001c l       .code.at_itcm	00000000 $t
0000001c l     F .code.at_itcm	00000000 register_tm_clones
00000038 l       .code.at_itcm	00000000 $d
00000044 l       .code.at_itcm	00000000 $t
00000044 l     F .code.at_itcm	00000000 __do_global_dtors_aux
00000060 l       .code.at_itcm	00000000 $d
20000d80 l     O .bss	00000000 completed.1
80211808 l       .readonly.at_mram	00000000 $d
80211808 l     O .readonly.at_mram	00000000 __do_global_dtors_aux_fini_array_entry
0000006c l       .code.at_itcm	00000000 $t
0000006c l     F .code.at_itcm	00000000 frame_dummy
00000084 l       .code.at_itcm	00000000 $d
20000d84 l     O .bss	00000000 object.0
80211800 l       .readonly.at_mram	00000000 $d
80211800 l     O .readonly.at_mram	00000000 __frame_dummy_init_array_entry
20000d80 l       .bss	00000000 $d
20000d84 l       .bss	00000000 $d
00000000 l    df *ABS*	00000000 fault_handler.c
20000db8 l       .bss	00000000 $d
20000db8 l     O .bss	00000400 fault_stack
80211824 l       .readonly.at_mram	00000000 $d
80211ab8 l       .readonly.at_mram	00000000 $d
80211ab8 l     O .readonly.at_mram	00000018 FaultNames
80211ad0 l     O .readonly.at_mram	00000011 flag_names
200011b8 l     O .bss	00000001 fault_type
200011bc l     O .bss	00000004 exc_return
200011c0 l     O .bss	00000044 regs
20001204 l     O .bss	00000001 fault_dump_enabled
20001204 l       .bss	00000000 $d
20001205 l     O .bss	00000001 fault_handler_active
20001205 l       .bss	00000000 $d
80211ae4 l     O .readonly.at_mram	00000038 mmfsr_bits
80211b1c l     O .readonly.at_mram	00000041 bfsr_bits
80211b60 l     O .readonly.at_mram	0000003b ufsr_bits
80211b9c l     O .readonly.at_mram	00000019 hfsr_bits
80211bb8 l     O .readonly.at_mram	0000003a sfsr_bits
80211bf4 l     O .readonly.at_mram	0000002a dfsr_bits
80211c20 l     O .readonly.at_mram	000000ba afsr_bits
00000ba4 l       .code.at_itcm	00000000 $t
00000ba4 l     F .code.at_itcm	000000ac print_fsrbits
00000c3c l       .code.at_itcm	00000000 $d
00000c50 l       .code.at_itcm	00000000 $t
00000c50 l     F .code.at_itcm	00000060 print_memmanage
00000c9c l       .code.at_itcm	00000000 $d
00000cb0 l       .code.at_itcm	00000000 $t
00000cb0 l     F .code.at_itcm	00000084 print_busfault
00000d18 l       .code.at_itcm	00000000 $d
00000d34 l       .code.at_itcm	00000000 $t
00000d34 l     F .code.at_itcm	00000044 print_usagefault
00000d6c l       .code.at_itcm	00000000 $d
00000d78 l       .code.at_itcm	00000000 $t
00000d78 l     F .code.at_itcm	00000040 print_hardfault
00000dac l       .code.at_itcm	00000000 $d
00000db8 l       .code.at_itcm	00000000 $t
00000db8 l     F .code.at_itcm	00000044 print_securefault
00000df0 l       .code.at_itcm	00000000 $d
00000dfc l       .code.at_itcm	00000000 $t
00000dfc l     F .code.at_itcm	00000040 print_debugfault
00000e30 l       .code.at_itcm	00000000 $d
00000e3c l       .code.at_itcm	00000000 $t
00000e3c l     F .code.at_itcm	00000020 print_faults
00000b08 l       .code.at_itcm	00000000 $t
00000b1c l       .code.at_itcm	00000000 $d
00000b20 l       .code.at_itcm	00000000 $t
00000b68 l       .code.at_itcm	00000000 $d
00000b74 l       .code.at_itcm	00000000 $t
00000e5c l     F .code.at_itcm	0000002c CommonAsmFaultHandler
00000ea6 l     F .code.at_itcm	00000156 CommonFaultHandler
00000e88 l     F .code.at_itcm	0000001e JumpToDump
00000fd4 l       .code.at_itcm	00000000 $d
00000ffc l     F .code.at_itcm	00000274 FaultDump
00000ffc l       .code.at_itcm	00000000 $t
00001218 l       .code.at_itcm	00000000 $d
00001270 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 SEGGER_RTT.c
80211cdc l       .readonly.at_mram	00000000 $d
80211cdc l     O .readonly.at_mram	00000010 _aTerminalId
20001208 l       .bss	00000000 $d
200012b0 l       .bss	00000000 $d
200012b0 l     O .bss	00000400 _acUpBuffer
200016b0 l       .bss	00000000 $d
200016b0 l     O .bss	00000010 _acDownBuffer
200016c0 l     O .bss	00000001 _ActiveTerminal
200016c0 l       .bss	00000000 $d
80211cec l       .readonly.at_mram	00000000 $d
0000127c l       .code.at_itcm	00000000 $t
0000127c l     F .code.at_itcm	000000b4 _DoInit
0000131c l       .code.at_itcm	00000000 $d
80211cf8 l     O .readonly.at_mram	00000011 _aInitStr.0
00001330 l       .code.at_itcm	00000000 $t
00001330 l     F .code.at_itcm	000000ba _WriteBlocking
000013ea l     F .code.at_itcm	00000090 _WriteNoCheck
0000147a l     F .code.at_itcm	00000032 _PostTerminalSwitch
000014a8 l       .code.at_itcm	00000000 $d
000014ac l       .code.at_itcm	00000000 $t
000014ac l     F .code.at_itcm	00000046 _GetAvailWriteSpace
000015fc l       .code.at_itcm	00000000 $d
00001600 l       .code.at_itcm	00000000 $t
00001708 l       .code.at_itcm	00000000 $d
0000170c l       .code.at_itcm	00000000 $t
00001898 l       .code.at_itcm	00000000 $d
0000189c l       .code.at_itcm	00000000 $t
00001938 l       .code.at_itcm	00000000 $d
0000193c l       .code.at_itcm	00000000 $t
000019d8 l       .code.at_itcm	00000000 $d
000019dc l       .code.at_itcm	00000000 $t
00001a24 l       .code.at_itcm	00000000 $d
00001a28 l       .code.at_itcm	00000000 $t
00001a70 l       .code.at_itcm	00000000 $d
00001a74 l       .code.at_itcm	00000000 $t
00001b0c l       .code.at_itcm	00000000 $d
00001b10 l       .code.at_itcm	00000000 $t
00001ba4 l       .code.at_itcm	00000000 $d
00001ba8 l       .code.at_itcm	00000000 $t
00001c50 l       .code.at_itcm	00000000 $d
00001c54 l       .code.at_itcm	00000000 $t
00001ce4 l       .code.at_itcm	00000000 $d
00001cec l       .code.at_itcm	00000000 $t
00001d20 l       .code.at_itcm	00000000 $d
00001d24 l       .code.at_itcm	00000000 $t
00001d58 l       .code.at_itcm	00000000 $d
00001d5c l       .code.at_itcm	00000000 $t
00001e5c l       .code.at_itcm	00000000 $d
00001e60 l       .code.at_itcm	00000000 $t
00001f64 l       .code.at_itcm	00000000 $d
00001f68 l       .code.at_itcm	00000000 $t
00001ff8 l       .code.at_itcm	00000000 $d
00001ffc l       .code.at_itcm	00000000 $t
00002090 l       .code.at_itcm	00000000 $d
00002094 l       .code.at_itcm	00000000 $t
000020fc l       .code.at_itcm	00000000 $d
00002100 l       .code.at_itcm	00000000 $t
00002168 l       .code.at_itcm	00000000 $d
0000216c l       .code.at_itcm	00000000 $t
000021d4 l       .code.at_itcm	00000000 $d
000021d8 l       .code.at_itcm	00000000 $t
00002240 l       .code.at_itcm	00000000 $d
00002244 l       .code.at_itcm	00000000 $t
000022f8 l       .code.at_itcm	00000000 $d
00002308 l       .code.at_itcm	00000000 $t
00002424 l       .code.at_itcm	00000000 $d
00002430 l       .code.at_itcm	00000000 $t
0000245c l       .code.at_itcm	00000000 $d
00002460 l       .code.at_itcm	00000000 $t
000024d0 l       .code.at_itcm	00000000 $d
80211cf8 l       .readonly.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 SEGGER_RTT_printf.c
000024d4 l       .code.at_itcm	00000000 $t
000024d4 l     F .code.at_itcm	0000007c _StoreChar
00002550 l     F .code.at_itcm	00000158 _PrintUnsigned
000026a4 l       .code.at_itcm	00000000 $d
80211d14 l     O .readonly.at_mram	00000010 _aV2C.0
000026a8 l       .code.at_itcm	00000000 $t
000026a8 l     F .code.at_itcm	0000014e _PrintInt
80211d0c l       .readonly.at_mram	00000000 $d
0000285c l       .code.at_itcm	00000000 $d
00002894 l       .code.at_itcm	00000000 $t
000029f0 l       .code.at_itcm	00000000 $d
00002a74 l       .code.at_itcm	00000000 $t
00002c10 l       .code.at_itcm	00000000 $d
00002c14 l       .code.at_itcm	00000000 $t
80211d14 l       .readonly.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 SEGGER_RTT_Syscalls_GCC.c
00002c44 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 uart.c
000070b4 l       .code.at_itcm	00000000 $t
000070b4 l     F .code.at_itcm	00000020 uart_disable_tx_irq
000070d4 l     F .code.at_itcm	0000002c uart_disable_rx_irq
00007100 l     F .code.at_itcm	00000026 uart_tx_ready
00007126 l     F .code.at_itcm	00000026 uart_rx_ready
0000714c l     F .code.at_itcm	0000001e uart_send_a_char_to_thr
0000716a l     F .code.at_itcm	00000018 uart_receive_a_char_from_rbr
00007182 l     F .code.at_itcm	0000001e uart_get_tx_fifo_available_count
000071a0 l     F .code.at_itcm	0000001a uart_get_rx_fifo_available_count
0000744c l       .code.at_itcm	00000000 $d
0000745c l       .code.at_itcm	00000000 $t
000074f4 l       .code.at_itcm	00000000 $d
00007504 l       .code.at_itcm	00000000 $t
00007580 l       .code.at_itcm	00000000 $d
000075b4 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
000077e8 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 libunwind.o
000085e8 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00008ad8 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 abort.c
00008adc l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 exit.c
00008aec l       .code.at_itcm	00000000 $t
00008b04 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 printf.c
00008b08 l       .code.at_itcm	00000000 $t
00008b2c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 putchar.c
00008b30 l       .code.at_itcm	00000000 $t
00008b3c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 puts.c
80211d2c l       .readonly.at_mram	00000000 $d
00008b40 l       .code.at_itcm	00000000 $t
00008bf8 l       .code.at_itcm	00000000 $d
00008bfc l       .code.at_itcm	00000000 $t
00008c08 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 memset.c
00008da8 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 signal.c
00008e44 l       .code.at_itcm	00000000 $t
00008e98 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 signalr.c
00008e9c l       .code.at_itcm	00000000 $t
00008ec4 l       .code.at_itcm	00000000 $d
00008ec8 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 init.c
00008ecc l       .code.at_itcm	00000000 $t
00008f0c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 lock.c
00008f1c l       .code.at_itcm	00000000 $t
00008f20 l       .code.at_itcm	00000000 $t
00008f24 l       .code.at_itcm	00000000 $t
00008f28 l       .code.at_itcm	00000000 $t
20001800 l       .bss	00000000 $d
20001804 l       .bss	00000000 $d
20001808 l       .bss	00000000 $d
00000000 l    df *ABS*	00000000 strlen-stub.c
00009018 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 atexit.c
00009144 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 vfprintf.c
80211d30 l       .readonly.at_mram	00000000 $d
000096c8 l       .code.at_itcm	00000000 $t
000097c4 l       .code.at_itcm	00000000 $d
0000987a l       .code.at_itcm	00000000 $t
0000b7f4 l     F .code.at_itcm	00000084 __sbprintf
000099b0 l       .code.at_itcm	00000000 $d
000099bc l       .code.at_itcm	00000000 $t
00009d78 l       .code.at_itcm	00000000 $d
80211ee8 l     O .readonly.at_mram	00000010 zeroes.0
00009d90 l       .code.at_itcm	00000000 $t
0000a490 l       .code.at_itcm	00000000 $d
80211ef8 l     O .readonly.at_mram	00000010 blanks.1
0000a49c l       .code.at_itcm	00000000 $t
0000a930 l       .code.at_itcm	00000000 $d
0000a940 l       .code.at_itcm	00000000 $t
0000aeec l       .code.at_itcm	00000000 $d
0000aef8 l       .code.at_itcm	00000000 $t
0000b474 l       .code.at_itcm	00000000 $d
0000b484 l       .code.at_itcm	00000000 $t
0000b7e8 l       .code.at_itcm	00000000 $d
0000b7f4 l       .code.at_itcm	00000000 $t
80211ee8 l       .readonly.at_mram	00000000 $d
80211ef8 l       .readonly.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 fvwrite.c
0000b878 l       .code.at_itcm	00000000 $t
0000bb58 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 mlock.c
0000bb5c l       .code.at_itcm	00000000 $t
0000bb64 l       .code.at_itcm	00000000 $d
0000bb68 l       .code.at_itcm	00000000 $t
0000bb70 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 fwalk.c
0000bb74 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 reallocr.c
0000bbb8 l       .code.at_itcm	00000000 $t
0000bf28 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 putc.c
0000bf2c l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 sprint_r.c
0000bfa4 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 fclose.c
0000bfc4 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 fflush.c
0000c084 l       .code.at_itcm	00000000 $t
0000c1b4 l       .code.at_itcm	00000000 $d
0000c1b8 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 stdio.c
0000c20c l       .code.at_itcm	00000000 $t
0000c230 l       .code.at_itcm	00000000 $t
0000c270 l       .code.at_itcm	00000000 $t
0000c298 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 wbuf.c
0000c2a0 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 wsetup.c
0000c34c l       .code.at_itcm	00000000 $t
0000c448 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 memmove.c
0000c44c l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 strncpy.c
0000c548 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 localeconv.c
0000c5b8 l       .code.at_itcm	00000000 $t
0000c5bc l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 closer.c
0000c5c0 l       .code.at_itcm	00000000 $t
0000c5e0 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 lseekr.c
0000c5e4 l       .code.at_itcm	00000000 $t
0000c60c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 readr.c
0000c610 l       .code.at_itcm	00000000 $t
0000c638 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 sbrkr.c
0000c63c l       .code.at_itcm	00000000 $t
0000c65c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 sysconf.c
0000c660 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 fini.c
0000c67c l       .code.at_itcm	00000000 $t
0000c69c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 memchr-stub.c
0000c6a4 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 wcrtomb.c
0000c724 l       .code.at_itcm	00000000 $t
0000c76c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 wcsrtombs.c
0000c770 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 __atexit.c
0000c788 l       .code.at_itcm	00000000 $t
0000c800 l       .code.at_itcm	00000000 $d
20001848 l       .bss	00000000 $d
00000000 l    df *ABS*	00000000 s_frexp.c
0000c810 l       .code.at_itcm	00000000 $t
0000c878 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 dtoa.c
0000c888 l       .code.at_itcm	00000000 $t
0000c888 l     F .code.at_itcm	00000138 quorem
80211dbc l       .readonly.at_mram	00000000 $d
0000c9c0 l       .code.at_itcm	00000000 $t
0000cb1e l       .code.at_itcm	00000000 $d
0000cb26 l       .code.at_itcm	00000000 $t
0000cba0 l       .code.at_itcm	00000000 $d
0000cbd4 l       .code.at_itcm	00000000 $t
0000d100 l       .code.at_itcm	00000000 $d
0000d108 l       .code.at_itcm	00000000 $t
0000d3e4 l       .code.at_itcm	00000000 $d
0000d3ec l       .code.at_itcm	00000000 $t
0000d75c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 freer.c
0000d768 l       .code.at_itcm	00000000 $t
0000d814 l       .code.at_itcm	00000000 $d
0000d820 l       .code.at_itcm	00000000 $t
0000d9fc l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 mbtowc_r.c
0000da08 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 mprec.c
0000da34 l       .code.at_itcm	00000000 $t
0000da80 l       .code.at_itcm	00000000 $t
80211dcc l       .readonly.at_mram	00000000 $d
0000da94 l       .code.at_itcm	00000000 $t
0000db30 l       .code.at_itcm	00000000 $d
0000db38 l       .code.at_itcm	00000000 $t
0000db8c l       .code.at_itcm	00000000 $t
0000dc0c l       .code.at_itcm	00000000 $t
0000dc60 l       .code.at_itcm	00000000 $d
0000dc68 l       .code.at_itcm	00000000 $t
0000ddc8 l       .code.at_itcm	00000000 $d
0000ddd0 l       .code.at_itcm	00000000 $t
0000de84 l       .code.at_itcm	00000000 $d
8021200c l     O .readonly.at_mram	0000000c p05.0
0000de90 l       .code.at_itcm	00000000 $t
0000df6c l       .code.at_itcm	00000000 $d
0000df74 l       .code.at_itcm	00000000 $t
0000dfb8 l       .code.at_itcm	00000000 $t
0000e120 l       .code.at_itcm	00000000 $d
0000e128 l       .code.at_itcm	00000000 $t
0000e1dc l       .code.at_itcm	00000000 $d
8021200c l       .readonly.at_mram	00000000 $d
80212018 l       .readonly.at_mram	00000000 $d
80212040 l       .readonly.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 makebuf.c
0000e1e4 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 wctomb_r.c
0000e2b4 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 fstatr.c
0000e2d0 l       .code.at_itcm	00000000 $t
0000e2f8 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 isattyr.c
0000e2fc l       .code.at_itcm	00000000 $t
0000e31c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 errno.c
0000e320 l       .code.at_itcm	00000000 $t
0000e328 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 wcsnrtombs.c
0000e32c l       .code.at_itcm	00000000 $t
0000e420 l       .code.at_itcm	00000000 $t
0000e43c l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 assert.c
80211ea8 l       .readonly.at_mram	00000000 $d
0000e444 l       .code.at_itcm	00000000 $t
0000e470 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 callocr.c
0000e480 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 fiprintf.c
0000e4f0 l       .code.at_itcm	00000000 $t
0000e514 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 vfiprintf.c
80211d54 l       .readonly.at_mram	00000000 $d
0000e518 l       .code.at_itcm	00000000 $t
0000e5f8 l       .code.at_itcm	00000000 $d
0000e6ae l       .code.at_itcm	00000000 $t
0000f6e0 l     F .code.at_itcm	00000084 __sbprintf
0000e7f0 l       .code.at_itcm	00000000 $d
0000e7f4 l       .code.at_itcm	00000000 $t
0000f044 l       .code.at_itcm	00000000 $d
80212108 l     O .readonly.at_mram	00000010 zeroes.0
80212118 l     O .readonly.at_mram	00000010 blanks.1
0000f04c l       .code.at_itcm	00000000 $t
0000f464 l       .code.at_itcm	00000000 $d
0000f474 l       .code.at_itcm	00000000 $t
0000f6d8 l       .code.at_itcm	00000000 $d
0000f6e0 l       .code.at_itcm	00000000 $t
80212108 l       .readonly.at_mram	00000000 $d
80212118 l       .readonly.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 close.c
0000f764 l       .code.at_itcm	00000000 $t
0000f770 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 fstat.c
0000f774 l       .code.at_itcm	00000000 $t
0000f780 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 getpid.c
0000f784 l       .code.at_itcm	00000000 $t
0000f790 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 isatty.c
0000f794 l       .code.at_itcm	00000000 $t
0000f7a0 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 kill.c
0000f7a4 l       .code.at_itcm	00000000 $t
0000f7b0 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 lseek.c
0000f7b4 l       .code.at_itcm	00000000 $t
0000f7c0 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 read.c
0000f7c4 l       .code.at_itcm	00000000 $t
0000f7d0 l       .code.at_itcm	00000000 $d
00000000 l    df *ABS*	00000000 sbrk.c
0000f7d4 l       .code.at_itcm	00000000 $t
0000f7ec l       .code.at_itcm	00000000 $d
200019d8 l     O .bss	00000004 heap_end.0
200019d8 l       .bss	00000000 $d
00000000 l    df *ABS*	00000000 _exit.c
0000f7f4 l       .code.at_itcm	00000000 $t
00000000 l    df *ABS*	00000000 crti.o
802117e0 l       .readonly.at_mram	00000000 $t
802117ec l       .readonly.at_mram	00000000 $t
00000000 l    df *ABS*	00000000 crtn.o
802117e4 l       .readonly.at_mram	00000000 $t
802117f0 l       .readonly.at_mram	00000000 $t
00000000 l    df *ABS*	00000000 ctype_.c
80211f08 l       .readonly.at_mram	00000000 $d
00000000 l    df *ABS*	00000000 crtstuff.c
80212128 l       .readonly.at_mram	00000000 $d
80212128 l     O .readonly.at_mram	00000000 __FRAME_END__
00000000 l    df *ABS*	00000000 reent.c
20001844 l       .bss	00000000 $d
00000000 l    df *ABS*	00000000 
8021180c l       .readonly.at_mram	00000000 __fini_array_end
80211808 l       .readonly.at_mram	00000000 __fini_array_start
80211808 l       .readonly.at_mram	00000000 __init_array_end
802117fc l       .readonly.at_mram	00000000 __preinit_array_end
802117fc l       .readonly.at_mram	00000000 __init_array_start
802117f8 l       .readonly.at_mram	00000000 __preinit_array_start
0000f7f8 l     F .code.at_itcm	00000008 __GetSystemCoreClock_veneer
0000f7f8 l       .code.at_itcm	00000000 $t
0000f7fc l       .code.at_itcm	00000000 $d
0000f800 l     F .code.at_itcm	00000008 __sys_busy_loop_us_veneer
0000f800 l       .code.at_itcm	00000000 $t
0000f804 l       .code.at_itcm	00000000 $d
0000f808 l     F .code.at_itcm	00000008 ___fini_veneer
0000f808 l       .code.at_itcm	00000000 $t
0000f80c l       .code.at_itcm	00000000 $d
0000f810 l     F .code.at_itcm	00000008 ___init_veneer
0000f810 l       .code.at_itcm	00000000 $t
0000f814 l       .code.at_itcm	00000000 $d
80201190 l     F .startup.at_mram	00000008 ___start_veneer
80201190 l       .startup.at_mram	00000000 $t
80201194 l       .startup.at_mram	00000000 $d
80201198 l     F .startup.at_mram	00000008 ____aeabi_uldivmod_veneer
80201198 l       .startup.at_mram	00000000 $t
8020119c l       .startup.at_mram	00000000 $d
00005048 g     F .code.at_itcm	00000014 GPIO12_IRQ7Handler
000040d4 g     F .code.at_itcm	00000014 GPIO4_IRQ6Handler
000040e8 g     F .code.at_itcm	00000014 GPIO4_IRQ7Handler
0000193c g     F .code.at_itcm	000000a0 SEGGER_RTT_WriteNoLock
0000874c g     F .code.at_itcm	00000022 .hidden ___Unwind_ForcedUnwind
00007e18 g     F .code.at_itcm	0000006a .hidden __gnu_Unwind_RaiseException
00008b30 g     F .code.at_itcm	00000010 putchar
80200874  w    F .startup.at_mram	00000008 CDC_SCANLINE0_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ92Handler
00003b24 g     F .code.at_itcm	00000014 GPIO1_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ9Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ58Handler
0000e2fc g     F .code.at_itcm	00000024 _isatty_r
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ16Handler
000040c0 g     F .code.at_itcm	00000014 GPIO4_IRQ5Handler
0000f784 g     F .code.at_itcm	00000010 _getpid
00008b40 g     F .code.at_itcm	000000bc _puts_r
000051bc g     F .code.at_itcm	00000014 GPIO13_IRQ1Handler
80200874  w    F .startup.at_mram	00000008 MHU_M55HE_M55HP_1_RX_IRQHandler
80200000 g     O .startup.at_mram	000007c0 __Vectors
00003cfc g     F .code.at_itcm	00000014 GPIO2_IRQ6Handler
0000c5e4 g     F .code.at_itcm	0000002c _lseek_r
80200874  w    F .startup.at_mram	00000008 DebugMon_Handler
80200874  w    F .startup.at_mram	00000008 MHU_M55HP_SECPU_0_TX_IRQHandler
0000540c g     F .code.at_itcm	00000014 GPIO14_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 QEC2_CMPA_IRQHandler
0000445c g     F .code.at_itcm	00000014 GPIO6_IRQ2Handler
80201168 g     F .startup.at_mram	00000024 setup_tcm_ns_partition
00004000 g       *ABS*	00000000 __HEAP_SIZE
00007420 g     F .code.at_itcm	000000bc uart_set_data_parity_stop_bits
80200874  w    F .startup.at_mram	00000008 I2C0_IRQHandler
000077a0 g     F .code.at_itcm	00000018 GetSystemAPBClock
00008e9c g     F .code.at_itcm	0000002c _kill_r
0000085c g     F .code.at_itcm	0000004c JIT::Instructions::Base::letp(short)
80200874  w    F .startup.at_mram	00000008 QEC2_CMPB_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ0Handler
0000c660 g     F .code.at_itcm	0000001c sysconf
00008b08 g     F .code.at_itcm	00000028 printf
000005ee g     F .code.at_itcm	00000028 JIT::Backend::getBranchOffset(unsigned short*)
20001804 g     O .bss	00000001 __lock___atexit_recursive_mutex
00001d5c g     F .code.at_itcm	00000104 SEGGER_RTT_AllocDownBuffer
0000c724 g     F .code.at_itcm	0000004c _wcrtomb_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ24Handler
80200874  w    F .startup.at_mram	00000008 S32K_CNTBASE1_IRQHandler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ9Handler
00002430 g     F .code.at_itcm	00000030 SEGGER_RTT_GetAvailWriteSpace
00005580 g     F .code.at_itcm	00000014 LPGPIO_IRQ0Handler
0000c270 g     F .code.at_itcm	00000026 __sseek
00008d54 g     F .code.at_itcm	0000003c __sinit
0000c2a0 g     F .code.at_itcm	000000ac __swbuf_r
00000b74 g     F .code.at_itcm	00000008 HardFault_Handler
00004e20 g     F .code.at_itcm	00000014 GPIO11_IRQ4Handler
00003a98 g     F .code.at_itcm	00000014 GPIO1_IRQ0Handler
80200874  w    F .startup.at_mram	00000008 MHU_M55HP_A32_1_TX_IRQHandler
80200874  w    F .startup.at_mram	00000008 MHU_A32_M55HP_0_RX_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ0Handler
0000bb68 g     F .code.at_itcm	0000000c __malloc_unlock
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ45Handler
80200874  w    F .startup.at_mram	00000008 QEC0_CMPA_IRQHandler
80200874  w    F .startup.at_mram	00000008 CSI_IRQHandler
80200874  w    F .startup.at_mram	00000008 SysTick_Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ28Handler
80200874  w    F .startup.at_mram	00000008 PDM_AUDIO_DET_IRQHandler
000051d0 g     F .code.at_itcm	00000014 GPIO13_IRQ2Handler
000077d0 g     F .code.at_itcm	00000018 GetSystemHFOSClock
00004484 g     F .code.at_itcm	00000014 GPIO6_IRQ4Handler
00003ce8 g     F .code.at_itcm	00000014 GPIO2_IRQ5Handler
000055f8 g     F .code.at_itcm	00000014 LPGPIO_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ17Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ85Handler
0000c44c g     F .code.at_itcm	000000fa memmove
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ84Handler
80200874  w    F .startup.at_mram	00000008 ADC122_DONE1_IRQHandler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ0Handler
00008608 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Save_VFP
00008728 g     F .code.at_itcm	00000022 .hidden _Unwind_Resume_or_Rethrow
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ88Handler
00002250 g     F .code.at_itcm	000000b8 SEGGER_RTT_SetTerminal
80200874  w    F .startup.at_mram	00000008 PendSV_Handler
000038e8 g     F .code.at_itcm	00000014 GPIO0_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 NMI_Handler
0000da34 g     F .code.at_itcm	0000004c _Balloc
20000d78 g       .data.at_dtcm	00000000 __exidx_end
80200874  w    F .startup.at_mram	00000008 REFCLK_CNTBASE2_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ86Handler
80200874  w    F .startup.at_mram	00000008 I2C1_IRQHandler
80200874  w    F .startup.at_mram	00000008 ADC120_CMPB_IRQHandler
80200874  w    F .startup.at_mram	00000008 AES0_IRQHandler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ13Handler
00006688 g     F .code.at_itcm	00000014 UART1_IRQHandler
000082c8 g     F .code.at_itcm	00000006 .hidden __aeabi_unwind_cpp_pr0
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ14Handler
20000708 g     O .data.at_dtcm	00000004 __atexit_recursive_mutex
0000e320 g     F .code.at_itcm	0000000c __errno
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ78Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ18Handler
80200874  w    F .startup.at_mram	00000008 CDC_SCANLINE1_IRQHandler
200017fc g     O .bss	00000004 __stdio_exit_handler
00003c84 g     F .code.at_itcm	00000014 GPIO2_IRQ0Handler
00008728 g     F .code.at_itcm	00000022 .hidden ___Unwind_Resume_or_Rethrow
80200874  w    F .startup.at_mram	00000008 MHU_M55HP_M55HE_1_TX_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ15Handler
20004000 g       .nonsecure0_region	00000000 __ns_region_0_end
0000e2d0 g     F .code.at_itcm	0000002c _fstat_r
00004870 g     F .code.at_itcm	00000014 GPIO8_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 CAM_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ2Handler
20001844 g     O .bss	00000004 errno
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ33Handler
000053d0 g     F .code.at_itcm	00000014 GPIO14_IRQ3Handler
00008770 g     F .code.at_itcm	00000022 .hidden _Unwind_Backtrace
80200874  w    F .startup.at_mram	00000008 CMP2_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ18Handler
80200874  w    F .startup.at_mram	00000008 I2S0_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ10Handler
000085e8 g     F .code.at_itcm	00000018 .hidden __restore_core_regs
00008628 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
000040ac g     F .code.at_itcm	00000014 GPIO4_IRQ4Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ34Handler
000004ea  w    F .code.at_itcm	00000028 Register<unsigned long, unsigned int, 16u>::clear(unsigned long)
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ41Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ71Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ87Handler
80201200 g       .copy.table	00000000 __copy_table_start__
00004a84 g     F .code.at_itcm	00000014 GPIO9_IRQ7Handler
00001c54 g     F .code.at_itcm	00000032 SEGGER_RTT_GetKey
200005a4 g     O .data.at_dtcm	00000004 SystemAHBClock
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ11Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ_ABORT_Handler
00004a34 g     F .code.at_itcm	00000014 GPIO9_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ68Handler
00006514 g     F .code.at_itcm	00000014 UART0_IRQHandler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ6Handler
000071ba g     F .code.at_itcm	0000008a uart_send_blocking
00003ed4 g     F .code.at_itcm	00000014 GPIO3_IRQ5Handler
00004470 g     F .code.at_itcm	00000014 GPIO6_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ14Handler
00200000 g       *ABS*	00000000 __ROM_SIZE
20000db0  w    O .bss	00000004 guard variable for LPRTC::CCVR
80200874  w    F .startup.at_mram	00000008 ADC24_CMPB_IRQHandler
00008f2c g     F .code.at_itcm	000000ec memcpy
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ26Handler
00001d24 g     F .code.at_itcm	00000038 SEGGER_RTT_HasDataUp
00000414  w    F .code.at_itcm	00000022 Register<unsigned long, unsigned int, 16u>::Register(unsigned int)
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ61Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ40Handler
20000d80 g     O .data.at_dtcm	00000000 .hidden __TMC_END__
20000da8  w    O .bss	00000001 LPRTC::getInstance()::instance
00007f48 g     F .code.at_itcm	00000034 .hidden _Unwind_VRS_Set
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ14Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ76Handler
80200874  w    F .startup.at_mram	00000008 QEC3_CMPA_IRQHandler
00000616 g     F .code.at_itcm	00000016 JIT::Backend::getInstructions()
200005a0 g     O .data.at_dtcm	00000004 SystemAXIClock
000077e8 g     F .code.at_itcm	00000000 .hidden __aeabi_uldivmod
0000425c g     F .code.at_itcm	00000014 GPIO5_IRQ1Handler
00008bfc g     F .code.at_itcm	00000010 puts
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ94Handler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ8Handler
80200874  w    F .startup.at_mram	00000008 GPU2D_IRQHandler
00003924 g     F .code.at_itcm	00000014 GPIO0_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ2Handler
200005b4 g     O .data.at_dtcm	00000004 SystemCoreClock
80200874  w    F .startup.at_mram	00000008 CDC_FIFO_WARNING0_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ48Handler
00000822 g     F .code.at_itcm	0000003a JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)
0000170c g     F .code.at_itcm	00000036 SEGGER_RTT_ReadUpBuffer
0000f774 g     F .code.at_itcm	00000010 _fstat
0000e444 g     F .code.at_itcm	0000003c __assert_func
80212040 g     O .readonly.at_mram	000000c8 __mprec_tens
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ15Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ67Handler
00000436  w    F .code.at_itcm	0000001e Register<unsigned long, unsigned int, 0u>::Register(unsigned int)
00000b8c g     F .code.at_itcm	00000008 UsageFault_Handler
0000465c g     F .code.at_itcm	00000014 GPIO7_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ52Handler
00007788 g     F .code.at_itcm	00000018 GetSystemAHBClock
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ14Handler
00003b10 g     F .code.at_itcm	00000014 GPIO1_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ44Handler
00002460 g     F .code.at_itcm	00000074 SEGGER_RTT_GetBytesInBuffer
20001840 g     O .bss	00000004 __malloc_top_pad
00007770 g     F .code.at_itcm	00000018 GetSystemAXIClock
00004620 g     F .code.at_itcm	00000014 GPIO7_IRQ0Handler
00008ec8 g     F .code.at_itcm	00000004 _getpid_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ63Handler
2000c000 g       .heap	00000000 __HeapLimit
000044c0 g     F .code.at_itcm	00000014 GPIO6_IRQ7Handler
20000d80 g       .bss	00000000 __bss_start__
00001cec g     F .code.at_itcm	00000038 SEGGER_RTT_HasData
00007f94 g     F .code.at_itcm	00000086 .hidden __gnu_Unwind_Backtrace
00005220 g     F .code.at_itcm	00000014 GPIO13_IRQ6Handler
0000c5b8 g     F .code.at_itcm	00000008 _localeconv_r
0000dc0c g     F .code.at_itcm	0000005c __i2b
0000b878 g     F .code.at_itcm	000002e4 __sfvwrite_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ59Handler
80200874  w    F .startup.at_mram	00000008 AES1_IRQHandler
80200874  w    F .startup.at_mram	00000008 SPI1_IRQHandler
00007818 g     F .code.at_itcm	0000034a .hidden __udivmoddi4
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 ADC121_DONE0_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ4Handler
0000c63c g     F .code.at_itcm	00000024 _sbrk_r
80200874  w    F .startup.at_mram	00000008 S32K_CNTBASE0_IRQHandler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ4Handler
80200874  w    F .startup.at_mram	00000008 QEC3_CMPB_IRQHandler
80201238 g       .zero.table	00000000 __zero_table_end__
80200874  w    F .startup.at_mram	00000008 CDC_FIFO_WARNING1_IRQHandler
00001f68 g     F .code.at_itcm	00000094 SEGGER_RTT_ConfigUpBuffer
00008618 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Save_VFP_D
80200874  w    F .startup.at_mram	00000008 LPTIMER1_IRQHandler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ2Handler
0000c610 g     F .code.at_itcm	0000002c _read_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ10Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ3Handler
00004884 g     F .code.at_itcm	00000014 GPIO8_IRQ6Handler
00004070 g     F .code.at_itcm	00000014 GPIO4_IRQ1Handler
80200874  w    F .startup.at_mram	00000008 LPTIMER0_IRQHandler
00000414  w    F .code.at_itcm	00000022 Register<unsigned long, unsigned int, 16u>::Register(unsigned int)
000082e0 g     F .code.at_itcm	00000306 .hidden _Unwind_VRS_Pop
0000bfc4 g     F .code.at_itcm	000000c0 _fclose_r
000038c0 g     F .code.at_itcm	00000014 GPIO0_IRQ1Handler
000082d8  w    F .code.at_itcm	00000006 .hidden __aeabi_unwind_cpp_pr2
80200874  w    F .startup.at_mram	00000008 NPU_HP_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ7Handler
2000183c g     O .bss	00000004 __malloc_max_sbrked_mem
00005420 g     F .code.at_itcm	00000014 GPIO14_IRQ7Handler
00008770 g     F .code.at_itcm	00000022 .hidden ___Unwind_Backtrace
0000216c g     F .code.at_itcm	0000006c SEGGER_RTT_SetFlagsUpBuffer
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ56Handler
80200874  w    F .startup.at_mram	00000008 CMP1_IRQHandler
000021d8 g     F .code.at_itcm	0000006c SEGGER_RTT_SetFlagsDownBuffer
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ12Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ16Handler
80200874  w    F .startup.at_mram	00000008 SDMMC_IRQHandler
80200874  w    F .startup.at_mram	00000008 CDC_FIFO_UNDERRUN0_IRQHandler
20000cc0 g       .data.at_dtcm	00000000 __exidx_start
00001a9a g     F .code.at_itcm	00000076 SEGGER_RTT_PutCharSkipNoLock
00004820 g     F .code.at_itcm	00000014 GPIO8_IRQ1Handler
0000f794 g     F .code.at_itcm	00000010 _isatty
0000bbb8 g     F .code.at_itcm	00000374 _realloc_r
00008ecc g     F .code.at_itcm	00000050 __libc_init_array
00003ec0 g     F .code.at_itcm	00000014 GPIO3_IRQ4Handler
80200b42 g     F .startup.at_mram	00000066 sys_busy_loop_us
80200874  w    F .startup.at_mram	00000008 I2S2_IRQHandler
000086e0 g     F .code.at_itcm	00000022 .hidden ___Unwind_RaiseException
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ10Handler
00004634 g     F .code.at_itcm	00000014 GPIO7_IRQ1Handler
00000098 g     F .code.at_itcm	00000000 _mainCRTStartup
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ21Handler
80212018 g     O .readonly.at_mram	00000028 __mprec_bigtens
00008adc g     F .code.at_itcm	0000000e abort
00008704 g     F .code.at_itcm	00000022 .hidden ___Unwind_Resume
0000f7d4 g     F .code.at_itcm	00000020 _sbrk
0000df74 g     F .code.at_itcm	00000042 __mcmp
00003ad4 g     F .code.at_itcm	00000014 GPIO1_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ13Handler
00005020 g     F .code.at_itcm	00000014 GPIO12_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ20Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ5Handler
80200906 g     F .startup.at_mram	000000aa _platform_pre_stackheap_init
00000b08 g     F .code.at_itcm	00000018 in_fault_handler
80200bb8  w    F .startup.at_mram	0000004c RTSS_IsCacheClean_Required_by_Addr
802117e0 g     F .readonly.at_mram	00000000 _init
80200874  w    F .startup.at_mram	00000008 I2C2_IRQHandler
80200874  w    F .startup.at_mram	00000008 ADC120_CMPA_IRQHandler
00001ba8 g     F .code.at_itcm	000000ac SEGGER_RTT_PutChar
00005594 g     F .code.at_itcm	00000014 LPGPIO_IRQ1Handler
00002094 g     F .code.at_itcm	0000006c SEGGER_RTT_SetNameUpBuffer
80200874  w    F .startup.at_mram	00000008 OSPI0_IRQHandler
00004fbc g     F .code.at_itcm	00000014 GPIO12_IRQ0Handler
80200874  w    F .startup.at_mram	00000008 PPU2_IRQHandler
80200874  w    F .startup.at_mram	00000008 LPTIMER2_IRQHandler
00008630 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Restore_WMMXD
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ77Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ57Handler
0000c67c g     F .code.at_itcm	00000028 __libc_fini_array
80200874  w    F .startup.at_mram	00000008 ADC121_CMPA_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ24Handler
80200874  w    F .startup.at_mram	00000008 CMP3_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ7Handler
00004a5c g     F .code.at_itcm	00000014 GPIO9_IRQ5Handler
0000500c g     F .code.at_itcm	00000014 GPIO12_IRQ4Handler
000049f8 g     F .code.at_itcm	00000014 GPIO9_IRQ0Handler
802007c0 g     F .startup.at_mram	00000012 Reset_Handler
00004de4 g     F .code.at_itcm	00000014 GPIO11_IRQ1Handler
0000db38 g     F .code.at_itcm	00000052 __hi0bits
80200874  w    F .startup.at_mram	00000008 ADC122_CMPA_IRQHandler
00004498 g     F .code.at_itcm	00000014 GPIO6_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ19Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ19Handler
80200a48 g     F .startup.at_mram	0000001e sys_busy_loop_init_ns
00003cd4 g     F .code.at_itcm	00000014 GPIO2_IRQ4Handler
00002244 g     F .code.at_itcm	0000000c SEGGER_RTT_Init
00006c58 g     F .code.at_itcm	00000014 UART5_IRQHandler
20001800 g     O .bss	00000001 __lock___malloc_recursive_mutex
00003cac g     F .code.at_itcm	00000014 GPIO2_IRQ2Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ73Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ36Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ29Handler
200016c4 g     O .bss	00000138 __sf
000042ac g     F .code.at_itcm	00000014 GPIO5_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ64Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ1Handler
0000bf2c g     F .code.at_itcm	00000076 _putc_r
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ25Handler
80200c04  w    F .startup.at_mram	0000004c RTSS_IsCacheInvalidate_Required_by_Addr
00001e60 g     F .code.at_itcm	00000108 SEGGER_RTT_AllocUpBuffer
00001b10 g     F .code.at_itcm	00000098 SEGGER_RTT_PutCharSkip
200005a8 g     O .data.at_dtcm	00000004 SystemAPBClock
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ91Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ23Handler
0000ddd0 g     F .code.at_itcm	000000c0 __pow5mult
00008600 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Restore_VFP
80200874  w    F .startup.at_mram	00000008 SDMMC_WAKEUP_IRQHandler
000074dc g     F .code.at_itcm	0000006c uart_set_flow_control
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ21Handler
000027f6 g     F .code.at_itcm	0000041e SEGGER_RTT_vprintf
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ11Handler
20008000 g       .heap	00000000 end
80200874  w    F .startup.at_mram	00000008 LPCMP_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ4Handler
00008f28 g     F .code.at_itcm	00000002 __retarget_lock_release_recursive
000067fc g     F .code.at_itcm	00000014 UART2_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ90Handler
00004ff8 g     F .code.at_itcm	00000014 GPIO12_IRQ3Handler
00008704 g     F .code.at_itcm	00000022 .hidden _Unwind_Resume
80200a66 g     F .startup.at_mram	000000be sys_busy_loop_ns
000055e4 g     F .code.at_itcm	00000014 LPGPIO_IRQ5Handler
00004434 g     F .code.at_itcm	00000014 GPIO6_IRQ0Handler
00001a28 g     F .code.at_itcm	0000004c SEGGER_RTT_Write
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ19Handler
000055a8 g     F .code.at_itcm	00000014 LPGPIO_IRQ2Handler
00004098 g     F .code.at_itcm	00000014 GPIO4_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ27Handler
000053f8 g     F .code.at_itcm	00000014 GPIO14_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ70Handler
00006ae4 g     F .code.at_itcm	00000014 UART4_IRQHandler
00000b94 g     F .code.at_itcm	00000008 SecureFault_Handler
00008d90 g     F .code.at_itcm	0000000c __sfp_lock_acquire
0000c6a4 g     F .code.at_itcm	0000007e memchr
00004e48 g     F .code.at_itcm	00000014 GPIO11_IRQ6Handler
00004fd0 g     F .code.at_itcm	00000014 GPIO12_IRQ1Handler
200019e0 g       .bss	00000000 __bss_end__
00002000 g       *ABS*	00000000 __STACK_SIZE
20000db4  w    O .bss	00000004 guard variable for LPRTC::CCR
0000d820 g     F .code.at_itcm	000001e8 _free_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ65Handler
00003efc g     F .code.at_itcm	00000014 GPIO3_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ53Handler
0000c5ac g     F .code.at_itcm	0000000c __locale_mb_cur_max
00004848 g     F .code.at_itcm	00000014 GPIO8_IRQ3Handler
0000c770 g     F .code.at_itcm	00000016 _wcsrtombs_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ25Handler
000046ac g     F .code.at_itcm	00000014 GPIO7_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ16Handler
00007352 g     F .code.at_itcm	000000ce uart_set_baudrate
00009088 g     F .code.at_itcm	000000bc __call_exitprocs
20001848 g     O .bss	00000190 __atexit0
00003ac0 g     F .code.at_itcm	00000014 GPIO1_IRQ2Handler
80200874 g     F .startup.at_mram	00000008 Default_Handler
80200874  w    F .startup.at_mram	00000008 REFCLK_CNTBASE1_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ27Handler
2000070c g     O .data.at_dtcm	00000004 __malloc_sbrk_base
00000098 g     F .code.at_itcm	00000000 _start
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ26Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ20Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ69Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ81Handler
00003d10 g     F .code.at_itcm	00000014 GPIO2_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ3Handler
0000f7b4 g     F .code.at_itcm	00000010 _lseek
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ60Handler
80200874  w    F .startup.at_mram	00000008 ADC120_DONE0_IRQHandler
000003ec  w    F .code.at_itcm	00000028 LPRTC::disable()
0000de90 g     F .code.at_itcm	000000e4 __lshift
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ7Handler
0000520c g     F .code.at_itcm	00000014 GPIO13_IRQ5Handler
000053e4 g     F .code.at_itcm	00000014 GPIO14_IRQ4Handler
00000476  w    F .code.at_itcm	00000026 Register<unsigned long, unsigned int, 16u>::set(unsigned long)
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ13Handler
80200874  w    F .startup.at_mram	00000008 I2S1_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ28Handler
000087d0 g     F .code.at_itcm	00000306 .hidden __gnu_unwind_execute
80200874  w    F .startup.at_mram	00000008 ADC121_DONE1_IRQHandler
0000c788 g     F .code.at_itcm	00000084 __register_exitproc
00000090  w    F .code.at_itcm	00000000 _stack_init
00000966 g     F .code.at_itcm	0000003e JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)
00008610 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00003938 g     F .code.at_itcm	00000014 GPIO0_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ55Handler
80200b24 g     F .startup.at_mram	0000001e sys_busy_loop_init
00004fe4 g     F .code.at_itcm	00000014 GPIO12_IRQ2Handler
000009ec g     F .code.at_itcm	00000078 JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)
0000dc68 g     F .code.at_itcm	00000168 __multiply
80200874  w    F .startup.at_mram	00000008 LPGPIO_COMB_IRQHandler
0000c548 g     F .code.at_itcm	00000064 strncpy
20001810 g     O .bss	00000028 __malloc_current_mallinfo
0000e128 g     F .code.at_itcm	000000bc __d2b
00000546 g     F .code.at_itcm	00000054 JIT::Backend::addInstruction(unsigned long)
200005b0 g     O .data.at_dtcm	00000004 SystemHFOSCClock
0000059a g     F .code.at_itcm	00000028 JIT::Backend::addBranchInstruction(unsigned long)
00000646 g     F .code.at_itcm	00000048 JIT::Generators::Simple::generate()
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ8Handler
00001600 g     F .code.at_itcm	0000010c SEGGER_RTT_ReadNoLock
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ29Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ8Handler
00007e98 g     F .code.at_itcm	00000044 .hidden __gnu_Unwind_Resume
000008a8 g     F .code.at_itcm	00000040 JIT::Instructions::DataProcessing::str(JIT::Instructions::Register, JIT::Instructions::Register)
80200874  w    F .startup.at_mram	00000008 PDM_WARN_IRQHandler
80200874  w    F .startup.at_mram	00000008 CDC_REG_RELOAD1_IRQHandler
0000c5c0 g     F .code.at_itcm	00000024 _close_r
000044ac g     F .code.at_itcm	00000014 GPIO6_IRQ6Handler
00003e98 g     F .code.at_itcm	00000014 GPIO3_IRQ2Handler
00000a64 g     F .code.at_itcm	0000004c JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)
000053a8 g     F .code.at_itcm	00000014 GPIO14_IRQ1Handler
80200874  w    F .startup.at_mram	00000008 I2S3_IRQHandler
00004000 g       *ABS*	00000000 TGU_BLOCK_SIZE
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ38Handler
00008620 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ75Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ66Handler
0000560c g     F .code.at_itcm	00000014 LPGPIO_IRQ7Handler
000019dc g     F .code.at_itcm	0000004c SEGGER_RTT_WriteDownBuffer
00008f20 g     F .code.at_itcm	00000002 __retarget_lock_close_recursive
80200874  w    F .startup.at_mram	00000008 USB_IRQHandler
80200874  w    F .startup.at_mram	00000008 SOC_ETR_IRQHandler
00004000 g       *ABS*	00000000 __APP_HEAP_SIZE
0000c34c g     F .code.at_itcm	00000100 __swsetup_r
00004898 g     F .code.at_itcm	00000014 GPIO8_IRQ7Handler
000086e0 g     F .code.at_itcm	00000022 .hidden _Unwind_RaiseException
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ43Handler
00008ad8  w    F .code.at_itcm	00000002 .hidden __aeabi_ldiv0
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ2Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ46Handler
000051e4 g     F .code.at_itcm	00000014 GPIO13_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ32Handler
20000718 g     O .data.at_dtcm	00000408 __malloc_av_
80200874  w    F .startup.at_mram	00000008 BOD_IRQHandler
2000180c g     O .bss	00000004 __atexit
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ25Handler
20004000 g       .__app_heap	00000000 __RAM_segment_used_end__
0000c20c g     F .code.at_itcm	00000022 __sread
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ8Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ22Handler
80200874  w    F .startup.at_mram	00000008 OSPI1_IRQHandler
80200874  w    F .startup.at_mram	00000008 I2C3_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ62Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ9Handler
0000bb5c g     F .code.at_itcm	0000000c __malloc_lock
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ27Handler
000038d4 g     F .code.at_itcm	00000014 GPIO0_IRQ2Handler
00000ab0 g     F .code.at_itcm	00000058 JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)
00004648 g     F .code.at_itcm	00000014 GPIO7_IRQ2Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ79Handler
802010c0 g     F .startup.at_mram	0000003c MPU_Clear_All_Regions
00001a74 g     F .code.at_itcm	00000026 SEGGER_RTT_WriteString
0000c1b8 g     F .code.at_itcm	00000054 _fflush_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ39Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ31Handler
0000e480 g     F .code.at_itcm	0000006e _calloc_r
000014f2 g     F .code.at_itcm	0000010e SEGGER_RTT_ReadUpBufferNoLock
00004698 g     F .code.at_itcm	00000014 GPIO7_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 SPI2_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ7Handler
00008f24 g     F .code.at_itcm	00000002 __retarget_lock_acquire_recursive
00004670 g     F .code.at_itcm	00000014 GPIO7_IRQ4Handler
80200874  w    F .startup.at_mram	00000008 MHU_SECPU_M55HP_1_RX_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ5Handler
00004bf8 g     F .code.at_itcm	00000014 GPIO10_IRQ1Handler
80200874  w    F .startup.at_mram	00000008 ADC122_DONE0_IRQHandler
0000405c g     F .code.at_itcm	00000014 GPIO4_IRQ0Handler
00008da8 g     F .code.at_itcm	0000009c memset
00000b7c g     F .code.at_itcm	00000008 MemManage_Handler
0000062c g     F .code.at_itcm	0000001a JIT::Backend::getThumbAddress() const
00000436  w    F .code.at_itcm	0000001e Register<unsigned long, unsigned int, 0u>::Register(unsigned int)
00000120 g     F .code.at_itcm	0000020c main
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ11Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ13Handler
80200874  w    F .startup.at_mram	00000008 ADC24_DONE0_IRQHandler
20001838 g     O .bss	00000004 __malloc_max_total_mem
00004c5c g     F .code.at_itcm	00000014 GPIO10_IRQ6Handler
00008f1c g     F .code.at_itcm	00000002 __retarget_lock_init_recursive
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ24Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ4Handler
00002308 g     F .code.at_itcm	00000128 SEGGER_RTT_TerminalOut
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ30Handler
00003ae8 g     F .code.at_itcm	00000014 GPIO1_IRQ4Handler
20000da0  w    O .bss	00000004 LPRTC::CCVR
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ12Handler
80200874  w    F .startup.at_mram	00000008 SVC_Handler
0000c298 g     F .code.at_itcm	00000008 __sclose
000004c2  w    F .code.at_itcm	00000028 Register<unsigned long, unsigned int, 12u>::clear(unsigned long)
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ_ABORT_Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ5Handler
00004c70 g     F .code.at_itcm	00000014 GPIO10_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ15Handler
0000c9c0 g     F .code.at_itcm	00000da8 _dtoa_r
00009150 g     F .code.at_itcm	00000578 _malloc_r
0000e2b4 g     F .code.at_itcm	0000001c __ascii_wctomb
80200874  w    F .startup.at_mram	00000008 MHU_M55HP_M55HE_0_TX_IRQHandler
00000454  w    F .code.at_itcm	00000022 Register<unsigned long, unsigned int, 12u>::Register(unsigned int)
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ89Handler
80200ba8  w    F .startup.at_mram	00000010 RTSS_IsGlobalCacheClean_Required
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ50Handler
20008000 g       .heap	00000000 __end__
00004a70 g     F .code.at_itcm	00000014 GPIO9_IRQ6Handler
802007d2 g     F .startup.at_mram	0000009a Reset_Handler_C
00005034 g     F .code.at_itcm	00000014 GPIO12_IRQ6Handler
00001778 g     F .code.at_itcm	00000124 SEGGER_RTT_WriteWithOverwriteNoLock
00004684 g     F .code.at_itcm	00000014 GPIO7_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ1Handler
0000d768 g     F .code.at_itcm	000000b8 _malloc_trim_r
00007e84 g     F .code.at_itcm	00000014 .hidden __gnu_Unwind_ForcedUnwind
0000485c g     F .code.at_itcm	00000014 GPIO8_IRQ4Handler
0000e32c g     F .code.at_itcm	000000f2 _wcsnrtombs_l
00003afc g     F .code.at_itcm	00000014 GPIO1_IRQ5Handler
00002100 g     F .code.at_itcm	0000006c SEGGER_RTT_SetNameDownBuffer
00003910 g     F .code.at_itcm	00000014 GPIO0_IRQ5Handler
80200874  w    F .startup.at_mram	00000008 CDC_REG_RELOAD0_IRQHandler
80201220 g       .zero.table	00000000 __zero_table_start__
80200874  w    F .startup.at_mram	00000008 QEC0_CMPB_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ12Handler
802009b0 g     F .startup.at_mram	00000098 SystemInit
00007edc g     F .code.at_itcm	00000020 .hidden __gnu_Unwind_Resume_or_Rethrow
00004a20 g     F .code.at_itcm	00000014 GPIO9_IRQ2Handler
00000454  w    F .code.at_itcm	00000022 Register<unsigned long, unsigned int, 12u>::Register(unsigned int)
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ51Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ28Handler
802117ec g     F .readonly.at_mram	00000000 _fini
000085e8 g     F .code.at_itcm	00000018 .hidden restore_core_regs
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ54Handler
00003ee8 g     F .code.at_itcm	00000014 GPIO3_IRQ6Handler
000086cc g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Save_WMMXC
80200874  w    F .startup.at_mram	00000008 ETH_PMT_IRQHandler
80200874  w    F .startup.at_mram	00000008 MHU_M55HE_M55HP_0_RX_IRQHandler
00002c14 g     F .code.at_itcm	00000030 SEGGER_RTT_printf
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ9Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ95Handler
000007f2 g     F .code.at_itcm	00000030 JIT::Instructions::Base::bx(JIT::Instructions::Register)
00009144 g     F .code.at_itcm	0000000c atexit
00004c48 g     F .code.at_itcm	00000014 GPIO10_IRQ5Handler
0000e420 g     F .code.at_itcm	00000024 _wcsnrtombs_r
00002c64 g     F .code.at_itcm	00000022 _write_r
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ20Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ22Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ18Handler
80200874  w    F .startup.at_mram	00000008 DSI_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ17Handler
00003cc0 g     F .code.at_itcm	00000014 GPIO2_IRQ3Handler
20100000 g       .stack	00000000 __StackTop
0000049c  w    F .code.at_itcm	00000026 Register<unsigned long, unsigned int, 12u>::set(unsigned long)
200005c4 g     O .data.at_dtcm	00000004 _impure_ptr
80200874  w    F .startup.at_mram	00000008 ADC122_CMPB_IRQHandler
00004270 g     F .code.at_itcm	00000014 GPIO5_IRQ2Handler
80200874  w    F .startup.at_mram	00000008 PPU1_IRQHandler
0000c084 g     F .code.at_itcm	00000134 __sflush_r
80200874  w    F .startup.at_mram	00000008 ETH_SBD_IRQHandler
20000dac  w    O .bss	00000004 guard variable for LPRTC::RTC_CLK_EN
0000bb74 g     F .code.at_itcm	00000042 _fwalk_sglue
80200874  w    F .startup.at_mram	00000008 CANFD_IRQHandler
00004be4 g     F .code.at_itcm	00000014 GPIO10_IRQ0Handler
00004df8 g     F .code.at_itcm	00000014 GPIO11_IRQ2Handler
80201088  w    F .startup.at_mram	00000038 MPU_Load_Regions
80200874  w    F .startup.at_mram	00000008 CDC_BUS_ERROR0_IRQHandler
80200874  w    F .startup.at_mram	00000008 MHU_M55HP_SECPU_1_TX_IRQHandler
0000da08 g     F .code.at_itcm	0000002a __ascii_mbtowc
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ12Handler
80200874  w    F .startup.at_mram	00000008 QEC1_CMPB_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ49Handler
80200874  w    F .startup.at_mram	00000008 LPTIMER3_IRQHandler
00005394 g     F .code.at_itcm	00000014 GPIO14_IRQ0Handler
80200874  w    F .startup.at_mram	00000008 SOC_CATU_IRQHandler
00004834 g     F .code.at_itcm	00000014 GPIO8_IRQ2Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ31Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ30Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ72Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ80Handler
00003e70 g     F .code.at_itcm	00000014 GPIO3_IRQ0Handler
00004284 g     F .code.at_itcm	00000014 GPIO5_IRQ3Handler
00004c34 g     F .code.at_itcm	00000014 GPIO10_IRQ4Handler
80200874  w    F .startup.at_mram	00000008 PPU0_IRQHandler
80200874  w    F .startup.at_mram	00000008 MHU_SECPU_M55HP_0_RX_IRQHandler
000003b0  w    F .code.at_itcm	00000014 LPRTC::getInstance()
000053bc g     F .code.at_itcm	00000014 GPIO14_IRQ2Handler
00004448 g     F .code.at_itcm	00000014 GPIO6_IRQ1Handler
00007efc g     F .code.at_itcm	00000034 .hidden _Unwind_VRS_Get
8020086c g     F .startup.at_mram	00000008 Fault_Handler
00004e5c g     F .code.at_itcm	00000014 GPIO11_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ35Handler
00007548 g     F .code.at_itcm	00000228 uart_irq_handler
20100000 g       .stack	00000000 __stack
000086b8 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Restore_WMMXC
80200874  w    F .startup.at_mram	00000008 ADC120_DONE1_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ15Handler
00001c86 g     F .code.at_itcm	0000001c SEGGER_RTT_WaitKey
000007e0 g     F .code.at_itcm	00000012 JIT::Instructions::Base::nop()
00004298 g     F .code.at_itcm	00000014 GPIO5_IRQ4Handler
200005b8 g     O .data.at_dtcm	0000000c __sglue
000003c4  w    F .code.at_itcm	00000028 LPRTC::enable()
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ93Handler
00002c44 g     F .code.at_itcm	00000020 _write
0000874c g     F .code.at_itcm	00000022 .hidden _Unwind_ForcedUnwind
80200874  w    F .startup.at_mram	00000008 SPI0_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ31Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ10Handler
00003c98 g     F .code.at_itcm	00000014 GPIO2_IRQ1Handler
000055bc g     F .code.at_itcm	00000014 LPGPIO_IRQ3Handler
0000480c g     F .code.at_itcm	00000014 GPIO8_IRQ0Handler
200fe000 g       .stack	00000000 __StackLimit
00006f40 g     F .code.at_itcm	00000014 UART7_IRQHandler
00000512 g     F .code.at_itcm	00000034 JIT::Backend::addInstruction(unsigned short)
00006dcc g     F .code.at_itcm	00000014 UART6_IRQHandler
0000c230 g     F .code.at_itcm	0000003e __swrite
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ23Handler
20000710 g     O .data.at_dtcm	00000004 __malloc_trim_threshold
000042c0 g     F .code.at_itcm	00000014 GPIO5_IRQ6Handler
80200874  w    F .startup.at_mram	00000008 MHU_A32_M55HP_1_RX_IRQHandler
00008aec g     F .code.at_itcm	0000001c exit
0000e4f0 g     F .code.at_itcm	00000028 fiprintf
0000e518 g     F .code.at_itcm	000011c8 _vfiprintf_r
80200874  w    F .startup.at_mram	00000008 ADC24_CMPA_IRQHandler
802008c4 g     F .startup.at_mram	0000001c SystemCoreClockUpdate
0000dfb8 g     F .code.at_itcm	00000170 __mdiff
00008674 g     F .code.at_itcm	00000000 .hidden __gnu_Unwind_Save_WMMXD
00004084 g     F .code.at_itcm	00000014 GPIO4_IRQ2Handler
0000f7a4 g     F .code.at_itcm	00000010 _kill
200005c8 g     O .data.at_dtcm	00000140 _impure_data
00008d9c g     F .code.at_itcm	0000000c __sfp_lock_release
80200874  w    F .startup.at_mram	00000008 I3C_IRQHandler
00004a0c g     F .code.at_itcm	00000014 GPIO9_IRQ1Handler
00003e84 g     F .code.at_itcm	00000014 GPIO3_IRQ1Handler
00004e34 g     F .code.at_itcm	00000014 GPIO11_IRQ5Handler
000005c2 g     F .code.at_itcm	0000002c JIT::Backend::addBranchInstruction(unsigned short)
000009a4 g     F .code.at_itcm	00000048 JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)
00007244 g     F .code.at_itcm	0000010e uart_receive_blocking
80200000 g       *ABS*	00000000 __ROM_BASE
80211f08 g     O .readonly.at_mram	00000101 _ctype_
802010fc  w    F .startup.at_mram	0000002c MPU_Setup
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ1Handler
0000189c g     F .code.at_itcm	000000a0 SEGGER_RTT_WriteDownBufferNoLock
0000f7c4 g     F .code.at_itcm	00000010 _read
00008ad8  w    F .code.at_itcm	00000002 .hidden __aeabi_idiv0
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ17Handler
80200c50 g     F .startup.at_mram	000001c0 TGU_Setup
000042d4 g     F .code.at_itcm	00000014 GPIO5_IRQ7Handler
80200874  w    F .startup.at_mram	00000008 PDM_ERROR_IRQHandler
802117f8 g     O .readonly.at_mram	00000004 _do_platform_pre_stackheap_init
000077b8 g     F .code.at_itcm	00000018 GetSystemREFClock
80200874  w    F .startup.at_mram	00000008 ADC24_DONE1_IRQHandler
20001208 g     O .bss	000000a8 _SEGGER_RTT
0000f7f4 g     F .code.at_itcm	00000002 _exit
80201218 g       .copy.table	00000000 __copy_table_end__
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ47Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ37Handler
80200874  w    F .startup.at_mram	00000008 REFCLK_CNTBASE0_IRQHandler
000038ac g     F .code.at_itcm	00000014 GPIO0_IRQ0Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ22Handler
00000b84 g     F .code.at_itcm	00000008 BusFault_Handler
0000e1e4 g     F .code.at_itcm	000000d0 __smakebuf_r
00004c20 g     F .code.at_itcm	00000014 GPIO10_IRQ3Handler
00000b20 g     F .code.at_itcm	00000054 fault_dump_enable
00009018 g     F .code.at_itcm	0000005c strlen
80200874  w    F .startup.at_mram	00000008 CDC_FIFO_UNDERRUN1_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ26Handler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ74Handler
80200874  w    F .startup.at_mram	00000008 SPI3_IRQHandler
000082d0  w    F .code.at_itcm	00000006 .hidden __aeabi_unwind_cpp_pr1
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ42Handler
80200874  w    F .startup.at_mram	00000008 HWSEM_IRQ11Handler
000008e8 g     F .code.at_itcm	00000040 JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)
00006970 g     F .code.at_itcm	00000014 UART3_IRQHandler
00001742 g     F .code.at_itcm	00000036 SEGGER_RTT_Read
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ30Handler
00004248 g     F .code.at_itcm	00000014 GPIO5_IRQ0Handler
200005ac g     O .data.at_dtcm	00000004 SystemREFClock
0000bfa4 g     F .code.at_itcm	0000001e __sprint_r
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ82Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ3Handler
80200874  w    F .startup.at_mram	00000008 CDC_BUS_ERROR1_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ21Handler
20004000 g       .nonsecure0_region	00000000 __ns_region_0_start
80200874  w    F .startup.at_mram	00000008 REFCLK_CNTBASE3_IRQHandler
000051f8 g     F .code.at_itcm	00000014 GPIO13_IRQ4Handler
00000b9c g     F .code.at_itcm	00000008 DebugMonitor_Handler
80200874  w    F .startup.at_mram	00000008 DMA1_IRQ1Handler
000096c8 g     F .code.at_itcm	0000212c _vfprintf_r
0000068e g     F .code.at_itcm	00000150 JIT::Generators::Triad::generate(unsigned long)
80200874  w    F .startup.at_mram	00000008 CMP0_IRQHandler
80200874  w    F .startup.at_mram	00000008 UTIMER_IRQ83Handler
000051a8 g     F .code.at_itcm	00000014 GPIO13_IRQ0Handler
0000db8c g     F .code.at_itcm	00000080 __lo0bits
00004c0c g     F .code.at_itcm	00000014 GPIO10_IRQ2Handler
00003eac g     F .code.at_itcm	00000014 GPIO3_IRQ3Handler
000038fc g     F .code.at_itcm	00000014 GPIO0_IRQ4Handler
20000da4  w    O .bss	00000004 LPRTC::CCR
00004dd0 g     F .code.at_itcm	00000014 GPIO11_IRQ0Handler
80200874  w    F .startup.at_mram	00000008 MHU_M55HP_A32_0_TX_IRQHandler
000055d0 g     F .code.at_itcm	00000014 LPGPIO_IRQ4Handler
00001ca2 g     F .code.at_itcm	0000004a SEGGER_RTT_HasKey
802008f8  w    F .startup.at_mram	0000000e System_HandleSpuriousWakeup
0000c810 g     F .code.at_itcm	00000078 frexp
00003aac g     F .code.at_itcm	00000014 GPIO1_IRQ1Handler
80200874  w    F .startup.at_mram	00000008 LPRTC_IRQHandler
20000b20 g     O .data.at_dtcm	0000016c __global_locale
80200874  w    F .startup.at_mram	00000008 ADC121_CMPB_IRQHandler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ29Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ23Handler
00000928 g     F .code.at_itcm	0000003e JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)
00005234 g     F .code.at_itcm	00000014 GPIO13_IRQ7Handler
20001808 g     O .bss	00000001 __lock___sfp_recursive_mutex
00004a48 g     F .code.at_itcm	00000014 GPIO9_IRQ4Handler
80200874  w    F .startup.at_mram	00000008 DMA0_IRQ0Handler
0000f764 g     F .code.at_itcm	00000010 _close
00008e44 g     F .code.at_itcm	00000058 raise
802008e0 g     F .startup.at_mram	00000018 GetSystemCoreClock
20000d9c  w    O .bss	00000004 LPRTC::RTC_CLK_EN
0000da94 g     F .code.at_itcm	000000a4 __multadd
0000da80 g     F .code.at_itcm	00000012 _Bfree
00004e0c g     F .code.at_itcm	00000014 GPIO11_IRQ3Handler
00001ffc g     F .code.at_itcm	00000098 SEGGER_RTT_ConfigDownBuffer
80200874  w    F .startup.at_mram	00000008 QEC1_CMPA_IRQHandler

Disassembly of section .startup.at_mram:
80200000: 00 00 10 20  	.word	0x20100000
80200004: c1 07 20 80  	.word	0x802007c1
80200008: 75 08 20 80  	.word	0x80200875
8020000c: 75 0b 00 00  	.word	0x00000b75
80200010: 7d 0b 00 00  	.word	0x00000b7d
80200014: 85 0b 00 00  	.word	0x00000b85
80200018: 8d 0b 00 00  	.word	0x00000b8d
8020001c: 95 0b 00 00  	.word	0x00000b95
80200020: 00 00 00 00  	.word	0x00000000
80200024: 00 00 00 00  	.word	0x00000000
80200028: 00 00 00 00  	.word	0x00000000
8020002c: 75 08 20 80  	.word	0x80200875
80200030: 75 08 20 80  	.word	0x80200875
80200034: 00 00 00 00  	.word	0x00000000
80200038: 75 08 20 80  	.word	0x80200875
8020003c: 75 08 20 80  	.word	0x80200875
80200040: 75 08 20 80  	.word	0x80200875
80200044: 75 08 20 80  	.word	0x80200875
80200048: 75 08 20 80  	.word	0x80200875
8020004c: 75 08 20 80  	.word	0x80200875
80200050: 75 08 20 80  	.word	0x80200875
80200054: 75 08 20 80  	.word	0x80200875
80200058: 75 08 20 80  	.word	0x80200875
8020005c: 75 08 20 80  	.word	0x80200875
80200060: 75 08 20 80  	.word	0x80200875
80200064: 75 08 20 80  	.word	0x80200875
80200068: 75 08 20 80  	.word	0x80200875
8020006c: 75 08 20 80  	.word	0x80200875
80200070: 75 08 20 80  	.word	0x80200875
80200074: 75 08 20 80  	.word	0x80200875
80200078: 75 08 20 80  	.word	0x80200875
8020007c: 75 08 20 80  	.word	0x80200875
80200080: 75 08 20 80  	.word	0x80200875
80200084: 75 08 20 80  	.word	0x80200875
80200088: 75 08 20 80  	.word	0x80200875
8020008c: 75 08 20 80  	.word	0x80200875
80200090: 75 08 20 80  	.word	0x80200875
80200094: 75 08 20 80  	.word	0x80200875
80200098: 75 08 20 80  	.word	0x80200875
8020009c: 75 08 20 80  	.word	0x80200875
802000a0: 75 08 20 80  	.word	0x80200875
802000a4: 75 08 20 80  	.word	0x80200875
802000a8: 75 08 20 80  	.word	0x80200875
802000ac: 75 08 20 80  	.word	0x80200875
802000b0: 75 08 20 80  	.word	0x80200875
802000b4: 75 08 20 80  	.word	0x80200875
802000b8: 75 08 20 80  	.word	0x80200875
802000bc: 75 08 20 80  	.word	0x80200875
802000c0: 75 08 20 80  	.word	0x80200875
802000c4: 75 08 20 80  	.word	0x80200875
802000c8: 75 08 20 80  	.word	0x80200875
802000cc: 75 08 20 80  	.word	0x80200875
802000d0: 75 08 20 80  	.word	0x80200875
802000d4: 75 08 20 80  	.word	0x80200875
802000d8: 75 08 20 80  	.word	0x80200875
802000dc: 75 08 20 80  	.word	0x80200875
802000e0: 75 08 20 80  	.word	0x80200875
802000e4: 75 08 20 80  	.word	0x80200875
802000e8: 75 08 20 80  	.word	0x80200875
802000ec: 75 08 20 80  	.word	0x80200875
802000f0: 75 08 20 80  	.word	0x80200875
802000f4: 00 00 00 00  	.word	0x00000000
802000f8: 00 00 00 00  	.word	0x00000000
802000fc: 00 00 00 00  	.word	0x00000000
80200100: 00 00 00 00  	.word	0x00000000
80200104: 00 00 00 00  	.word	0x00000000
80200108: 00 00 00 00  	.word	0x00000000
8020010c: 00 00 00 00  	.word	0x00000000
80200110: 00 00 00 00  	.word	0x00000000
80200114: 00 00 00 00  	.word	0x00000000
80200118: 00 00 00 00  	.word	0x00000000
8020011c: 75 08 20 80  	.word	0x80200875
80200120: 75 08 20 80  	.word	0x80200875
80200124: 75 08 20 80  	.word	0x80200875
80200128: 75 08 20 80  	.word	0x80200875
8020012c: 00 00 00 00  	.word	0x00000000
80200130: 75 08 20 80  	.word	0x80200875
80200134: 75 08 20 80  	.word	0x80200875
80200138: 75 08 20 80  	.word	0x80200875
8020013c: 75 08 20 80  	.word	0x80200875
80200140: 00 00 00 00  	.word	0x00000000
80200144: 00 00 00 00  	.word	0x00000000
80200148: 00 00 00 00  	.word	0x00000000
8020014c: 75 08 20 80  	.word	0x80200875
80200150: 75 08 20 80  	.word	0x80200875
80200154: 75 08 20 80  	.word	0x80200875
80200158: 75 08 20 80  	.word	0x80200875
8020015c: 75 08 20 80  	.word	0x80200875
80200160: 75 08 20 80  	.word	0x80200875
80200164: 75 08 20 80  	.word	0x80200875
80200168: 75 08 20 80  	.word	0x80200875
8020016c: 00 00 00 00  	.word	0x00000000
80200170: 00 00 00 00  	.word	0x00000000
80200174: 00 00 00 00  	.word	0x00000000
80200178: 00 00 00 00  	.word	0x00000000
8020017c: 00 00 00 00  	.word	0x00000000
80200180: 00 00 00 00  	.word	0x00000000
80200184: 00 00 00 00  	.word	0x00000000
80200188: 00 00 00 00  	.word	0x00000000
8020018c: 00 00 00 00  	.word	0x00000000
80200190: 00 00 00 00  	.word	0x00000000
80200194: 00 00 00 00  	.word	0x00000000
80200198: 00 00 00 00  	.word	0x00000000
8020019c: 00 00 00 00  	.word	0x00000000
802001a0: 00 00 00 00  	.word	0x00000000
802001a4: 00 00 00 00  	.word	0x00000000
802001a8: 00 00 00 00  	.word	0x00000000
802001ac: 00 00 00 00  	.word	0x00000000
802001b0: 00 00 00 00  	.word	0x00000000
802001b4: 00 00 00 00  	.word	0x00000000
802001b8: 00 00 00 00  	.word	0x00000000
802001bc: 00 00 00 00  	.word	0x00000000
802001c0: 75 08 20 80  	.word	0x80200875
802001c4: 75 08 20 80  	.word	0x80200875
802001c8: 75 08 20 80  	.word	0x80200875
802001cc: 75 08 20 80  	.word	0x80200875
802001d0: 75 08 20 80  	.word	0x80200875
802001d4: 75 08 20 80  	.word	0x80200875
802001d8: 75 08 20 80  	.word	0x80200875
802001dc: 75 08 20 80  	.word	0x80200875
802001e0: 75 08 20 80  	.word	0x80200875
802001e4: 75 08 20 80  	.word	0x80200875
802001e8: 75 08 20 80  	.word	0x80200875
802001ec: 75 08 20 80  	.word	0x80200875
802001f0: 75 08 20 80  	.word	0x80200875
802001f4: 75 08 20 80  	.word	0x80200875
802001f8: 75 08 20 80  	.word	0x80200875
802001fc: 75 08 20 80  	.word	0x80200875
80200200: 75 08 20 80  	.word	0x80200875
80200204: 75 08 20 80  	.word	0x80200875
80200208: 75 08 20 80  	.word	0x80200875
8020020c: 75 08 20 80  	.word	0x80200875
80200210: 75 08 20 80  	.word	0x80200875
80200214: 75 08 20 80  	.word	0x80200875
80200218: 75 08 20 80  	.word	0x80200875
8020021c: 75 08 20 80  	.word	0x80200875
80200220: 75 08 20 80  	.word	0x80200875
80200224: 75 08 20 80  	.word	0x80200875
80200228: 75 08 20 80  	.word	0x80200875
8020022c: 75 08 20 80  	.word	0x80200875
80200230: 15 65 00 00  	.word	0x00006515
80200234: 89 66 00 00  	.word	0x00006689
80200238: fd 67 00 00  	.word	0x000067fd
8020023c: 71 69 00 00  	.word	0x00006971
80200240: e5 6a 00 00  	.word	0x00006ae5
80200244: 59 6c 00 00  	.word	0x00006c59
80200248: cd 6d 00 00  	.word	0x00006dcd
8020024c: 41 6f 00 00  	.word	0x00006f41
80200250: 75 08 20 80  	.word	0x80200875
80200254: 75 08 20 80  	.word	0x80200875
80200258: 75 08 20 80  	.word	0x80200875
8020025c: 75 08 20 80  	.word	0x80200875
80200260: 75 08 20 80  	.word	0x80200875
80200264: 75 08 20 80  	.word	0x80200875
80200268: 75 08 20 80  	.word	0x80200875
8020026c: 75 08 20 80  	.word	0x80200875
80200270: 75 08 20 80  	.word	0x80200875
80200274: 75 08 20 80  	.word	0x80200875
80200278: 75 08 20 80  	.word	0x80200875
8020027c: 75 08 20 80  	.word	0x80200875
80200280: 75 08 20 80  	.word	0x80200875
80200284: 75 08 20 80  	.word	0x80200875
80200288: 75 08 20 80  	.word	0x80200875
8020028c: 75 08 20 80  	.word	0x80200875
80200290: 75 08 20 80  	.word	0x80200875
80200294: 75 08 20 80  	.word	0x80200875
80200298: 00 00 00 00  	.word	0x00000000
8020029c: 75 08 20 80  	.word	0x80200875
802002a0: 75 08 20 80  	.word	0x80200875
802002a4: 75 08 20 80  	.word	0x80200875
802002a8: 75 08 20 80  	.word	0x80200875
802002ac: 75 08 20 80  	.word	0x80200875
802002b0: 75 08 20 80  	.word	0x80200875
802002b4: 75 08 20 80  	.word	0x80200875
802002b8: 75 08 20 80  	.word	0x80200875
802002bc: 75 08 20 80  	.word	0x80200875
802002c0: 75 08 20 80  	.word	0x80200875
802002c4: 75 08 20 80  	.word	0x80200875
802002c8: 75 08 20 80  	.word	0x80200875
802002cc: 75 08 20 80  	.word	0x80200875
802002d0: 75 08 20 80  	.word	0x80200875
802002d4: 75 08 20 80  	.word	0x80200875
802002d8: 75 08 20 80  	.word	0x80200875
802002dc: 75 08 20 80  	.word	0x80200875
802002e0: 75 08 20 80  	.word	0x80200875
802002e4: 75 08 20 80  	.word	0x80200875
802002e8: 75 08 20 80  	.word	0x80200875
802002ec: 81 55 00 00  	.word	0x00005581
802002f0: 95 55 00 00  	.word	0x00005595
802002f4: a9 55 00 00  	.word	0x000055a9
802002f8: bd 55 00 00  	.word	0x000055bd
802002fc: d1 55 00 00  	.word	0x000055d1
80200300: e5 55 00 00  	.word	0x000055e5
80200304: f9 55 00 00  	.word	0x000055f9
80200308: 0d 56 00 00  	.word	0x0000560d
8020030c: ad 38 00 00  	.word	0x000038ad
80200310: c1 38 00 00  	.word	0x000038c1
80200314: d5 38 00 00  	.word	0x000038d5
80200318: e9 38 00 00  	.word	0x000038e9
8020031c: fd 38 00 00  	.word	0x000038fd
80200320: 11 39 00 00  	.word	0x00003911
80200324: 25 39 00 00  	.word	0x00003925
80200328: 39 39 00 00  	.word	0x00003939
8020032c: 99 3a 00 00  	.word	0x00003a99
80200330: ad 3a 00 00  	.word	0x00003aad
80200334: c1 3a 00 00  	.word	0x00003ac1
80200338: d5 3a 00 00  	.word	0x00003ad5
8020033c: e9 3a 00 00  	.word	0x00003ae9
80200340: fd 3a 00 00  	.word	0x00003afd
80200344: 11 3b 00 00  	.word	0x00003b11
80200348: 25 3b 00 00  	.word	0x00003b25
8020034c: 85 3c 00 00  	.word	0x00003c85
80200350: 99 3c 00 00  	.word	0x00003c99
80200354: ad 3c 00 00  	.word	0x00003cad
80200358: c1 3c 00 00  	.word	0x00003cc1
8020035c: d5 3c 00 00  	.word	0x00003cd5
80200360: e9 3c 00 00  	.word	0x00003ce9
80200364: fd 3c 00 00  	.word	0x00003cfd
80200368: 11 3d 00 00  	.word	0x00003d11
8020036c: 71 3e 00 00  	.word	0x00003e71
80200370: 85 3e 00 00  	.word	0x00003e85
80200374: 99 3e 00 00  	.word	0x00003e99
80200378: ad 3e 00 00  	.word	0x00003ead
8020037c: c1 3e 00 00  	.word	0x00003ec1
80200380: d5 3e 00 00  	.word	0x00003ed5
80200384: e9 3e 00 00  	.word	0x00003ee9
80200388: fd 3e 00 00  	.word	0x00003efd
8020038c: 5d 40 00 00  	.word	0x0000405d
80200390: 71 40 00 00  	.word	0x00004071
80200394: 85 40 00 00  	.word	0x00004085
80200398: 99 40 00 00  	.word	0x00004099
8020039c: ad 40 00 00  	.word	0x000040ad
802003a0: c1 40 00 00  	.word	0x000040c1
802003a4: d5 40 00 00  	.word	0x000040d5
802003a8: e9 40 00 00  	.word	0x000040e9
802003ac: 49 42 00 00  	.word	0x00004249
802003b0: 5d 42 00 00  	.word	0x0000425d
802003b4: 71 42 00 00  	.word	0x00004271
802003b8: 85 42 00 00  	.word	0x00004285
802003bc: 99 42 00 00  	.word	0x00004299
802003c0: ad 42 00 00  	.word	0x000042ad
802003c4: c1 42 00 00  	.word	0x000042c1
802003c8: d5 42 00 00  	.word	0x000042d5
802003cc: 35 44 00 00  	.word	0x00004435
802003d0: 49 44 00 00  	.word	0x00004449
802003d4: 5d 44 00 00  	.word	0x0000445d
802003d8: 71 44 00 00  	.word	0x00004471
802003dc: 85 44 00 00  	.word	0x00004485
802003e0: 99 44 00 00  	.word	0x00004499
802003e4: ad 44 00 00  	.word	0x000044ad
802003e8: c1 44 00 00  	.word	0x000044c1
802003ec: 21 46 00 00  	.word	0x00004621
802003f0: 35 46 00 00  	.word	0x00004635
802003f4: 49 46 00 00  	.word	0x00004649
802003f8: 5d 46 00 00  	.word	0x0000465d
802003fc: 71 46 00 00  	.word	0x00004671
80200400: 85 46 00 00  	.word	0x00004685
80200404: 99 46 00 00  	.word	0x00004699
80200408: ad 46 00 00  	.word	0x000046ad
8020040c: 0d 48 00 00  	.word	0x0000480d
80200410: 21 48 00 00  	.word	0x00004821
80200414: 35 48 00 00  	.word	0x00004835
80200418: 49 48 00 00  	.word	0x00004849
8020041c: 5d 48 00 00  	.word	0x0000485d
80200420: 71 48 00 00  	.word	0x00004871
80200424: 85 48 00 00  	.word	0x00004885
80200428: 99 48 00 00  	.word	0x00004899
8020042c: f9 49 00 00  	.word	0x000049f9
80200430: 0d 4a 00 00  	.word	0x00004a0d
80200434: 21 4a 00 00  	.word	0x00004a21
80200438: 35 4a 00 00  	.word	0x00004a35
8020043c: 49 4a 00 00  	.word	0x00004a49
80200440: 5d 4a 00 00  	.word	0x00004a5d
80200444: 71 4a 00 00  	.word	0x00004a71
80200448: 85 4a 00 00  	.word	0x00004a85
8020044c: e5 4b 00 00  	.word	0x00004be5
80200450: f9 4b 00 00  	.word	0x00004bf9
80200454: 0d 4c 00 00  	.word	0x00004c0d
80200458: 21 4c 00 00  	.word	0x00004c21
8020045c: 35 4c 00 00  	.word	0x00004c35
80200460: 49 4c 00 00  	.word	0x00004c49
80200464: 5d 4c 00 00  	.word	0x00004c5d
80200468: 71 4c 00 00  	.word	0x00004c71
8020046c: d1 4d 00 00  	.word	0x00004dd1
80200470: e5 4d 00 00  	.word	0x00004de5
80200474: f9 4d 00 00  	.word	0x00004df9
80200478: 0d 4e 00 00  	.word	0x00004e0d
8020047c: 21 4e 00 00  	.word	0x00004e21
80200480: 35 4e 00 00  	.word	0x00004e35
80200484: 49 4e 00 00  	.word	0x00004e49
80200488: 5d 4e 00 00  	.word	0x00004e5d
8020048c: bd 4f 00 00  	.word	0x00004fbd
80200490: d1 4f 00 00  	.word	0x00004fd1
80200494: e5 4f 00 00  	.word	0x00004fe5
80200498: f9 4f 00 00  	.word	0x00004ff9
8020049c: 0d 50 00 00  	.word	0x0000500d
802004a0: 21 50 00 00  	.word	0x00005021
802004a4: 35 50 00 00  	.word	0x00005035
802004a8: 49 50 00 00  	.word	0x00005049
802004ac: a9 51 00 00  	.word	0x000051a9
802004b0: bd 51 00 00  	.word	0x000051bd
802004b4: d1 51 00 00  	.word	0x000051d1
802004b8: e5 51 00 00  	.word	0x000051e5
802004bc: f9 51 00 00  	.word	0x000051f9
802004c0: 0d 52 00 00  	.word	0x0000520d
802004c4: 21 52 00 00  	.word	0x00005221
802004c8: 35 52 00 00  	.word	0x00005235
802004cc: 95 53 00 00  	.word	0x00005395
802004d0: a9 53 00 00  	.word	0x000053a9
802004d4: bd 53 00 00  	.word	0x000053bd
802004d8: d1 53 00 00  	.word	0x000053d1
802004dc: e5 53 00 00  	.word	0x000053e5
802004e0: f9 53 00 00  	.word	0x000053f9
802004e4: 0d 54 00 00  	.word	0x0000540d
802004e8: 21 54 00 00  	.word	0x00005421
802004ec: 75 08 20 80  	.word	0x80200875
802004f0: 75 08 20 80  	.word	0x80200875
802004f4: 75 08 20 80  	.word	0x80200875
802004f8: 75 08 20 80  	.word	0x80200875
802004fc: 75 08 20 80  	.word	0x80200875
80200500: 75 08 20 80  	.word	0x80200875
80200504: 75 08 20 80  	.word	0x80200875
80200508: 75 08 20 80  	.word	0x80200875
8020050c: 75 08 20 80  	.word	0x80200875
80200510: 75 08 20 80  	.word	0x80200875
80200514: 75 08 20 80  	.word	0x80200875
80200518: 75 08 20 80  	.word	0x80200875
8020051c: 75 08 20 80  	.word	0x80200875
80200520: 75 08 20 80  	.word	0x80200875
80200524: 75 08 20 80  	.word	0x80200875
80200528: 75 08 20 80  	.word	0x80200875
8020052c: 75 08 20 80  	.word	0x80200875
80200530: 75 08 20 80  	.word	0x80200875
80200534: 75 08 20 80  	.word	0x80200875
80200538: 75 08 20 80  	.word	0x80200875
8020053c: 75 08 20 80  	.word	0x80200875
80200540: 75 08 20 80  	.word	0x80200875
80200544: 75 08 20 80  	.word	0x80200875
80200548: 75 08 20 80  	.word	0x80200875
8020054c: 75 08 20 80  	.word	0x80200875
80200550: 75 08 20 80  	.word	0x80200875
80200554: 75 08 20 80  	.word	0x80200875
80200558: 75 08 20 80  	.word	0x80200875
8020055c: 75 08 20 80  	.word	0x80200875
80200560: 75 08 20 80  	.word	0x80200875
80200564: 75 08 20 80  	.word	0x80200875
80200568: 75 08 20 80  	.word	0x80200875
8020056c: 75 08 20 80  	.word	0x80200875
80200570: 75 08 20 80  	.word	0x80200875
80200574: 75 08 20 80  	.word	0x80200875
80200578: 75 08 20 80  	.word	0x80200875
8020057c: 75 08 20 80  	.word	0x80200875
80200580: 75 08 20 80  	.word	0x80200875
80200584: 75 08 20 80  	.word	0x80200875
80200588: 75 08 20 80  	.word	0x80200875
8020058c: 75 08 20 80  	.word	0x80200875
80200590: 75 08 20 80  	.word	0x80200875
80200594: 75 08 20 80  	.word	0x80200875
80200598: 75 08 20 80  	.word	0x80200875
8020059c: 75 08 20 80  	.word	0x80200875
802005a0: 75 08 20 80  	.word	0x80200875
802005a4: 75 08 20 80  	.word	0x80200875
802005a8: 75 08 20 80  	.word	0x80200875
802005ac: 75 08 20 80  	.word	0x80200875
802005b0: 75 08 20 80  	.word	0x80200875
802005b4: 75 08 20 80  	.word	0x80200875
802005b8: 75 08 20 80  	.word	0x80200875
802005bc: 00 00 00 00  	.word	0x00000000
802005c0: 00 00 00 00  	.word	0x00000000
802005c4: 00 00 00 00  	.word	0x00000000
802005c8: 00 00 00 00  	.word	0x00000000
802005cc: 00 00 00 00  	.word	0x00000000
802005d0: 00 00 00 00  	.word	0x00000000
802005d4: 00 00 00 00  	.word	0x00000000
802005d8: 00 00 00 00  	.word	0x00000000
802005dc: 00 00 00 00  	.word	0x00000000
802005e0: 00 00 00 00  	.word	0x00000000
802005e4: 00 00 00 00  	.word	0x00000000
802005e8: 00 00 00 00  	.word	0x00000000
802005ec: 00 00 00 00  	.word	0x00000000
802005f0: 00 00 00 00  	.word	0x00000000
802005f4: 00 00 00 00  	.word	0x00000000
802005f8: 00 00 00 00  	.word	0x00000000
802005fc: 00 00 00 00  	.word	0x00000000
80200600: 00 00 00 00  	.word	0x00000000
80200604: 75 08 20 80  	.word	0x80200875
80200608: 75 08 20 80  	.word	0x80200875
8020060c: 75 08 20 80  	.word	0x80200875
80200610: 75 08 20 80  	.word	0x80200875
80200614: 75 08 20 80  	.word	0x80200875
80200618: 75 08 20 80  	.word	0x80200875
8020061c: 75 08 20 80  	.word	0x80200875
80200620: 75 08 20 80  	.word	0x80200875
80200624: 75 08 20 80  	.word	0x80200875
80200628: 75 08 20 80  	.word	0x80200875
8020062c: 75 08 20 80  	.word	0x80200875
80200630: 75 08 20 80  	.word	0x80200875
80200634: 75 08 20 80  	.word	0x80200875
80200638: 75 08 20 80  	.word	0x80200875
8020063c: 75 08 20 80  	.word	0x80200875
80200640: 75 08 20 80  	.word	0x80200875
80200644: 75 08 20 80  	.word	0x80200875
80200648: 75 08 20 80  	.word	0x80200875
8020064c: 75 08 20 80  	.word	0x80200875
80200650: 75 08 20 80  	.word	0x80200875
80200654: 75 08 20 80  	.word	0x80200875
80200658: 75 08 20 80  	.word	0x80200875
8020065c: 75 08 20 80  	.word	0x80200875
80200660: 75 08 20 80  	.word	0x80200875
80200664: 75 08 20 80  	.word	0x80200875
80200668: 75 08 20 80  	.word	0x80200875
8020066c: 75 08 20 80  	.word	0x80200875
80200670: 75 08 20 80  	.word	0x80200875
80200674: 75 08 20 80  	.word	0x80200875
80200678: 75 08 20 80  	.word	0x80200875
8020067c: 75 08 20 80  	.word	0x80200875
80200680: 75 08 20 80  	.word	0x80200875
80200684: 75 08 20 80  	.word	0x80200875
80200688: 75 08 20 80  	.word	0x80200875
8020068c: 75 08 20 80  	.word	0x80200875
80200690: 75 08 20 80  	.word	0x80200875
80200694: 75 08 20 80  	.word	0x80200875
80200698: 75 08 20 80  	.word	0x80200875
8020069c: 75 08 20 80  	.word	0x80200875
802006a0: 75 08 20 80  	.word	0x80200875
802006a4: 75 08 20 80  	.word	0x80200875
802006a8: 75 08 20 80  	.word	0x80200875
802006ac: 75 08 20 80  	.word	0x80200875
802006b0: 75 08 20 80  	.word	0x80200875
802006b4: 75 08 20 80  	.word	0x80200875
802006b8: 75 08 20 80  	.word	0x80200875
802006bc: 75 08 20 80  	.word	0x80200875
802006c0: 75 08 20 80  	.word	0x80200875
802006c4: 75 08 20 80  	.word	0x80200875
802006c8: 75 08 20 80  	.word	0x80200875
802006cc: 75 08 20 80  	.word	0x80200875
802006d0: 75 08 20 80  	.word	0x80200875
802006d4: 75 08 20 80  	.word	0x80200875
802006d8: 75 08 20 80  	.word	0x80200875
802006dc: 75 08 20 80  	.word	0x80200875
802006e0: 75 08 20 80  	.word	0x80200875
802006e4: 75 08 20 80  	.word	0x80200875
802006e8: 75 08 20 80  	.word	0x80200875
802006ec: 75 08 20 80  	.word	0x80200875
802006f0: 75 08 20 80  	.word	0x80200875
802006f4: 75 08 20 80  	.word	0x80200875
802006f8: 75 08 20 80  	.word	0x80200875
802006fc: 75 08 20 80  	.word	0x80200875
80200700: 75 08 20 80  	.word	0x80200875
80200704: 75 08 20 80  	.word	0x80200875
80200708: 75 08 20 80  	.word	0x80200875
8020070c: 75 08 20 80  	.word	0x80200875
80200710: 75 08 20 80  	.word	0x80200875
80200714: 75 08 20 80  	.word	0x80200875
80200718: 75 08 20 80  	.word	0x80200875
8020071c: 75 08 20 80  	.word	0x80200875
80200720: 75 08 20 80  	.word	0x80200875
80200724: 75 08 20 80  	.word	0x80200875
80200728: 75 08 20 80  	.word	0x80200875
8020072c: 75 08 20 80  	.word	0x80200875
80200730: 75 08 20 80  	.word	0x80200875
80200734: 75 08 20 80  	.word	0x80200875
80200738: 75 08 20 80  	.word	0x80200875
8020073c: 75 08 20 80  	.word	0x80200875
80200740: 75 08 20 80  	.word	0x80200875
80200744: 75 08 20 80  	.word	0x80200875
80200748: 75 08 20 80  	.word	0x80200875
8020074c: 75 08 20 80  	.word	0x80200875
80200750: 75 08 20 80  	.word	0x80200875
80200754: 75 08 20 80  	.word	0x80200875
80200758: 75 08 20 80  	.word	0x80200875
8020075c: 75 08 20 80  	.word	0x80200875
80200760: 75 08 20 80  	.word	0x80200875
80200764: 75 08 20 80  	.word	0x80200875
80200768: 75 08 20 80  	.word	0x80200875
8020076c: 75 08 20 80  	.word	0x80200875
80200770: 75 08 20 80  	.word	0x80200875
80200774: 75 08 20 80  	.word	0x80200875
80200778: 75 08 20 80  	.word	0x80200875
8020077c: 75 08 20 80  	.word	0x80200875
80200780: 75 08 20 80  	.word	0x80200875
80200784: 75 08 20 80  	.word	0x80200875
80200788: 75 08 20 80  	.word	0x80200875
8020078c: 75 08 20 80  	.word	0x80200875
80200790: 75 08 20 80  	.word	0x80200875
80200794: 75 08 20 80  	.word	0x80200875
80200798: 75 08 20 80  	.word	0x80200875
8020079c: 75 08 20 80  	.word	0x80200875
802007a0: 75 08 20 80  	.word	0x80200875
802007a4: 00 00 00 00  	.word	0x00000000
802007a8: 00 00 00 00  	.word	0x00000000
802007ac: 00 00 00 00  	.word	0x00000000
802007b0: 00 00 00 00  	.word	0x00000000
802007b4: 00 00 00 00  	.word	0x00000000
802007b8: 00 00 00 00  	.word	0x00000000
802007bc: 00 00 00 00  	.word	0x00000000

802007c0 <Reset_Handler>:
; Reset_Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1078
;   __asm (
802007c0: 482e         	ldr	r0, [pc, #0xb8]         @ 0x8020087c <UTIMER_IRQ9Handler+0x8>
802007c2: 492f         	ldr	r1, [pc, #0xbc]         @ 0x80200880 <UTIMER_IRQ9Handler+0xc>
802007c4: f380 880a    	msr	msplim, r0
802007c8: f381 8808    	msr	msp, r1
802007cc: f000 f801    	bl	0x802007d2 <Reset_Handler_C> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1087
; }
802007d0: bf00         	nop

802007d2 <Reset_Handler_C>:
; Reset_Handler_C():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1091
; {
802007d2: b580         	push	{r7, lr}
802007d4: b084         	sub	sp, #0x10
802007d6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1092
;   SystemInit();                             /* CMSIS System Initialization */
802007d8: f000 f8ea    	bl	0x802009b0 <SystemInit> @ imm = #0x1d4
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:148
;   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable) {
802007dc: 4b1f         	ldr	r3, [pc, #0x7c]         @ 0x8020085c <Reset_Handler_C+0x8a>
802007de: 60fb         	str	r3, [r7, #0xc]
802007e0: e019         	b	0x80200816 <Reset_Handler_C+0x44> @ imm = #0x32
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:149
;     for(uint32_t i=0u; i<pTable->wlen; ++i) {
802007e2: 2300         	movs	r3, #0x0
802007e4: 60bb         	str	r3, [r7, #0x8]
802007e6: e00e         	b	0x80200806 <Reset_Handler_C+0x34> @ imm = #0x1c
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:150
;       pTable->dest[i] = pTable->src[i];
802007e8: 68fb         	ldr	r3, [r7, #0xc]
802007ea: 681a         	ldr	r2, [r3]
802007ec: 68bb         	ldr	r3, [r7, #0x8]
802007ee: 009b         	lsls	r3, r3, #0x2
802007f0: 441a         	add	r2, r3
802007f2: 68fb         	ldr	r3, [r7, #0xc]
802007f4: 6859         	ldr	r1, [r3, #0x4]
802007f6: 68bb         	ldr	r3, [r7, #0x8]
802007f8: 009b         	lsls	r3, r3, #0x2
802007fa: 440b         	add	r3, r1
802007fc: 6812         	ldr	r2, [r2]
802007fe: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:149
;     for(uint32_t i=0u; i<pTable->wlen; ++i) {
80200800: 68bb         	ldr	r3, [r7, #0x8]
80200802: 3301         	adds	r3, #0x1
80200804: 60bb         	str	r3, [r7, #0x8]
80200806: 68fb         	ldr	r3, [r7, #0xc]
80200808: 689b         	ldr	r3, [r3, #0x8]
8020080a: 68ba         	ldr	r2, [r7, #0x8]
8020080c: 429a         	cmp	r2, r3
8020080e: d3eb         	blo	0x802007e8 <Reset_Handler_C+0x16> @ imm = #-0x2a
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:148
;   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable) {
80200810: 68fb         	ldr	r3, [r7, #0xc]
80200812: 330c         	adds	r3, #0xc
80200814: 60fb         	str	r3, [r7, #0xc]
80200816: 68fb         	ldr	r3, [r7, #0xc]
80200818: 4a11         	ldr	r2, [pc, #0x44]         @ 0x80200860 <Reset_Handler_C+0x8e>
8020081a: 4293         	cmp	r3, r2
8020081c: d3e1         	blo	0x802007e2 <Reset_Handler_C+0x10> @ imm = #-0x3e
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:154
;   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable) {
8020081e: 4b11         	ldr	r3, [pc, #0x44]         @ 0x80200864 <Reset_Handler_C+0x92>
80200820: 607b         	str	r3, [r7, #0x4]
80200822: e014         	b	0x8020084e <Reset_Handler_C+0x7c> @ imm = #0x28
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:155
;     for(uint32_t i=0u; i<pTable->wlen; ++i) {
80200824: 2300         	movs	r3, #0x0
80200826: 603b         	str	r3, [r7]
80200828: e009         	b	0x8020083e <Reset_Handler_C+0x6c> @ imm = #0x12
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:156
;       pTable->dest[i] = 0u;
8020082a: 687b         	ldr	r3, [r7, #0x4]
8020082c: 681a         	ldr	r2, [r3]
8020082e: 683b         	ldr	r3, [r7]
80200830: 009b         	lsls	r3, r3, #0x2
80200832: 4413         	add	r3, r2
80200834: 2200         	movs	r2, #0x0
80200836: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:155
;     for(uint32_t i=0u; i<pTable->wlen; ++i) {
80200838: 683b         	ldr	r3, [r7]
8020083a: 3301         	adds	r3, #0x1
8020083c: 603b         	str	r3, [r7]
8020083e: 687b         	ldr	r3, [r7, #0x4]
80200840: 685b         	ldr	r3, [r3, #0x4]
80200842: 683a         	ldr	r2, [r7]
80200844: 429a         	cmp	r2, r3
80200846: d3f0         	blo	0x8020082a <Reset_Handler_C+0x58> @ imm = #-0x20
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:154
;   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable) {
80200848: 687b         	ldr	r3, [r7, #0x4]
8020084a: 3308         	adds	r3, #0x8
8020084c: 607b         	str	r3, [r7, #0x4]
8020084e: 687b         	ldr	r3, [r7, #0x4]
80200850: 4a05         	ldr	r2, [pc, #0x14]         @ 0x80200868 <Reset_Handler_C+0x96>
80200852: 4293         	cmp	r3, r2
80200854: d3e6         	blo	0x80200824 <Reset_Handler_C+0x52> @ imm = #-0x34
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:160
;   _start();
80200856: f000 fc9b    	bl	0x80201190 <___start_veneer> @ imm = #0x936
8020085a: bf00         	nop
8020085c: 00 12 20 80  	.word	0x80201200
80200860: 18 12 20 80  	.word	0x80201218
80200864: 20 12 20 80  	.word	0x80201220
80200868: 38 12 20 80  	.word	0x80201238

8020086c <Fault_Handler>:
; Fault_Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1105
; {
8020086c: b480         	push	{r7}
8020086e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1106
;   while(1);
80200870: bf00         	nop
80200872: e7fd         	b	0x80200870 <Fault_Handler+0x4> @ imm = #-0x6

80200874 <UTIMER_IRQ9Handler>:
; QEC1_CMPA_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1113
; {
80200874: b480         	push	{r7}
80200876: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/core/M55_HP/source/startup_M55_HP.c:1114
;   while(1);
80200878: bf00         	nop
8020087a: e7fd         	b	0x80200878 <UTIMER_IRQ9Handler+0x4> @ imm = #-0x6
8020087c: 00 e0 0f 20  	.word	0x200fe000
80200880: 00 00 10 20  	.word	0x20100000

80200884 <enable_force_peripheral_functional_clk>:
; enable_force_peripheral_functional_clk():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:24
; {
80200884: b480         	push	{r7}
80200886: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:25
;     CLKCTL_PER_SLV->EXPMST0_CTRL |= EXPMST0_CTRL_IPCLK_FORCE;
80200888: 4b05         	ldr	r3, [pc, #0x14]         @ 0x802008a0 <enable_force_peripheral_functional_clk+0x1c>
8020088a: 681b         	ldr	r3, [r3]
8020088c: 4a04         	ldr	r2, [pc, #0x10]         @ 0x802008a0 <enable_force_peripheral_functional_clk+0x1c>
8020088e: f043 4300    	orr	r3, r3, #0x80000000
80200892: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:26
; }
80200894: bf00         	nop
80200896: 46bd         	mov	sp, r7
80200898: f85d 7b04    	ldr	r7, [sp], #4
8020089c: 4770         	bx	lr
8020089e: bf00         	nop
802008a0: 00 f0 02 49  	.word	0x4902f000

802008a4 <enable_force_apb_interface_clk>:
; enable_force_apb_interface_clk():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:34
; {
802008a4: b480         	push	{r7}
802008a6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:35
;     CLKCTL_PER_SLV->EXPMST0_CTRL |= EXPMST0_CTRL_PCLK_FORCE;
802008a8: 4b05         	ldr	r3, [pc, #0x14]         @ 0x802008c0 <enable_force_apb_interface_clk+0x1c>
802008aa: 681b         	ldr	r3, [r3]
802008ac: 4a04         	ldr	r2, [pc, #0x10]         @ 0x802008c0 <enable_force_apb_interface_clk+0x1c>
802008ae: f043 4380    	orr	r3, r3, #0x40000000
802008b2: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/clk.h:36
; }
802008b4: bf00         	nop
802008b6: 46bd         	mov	sp, r7
802008b8: f85d 7b04    	ldr	r7, [sp], #4
802008bc: 4770         	bx	lr
802008be: bf00         	nop
802008c0: 00 f0 02 49  	.word	0x4902f000

802008c4 <SystemCoreClockUpdate>:
; SystemCoreClockUpdate():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:109
; {
802008c4: b480         	push	{r7}
802008c6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:110
;   SystemCoreClock = SYSTEM_CLOCK;
802008c8: 4b03         	ldr	r3, [pc, #0xc]          @ 0x802008d8 <SystemCoreClockUpdate+0x14>
802008ca: 4a04         	ldr	r2, [pc, #0x10]         @ 0x802008dc <SystemCoreClockUpdate+0x18>
802008cc: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:111
; }
802008ce: bf00         	nop
802008d0: 46bd         	mov	sp, r7
802008d2: f85d 7b04    	ldr	r7, [sp], #4
802008d6: 4770         	bx	lr
802008d8: b4 05 00 20  	.word	0x200005b4
802008dc: 00 84 d7 17  	.word	0x17d78400

802008e0 <GetSystemCoreClock>:
; GetSystemCoreClock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:117
; {
802008e0: b480         	push	{r7}
802008e2: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:118
;   return SystemCoreClock;
802008e4: 4b03         	ldr	r3, [pc, #0xc]          @ 0x802008f4 <GetSystemCoreClock+0x14>
802008e6: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:119
; }
802008e8: 4618         	mov	r0, r3
802008ea: 46bd         	mov	sp, r7
802008ec: f85d 7b04    	ldr	r7, [sp], #4
802008f0: 4770         	bx	lr
802008f2: bf00         	nop
802008f4: b4 05 00 20  	.word	0x200005b4

802008f8 <System_HandleSpuriousWakeup>:
; System_HandleSpuriousWakeup():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:126
; {
802008f8: b480         	push	{r7}
802008fa: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:131
; }
802008fc: bf00         	nop
802008fe: 46bd         	mov	sp, r7
80200900: f85d 7b04    	ldr	r7, [sp], #4
80200904: 4770         	bx	lr

80200906 <_platform_pre_stackheap_init>:
; _platform_pre_stackheap_init():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:136
; {
80200906: b580         	push	{r7, lr}
80200908: b084         	sub	sp, #0x10
8020090a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:138
;     if (!(MEMSYSCTL->MSCR & MEMSYSCTL_MSCR_DCCLEAN_Msk))
8020090c: 4b26         	ldr	r3, [pc, #0x98]         @ 0x802009a8 <_platform_pre_stackheap_init+0xa2>
8020090e: 681b         	ldr	r3, [r3]
80200910: f403 3380    	and	r3, r3, #0x10000
80200914: 2b00         	cmp	r3, #0x0
80200916: d130         	bne	0x8020097a <_platform_pre_stackheap_init+0x74> @ imm = #0x60
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:289
;     SCB->CSSELR = 0U;                       /* select Level 1 data cache */
80200918: 4b24         	ldr	r3, [pc, #0x90]         @ 0x802009ac <_platform_pre_stackheap_init+0xa6>
8020091a: 2200         	movs	r2, #0x0
8020091c: f8c3 2084    	str.w	r2, [r3, #0x84]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
80200920: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
80200924: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:292
;     ccsidr = SCB->CCSIDR;
80200926: 4b21         	ldr	r3, [pc, #0x84]         @ 0x802009ac <_platform_pre_stackheap_init+0xa6>
80200928: f8d3 3080    	ldr.w	r3, [r3, #0x80]
8020092c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:295
;     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
8020092e: 68fb         	ldr	r3, [r7, #0xc]
80200930: 0b5b         	lsrs	r3, r3, #0xd
80200932: f3c3 030e    	ubfx	r3, r3, #0x0, #0xf
80200936: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:297
;       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
80200938: 68fb         	ldr	r3, [r7, #0xc]
8020093a: 08db         	lsrs	r3, r3, #0x3
8020093c: f3c3 0309    	ubfx	r3, r3, #0x0, #0xa
80200940: 607b         	str	r3, [r7, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:299
;         SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
80200942: 68bb         	ldr	r3, [r7, #0x8]
80200944: 015a         	lsls	r2, r3, #0x5
80200946: f643 73e0    	movw	r3, #0x3fe0
8020094a: 4013         	ands	r3, r2
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:300
;                       ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
8020094c: 687a         	ldr	r2, [r7, #0x4]
8020094e: 0792         	lsls	r2, r2, #0x1e
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:299
;         SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
80200950: 4916         	ldr	r1, [pc, #0x58]         @ 0x802009ac <_platform_pre_stackheap_init+0xa6>
80200952: 4313         	orrs	r3, r2
80200954: f8c1 326c    	str.w	r3, [r1, #0x26c]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:304
;       } while (ways-- != 0U);
80200958: 687b         	ldr	r3, [r7, #0x4]
8020095a: 1e5a         	subs	r2, r3, #0x1
8020095c: 607a         	str	r2, [r7, #0x4]
8020095e: 2b00         	cmp	r3, #0x0
80200960: d1ef         	bne	0x80200942 <_platform_pre_stackheap_init+0x3c> @ imm = #-0x22
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:305
;     } while(sets-- != 0U);
80200962: 68bb         	ldr	r3, [r7, #0x8]
80200964: 1e5a         	subs	r2, r3, #0x1
80200966: 60ba         	str	r2, [r7, #0x8]
80200968: 2b00         	cmp	r3, #0x0
8020096a: d1e5         	bne	0x80200938 <_platform_pre_stackheap_init+0x32> @ imm = #-0x36
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
8020096c: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
80200970: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
80200972: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
80200976: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:310
; }
80200978: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
8020097a: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
8020097e: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
80200980: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
80200984: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:98
;     SCB->ICIALLU = 0UL;
80200986: 4b09         	ldr	r3, [pc, #0x24]         @ 0x802009ac <_platform_pre_stackheap_init+0xa6>
80200988: 2200         	movs	r2, #0x0
8020098a: f8c3 2250    	str.w	r2, [r3, #0x250]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
8020098e: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
80200992: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
80200994: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
80200998: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv7m_cachel1.h:102
; }
8020099a: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:145
;     sys_busy_loop_init();
8020099c: f000 f8c2    	bl	0x80200b24 <sys_busy_loop_init> @ imm = #0x184
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:146
; }
802009a0: bf00         	nop
802009a2: 3710         	adds	r7, #0x10
802009a4: 46bd         	mov	sp, r7
802009a6: bd80         	pop	{r7, pc}
802009a8: 00 e0 01 e0  	.word	0xe001e000
802009ac: 00 ed 00 e0  	.word	0xe000ed00

802009b0 <SystemInit>:
; SystemInit():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:156
; {
802009b0: b580         	push	{r7, lr}
802009b2: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:162
;   SCB->VTOR = (uint32_t) __VECTOR_TABLE;
802009b4: 4b1e         	ldr	r3, [pc, #0x78]         @ 0x80200a30 <SystemInit+0x80>
802009b6: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x80200a34 <SystemInit+0x84>
802009b8: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:167
;   SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk |
802009ba: 4b1d         	ldr	r3, [pc, #0x74]         @ 0x80200a30 <SystemInit+0x80>
802009bc: 6a5b         	ldr	r3, [r3, #0x24]
802009be: 4a1c         	ldr	r2, [pc, #0x70]         @ 0x80200a30 <SystemInit+0x80>
802009c0: f443 2370    	orr	r3, r3, #0xf0000
802009c4: 6253         	str	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:173
;   System_HandleSpuriousWakeup();
802009c6: f7ff ff97    	bl	0x802008f8 <System_HandleSpuriousWakeup> @ imm = #-0xd2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:176
;   WICCONTROL &= ~WICCONTROL_WIC_Msk;
802009ca: 4b1b         	ldr	r3, [pc, #0x6c]         @ 0x80200a38 <SystemInit+0x88>
802009cc: 681b         	ldr	r3, [r3]
802009ce: 4a1a         	ldr	r2, [pc, #0x68]         @ 0x80200a38 <SystemInit+0x88>
802009d0: f423 7380    	bic	r3, r3, #0x100
802009d4: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:180
;   SCB->CPACR |= ((3U << 10U*2U) |           /* enable CP10 Full Access */
802009d6: 4b16         	ldr	r3, [pc, #0x58]         @ 0x80200a30 <SystemInit+0x80>
802009d8: f8d3 3088    	ldr.w	r3, [r3, #0x88]
802009dc: 4a14         	ldr	r2, [pc, #0x50]         @ 0x80200a30 <SystemInit+0x80>
802009de: f443 0370    	orr	r3, r3, #0xf00000
802009e2: f8c2 3088    	str.w	r3, [r2, #0x88]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:200
;  MEMSYSCTL->PFCR = (MEMSYSCTL_PFCR_MAX_OS_DEFAULT_VALUE << MEMSYSCTL_PFCR_MAX_OS_Pos) |
802009e6: 4b15         	ldr	r3, [pc, #0x54]         @ 0x80200a3c <SystemInit+0x8c>
802009e8: f240 22e5    	movw	r2, #0x2e5
802009ec: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:212
;   MPU_Setup();
802009ee: f000 fb85    	bl	0x802010fc <MPU_Setup>  @ imm = #0x70a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:224
;   SCB->CCR |= SCB_CCR_IC_Msk | SCB_CCR_DC_Msk | SCB_CCR_LOB_Msk;
802009f2: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x80200a30 <SystemInit+0x80>
802009f4: 695b         	ldr	r3, [r3, #0x14]
802009f6: 4a0e         	ldr	r2, [pc, #0x38]         @ 0x80200a30 <SystemInit+0x80>
802009f8: f443 2330    	orr	r3, r3, #0xb0000
802009fc: 6153         	str	r3, [r2, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:227
;   ICB->ACTLR &= ~ICB_ACTLR_DISLOBR_Msk;
802009fe: f04f 23e0    	mov.w	r3, #0xe000e000
80200a02: 689b         	ldr	r3, [r3, #0x8]
80200a04: f04f 22e0    	mov.w	r2, #0xe000e000
80200a08: f023 0320    	bic	r3, r3, #0x20
80200a0c: 6093         	str	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
80200a0e: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
80200a12: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
80200a14: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
80200a18: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:236
;   setup_tcm_ns_partition();
80200a1a: f000 fba5    	bl	0x80201168 <setup_tcm_ns_partition> @ imm = #0x74a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:239
;   SystemCoreClock = SYSTEM_CLOCK;
80200a1e: 4b08         	ldr	r3, [pc, #0x20]         @ 0x80200a40 <SystemInit+0x90>
80200a20: 4a08         	ldr	r2, [pc, #0x20]         @ 0x80200a44 <SystemInit+0x94>
80200a22: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:248
;   enable_force_peripheral_functional_clk();
80200a24: f7ff ff2e    	bl	0x80200884 <enable_force_peripheral_functional_clk> @ imm = #-0x1a4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:251
;   enable_force_apb_interface_clk();
80200a28: f7ff ff3c    	bl	0x802008a4 <enable_force_apb_interface_clk> @ imm = #-0x188
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_M55.c:253
; }
80200a2c: bf00         	nop
80200a2e: bd80         	pop	{r7, pc}
80200a30: 00 ed 00 e0  	.word	0xe000ed00
80200a34: 00 00 20 80  	.word	0x80200000
80200a38: 00 40 60 1a  	.word	0x1a604000
80200a3c: 00 e0 01 e0  	.word	0xe001e000
80200a40: b4 05 00 20  	.word	0x200005b4
80200a44: 00 84 d7 17  	.word	0x17d78400

80200a48 <sys_busy_loop_init_ns>:
; sys_busy_loop_init_ns():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:31
; {
80200a48: b480         	push	{r7}
80200a4a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:32
;     REFCLK_CNTControl->CNTCR |= CNTCR_EN;
80200a4c: f04f 53d1    	mov.w	r3, #0x1a200000
80200a50: 681b         	ldr	r3, [r3]
80200a52: f04f 52d1    	mov.w	r2, #0x1a200000
80200a56: f043 0301    	orr	r3, r3, #0x1
80200a5a: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:33
; }
80200a5c: bf00         	nop
80200a5e: 46bd         	mov	sp, r7
80200a60: f85d 7b04    	ldr	r7, [sp], #4
80200a64: 4770         	bx	lr

80200a66 <sys_busy_loop_ns>:
; sys_busy_loop_ns():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:47
; {
80200a66: e92d 4fb0    	push.w	{r4, r5, r7, r8, r9, r10, r11, lr}
80200a6a: b086         	sub	sp, #0x18
80200a6c: af00         	add	r7, sp, #0x0
80200a6e: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:53
;     uint32_t curr_cntcvl, cntcvl = REFCLK_CNTRead->CNTCVL;
80200a70: 4927         	ldr	r1, [pc, #0x9c]         @ 0x80200b10 <sys_busy_loop_ns+0xaa>
80200a72: 6809         	ldr	r1, [r1]
80200a74: 60f9         	str	r1, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:55
;     uint32_t diff = 0;
80200a76: 2100         	movs	r1, #0x0
80200a78: 6139         	str	r1, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:57
;     if(delay_ns > SYS_MAX_DELAY_IN_NANOSECONDS)
80200a7a: 6879         	ldr	r1, [r7, #0x4]
80200a7c: f1b1 6fc8    	cmp.w	r1, #0x6400000
80200a80: d902         	bls	0x80200a88 <sys_busy_loop_ns+0x22> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:58
;         return -1;
80200a82: f04f 33ff    	mov.w	r3, #0xffffffff
80200a86: e03a         	b	0x80200afe <sys_busy_loop_ns+0x98> @ imm = #0x74
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:60
;     if (SystemREFClock == 100000000U)
80200a88: 4922         	ldr	r1, [pc, #0x88]         @ 0x80200b14 <sys_busy_loop_ns+0xae>
80200a8a: 6809         	ldr	r1, [r1]
80200a8c: 4822         	ldr	r0, [pc, #0x88]         @ 0x80200b18 <sys_busy_loop_ns+0xb2>
80200a8e: 4281         	cmp	r1, r0
80200a90: d106         	bne	0x80200aa0 <sys_busy_loop_ns+0x3a> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:63
;         delay_in_cycles = delay_ns / 10;
80200a92: 687b         	ldr	r3, [r7, #0x4]
80200a94: 4a21         	ldr	r2, [pc, #0x84]         @ 0x80200b1c <sys_busy_loop_ns+0xb6>
80200a96: fba2 2303    	umull	r2, r3, r2, r3
80200a9a: 08db         	lsrs	r3, r3, #0x3
80200a9c: 617b         	str	r3, [r7, #0x14]
80200a9e: e029         	b	0x80200af4 <sys_busy_loop_ns+0x8e> @ imm = #0x52
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:67
;         delay_in_cycles = (uint32_t)((((uint64_t)delay_ns * SystemREFClock) + 999999999U) / 1000000000U);
80200aa0: 6879         	ldr	r1, [r7, #0x4]
80200aa2: 2000         	movs	r0, #0x0
80200aa4: 4688         	mov	r8, r1
80200aa6: 4681         	mov	r9, r0
80200aa8: 491a         	ldr	r1, [pc, #0x68]         @ 0x80200b14 <sys_busy_loop_ns+0xae>
80200aaa: 6809         	ldr	r1, [r1]
80200aac: 2000         	movs	r0, #0x0
80200aae: 460c         	mov	r4, r1
80200ab0: 4605         	mov	r5, r0
80200ab2: fb04 f009    	mul	r0, r4, r9
80200ab6: fb08 f105    	mul	r1, r8, r5
80200aba: 4401         	add	r1, r0
80200abc: fba8 2304    	umull	r2, r3, r8, r4
80200ac0: 4419         	add	r1, r3
80200ac2: 460b         	mov	r3, r1
80200ac4: 4916         	ldr	r1, [pc, #0x58]         @ 0x80200b20 <sys_busy_loop_ns+0xba>
80200ac6: eb12 0a01    	adds.w	r10, r2, r1
80200aca: f143 0b00    	adc	r11, r3, #0x0
80200ace: a30e         	adr	r3, #56 <sys_busy_loop_ns+0x7a>
80200ad0: e9d3 2300    	ldrd	r2, r3, [r3]
80200ad4: 4650         	mov	r0, r10
80200ad6: 4659         	mov	r1, r11
80200ad8: f000 fb5e    	bl	0x80201198 <____aeabi_uldivmod_veneer> @ imm = #0x6bc
80200adc: 4602         	mov	r2, r0
80200ade: 460b         	mov	r3, r1
80200ae0: 4613         	mov	r3, r2
80200ae2: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:70
;     while(diff <= delay_in_cycles)
80200ae4: e006         	b	0x80200af4 <sys_busy_loop_ns+0x8e> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:72
;         curr_cntcvl = REFCLK_CNTRead->CNTCVL;
80200ae6: 4b0a         	ldr	r3, [pc, #0x28]         @ 0x80200b10 <sys_busy_loop_ns+0xaa>
80200ae8: 681b         	ldr	r3, [r3]
80200aea: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:74
;         diff = curr_cntcvl - cntcvl;
80200aec: 68ba         	ldr	r2, [r7, #0x8]
80200aee: 68fb         	ldr	r3, [r7, #0xc]
80200af0: 1ad3         	subs	r3, r2, r3
80200af2: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:70
;     while(diff <= delay_in_cycles)
80200af4: 693a         	ldr	r2, [r7, #0x10]
80200af6: 697b         	ldr	r3, [r7, #0x14]
80200af8: 429a         	cmp	r2, r3
80200afa: d9f4         	bls	0x80200ae6 <sys_busy_loop_ns+0x80> @ imm = #-0x18
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:77
;     return 0;
80200afc: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:78
; }
80200afe: 4618         	mov	r0, r3
80200b00: 3718         	adds	r7, #0x18
80200b02: 46bd         	mov	sp, r7
80200b04: e8bd 8fb0    	pop.w	{r4, r5, r7, r8, r9, r10, r11, pc}
80200b08: 00 ca 9a 3b  	.word	0x3b9aca00
80200b0c: 00 00 00 00  	.word	0x00000000
80200b10: 00 00 21 1a  	.word	0x1a210000
80200b14: ac 05 00 20  	.word	0x200005ac
80200b18: 00 e1 f5 05  	.word	0x05f5e100
80200b1c: cd cc cc cc  	.word	0xcccccccd
80200b20: ff c9 9a 3b  	.word	0x3b9ac9ff

80200b24 <sys_busy_loop_init>:
; sys_busy_loop_init():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:86
; {
80200b24: b480         	push	{r7}
80200b26: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:87
;     S32K_CNTControl->CNTCR |= CNTCR_EN;
80200b28: f04f 53d2    	mov.w	r3, #0x1a400000
80200b2c: 681b         	ldr	r3, [r3]
80200b2e: f04f 52d2    	mov.w	r2, #0x1a400000
80200b32: f043 0301    	orr	r3, r3, #0x1
80200b36: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:88
; }
80200b38: bf00         	nop
80200b3a: 46bd         	mov	sp, r7
80200b3c: f85d 7b04    	ldr	r7, [sp], #4
80200b40: 4770         	bx	lr

80200b42 <sys_busy_loop_us>:
; sys_busy_loop_us():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:99
; {
80200b42: b480         	push	{r7}
80200b44: b087         	sub	sp, #0x1c
80200b46: af00         	add	r7, sp, #0x0
80200b48: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:106
;     uint32_t diff = 0;
80200b4a: 2300         	movs	r3, #0x0
80200b4c: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:109
;     if(delay_us > SYS_MAX_DELAY_IN_MICROSECONDS)
80200b4e: 687b         	ldr	r3, [r7, #0x4]
80200b50: f5b3 3fc8    	cmp.w	r3, #0x19000
80200b54: d902         	bls	0x80200b5c <sys_busy_loop_us+0x1a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:110
;         return -1;
80200b56: f04f 33ff    	mov.w	r3, #0xffffffff
80200b5a: e01a         	b	0x80200b92 <sys_busy_loop_us+0x50> @ imm = #0x34
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:112
;     cntcv = S32K_CNTRead->CNTCVL;
80200b5c: 4b10         	ldr	r3, [pc, #0x40]         @ 0x80200ba0 <sys_busy_loop_us+0x5e>
80200b5e: 681b         	ldr	r3, [r3]
80200b60: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:114
;     delay_in_cycles = (((delay_us * 32768U) + 999999U) / 1000000U);
80200b62: 687b         	ldr	r3, [r7, #0x4]
80200b64: 03db         	lsls	r3, r3, #0xf
80200b66: f503 2374    	add.w	r3, r3, #0xf4000
80200b6a: f203 233f    	addw	r3, r3, #0x23f
80200b6e: 4a0d         	ldr	r2, [pc, #0x34]         @ 0x80200ba4 <sys_busy_loop_us+0x62>
80200b70: fba2 2303    	umull	r2, r3, r2, r3
80200b74: 0c9b         	lsrs	r3, r3, #0x12
80200b76: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:116
;     while(diff <= delay_in_cycles)
80200b78: e006         	b	0x80200b88 <sys_busy_loop_us+0x46> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:118
;         curr_cntcv = S32K_CNTRead->CNTCVL;
80200b7a: 4b09         	ldr	r3, [pc, #0x24]         @ 0x80200ba0 <sys_busy_loop_us+0x5e>
80200b7c: 681b         	ldr	r3, [r3]
80200b7e: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:120
;         diff = curr_cntcv - cntcv;
80200b80: 68ba         	ldr	r2, [r7, #0x8]
80200b82: 693b         	ldr	r3, [r7, #0x10]
80200b84: 1ad3         	subs	r3, r2, r3
80200b86: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:116
;     while(diff <= delay_in_cycles)
80200b88: 697a         	ldr	r2, [r7, #0x14]
80200b8a: 68fb         	ldr	r3, [r7, #0xc]
80200b8c: 429a         	cmp	r2, r3
80200b8e: d9f4         	bls	0x80200b7a <sys_busy_loop_us+0x38> @ imm = #-0x18
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:123
;     return 0;
80200b90: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:124
; }
80200b92: 4618         	mov	r0, r3
80200b94: 371c         	adds	r7, #0x1c
80200b96: 46bd         	mov	sp, r7
80200b98: f85d 7b04    	ldr	r7, [sp], #4
80200b9c: 4770         	bx	lr
80200b9e: bf00         	nop
80200ba0: 00 00 41 1a  	.word	0x1a410000
80200ba4: 83 de 1b 43  	.word	0x431bde83

80200ba8 <RTSS_IsGlobalCacheClean_Required>:
; RTSS_IsGlobalCacheClean_Required():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:133
; {
80200ba8: b480         	push	{r7}
80200baa: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:143
;     return true;
80200bac: 2301         	movs	r3, #0x1
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:144
; }
80200bae: 4618         	mov	r0, r3
80200bb0: 46bd         	mov	sp, r7
80200bb2: f85d 7b04    	ldr	r7, [sp], #4
80200bb6: 4770         	bx	lr

80200bb8 <RTSS_IsCacheClean_Required_by_Addr>:
; RTSS_IsCacheClean_Required_by_Addr():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:156
; {
80200bb8: b480         	push	{r7}
80200bba: b085         	sub	sp, #0x14
80200bbc: af00         	add	r7, sp, #0x0
80200bbe: 6078         	str	r0, [r7, #0x4]
80200bc0: 6039         	str	r1, [r7]
80200bc2: 687b         	ldr	r3, [r7, #0x4]
80200bc4: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:163
;     uint32_t addr = (uint32_t)local_addr;
80200bc6: 68fb         	ldr	r3, [r7, #0xc]
80200bc8: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:165
;     return ((addr < (ITCM_BASE + ITCM_REGION_SIZE)) || \
80200bca: 68bb         	ldr	r3, [r7, #0x8]
80200bcc: f1b3 7f00    	cmp.w	r3, #0x2000000
80200bd0: d307         	blo	0x80200be2 <RTSS_IsCacheClean_Required_by_Addr+0x2a> @ imm = #0xe
80200bd2: 68bb         	ldr	r3, [r7, #0x8]
80200bd4: f1b3 5f00    	cmp.w	r3, #0x20000000
80200bd8: d905         	bls	0x80200be6 <RTSS_IsCacheClean_Required_by_Addr+0x2e> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:166
;             ((addr > DTCM_BASE) && (addr < (DTCM_BASE + DTCM_REGION_SIZE))));
80200bda: 68bb         	ldr	r3, [r7, #0x8]
80200bdc: f1b3 5f08    	cmp.w	r3, #0x22000000
80200be0: d201         	bhs	0x80200be6 <RTSS_IsCacheClean_Required_by_Addr+0x2e> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:165
;     return ((addr < (ITCM_BASE + ITCM_REGION_SIZE)) || \
80200be2: 2301         	movs	r3, #0x1
80200be4: e000         	b	0x80200be8 <RTSS_IsCacheClean_Required_by_Addr+0x30> @ imm = #0x0
80200be6: 2300         	movs	r3, #0x0
80200be8: f003 0301    	and	r3, r3, #0x1
80200bec: b2db         	uxtb	r3, r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:174
;     if(RTSS_Is_TCM_Addr(addr))
80200bee: 2b00         	cmp	r3, #0x0
80200bf0: d001         	beq	0x80200bf6 <RTSS_IsCacheClean_Required_by_Addr+0x3e> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:176
;         return false;
80200bf2: 2300         	movs	r3, #0x0
80200bf4: e000         	b	0x80200bf8 <RTSS_IsCacheClean_Required_by_Addr+0x40> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:179
;     return true;
80200bf6: 2301         	movs	r3, #0x1
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:180
; }
80200bf8: 4618         	mov	r0, r3
80200bfa: 3714         	adds	r7, #0x14
80200bfc: 46bd         	mov	sp, r7
80200bfe: f85d 7b04    	ldr	r7, [sp], #4
80200c02: 4770         	bx	lr

80200c04 <RTSS_IsCacheInvalidate_Required_by_Addr>:
; RTSS_IsCacheInvalidate_Required_by_Addr():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:192
; {
80200c04: b480         	push	{r7}
80200c06: b085         	sub	sp, #0x14
80200c08: af00         	add	r7, sp, #0x0
80200c0a: 6078         	str	r0, [r7, #0x4]
80200c0c: 6039         	str	r1, [r7]
80200c0e: 687b         	ldr	r3, [r7, #0x4]
80200c10: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:163
;     uint32_t addr = (uint32_t)local_addr;
80200c12: 68fb         	ldr	r3, [r7, #0xc]
80200c14: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:165
;     return ((addr < (ITCM_BASE + ITCM_REGION_SIZE)) || \
80200c16: 68bb         	ldr	r3, [r7, #0x8]
80200c18: f1b3 7f00    	cmp.w	r3, #0x2000000
80200c1c: d307         	blo	0x80200c2e <RTSS_IsCacheInvalidate_Required_by_Addr+0x2a> @ imm = #0xe
80200c1e: 68bb         	ldr	r3, [r7, #0x8]
80200c20: f1b3 5f00    	cmp.w	r3, #0x20000000
80200c24: d905         	bls	0x80200c32 <RTSS_IsCacheInvalidate_Required_by_Addr+0x2e> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:166
;             ((addr > DTCM_BASE) && (addr < (DTCM_BASE + DTCM_REGION_SIZE))));
80200c26: 68bb         	ldr	r3, [r7, #0x8]
80200c28: f1b3 5f08    	cmp.w	r3, #0x22000000
80200c2c: d201         	bhs	0x80200c32 <RTSS_IsCacheInvalidate_Required_by_Addr+0x2e> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/include/system_utils.h:165
;     return ((addr < (ITCM_BASE + ITCM_REGION_SIZE)) || \
80200c2e: 2301         	movs	r3, #0x1
80200c30: e000         	b	0x80200c34 <RTSS_IsCacheInvalidate_Required_by_Addr+0x30> @ imm = #0x0
80200c32: 2300         	movs	r3, #0x0
80200c34: f003 0301    	and	r3, r3, #0x1
80200c38: b2db         	uxtb	r3, r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:210
;     if(RTSS_Is_TCM_Addr(addr))
80200c3a: 2b00         	cmp	r3, #0x0
80200c3c: d001         	beq	0x80200c42 <RTSS_IsCacheInvalidate_Required_by_Addr+0x3e> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:212
;         return false;
80200c3e: 2300         	movs	r3, #0x0
80200c40: e000         	b	0x80200c44 <RTSS_IsCacheInvalidate_Required_by_Addr+0x40> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:215
;     return true;
80200c42: 2301         	movs	r3, #0x1
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/system_utils.c:216
; }
80200c44: 4618         	mov	r0, r3
80200c46: 3714         	adds	r7, #0x14
80200c48: 46bd         	mov	sp, r7
80200c4a: f85d 7b04    	ldr	r7, [sp], #4
80200c4e: 4770         	bx	lr

80200c50 <TGU_Setup>:
; TGU_Setup():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:38
; {
80200c50: b480         	push	{r7}
80200c52: b08f         	sub	sp, #0x3c
80200c54: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:45
;     blksize = *((volatile unsigned int *) ITGU_CFG) & ITGU_CFG_BLKSZ;
80200c56: 4b69         	ldr	r3, [pc, #0x1a4]        @ 0x80200dfc <TGU_Setup+0x1ac>
80200c58: 681b         	ldr	r3, [r3]
80200c5a: f003 030f    	and	r3, r3, #0xf
80200c5e: 623b         	str	r3, [r7, #0x20]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:47
;     itcm_blksize = 1 << (blksize + 5);
80200c60: 6a3b         	ldr	r3, [r7, #0x20]
80200c62: 3305         	adds	r3, #0x5
80200c64: 2201         	movs	r2, #0x1
80200c66: fa02 f303    	lsl.w	r3, r2, r3
80200c6a: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:50
;     blksize = *((volatile unsigned int *) DTGU_CFG) & DTGU_CFG_BLKSZ;
80200c6c: 4b64         	ldr	r3, [pc, #0x190]        @ 0x80200e00 <TGU_Setup+0x1b0>
80200c6e: 681b         	ldr	r3, [r3]
80200c70: f003 030f    	and	r3, r3, #0xf
80200c74: 623b         	str	r3, [r7, #0x20]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:52
;     dtcm_blksize = 1 << (blksize + 5);
80200c76: 6a3b         	ldr	r3, [r7, #0x20]
80200c78: 3305         	adds	r3, #0x5
80200c7a: 2201         	movs	r2, #0x1
80200c7c: fa02 f303    	lsl.w	r3, r2, r3
80200c80: 61bb         	str	r3, [r7, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:54
;     for (i = 0; i < (sizeof(ns_regions) / sizeof(ns_regions[0])); i++) {
80200c82: 2300         	movs	r3, #0x0
80200c84: 627b         	str	r3, [r7, #0x24]
80200c86: e0ae         	b	0x80200de6 <TGU_Setup+0x196> @ imm = #0x15c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:55
;         if (ns_regions[i].type == DTCM) {
80200c88: 495e         	ldr	r1, [pc, #0x178]        @ 0x80200e04 <TGU_Setup+0x1b4>
80200c8a: 6a7a         	ldr	r2, [r7, #0x24]
80200c8c: 4613         	mov	r3, r2
80200c8e: 005b         	lsls	r3, r3, #0x1
80200c90: 4413         	add	r3, r2
80200c92: 009b         	lsls	r3, r3, #0x2
80200c94: 440b         	add	r3, r1
80200c96: 3308         	adds	r3, #0x8
80200c98: 781b         	ldrb	r3, [r3]
80200c9a: 2b01         	cmp	r3, #0x1
80200c9c: d11f         	bne	0x80200cde <TGU_Setup+0x8e> @ imm = #0x3e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:56
;             start_block =  (ns_regions[i].start - DTCM_BASE) / dtcm_blksize;
80200c9e: 4959         	ldr	r1, [pc, #0x164]        @ 0x80200e04 <TGU_Setup+0x1b4>
80200ca0: 6a7a         	ldr	r2, [r7, #0x24]
80200ca2: 4613         	mov	r3, r2
80200ca4: 005b         	lsls	r3, r3, #0x1
80200ca6: 4413         	add	r3, r2
80200ca8: 009b         	lsls	r3, r3, #0x2
80200caa: 440b         	add	r3, r1
80200cac: 681b         	ldr	r3, [r3]
80200cae: f103 4260    	add.w	r2, r3, #0xe0000000
80200cb2: 69bb         	ldr	r3, [r7, #0x18]
80200cb4: fbb2 f3f3    	udiv	r3, r2, r3
80200cb8: 637b         	str	r3, [r7, #0x34]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:57
;             end_block = (ns_regions[i].end - DTCM_BASE) / dtcm_blksize;
80200cba: 4952         	ldr	r1, [pc, #0x148]        @ 0x80200e04 <TGU_Setup+0x1b4>
80200cbc: 6a7a         	ldr	r2, [r7, #0x24]
80200cbe: 4613         	mov	r3, r2
80200cc0: 005b         	lsls	r3, r3, #0x1
80200cc2: 4413         	add	r3, r2
80200cc4: 009b         	lsls	r3, r3, #0x2
80200cc6: 440b         	add	r3, r1
80200cc8: 3304         	adds	r3, #0x4
80200cca: 681b         	ldr	r3, [r3]
80200ccc: f103 4260    	add.w	r2, r3, #0xe0000000
80200cd0: 69bb         	ldr	r3, [r7, #0x18]
80200cd2: fbb2 f3f3    	udiv	r3, r2, r3
80200cd6: 633b         	str	r3, [r7, #0x30]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:58
;             base = DTGU_BASE;
80200cd8: 4b4b         	ldr	r3, [pc, #0x12c]        @ 0x80200e08 <TGU_Setup+0x1b8>
80200cda: 62bb         	str	r3, [r7, #0x28]
80200cdc: e01a         	b	0x80200d14 <TGU_Setup+0xc4> @ imm = #0x34
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:60
;             start_block =  (ns_regions[i].start - ITCM_BASE) / itcm_blksize;
80200cde: 4949         	ldr	r1, [pc, #0x124]        @ 0x80200e04 <TGU_Setup+0x1b4>
80200ce0: 6a7a         	ldr	r2, [r7, #0x24]
80200ce2: 4613         	mov	r3, r2
80200ce4: 005b         	lsls	r3, r3, #0x1
80200ce6: 4413         	add	r3, r2
80200ce8: 009b         	lsls	r3, r3, #0x2
80200cea: 440b         	add	r3, r1
80200cec: 681a         	ldr	r2, [r3]
80200cee: 69fb         	ldr	r3, [r7, #0x1c]
80200cf0: fbb2 f3f3    	udiv	r3, r2, r3
80200cf4: 637b         	str	r3, [r7, #0x34]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:61
;             end_block = (ns_regions[i].end - ITCM_BASE) / itcm_blksize;
80200cf6: 4943         	ldr	r1, [pc, #0x10c]        @ 0x80200e04 <TGU_Setup+0x1b4>
80200cf8: 6a7a         	ldr	r2, [r7, #0x24]
80200cfa: 4613         	mov	r3, r2
80200cfc: 005b         	lsls	r3, r3, #0x1
80200cfe: 4413         	add	r3, r2
80200d00: 009b         	lsls	r3, r3, #0x2
80200d02: 440b         	add	r3, r1
80200d04: 3304         	adds	r3, #0x4
80200d06: 681a         	ldr	r2, [r3]
80200d08: 69fb         	ldr	r3, [r7, #0x1c]
80200d0a: fbb2 f3f3    	udiv	r3, r2, r3
80200d0e: 633b         	str	r3, [r7, #0x30]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:62
;             base = ITGU_BASE;
80200d10: 4b3e         	ldr	r3, [pc, #0xf8]         @ 0x80200e0c <TGU_Setup+0x1bc>
80200d12: 62bb         	str	r3, [r7, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:65
;         start_lut = start_block / 32;
80200d14: 6b7b         	ldr	r3, [r7, #0x34]
80200d16: 095b         	lsrs	r3, r3, #0x5
80200d18: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:66
;         end_lut = end_block / 32;
80200d1a: 6b3b         	ldr	r3, [r7, #0x30]
80200d1c: 095b         	lsrs	r3, r3, #0x5
80200d1e: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:68
;         start_offset = start_block % 32;
80200d20: 6b7b         	ldr	r3, [r7, #0x34]
80200d22: f003 031f    	and	r3, r3, #0x1f
80200d26: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:69
;         end_offset = end_block % 32;
80200d28: 6b3b         	ldr	r3, [r7, #0x30]
80200d2a: f003 031f    	and	r3, r3, #0x1f
80200d2e: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:71
;         if (start_lut == end_lut) {
80200d30: 6afa         	ldr	r2, [r7, #0x2c]
80200d32: 697b         	ldr	r3, [r7, #0x14]
80200d34: 429a         	cmp	r2, r3
80200d36: d11c         	bne	0x80200d72 <TGU_Setup+0x122> @ imm = #0x38
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:73
;             lut_val_l = SET_BIT_RANGE(start_offset, end_offset);
80200d38: 68fb         	ldr	r3, [r7, #0xc]
80200d3a: f1c3 031f    	rsb.w	r3, r3, #0x1f
80200d3e: f04f 32ff    	mov.w	r2, #0xffffffff
80200d42: 40da         	lsrs	r2, r3
80200d44: f04f 31ff    	mov.w	r1, #0xffffffff
80200d48: 693b         	ldr	r3, [r7, #0x10]
80200d4a: fa01 f303    	lsl.w	r3, r1, r3
80200d4e: 4013         	ands	r3, r2
80200d50: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:74
;             *((volatile uint32_t *) TGU_LUT(base, start_lut)) |= lut_val_l;
80200d52: 6afb         	ldr	r3, [r7, #0x2c]
80200d54: 009a         	lsls	r2, r3, #0x2
80200d56: 6abb         	ldr	r3, [r7, #0x28]
80200d58: 4413         	add	r3, r2
80200d5a: 3310         	adds	r3, #0x10
80200d5c: 681a         	ldr	r2, [r3]
80200d5e: 6afb         	ldr	r3, [r7, #0x2c]
80200d60: 0099         	lsls	r1, r3, #0x2
80200d62: 6abb         	ldr	r3, [r7, #0x28]
80200d64: 440b         	add	r3, r1
80200d66: 3310         	adds	r3, #0x10
80200d68: 4619         	mov	r1, r3
80200d6a: 68bb         	ldr	r3, [r7, #0x8]
80200d6c: 4313         	orrs	r3, r2
80200d6e: 600b         	str	r3, [r1]
80200d70: e036         	b	0x80200de0 <TGU_Setup+0x190> @ imm = #0x6c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:77
;             lut_val_l = SET_BIT_RANGE(start_offset, 31);
80200d72: f04f 32ff    	mov.w	r2, #0xffffffff
80200d76: 693b         	ldr	r3, [r7, #0x10]
80200d78: fa02 f303    	lsl.w	r3, r2, r3
80200d7c: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:78
;             lut_val_h = SET_BIT_RANGE(0, end_offset);
80200d7e: 68fb         	ldr	r3, [r7, #0xc]
80200d80: f1c3 031f    	rsb.w	r3, r3, #0x1f
80200d84: f04f 32ff    	mov.w	r2, #0xffffffff
80200d88: fa22 f303    	lsr.w	r3, r2, r3
80200d8c: 607b         	str	r3, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:81
;             *((volatile uint32_t *) TGU_LUT(base, start_lut)) = lut_val_l;
80200d8e: 6afb         	ldr	r3, [r7, #0x2c]
80200d90: 009a         	lsls	r2, r3, #0x2
80200d92: 6abb         	ldr	r3, [r7, #0x28]
80200d94: 4413         	add	r3, r2
80200d96: 3310         	adds	r3, #0x10
80200d98: 461a         	mov	r2, r3
80200d9a: 68bb         	ldr	r3, [r7, #0x8]
80200d9c: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:84
;             while (start_lut != (end_lut - 1)) {
80200d9e: e00b         	b	0x80200db8 <TGU_Setup+0x168> @ imm = #0x16
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:85
;                 start_lut++;
80200da0: 6afb         	ldr	r3, [r7, #0x2c]
80200da2: 3301         	adds	r3, #0x1
80200da4: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:86
;                 *((volatile uint32_t *) TGU_LUT(base, start_lut)) = 0xFFFFFFFFU;
80200da6: 6afb         	ldr	r3, [r7, #0x2c]
80200da8: 009a         	lsls	r2, r3, #0x2
80200daa: 6abb         	ldr	r3, [r7, #0x28]
80200dac: 4413         	add	r3, r2
80200dae: 3310         	adds	r3, #0x10
80200db0: 461a         	mov	r2, r3
80200db2: f04f 33ff    	mov.w	r3, #0xffffffff
80200db6: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:84
;             while (start_lut != (end_lut - 1)) {
80200db8: 697b         	ldr	r3, [r7, #0x14]
80200dba: 3b01         	subs	r3, #0x1
80200dbc: 6afa         	ldr	r2, [r7, #0x2c]
80200dbe: 429a         	cmp	r2, r3
80200dc0: d1ee         	bne	0x80200da0 <TGU_Setup+0x150> @ imm = #-0x24
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:90
;             *((volatile uint32_t *) TGU_LUT(base, end_lut)) |= lut_val_h;
80200dc2: 697b         	ldr	r3, [r7, #0x14]
80200dc4: 009a         	lsls	r2, r3, #0x2
80200dc6: 6abb         	ldr	r3, [r7, #0x28]
80200dc8: 4413         	add	r3, r2
80200dca: 3310         	adds	r3, #0x10
80200dcc: 681a         	ldr	r2, [r3]
80200dce: 697b         	ldr	r3, [r7, #0x14]
80200dd0: 0099         	lsls	r1, r3, #0x2
80200dd2: 6abb         	ldr	r3, [r7, #0x28]
80200dd4: 440b         	add	r3, r1
80200dd6: 3310         	adds	r3, #0x10
80200dd8: 4619         	mov	r1, r3
80200dda: 687b         	ldr	r3, [r7, #0x4]
80200ddc: 4313         	orrs	r3, r2
80200dde: 600b         	str	r3, [r1]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:54
;     for (i = 0; i < (sizeof(ns_regions) / sizeof(ns_regions[0])); i++) {
80200de0: 6a7b         	ldr	r3, [r7, #0x24]
80200de2: 3301         	adds	r3, #0x1
80200de4: 627b         	str	r3, [r7, #0x24]
80200de6: 6a7b         	ldr	r3, [r7, #0x24]
80200de8: 2b00         	cmp	r3, #0x0
80200dea: f43f af4d    	beq.w	0x80200c88 <TGU_Setup+0x38> @ imm = #-0x166
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tgu_M55.c:93
; }
80200dee: bf00         	nop
80200df0: bf00         	nop
80200df2: 373c         	adds	r7, #0x3c
80200df4: 46bd         	mov	sp, r7
80200df6: f85d 7b04    	ldr	r7, [sp], #4
80200dfa: 4770         	bx	lr
80200dfc: 04 e5 01 e0  	.word	0xe001e504
80200e00: 04 e6 01 e0  	.word	0xe001e604
80200e04: e8 11 20 80  	.word	0x802011e8
80200e08: 00 e6 01 e0  	.word	0xe001e600
80200e0c: 00 e5 01 e0  	.word	0xe001e500

80200e10 <ARM_MPU_Enable>:
; ARM_MPU_Enable():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:200
; {
80200e10: b480         	push	{r7}
80200e12: b083         	sub	sp, #0xc
80200e14: af00         	add	r7, sp, #0x0
80200e16: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:280
;   __ASM volatile ("dmb 0xF":::"memory");
80200e18: f3bf 8f5f    	dmb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:281
; }
80200e1c: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:202
;   MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
80200e1e: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x80200e4c <ARM_MPU_Enable+0x3c>
80200e20: 687b         	ldr	r3, [r7, #0x4]
80200e22: f043 0301    	orr	r3, r3, #0x1
80200e26: 6053         	str	r3, [r2, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:204
;   SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
80200e28: 4b09         	ldr	r3, [pc, #0x24]         @ 0x80200e50 <ARM_MPU_Enable+0x40>
80200e2a: 6a5b         	ldr	r3, [r3, #0x24]
80200e2c: 4a08         	ldr	r2, [pc, #0x20]         @ 0x80200e50 <ARM_MPU_Enable+0x40>
80200e2e: f443 3380    	orr	r3, r3, #0x10000
80200e32: 6253         	str	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
80200e34: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
80200e38: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
80200e3a: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
80200e3e: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:208
; }
80200e40: bf00         	nop
80200e42: 370c         	adds	r7, #0xc
80200e44: 46bd         	mov	sp, r7
80200e46: f85d 7b04    	ldr	r7, [sp], #4
80200e4a: 4770         	bx	lr
80200e4c: 90 ed 00 e0  	.word	0xe000ed90
80200e50: 00 ed 00 e0  	.word	0xe000ed00

80200e54 <ARM_MPU_Disable>:
; ARM_MPU_Disable():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:213
; {
80200e54: b480         	push	{r7}
80200e56: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:280
;   __ASM volatile ("dmb 0xF":::"memory");
80200e58: f3bf 8f5f    	dmb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:281
; }
80200e5c: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:216
;   SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
80200e5e: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x80200e8c <ARM_MPU_Disable+0x38>
80200e60: 6a5b         	ldr	r3, [r3, #0x24]
80200e62: 4a0a         	ldr	r2, [pc, #0x28]         @ 0x80200e8c <ARM_MPU_Disable+0x38>
80200e64: f423 3380    	bic	r3, r3, #0x10000
80200e68: 6253         	str	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:218
;   MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
80200e6a: 4b09         	ldr	r3, [pc, #0x24]         @ 0x80200e90 <ARM_MPU_Disable+0x3c>
80200e6c: 685b         	ldr	r3, [r3, #0x4]
80200e6e: 4a08         	ldr	r2, [pc, #0x20]         @ 0x80200e90 <ARM_MPU_Disable+0x3c>
80200e70: f023 0301    	bic	r3, r3, #0x1
80200e74: 6053         	str	r3, [r2, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
80200e76: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
80200e7a: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
80200e7c: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
80200e80: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:221
; }
80200e82: bf00         	nop
80200e84: 46bd         	mov	sp, r7
80200e86: f85d 7b04    	ldr	r7, [sp], #4
80200e8a: 4770         	bx	lr
80200e8c: 00 ed 00 e0  	.word	0xe000ed00
80200e90: 90 ed 00 e0  	.word	0xe000ed90

80200e94 <ARM_MPU_SetMemAttrEx>:
; ARM_MPU_SetMemAttrEx():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:258
; {
80200e94: b480         	push	{r7}
80200e96: b087         	sub	sp, #0x1c
80200e98: af00         	add	r7, sp, #0x0
80200e9a: 6078         	str	r0, [r7, #0x4]
80200e9c: 460b         	mov	r3, r1
80200e9e: 70fb         	strb	r3, [r7, #0x3]
80200ea0: 4613         	mov	r3, r2
80200ea2: 70bb         	strb	r3, [r7, #0x2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:259
;   const uint8_t reg = idx / 4U;
80200ea4: 78fb         	ldrb	r3, [r7, #0x3]
80200ea6: 089b         	lsrs	r3, r3, #0x2
80200ea8: 75fb         	strb	r3, [r7, #0x17]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:260
;   const uint32_t pos = ((idx % 4U) * 8U);
80200eaa: 78fb         	ldrb	r3, [r7, #0x3]
80200eac: f003 0303    	and	r3, r3, #0x3
80200eb0: 00db         	lsls	r3, r3, #0x3
80200eb2: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:261
;   const uint32_t mask = 0xFFU << pos;
80200eb4: 22ff         	movs	r2, #0xff
80200eb6: 693b         	ldr	r3, [r7, #0x10]
80200eb8: fa02 f303    	lsl.w	r3, r2, r3
80200ebc: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:263
;   if (reg >= (sizeof(mpu->MAIR) / sizeof(mpu->MAIR[0]))) {
80200ebe: 7dfb         	ldrb	r3, [r7, #0x17]
80200ec0: 2b01         	cmp	r3, #0x1
80200ec2: d816         	bhi	0x80200ef2 <ARM_MPU_SetMemAttrEx+0x5e> @ imm = #0x2c
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:267
;   mpu->MAIR[reg] = ((mpu->MAIR[reg] & ~mask) | ((attr << pos) & mask));
80200ec4: 7dfa         	ldrb	r2, [r7, #0x17]
80200ec6: 687b         	ldr	r3, [r7, #0x4]
80200ec8: 320c         	adds	r2, #0xc
80200eca: f853 2022    	ldr.w	r2, [r3, r2, lsl #2]
80200ece: 68fb         	ldr	r3, [r7, #0xc]
80200ed0: 43db         	mvns	r3, r3
80200ed2: ea02 0103    	and.w	r1, r2, r3
80200ed6: 78ba         	ldrb	r2, [r7, #0x2]
80200ed8: 693b         	ldr	r3, [r7, #0x10]
80200eda: fa02 f303    	lsl.w	r3, r2, r3
80200ede: 461a         	mov	r2, r3
80200ee0: 68fb         	ldr	r3, [r7, #0xc]
80200ee2: 4013         	ands	r3, r2
80200ee4: 7dfa         	ldrb	r2, [r7, #0x17]
80200ee6: 4319         	orrs	r1, r3
80200ee8: 687b         	ldr	r3, [r7, #0x4]
80200eea: 320c         	adds	r2, #0xc
80200eec: f843 1022    	str.w	r1, [r3, r2, lsl #2]
80200ef0: e000         	b	0x80200ef4 <ARM_MPU_SetMemAttrEx+0x60> @ imm = #0x0
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:264
;     return; // invalid index
80200ef2: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:268
; }
80200ef4: 371c         	adds	r7, #0x1c
80200ef6: 46bd         	mov	sp, r7
80200ef8: f85d 7b04    	ldr	r7, [sp], #4
80200efc: 4770         	bx	lr

80200efe <ARM_MPU_SetMemAttr>:
; ARM_MPU_SetMemAttr():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:275
; {
80200efe: b580         	push	{r7, lr}
80200f00: b082         	sub	sp, #0x8
80200f02: af00         	add	r7, sp, #0x0
80200f04: 4603         	mov	r3, r0
80200f06: 460a         	mov	r2, r1
80200f08: 71fb         	strb	r3, [r7, #0x7]
80200f0a: 4613         	mov	r3, r2
80200f0c: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:276
;   ARM_MPU_SetMemAttrEx(MPU, idx, attr);
80200f0e: 79ba         	ldrb	r2, [r7, #0x6]
80200f10: 79fb         	ldrb	r3, [r7, #0x7]
80200f12: 4619         	mov	r1, r3
80200f14: 4803         	ldr	r0, [pc, #0xc]          @ 0x80200f24 <ARM_MPU_SetMemAttr+0x26>
80200f16: f7ff ffbd    	bl	0x80200e94 <ARM_MPU_SetMemAttrEx> @ imm = #-0x86
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:277
; }
80200f1a: bf00         	nop
80200f1c: 3708         	adds	r7, #0x8
80200f1e: 46bd         	mov	sp, r7
80200f20: bd80         	pop	{r7, pc}
80200f22: bf00         	nop
80200f24: 90 ed 00 e0  	.word	0xe000ed90

80200f28 <ARM_MPU_ClrRegionEx>:
; ARM_MPU_ClrRegionEx():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:295
; {
80200f28: b480         	push	{r7}
80200f2a: b083         	sub	sp, #0xc
80200f2c: af00         	add	r7, sp, #0x0
80200f2e: 6078         	str	r0, [r7, #0x4]
80200f30: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:296
;   mpu->RNR = rnr;
80200f32: 687b         	ldr	r3, [r7, #0x4]
80200f34: 683a         	ldr	r2, [r7]
80200f36: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:297
;   mpu->RLAR = 0U;
80200f38: 687b         	ldr	r3, [r7, #0x4]
80200f3a: 2200         	movs	r2, #0x0
80200f3c: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:298
; }
80200f3e: bf00         	nop
80200f40: 370c         	adds	r7, #0xc
80200f42: 46bd         	mov	sp, r7
80200f44: f85d 7b04    	ldr	r7, [sp], #4
80200f48: 4770         	bx	lr

80200f4a <ARM_MPU_ClrRegion>:
; ARM_MPU_ClrRegion():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:304
; {
80200f4a: b580         	push	{r7, lr}
80200f4c: b082         	sub	sp, #0x8
80200f4e: af00         	add	r7, sp, #0x0
80200f50: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:305
;   ARM_MPU_ClrRegionEx(MPU, rnr);
80200f52: 6879         	ldr	r1, [r7, #0x4]
80200f54: 4803         	ldr	r0, [pc, #0xc]          @ 0x80200f64 <ARM_MPU_ClrRegion+0x1a>
80200f56: f7ff ffe7    	bl	0x80200f28 <ARM_MPU_ClrRegionEx> @ imm = #-0x32
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:306
; }
80200f5a: bf00         	nop
80200f5c: 3708         	adds	r7, #0x8
80200f5e: 46bd         	mov	sp, r7
80200f60: bd80         	pop	{r7, pc}
80200f62: bf00         	nop
80200f64: 90 ed 00 e0  	.word	0xe000ed90

80200f68 <ARM_MPU_OrderedMemcpy>:
; ARM_MPU_OrderedMemcpy():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:359
; {
80200f68: b480         	push	{r7}
80200f6a: b087         	sub	sp, #0x1c
80200f6c: af00         	add	r7, sp, #0x0
80200f6e: 60f8         	str	r0, [r7, #0xc]
80200f70: 60b9         	str	r1, [r7, #0x8]
80200f72: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:361
;   for (i = 0U; i < len; ++i)
80200f74: 2300         	movs	r3, #0x0
80200f76: 617b         	str	r3, [r7, #0x14]
80200f78: e00c         	b	0x80200f94 <ARM_MPU_OrderedMemcpy+0x2c> @ imm = #0x18
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:363
;     dst[i] = src[i];
80200f7a: 697b         	ldr	r3, [r7, #0x14]
80200f7c: 009b         	lsls	r3, r3, #0x2
80200f7e: 68ba         	ldr	r2, [r7, #0x8]
80200f80: 441a         	add	r2, r3
80200f82: 697b         	ldr	r3, [r7, #0x14]
80200f84: 009b         	lsls	r3, r3, #0x2
80200f86: 68f9         	ldr	r1, [r7, #0xc]
80200f88: 440b         	add	r3, r1
80200f8a: 6812         	ldr	r2, [r2]
80200f8c: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:361
;   for (i = 0U; i < len; ++i)
80200f8e: 697b         	ldr	r3, [r7, #0x14]
80200f90: 3301         	adds	r3, #0x1
80200f92: 617b         	str	r3, [r7, #0x14]
80200f94: 697a         	ldr	r2, [r7, #0x14]
80200f96: 687b         	ldr	r3, [r7, #0x4]
80200f98: 429a         	cmp	r2, r3
80200f9a: d3ee         	blo	0x80200f7a <ARM_MPU_OrderedMemcpy+0x12> @ imm = #-0x24
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:365
; }
80200f9c: bf00         	nop
80200f9e: bf00         	nop
80200fa0: 371c         	adds	r7, #0x1c
80200fa2: 46bd         	mov	sp, r7
80200fa4: f85d 7b04    	ldr	r7, [sp], #4
80200fa8: 4770         	bx	lr

80200faa <ARM_MPU_LoadEx>:
; ARM_MPU_LoadEx():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:374
; {
80200faa: b580         	push	{r7, lr}
80200fac: b088         	sub	sp, #0x20
80200fae: af00         	add	r7, sp, #0x0
80200fb0: 60f8         	str	r0, [r7, #0xc]
80200fb2: 60b9         	str	r1, [r7, #0x8]
80200fb4: 607a         	str	r2, [r7, #0x4]
80200fb6: 603b         	str	r3, [r7]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:375
;   const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
80200fb8: 2302         	movs	r3, #0x2
80200fba: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:376
;   if (cnt == 1U) {
80200fbc: 683b         	ldr	r3, [r7]
80200fbe: 2b01         	cmp	r3, #0x1
80200fc0: d10a         	bne	0x80200fd8 <ARM_MPU_LoadEx+0x2e> @ imm = #0x14
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:377
;     mpu->RNR = rnr;
80200fc2: 68fb         	ldr	r3, [r7, #0xc]
80200fc4: 68ba         	ldr	r2, [r7, #0x8]
80200fc6: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:378
;     ARM_MPU_OrderedMemcpy(&(mpu->RBAR), &(table->RBAR), rowWordSize);
80200fc8: 68fb         	ldr	r3, [r7, #0xc]
80200fca: 330c         	adds	r3, #0xc
80200fcc: 6879         	ldr	r1, [r7, #0x4]
80200fce: 697a         	ldr	r2, [r7, #0x14]
80200fd0: 4618         	mov	r0, r3
80200fd2: f7ff ffc9    	bl	0x80200f68 <ARM_MPU_OrderedMemcpy> @ imm = #-0x6e
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:396
; }
80200fd6: e041         	b	0x8020105c <ARM_MPU_LoadEx+0xb2> @ imm = #0x82
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:380
;     uint32_t rnrBase   = rnr & ~(MPU_TYPE_RALIASES-1U);
80200fd8: 68bb         	ldr	r3, [r7, #0x8]
80200fda: f023 0303    	bic	r3, r3, #0x3
80200fde: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:381
;     uint32_t rnrOffset = rnr % MPU_TYPE_RALIASES;
80200fe0: 68bb         	ldr	r3, [r7, #0x8]
80200fe2: f003 0303    	and	r3, r3, #0x3
80200fe6: 61bb         	str	r3, [r7, #0x18]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:383
;     mpu->RNR = rnrBase;
80200fe8: 68fb         	ldr	r3, [r7, #0xc]
80200fea: 69fa         	ldr	r2, [r7, #0x1c]
80200fec: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:384
;     while ((rnrOffset + cnt) > MPU_TYPE_RALIASES) {
80200fee: e022         	b	0x80201036 <ARM_MPU_LoadEx+0x8c> @ imm = #0x44
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:385
;       uint32_t c = MPU_TYPE_RALIASES - rnrOffset;
80200ff0: 69bb         	ldr	r3, [r7, #0x18]
80200ff2: f1c3 0304    	rsb.w	r3, r3, #0x4
80200ff6: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:386
;       ARM_MPU_OrderedMemcpy(&(mpu->RBAR)+(rnrOffset*2U), &(table->RBAR), c*rowWordSize);
80200ff8: 68fb         	ldr	r3, [r7, #0xc]
80200ffa: f103 020c    	add.w	r2, r3, #0xc
80200ffe: 69bb         	ldr	r3, [r7, #0x18]
80201000: 00db         	lsls	r3, r3, #0x3
80201002: 18d0         	adds	r0, r2, r3
80201004: 6879         	ldr	r1, [r7, #0x4]
80201006: 693b         	ldr	r3, [r7, #0x10]
80201008: 697a         	ldr	r2, [r7, #0x14]
8020100a: fb02 f303    	mul	r3, r2, r3
8020100e: 461a         	mov	r2, r3
80201010: f7ff ffaa    	bl	0x80200f68 <ARM_MPU_OrderedMemcpy> @ imm = #-0xac
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:387
;       table += c;
80201014: 693b         	ldr	r3, [r7, #0x10]
80201016: 00db         	lsls	r3, r3, #0x3
80201018: 687a         	ldr	r2, [r7, #0x4]
8020101a: 4413         	add	r3, r2
8020101c: 607b         	str	r3, [r7, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:388
;       cnt -= c;
8020101e: 683a         	ldr	r2, [r7]
80201020: 693b         	ldr	r3, [r7, #0x10]
80201022: 1ad3         	subs	r3, r2, r3
80201024: 603b         	str	r3, [r7]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:389
;       rnrOffset = 0U;
80201026: 2300         	movs	r3, #0x0
80201028: 61bb         	str	r3, [r7, #0x18]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:390
;       rnrBase += MPU_TYPE_RALIASES;
8020102a: 69fb         	ldr	r3, [r7, #0x1c]
8020102c: 3304         	adds	r3, #0x4
8020102e: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:391
;       mpu->RNR = rnrBase;
80201030: 68fb         	ldr	r3, [r7, #0xc]
80201032: 69fa         	ldr	r2, [r7, #0x1c]
80201034: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:384
;     while ((rnrOffset + cnt) > MPU_TYPE_RALIASES) {
80201036: 69ba         	ldr	r2, [r7, #0x18]
80201038: 683b         	ldr	r3, [r7]
8020103a: 4413         	add	r3, r2
8020103c: 2b04         	cmp	r3, #0x4
8020103e: d8d7         	bhi	0x80200ff0 <ARM_MPU_LoadEx+0x46> @ imm = #-0x52
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:394
;     ARM_MPU_OrderedMemcpy(&(mpu->RBAR)+(rnrOffset*2U), &(table->RBAR), cnt*rowWordSize);
80201040: 68fb         	ldr	r3, [r7, #0xc]
80201042: f103 020c    	add.w	r2, r3, #0xc
80201046: 69bb         	ldr	r3, [r7, #0x18]
80201048: 00db         	lsls	r3, r3, #0x3
8020104a: 18d0         	adds	r0, r2, r3
8020104c: 6879         	ldr	r1, [r7, #0x4]
8020104e: 683b         	ldr	r3, [r7]
80201050: 697a         	ldr	r2, [r7, #0x14]
80201052: fb02 f303    	mul	r3, r2, r3
80201056: 461a         	mov	r2, r3
80201058: f7ff ff86    	bl	0x80200f68 <ARM_MPU_OrderedMemcpy> @ imm = #-0xf4
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:396
; }
8020105c: bf00         	nop
8020105e: 3720         	adds	r7, #0x20
80201060: 46bd         	mov	sp, r7
80201062: bd80         	pop	{r7, pc}

80201064 <ARM_MPU_Load>:
; ARM_MPU_Load():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:404
; {
80201064: b580         	push	{r7, lr}
80201066: b084         	sub	sp, #0x10
80201068: af00         	add	r7, sp, #0x0
8020106a: 60f8         	str	r0, [r7, #0xc]
8020106c: 60b9         	str	r1, [r7, #0x8]
8020106e: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:405
;   ARM_MPU_LoadEx(MPU, rnr, table, cnt);
80201070: 687b         	ldr	r3, [r7, #0x4]
80201072: 68ba         	ldr	r2, [r7, #0x8]
80201074: 68f9         	ldr	r1, [r7, #0xc]
80201076: 4803         	ldr	r0, [pc, #0xc]          @ 0x80201084 <ARM_MPU_Load+0x20>
80201078: f7ff ff97    	bl	0x80200faa <ARM_MPU_LoadEx> @ imm = #-0xd2
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/armv8m_mpu.h:406
; }
8020107c: bf00         	nop
8020107e: 3710         	adds	r7, #0x10
80201080: 46bd         	mov	sp, r7
80201082: bd80         	pop	{r7, pc}
80201084: 90 ed 00 e0  	.word	0xe000ed90

80201088 <MPU_Load_Regions>:
; MPU_Load_Regions():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:51
; {
80201088: b580         	push	{r7, lr}
8020108a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:111
;     ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WT_RA_TRANSIENT, ARM_MPU_ATTR(
8020108c: 2122         	movs	r1, #0x22
8020108e: 2000         	movs	r0, #0x0
80201090: f7ff ff35    	bl	0x80200efe <ARM_MPU_SetMemAttr> @ imm = #-0x196
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:117
;     ARM_MPU_SetMemAttr(MEMATTRIDX_DEVICE_nGnRE, ARM_MPU_ATTR(
80201094: 2104         	movs	r1, #0x4
80201096: 2001         	movs	r0, #0x1
80201098: f7ff ff31    	bl	0x80200efe <ARM_MPU_SetMemAttr> @ imm = #-0x19e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:123
;     ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WB_RA_WA, ARM_MPU_ATTR(
8020109c: 21ff         	movs	r1, #0xff
8020109e: 2002         	movs	r0, #0x2
802010a0: f7ff ff2d    	bl	0x80200efe <ARM_MPU_SetMemAttr> @ imm = #-0x1a6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:129
;     ARM_MPU_SetMemAttr(MEMATTRIDX_NORMAL_WT_RA, ARM_MPU_ATTR(
802010a4: 21aa         	movs	r1, #0xaa
802010a6: 2003         	movs	r0, #0x3
802010a8: f7ff ff29    	bl	0x80200efe <ARM_MPU_SetMemAttr> @ imm = #-0x1ae
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:135
;     ARM_MPU_Load(0, mpu_table, sizeof(mpu_table)/sizeof(ARM_MPU_Region_t));
802010ac: 2209         	movs	r2, #0x9
802010ae: 4903         	ldr	r1, [pc, #0xc]          @ 0x802010bc <MPU_Load_Regions+0x34>
802010b0: 2000         	movs	r0, #0x0
802010b2: f7ff ffd7    	bl	0x80201064 <ARM_MPU_Load> @ imm = #-0x52
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:136
; }
802010b6: bf00         	nop
802010b8: bd80         	pop	{r7, pc}
802010ba: bf00         	nop
802010bc: a0 11 20 80  	.word	0x802011a0

802010c0 <MPU_Clear_All_Regions>:
; MPU_Clear_All_Regions():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:146
; {
802010c0: b580         	push	{r7, lr}
802010c2: b084         	sub	sp, #0x10
802010c4: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:147
;     MPU_Type* mpu = MPU;
802010c6: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x802010f8 <MPU_Clear_All_Regions+0x38>
802010c8: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:149
;     uint32_t num_regions = (mpu->TYPE >> 8);
802010ca: 68bb         	ldr	r3, [r7, #0x8]
802010cc: 681b         	ldr	r3, [r3]
802010ce: 0a1b         	lsrs	r3, r3, #0x8
802010d0: 607b         	str	r3, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:152
;     for(cnt = 0U; cnt < num_regions; cnt++)
802010d2: 2300         	movs	r3, #0x0
802010d4: 60fb         	str	r3, [r7, #0xc]
802010d6: e005         	b	0x802010e4 <MPU_Clear_All_Regions+0x24> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:153
;             ARM_MPU_ClrRegion(cnt);
802010d8: 68f8         	ldr	r0, [r7, #0xc]
802010da: f7ff ff36    	bl	0x80200f4a <ARM_MPU_ClrRegion> @ imm = #-0x194
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:152
;     for(cnt = 0U; cnt < num_regions; cnt++)
802010de: 68fb         	ldr	r3, [r7, #0xc]
802010e0: 3301         	adds	r3, #0x1
802010e2: 60fb         	str	r3, [r7, #0xc]
802010e4: 68fa         	ldr	r2, [r7, #0xc]
802010e6: 687b         	ldr	r3, [r7, #0x4]
802010e8: 429a         	cmp	r2, r3
802010ea: d3f5         	blo	0x802010d8 <MPU_Clear_All_Regions+0x18> @ imm = #-0x16
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:154
; }
802010ec: bf00         	nop
802010ee: bf00         	nop
802010f0: 3710         	adds	r7, #0x10
802010f2: 46bd         	mov	sp, r7
802010f4: bd80         	pop	{r7, pc}
802010f6: bf00         	nop
802010f8: 90 ed 00 e0  	.word	0xe000ed90

802010fc <MPU_Setup>:
; MPU_Setup():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:170
; {
802010fc: b580         	push	{r7, lr}
802010fe: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:178
;     if (MPU->CTRL & MPU_CTRL_ENABLE_Msk)
80201100: 4b08         	ldr	r3, [pc, #0x20]         @ 0x80201124 <MPU_Setup+0x28>
80201102: 685b         	ldr	r3, [r3, #0x4]
80201104: f003 0301    	and	r3, r3, #0x1
80201108: 2b00         	cmp	r3, #0x0
8020110a: d001         	beq	0x80201110 <MPU_Setup+0x14> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:181
;         ARM_MPU_Disable();
8020110c: f7ff fea2    	bl	0x80200e54 <ARM_MPU_Disable> @ imm = #-0x2bc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:185
;     MPU_Clear_All_Regions();
80201110: f7ff ffd6    	bl	0x802010c0 <MPU_Clear_All_Regions> @ imm = #-0x54
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:188
;     MPU_Load_Regions();
80201114: f7ff ffb8    	bl	0x80201088 <MPU_Load_Regions> @ imm = #-0x90
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:191
;     ARM_MPU_Enable(MPU_CONTROL);
80201118: 2006         	movs	r0, #0x6
8020111a: f7ff fe79    	bl	0x80200e10 <ARM_MPU_Enable> @ imm = #-0x30e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/mpu_M55.c:192
; }
8020111e: bf00         	nop
80201120: bd80         	pop	{r7, pc}
80201122: bf00         	nop
80201124: 90 ed 00 e0  	.word	0xe000ed90

80201128 <SAU_TCM_NS_Setup>:
; SAU_TCM_NS_Setup():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:70
; {
80201128: b480         	push	{r7}
8020112a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:71
;     SAU->RNR = 0;
8020112c: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x8020115c <SAU_TCM_NS_Setup+0x34>
8020112e: 2200         	movs	r2, #0x0
80201130: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:72
;     SAU->RBAR = (uint32_t)&ns_region_0_start & SAU_RBAR_BADDR_Msk;
80201132: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x80201160 <SAU_TCM_NS_Setup+0x38>
80201134: 4a09         	ldr	r2, [pc, #0x24]         @ 0x8020115c <SAU_TCM_NS_Setup+0x34>
80201136: f023 031f    	bic	r3, r3, #0x1f
8020113a: 60d3         	str	r3, [r2, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:73
;     SAU->RLAR = (((uint32_t)&ns_region_0_end - 1) & SAU_RLAR_LADDR_Msk) | \
8020113c: 4b09         	ldr	r3, [pc, #0x24]         @ 0x80201164 <SAU_TCM_NS_Setup+0x3c>
8020113e: 3b01         	subs	r3, #0x1
80201140: f023 031f    	bic	r3, r3, #0x1f
80201144: 4a05         	ldr	r2, [pc, #0x14]         @ 0x8020115c <SAU_TCM_NS_Setup+0x34>
80201146: f043 0301    	orr	r3, r3, #0x1
8020114a: 6113         	str	r3, [r2, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:76
;     SAU->CTRL = ((1U << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk);
8020114c: 4b03         	ldr	r3, [pc, #0xc]          @ 0x8020115c <SAU_TCM_NS_Setup+0x34>
8020114e: 2201         	movs	r2, #0x1
80201150: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:77
; }
80201152: bf00         	nop
80201154: 46bd         	mov	sp, r7
80201156: f85d 7b04    	ldr	r7, [sp], #4
8020115a: 4770         	bx	lr
8020115c: d0 ed 00 e0  	.word	0xe000edd0
80201160: 00 40 00 20  	.word	0x20004000
80201164: 00 40 00 20  	.word	0x20004000

80201168 <setup_tcm_ns_partition>:
; setup_tcm_ns_partition():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:80
; {
80201168: b580         	push	{r7, lr}
8020116a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:82
;     if (&ns_region_0_end == &ns_region_0_start)
8020116c: 4a05         	ldr	r2, [pc, #0x14]         @ 0x80201184 <setup_tcm_ns_partition+0x1c>
8020116e: 4b06         	ldr	r3, [pc, #0x18]         @ 0x80201188 <setup_tcm_ns_partition+0x20>
80201170: 429a         	cmp	r2, r3
80201172: d004         	beq	0x8020117e <setup_tcm_ns_partition+0x16> @ imm = #0x8
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:85
;     SAU_TCM_NS_Setup();
80201174: f7ff ffd8    	bl	0x80201128 <SAU_TCM_NS_Setup> @ imm = #-0x50
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:86
;     TGU_Setup();
80201178: f7ff fd6a    	bl	0x80200c50 <TGU_Setup>  @ imm = #-0x52c
8020117c: e000         	b	0x80201180 <setup_tcm_ns_partition+0x18> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:83
;         return;
8020117e: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/tcm_partition.c:87
; }
80201180: bd80         	pop	{r7, pc}
80201182: bf00         	nop
80201184: 00 40 00 20  	.word	0x20004000
80201188: 00 40 00 20  	.word	0x20004000
8020118c: 00 00 00 00  	.word	0x00000000

80201190 <___start_veneer>:
; ___start_veneer():
80201190: f85f f000    	ldr.w	pc, [pc, #-0x0]         @ 0x80201194 <___start_veneer+0x4>
80201194: 99 00 00 00  	.word	0x00000099

80201198 <____aeabi_uldivmod_veneer>:
; ____aeabi_uldivmod_veneer():
80201198: f85f f000    	ldr.w	pc, [pc, #-0x0]         @ 0x8020119c <____aeabi_uldivmod_veneer+0x4>
8020119c: e9 77 00 00  	.word	0x000077e9
802011a0: 02 00 00 02  	.word	0x02000002
802011a4: e1 ff 3f 02  	.word	0x023fffe1
802011a8: 02 00 00 08  	.word	0x08000002
802011ac: e5 ff 27 08  	.word	0x0827ffe5
802011b0: 03 00 00 1a  	.word	0x1a000003
802011b4: e3 ff ff 1a  	.word	0x1affffe3
802011b8: 12 00 00 58  	.word	0x58000012
802011bc: e5 ff 03 58  	.word	0x5803ffe5
802011c0: 12 00 80 58  	.word	0x58800012
802011c4: e5 ff 83 58  	.word	0x5883ffe5
802011c8: 06 00 00 80  	.word	0x80000006
802011cc: e7 ff 57 80  	.word	0x8057ffe7
802011d0: 03 00 00 83  	.word	0x83000003
802011d4: e3 ff ff 83  	.word	0x83ffffe3
802011d8: 02 00 00 a0  	.word	0xa0000002
802011dc: e5 ff ff bf  	.word	0xbfffffe5
802011e0: 06 00 00 c0  	.word	0xc0000006
802011e4: e7 ff ff df  	.word	0xdfffffe7
802011e8: 00 40 00 20  	.word	0x20004000
802011ec: ff 3f 00 20  	.word	0x20003fff
802011f0: 01 00 00 00  	.word	0x00000001
802011f4: 00 00 00 00  	.word	0x00000000
802011f8: 00 00 00 00  	.word	0x00000000
802011fc: 00 00 00 00  	.word	0x00000000

Disassembly of section .code.at_itcm:

00000000 <deregister_tm_clones>:
; deregister_tm_clones():
       0: 4803         	ldr	r0, [pc, #0xc]          @ 0x10 <deregister_tm_clones+0x10>
       2: 4b04         	ldr	r3, [pc, #0x10]         @ 0x14 <deregister_tm_clones+0x14>
       4: 4283         	cmp	r3, r0
       6: d002         	beq	0xe <deregister_tm_clones+0xe> @ imm = #0x4
       8: 4b03         	ldr	r3, [pc, #0xc]          @ 0x18 <deregister_tm_clones+0x18>
       a: b103         	cbz	r3, 0xe <deregister_tm_clones+0xe> @ imm = #0x0
       c: 4718         	bx	r3
       e: 4770         	bx	lr
      10: 80 0d 00 20  	.word	0x20000d80
      14: 80 0d 00 20  	.word	0x20000d80
      18: 00 00 00 00  	.word	0x00000000

0000001c <register_tm_clones>:
; register_tm_clones():
      1c: 4b06         	ldr	r3, [pc, #0x18]         @ 0x38 <register_tm_clones+0x1c>
      1e: 4907         	ldr	r1, [pc, #0x1c]         @ 0x3c <register_tm_clones+0x20>
      20: 1ac9         	subs	r1, r1, r3
      22: 1089         	asrs	r1, r1, #0x2
      24: bf48         	it	mi
      26: 3101         	addmi	r1, #0x1
      28: 1049         	asrs	r1, r1, #0x1
      2a: d003         	beq	0x34 <register_tm_clones+0x18> @ imm = #0x6
      2c: 4b04         	ldr	r3, [pc, #0x10]         @ 0x40 <register_tm_clones+0x24>
      2e: b10b         	cbz	r3, 0x34 <register_tm_clones+0x18> @ imm = #0x2
      30: 4801         	ldr	r0, [pc, #0x4]          @ 0x38 <register_tm_clones+0x1c>
      32: 4718         	bx	r3
      34: 4770         	bx	lr
      36: bf00         	nop
      38: 80 0d 00 20  	.word	0x20000d80
      3c: 80 0d 00 20  	.word	0x20000d80
      40: 00 00 00 00  	.word	0x00000000

00000044 <__do_global_dtors_aux>:
; __do_global_dtors_aux():
      44: b510         	push	{r4, lr}
      46: 4c06         	ldr	r4, [pc, #0x18]         @ 0x60 <__do_global_dtors_aux+0x1c>
      48: 7823         	ldrb	r3, [r4]
      4a: b943         	cbnz	r3, 0x5e <__do_global_dtors_aux+0x1a> @ imm = #0x10
      4c: f7ff ffd8    	bl	0x0 <deregister_tm_clones> @ imm = #-0x50
      50: 4b04         	ldr	r3, [pc, #0x10]         @ 0x64 <__do_global_dtors_aux+0x20>
      52: b113         	cbz	r3, 0x5a <__do_global_dtors_aux+0x16> @ imm = #0x4
      54: 4804         	ldr	r0, [pc, #0x10]         @ 0x68 <__do_global_dtors_aux+0x24>
      56: f3af 8000    	nop.w
      5a: 2301         	movs	r3, #0x1
      5c: 7023         	strb	r3, [r4]
      5e: bd10         	pop	{r4, pc}
      60: 80 0d 00 20  	.word	0x20000d80
      64: 00 00 00 00  	.word	0x00000000
      68: 28 21 21 80  	.word	0x80212128

0000006c <frame_dummy>:
; frame_dummy():
      6c: b508         	push	{r3, lr}
      6e: 4b05         	ldr	r3, [pc, #0x14]         @ 0x84 <frame_dummy+0x18>
      70: b11b         	cbz	r3, 0x7a <frame_dummy+0xe> @ imm = #0x6
      72: 4905         	ldr	r1, [pc, #0x14]         @ 0x88 <frame_dummy+0x1c>
      74: 4805         	ldr	r0, [pc, #0x14]         @ 0x8c <frame_dummy+0x20>
      76: f3af 8000    	nop.w
      7a: e8bd 4008    	pop.w	{r3, lr}
      7e: f7ff bfcd    	b.w	0x1c <register_tm_clones> @ imm = #-0x66
      82: bf00         	nop
      84: 00 00 00 00  	.word	0x00000000
      88: 84 0d 00 20  	.word	0x20000d84
      8c: 28 21 21 80  	.word	0x80212128

00000090 <_stack_init>:
; _stack_init():
      90: f5a3 3a80    	sub.w	r10, r3, #0x10000
      94: 4770         	bx	lr
      96: bf00         	nop

00000098 <_start>:
; _start():
      98: 4b17         	ldr	r3, [pc, #0x5c]         @ 0xf8 <_start+0x60>
      9a: 2b00         	cmp	r3, #0x0
      9c: bf08         	it	eq
      9e: 4b13         	ldreq	r3, [pc, #0x4c]         @ 0xec <_start+0x54>
      a0: 469d         	mov	sp, r3
      a2: f7ff fff5    	bl	0x90 <_stack_init>      @ imm = #-0x16
      a6: 2100         	movs	r1, #0x0
      a8: 468b         	mov	r11, r1
      aa: 460f         	mov	r7, r1
      ac: 4813         	ldr	r0, [pc, #0x4c]         @ 0xfc <_start+0x64>
      ae: 4a14         	ldr	r2, [pc, #0x50]         @ 0x100 <_start+0x68>
      b0: 1a12         	subs	r2, r2, r0
      b2: f008 fe79    	bl	0x8da8 <memset>         @ imm = #0x8cf2
      b6: 4b0e         	ldr	r3, [pc, #0x38]         @ 0xf0 <_start+0x58>
      b8: 2b00         	cmp	r3, #0x0
      ba: d000         	beq	0xbe <_start+0x26>      @ imm = #0x0
      bc: 4798         	blx	r3
      be: 4b0d         	ldr	r3, [pc, #0x34]         @ 0xf4 <_start+0x5c>
      c0: 2b00         	cmp	r3, #0x0
      c2: d000         	beq	0xc6 <_start+0x2e>      @ imm = #0x0
      c4: 4798         	blx	r3
      c6: 2000         	movs	r0, #0x0
      c8: 2100         	movs	r1, #0x0
      ca: 0004         	movs	r4, r0
      cc: 000d         	movs	r5, r1
      ce: 480d         	ldr	r0, [pc, #0x34]         @ 0x104 <_start+0x6c>
      d0: 2800         	cmp	r0, #0x0
      d2: d002         	beq	0xda <_start+0x42>      @ imm = #0x4
      d4: 480c         	ldr	r0, [pc, #0x30]         @ 0x108 <_start+0x70>
      d6: f009 f835    	bl	0x9144 <atexit>         @ imm = #0x906a
      da: f008 fef7    	bl	0x8ecc <__libc_init_array> @ imm = #0x8dee
      de: 0020         	movs	r0, r4
      e0: 0029         	movs	r1, r5
      e2: f000 f81d    	bl	0x120 <main>            @ imm = #0x3a
      e6: f008 fd01    	bl	0x8aec <exit>           @ imm = #0x8a02
      ea: bf00         	nop
      ec: 00 00 08 00  	.word	0x00080000
      f0: 00 00 00 00  	.word	0x00000000
      f4: 00 00 00 00  	.word	0x00000000
      f8: 00 00 10 20  	.word	0x20100000
      fc: 80 0d 00 20  	.word	0x20000d80
     100: e0 19 00 20  	.word	0x200019e0
     104: 45 91 00 00  	.word	0x00009145
     108: 7d c6 00 00  	.word	0x0000c67d

0000010c <uart_callback(unsigned long)>:
; uart_callback(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:16
; static void uart_callback(uint32_t event) { }
     10c: b480         	push	{r7}
     10e: b083         	sub	sp, #0xc
     110: af00         	add	r7, sp, #0x0
     112: 6078         	str	r0, [r7, #0x4]
     114: bf00         	nop
     116: 370c         	adds	r7, #0xc
     118: 46bd         	mov	sp, r7
     11a: f85d 7b04    	ldr	r7, [sp], #4
     11e: 4770         	bx	lr

00000120 <main>:
; main():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:20
; __NO_RETURN int main() {
     120: b590         	push	{r4, r7, lr}
     122: f5ad 5d8d    	sub.w	sp, sp, #0x11a0
     126: b085         	sub	sp, #0x14
     128: af02         	add	r7, sp, #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:21
; 	fault_dump_enable(true);
     12a: 2001         	movs	r0, #0x1
     12c: f000 fcf8    	bl	0xb20 <fault_dump_enable> @ imm = #0x9f0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:22
; 	SEGGER_RTT_ConfigUpBuffer(0, nullptr, nullptr, 0, SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL);
     130: 2302         	movs	r3, #0x2
     132: 9300         	str	r3, [sp]
     134: 2300         	movs	r3, #0x0
     136: 2200         	movs	r2, #0x0
     138: 2100         	movs	r1, #0x0
     13a: 2000         	movs	r0, #0x0
     13c: f001 ff14    	bl	0x1f68 <SEGGER_RTT_ConfigUpBuffer> @ imm = #0x1e28
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:23
; 	LPRTC::getInstance().enable();
     140: f000 f936    	bl	0x3b0 <LPRTC::getInstance()> @ imm = #0x26c
     144: 4603         	mov	r3, r0
     146: 4618         	mov	r0, r3
     148: f000 f93c    	bl	0x3c4 <LPRTC::enable()> @ imm = #0x278
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:26
; 	uint32_t val = 3;
     14c: 2303         	movs	r3, #0x3
     14e: f507 528c    	add.w	r2, r7, #0x1180
     152: f102 0208    	add.w	r2, r2, #0x8
     156: 6013         	str	r3, [r2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
     158: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
     15c: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
     15e: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
     162: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:41
; 	jitTest jt = reinterpret_cast<jitTest>(reinterpret_cast<uintptr_t>(instr) | 1U); // LSB setzen für THUMB-Mode
     164: 4b6e         	ldr	r3, [pc, #0x1b8]        @ 0x320 <main+0x200>
     166: f043 0301    	orr	r3, r3, #0x1
     16a: f507 528d    	add.w	r2, r7, #0x11a0
     16e: 6013         	str	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:42
; 	jt(&val);
     170: f507 538d    	add.w	r3, r7, #0x11a0
     174: 681b         	ldr	r3, [r3]
     176: f507 528c    	add.w	r2, r7, #0x1180
     17a: f102 0208    	add.w	r2, r2, #0x8
     17e: 4610         	mov	r0, r2
     180: 4798         	blx	r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:45
; 	JIT::Generators::Simple simpleGen;
     182: f507 538d    	add.w	r3, r7, #0x11a0
     186: f103 0308    	add.w	r3, r3, #0x8
     18a: f6a3 0324    	subw	r3, r3, #0x824
     18e: 4618         	mov	r0, r3
     190: f640 0302    	movw	r3, #0x802
     194: 461a         	mov	r2, r3
     196: 2100         	movs	r1, #0x0
     198: f008 fe06    	bl	0x8da8 <memset>         @ imm = #0x8c0c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:46
; 	JIT::Generators::Simple::Func simpleFunc = simpleGen.generate();
     19c: f607 1384    	addw	r3, r7, #0x984
     1a0: 4618         	mov	r0, r3
     1a2: f000 fa50    	bl	0x646 <JIT::Generators::Simple::generate()> @ imm = #0x4a0
     1a6: 4603         	mov	r3, r0
     1a8: f507 528c    	add.w	r2, r7, #0x1180
     1ac: f102 021c    	add.w	r2, r2, #0x1c
     1b0: 6013         	str	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:47
; 	uint32_t ret = simpleFunc();
     1b2: f507 538c    	add.w	r3, r7, #0x1180
     1b6: f103 031c    	add.w	r3, r3, #0x1c
     1ba: 681b         	ldr	r3, [r3]
     1bc: 4798         	blx	r3
     1be: 4603         	mov	r3, r0
     1c0: f507 528c    	add.w	r2, r7, #0x1180
     1c4: f102 0218    	add.w	r2, r2, #0x18
     1c8: 6013         	str	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:49
; 	JIT::Generators::Triad triadGen;
     1ca: f507 73d4    	add.w	r3, r7, #0x1a8
     1ce: 3b28         	subs	r3, #0x28
     1d0: f640 0202    	movw	r2, #0x802
     1d4: 2100         	movs	r1, #0x0
     1d6: 4618         	mov	r0, r3
     1d8: f008 fde6    	bl	0x8da8 <memset>         @ imm = #0x8bcc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:50
; 	constexpr uint16_t count = 32;
     1dc: 2320         	movs	r3, #0x20
     1de: f507 528c    	add.w	r2, r7, #0x1180
     1e2: f102 0216    	add.w	r2, r2, #0x16
     1e6: 8013         	strh	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:51
; 	JIT::Generators::Triad::Func triadFunc = triadGen.generate(count);
     1e8: f507 73c4    	add.w	r3, r7, #0x188
     1ec: 3b08         	subs	r3, #0x8
     1ee: 2120         	movs	r1, #0x20
     1f0: 4618         	mov	r0, r3
     1f2: f000 fa4c    	bl	0x68e <JIT::Generators::Triad::generate(unsigned long)> @ imm = #0x498
     1f6: 4603         	mov	r3, r0
     1f8: f507 528c    	add.w	r2, r7, #0x1180
     1fc: f102 0210    	add.w	r2, r2, #0x10
     200: 6013         	str	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:52
; 	float a[count] = {0};
     202: f507 73d4    	add.w	r3, r7, #0x1a8
     206: 3ba8         	subs	r3, #0xa8
     208: 2280         	movs	r2, #0x80
     20a: 2100         	movs	r1, #0x0
     20c: 4618         	mov	r0, r3
     20e: f008 fdcb    	bl	0x8da8 <memset>         @ imm = #0x8b96
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:53
; 	float b[count] = {0};
     212: f507 73d4    	add.w	r3, r7, #0x1a8
     216: f5a3 7394    	sub.w	r3, r3, #0x128
     21a: 4618         	mov	r0, r3
     21c: 2380         	movs	r3, #0x80
     21e: 461a         	mov	r2, r3
     220: 2100         	movs	r1, #0x0
     222: f008 fdc1    	bl	0x8da8 <memset>         @ imm = #0x8b82
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:54
; 	float c[count] = {0};
     226: f507 73d4    	add.w	r3, r7, #0x1a8
     22a: f5a3 73d4    	sub.w	r3, r3, #0x1a8
     22e: 4618         	mov	r0, r3
     230: 2380         	movs	r3, #0x80
     232: 461a         	mov	r2, r3
     234: 2100         	movs	r1, #0x0
     236: f008 fdb7    	bl	0x8da8 <memset>         @ imm = #0x8b6e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:55
; 	for (uint32_t i = 0; i < count; i++) {
     23a: 2300         	movs	r3, #0x0
     23c: f507 528d    	add.w	r2, r7, #0x11a0
     240: f102 0204    	add.w	r2, r2, #0x4
     244: 6013         	str	r3, [r2]
     246: e036         	b	0x2b6 <main+0x196>      @ imm = #0x6c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:56
; 		a[i] = i;
     248: f507 538d    	add.w	r3, r7, #0x11a0
     24c: f103 0304    	add.w	r3, r3, #0x4
     250: 681b         	ldr	r3, [r3]
     252: ee07 3a90    	vmov	s15, r3
     256: eef8 7a67    	vcvt.f32.u32	s15, s15
     25a: f507 73d4    	add.w	r3, r7, #0x1a8
     25e: 461a         	mov	r2, r3
     260: f507 538d    	add.w	r3, r7, #0x11a0
     264: f103 0304    	add.w	r3, r3, #0x4
     268: 681b         	ldr	r3, [r3]
     26a: 009b         	lsls	r3, r3, #0x2
     26c: 4413         	add	r3, r2
     26e: 3ba8         	subs	r3, #0xa8
     270: edc3 7a00    	vstr	s15, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:57
; 		b[i] = i;
     274: f507 538d    	add.w	r3, r7, #0x11a0
     278: f103 0304    	add.w	r3, r3, #0x4
     27c: 681b         	ldr	r3, [r3]
     27e: ee07 3a90    	vmov	s15, r3
     282: eef8 7a67    	vcvt.f32.u32	s15, s15
     286: f507 73d4    	add.w	r3, r7, #0x1a8
     28a: f5a3 7294    	sub.w	r2, r3, #0x128
     28e: f507 538d    	add.w	r3, r7, #0x11a0
     292: f103 0304    	add.w	r3, r3, #0x4
     296: 681b         	ldr	r3, [r3]
     298: 009b         	lsls	r3, r3, #0x2
     29a: 4413         	add	r3, r2
     29c: edc3 7a00    	vstr	s15, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:55
; 	for (uint32_t i = 0; i < count; i++) {
     2a0: f507 538d    	add.w	r3, r7, #0x11a0
     2a4: f103 0304    	add.w	r3, r3, #0x4
     2a8: 681b         	ldr	r3, [r3]
     2aa: 3301         	adds	r3, #0x1
     2ac: f507 528d    	add.w	r2, r7, #0x11a0
     2b0: f102 0204    	add.w	r2, r2, #0x4
     2b4: 6013         	str	r3, [r2]
     2b6: f507 538d    	add.w	r3, r7, #0x11a0
     2ba: f103 0304    	add.w	r3, r3, #0x4
     2be: 681b         	ldr	r3, [r3]
     2c0: 2b1f         	cmp	r3, #0x1f
     2c2: d9c1         	bls	0x248 <main+0x128>      @ imm = #-0x7e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:59
; 	float scalar = 3.0;
     2c4: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x324 <main+0x204>
     2c6: f507 528c    	add.w	r2, r7, #0x1180
     2ca: f102 020c    	add.w	r2, r2, #0xc
     2ce: 6013         	str	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:60
; 	triadFunc(a, b, c, scalar);
     2d0: f507 538c    	add.w	r3, r7, #0x1180
     2d4: f103 0310    	add.w	r3, r3, #0x10
     2d8: 681c         	ldr	r4, [r3]
     2da: f107 0208    	add.w	r2, r7, #0x8
     2de: 3a08         	subs	r2, #0x8
     2e0: f107 0188    	add.w	r1, r7, #0x88
     2e4: 3908         	subs	r1, #0x8
     2e6: f507 7384    	add.w	r3, r7, #0x108
     2ea: 3b08         	subs	r3, #0x8
     2ec: f507 508c    	add.w	r0, r7, #0x1180
     2f0: f100 000c    	add.w	r0, r0, #0xc
     2f4: ed90 0a00    	vldr	s0, [r0]
     2f8: 4618         	mov	r0, r3
     2fa: 47a0         	blx	r4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:62
; 	SEGGER_RTT_printf(0, "Val New %d\n", val);
     2fc: f507 538c    	add.w	r3, r7, #0x1180
     300: f103 0308    	add.w	r3, r3, #0x8
     304: 681b         	ldr	r3, [r3]
     306: 461a         	mov	r2, r3
     308: 4907         	ldr	r1, [pc, #0x1c]         @ 0x328 <main+0x208>
     30a: 2000         	movs	r0, #0x0
     30c: f002 fc82    	bl	0x2c14 <SEGGER_RTT_printf> @ imm = #0x2904
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:64
; 	LPRTC::getInstance().disable();
     310: f000 f84e    	bl	0x3b0 <LPRTC::getInstance()> @ imm = #0x9c
     314: 4603         	mov	r3, r0
     316: 4618         	mov	r0, r3
     318: f000 f868    	bl	0x3ec <LPRTC::disable()> @ imm = #0xd0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:66
; 		__WFE();
     31c: bf20         	wfe
     31e: e7fd         	b	0x31c <main+0x1fc>      @ imm = #-0x6
     320: 0c 18 21 80  	.word	0x8021180c
     324: 00 00 40 40  	.word	0x40400000
     328: 18 18 21 80  	.word	0x80211818

0000032c <__static_initialization_and_destruction_0()>:
; __static_initialization_and_destruction_0():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:68
; }
     32c: b580         	push	{r7, lr}
     32e: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:27
;         static inline Register<uint32_t, uintptr_t, LPRTC_Register::LPRTC_RTC_CLK_EN_OFFSET> RTC_CLK_EN{LPRTC_Register::LPRTC_VBAT_BASE_ADDRESS};
     330: 4b15         	ldr	r3, [pc, #0x54]         @ 0x388 <__static_initialization_and_destruction_0()+0x5c>
     332: 681b         	ldr	r3, [r3]
     334: f003 0301    	and	r3, r3, #0x1
     338: 2b00         	cmp	r3, #0x0
     33a: d106         	bne	0x34a <__static_initialization_and_destruction_0()+0x1e> @ imm = #0xc
     33c: 4b12         	ldr	r3, [pc, #0x48]         @ 0x388 <__static_initialization_and_destruction_0()+0x5c>
     33e: 2201         	movs	r2, #0x1
     340: 601a         	str	r2, [r3]
     342: 4912         	ldr	r1, [pc, #0x48]         @ 0x38c <__static_initialization_and_destruction_0()+0x60>
     344: 4812         	ldr	r0, [pc, #0x48]         @ 0x390 <__static_initialization_and_destruction_0()+0x64>
     346: f000 f865    	bl	0x414 <Register<unsigned long, unsigned int, 16u>::Register(unsigned int)> @ imm = #0xca
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:28
;         static inline Register<uint32_t, uintptr_t, LPRTC_Register::CCVR_OFFSET> CCVR{LPRTC_Register::LPRTC_BASE_ADDRESS};
     34a: 4b12         	ldr	r3, [pc, #0x48]         @ 0x394 <__static_initialization_and_destruction_0()+0x68>
     34c: 681b         	ldr	r3, [r3]
     34e: f003 0301    	and	r3, r3, #0x1
     352: 2b00         	cmp	r3, #0x0
     354: d107         	bne	0x366 <__static_initialization_and_destruction_0()+0x3a> @ imm = #0xe
     356: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x394 <__static_initialization_and_destruction_0()+0x68>
     358: 2201         	movs	r2, #0x1
     35a: 601a         	str	r2, [r3]
     35c: f04f 4184    	mov.w	r1, #0x42000000
     360: 480d         	ldr	r0, [pc, #0x34]         @ 0x398 <__static_initialization_and_destruction_0()+0x6c>
     362: f000 f868    	bl	0x436 <Register<unsigned long, unsigned int, 0u>::Register(unsigned int)> @ imm = #0xd0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:29
;         static inline Register<uint32_t, uintptr_t, LPRTC_Register::CCR_OFFSET> CCR{LPRTC_Register::LPRTC_BASE_ADDRESS};
     366: 4b0d         	ldr	r3, [pc, #0x34]         @ 0x39c <__static_initialization_and_destruction_0()+0x70>
     368: 681b         	ldr	r3, [r3]
     36a: f003 0301    	and	r3, r3, #0x1
     36e: 2b00         	cmp	r3, #0x0
     370: d107         	bne	0x382 <__static_initialization_and_destruction_0()+0x56> @ imm = #0xe
     372: 4b0a         	ldr	r3, [pc, #0x28]         @ 0x39c <__static_initialization_and_destruction_0()+0x70>
     374: 2201         	movs	r2, #0x1
     376: 601a         	str	r2, [r3]
     378: f04f 4184    	mov.w	r1, #0x42000000
     37c: 4808         	ldr	r0, [pc, #0x20]         @ 0x3a0 <__static_initialization_and_destruction_0()+0x74>
     37e: f000 f869    	bl	0x454 <Register<unsigned long, unsigned int, 12u>::Register(unsigned int)> @ imm = #0xd2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:68
; }
     382: bf00         	nop
     384: bd80         	pop	{r7, pc}
     386: bf00         	nop
     388: ac 0d 00 20  	.word	0x20000dac
     38c: 00 90 60 1a  	.word	0x1a609000
     390: 9c 0d 00 20  	.word	0x20000d9c
     394: b0 0d 00 20  	.word	0x20000db0
     398: a0 0d 00 20  	.word	0x20000da0
     39c: b4 0d 00 20  	.word	0x20000db4
     3a0: a4 0d 00 20  	.word	0x20000da4

000003a4 <_GLOBAL__sub_I_main>:
; _GLOBAL__sub_I_main():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/main.cpp:68
     3a4: b580         	push	{r7, lr}
     3a6: af00         	add	r7, sp, #0x0
     3a8: f7ff ffc0    	bl	0x32c <__static_initialization_and_destruction_0()> @ imm = #-0x80
     3ac: bd80         	pop	{r7, pc}
     3ae: bf00         	nop

000003b0 <LPRTC::getInstance()>:
; LPRTC::getInstance():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:36
;         static LPRTC& getInstance() {
     3b0: b480         	push	{r7}
     3b2: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:38
;             return instance;
     3b4: 4b02         	ldr	r3, [pc, #0x8]          @ 0x3c0 <LPRTC::getInstance()+0x10>
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:39
;         }
     3b6: 4618         	mov	r0, r3
     3b8: 46bd         	mov	sp, r7
     3ba: f85d 7b04    	ldr	r7, [sp], #4
     3be: 4770         	bx	lr
     3c0: a8 0d 00 20  	.word	0x20000da8

000003c4 <LPRTC::enable()>:
; LPRTC::enable():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:41
;         void inline enable() {
     3c4: b580         	push	{r7, lr}
     3c6: b082         	sub	sp, #0x8
     3c8: af00         	add	r7, sp, #0x0
     3ca: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:42
;             RTC_CLK_EN.set(LPRTC_CCR_Bits::LPRTC_CLK_EN);
     3cc: 2101         	movs	r1, #0x1
     3ce: 4805         	ldr	r0, [pc, #0x14]         @ 0x3e4 <LPRTC::enable()+0x20>
     3d0: f000 f851    	bl	0x476 <Register<unsigned long, unsigned int, 16u>::set(unsigned long)> @ imm = #0xa2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:43
;             CCR.set(LPRTC_CCR_Bits::LPRTC_EN);
     3d4: 2104         	movs	r1, #0x4
     3d6: 4804         	ldr	r0, [pc, #0x10]         @ 0x3e8 <LPRTC::enable()+0x24>
     3d8: f000 f860    	bl	0x49c <Register<unsigned long, unsigned int, 12u>::set(unsigned long)> @ imm = #0xc0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:44
;         }
     3dc: bf00         	nop
     3de: 3708         	adds	r7, #0x8
     3e0: 46bd         	mov	sp, r7
     3e2: bd80         	pop	{r7, pc}
     3e4: 9c 0d 00 20  	.word	0x20000d9c
     3e8: a4 0d 00 20  	.word	0x20000da4

000003ec <LPRTC::disable()>:
; LPRTC::disable():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:46
;         void inline disable() {
     3ec: b580         	push	{r7, lr}
     3ee: b082         	sub	sp, #0x8
     3f0: af00         	add	r7, sp, #0x0
     3f2: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:47
;             CCR.clear(LPRTC_CCR_Bits::LPRTC_EN);
     3f4: 2104         	movs	r1, #0x4
     3f6: 4805         	ldr	r0, [pc, #0x14]         @ 0x40c <LPRTC::disable()+0x20>
     3f8: f000 f863    	bl	0x4c2 <Register<unsigned long, unsigned int, 12u>::clear(unsigned long)> @ imm = #0xc6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:48
;             RTC_CLK_EN.clear(LPRTC_CCR_Bits::LPRTC_CLK_EN);
     3fc: 2101         	movs	r1, #0x1
     3fe: 4804         	ldr	r0, [pc, #0x10]         @ 0x410 <LPRTC::disable()+0x24>
     400: f000 f873    	bl	0x4ea <Register<unsigned long, unsigned int, 16u>::clear(unsigned long)> @ imm = #0xe6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC.hpp:49
;         }
     404: bf00         	nop
     406: 3708         	adds	r7, #0x8
     408: 46bd         	mov	sp, r7
     40a: bd80         	pop	{r7, pc}
     40c: a4 0d 00 20  	.word	0x20000da4
     410: 9c 0d 00 20  	.word	0x20000d9c

00000414 <Register<unsigned long, unsigned int, 16u>::Register(unsigned int)>:
; Register<unsigned long, unsigned int, 16u>::Register(unsigned int)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:11
;         explicit Register(AddressType base) : reg(reinterpret_cast<volatile RegisterType*>(base + Offset)) { }
     414: b480         	push	{r7}
     416: b083         	sub	sp, #0xc
     418: af00         	add	r7, sp, #0x0
     41a: 6078         	str	r0, [r7, #0x4]
     41c: 6039         	str	r1, [r7]
     41e: 683b         	ldr	r3, [r7]
     420: 3310         	adds	r3, #0x10
     422: 461a         	mov	r2, r3
     424: 687b         	ldr	r3, [r7, #0x4]
     426: 601a         	str	r2, [r3]
     428: 687b         	ldr	r3, [r7, #0x4]
     42a: 4618         	mov	r0, r3
     42c: 370c         	adds	r7, #0xc
     42e: 46bd         	mov	sp, r7
     430: f85d 7b04    	ldr	r7, [sp], #4
     434: 4770         	bx	lr

00000436 <Register<unsigned long, unsigned int, 0u>::Register(unsigned int)>:
; Register<unsigned long, unsigned int, 0u>::Register(unsigned int)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:11
     436: b480         	push	{r7}
     438: b083         	sub	sp, #0xc
     43a: af00         	add	r7, sp, #0x0
     43c: 6078         	str	r0, [r7, #0x4]
     43e: 6039         	str	r1, [r7]
     440: 683a         	ldr	r2, [r7]
     442: 687b         	ldr	r3, [r7, #0x4]
     444: 601a         	str	r2, [r3]
     446: 687b         	ldr	r3, [r7, #0x4]
     448: 4618         	mov	r0, r3
     44a: 370c         	adds	r7, #0xc
     44c: 46bd         	mov	sp, r7
     44e: f85d 7b04    	ldr	r7, [sp], #4
     452: 4770         	bx	lr

00000454 <Register<unsigned long, unsigned int, 12u>::Register(unsigned int)>:
; Register<unsigned long, unsigned int, 12u>::Register(unsigned int)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:11
     454: b480         	push	{r7}
     456: b083         	sub	sp, #0xc
     458: af00         	add	r7, sp, #0x0
     45a: 6078         	str	r0, [r7, #0x4]
     45c: 6039         	str	r1, [r7]
     45e: 683b         	ldr	r3, [r7]
     460: 330c         	adds	r3, #0xc
     462: 461a         	mov	r2, r3
     464: 687b         	ldr	r3, [r7, #0x4]
     466: 601a         	str	r2, [r3]
     468: 687b         	ldr	r3, [r7, #0x4]
     46a: 4618         	mov	r0, r3
     46c: 370c         	adds	r7, #0xc
     46e: 46bd         	mov	sp, r7
     470: f85d 7b04    	ldr	r7, [sp], #4
     474: 4770         	bx	lr

00000476 <Register<unsigned long, unsigned int, 16u>::set(unsigned long)>:
; Register<unsigned long, unsigned int, 16u>::set(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:16
;         void inline set(RegisterType mask) { *reg |= mask; }
     476: b480         	push	{r7}
     478: b083         	sub	sp, #0xc
     47a: af00         	add	r7, sp, #0x0
     47c: 6078         	str	r0, [r7, #0x4]
     47e: 6039         	str	r1, [r7]
     480: 687b         	ldr	r3, [r7, #0x4]
     482: 681b         	ldr	r3, [r3]
     484: 6819         	ldr	r1, [r3]
     486: 687b         	ldr	r3, [r7, #0x4]
     488: 681b         	ldr	r3, [r3]
     48a: 683a         	ldr	r2, [r7]
     48c: 430a         	orrs	r2, r1
     48e: 601a         	str	r2, [r3]
     490: bf00         	nop
     492: 370c         	adds	r7, #0xc
     494: 46bd         	mov	sp, r7
     496: f85d 7b04    	ldr	r7, [sp], #4
     49a: 4770         	bx	lr

0000049c <Register<unsigned long, unsigned int, 12u>::set(unsigned long)>:
; Register<unsigned long, unsigned int, 12u>::set(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:16
     49c: b480         	push	{r7}
     49e: b083         	sub	sp, #0xc
     4a0: af00         	add	r7, sp, #0x0
     4a2: 6078         	str	r0, [r7, #0x4]
     4a4: 6039         	str	r1, [r7]
     4a6: 687b         	ldr	r3, [r7, #0x4]
     4a8: 681b         	ldr	r3, [r3]
     4aa: 6819         	ldr	r1, [r3]
     4ac: 687b         	ldr	r3, [r7, #0x4]
     4ae: 681b         	ldr	r3, [r3]
     4b0: 683a         	ldr	r2, [r7]
     4b2: 430a         	orrs	r2, r1
     4b4: 601a         	str	r2, [r3]
     4b6: bf00         	nop
     4b8: 370c         	adds	r7, #0xc
     4ba: 46bd         	mov	sp, r7
     4bc: f85d 7b04    	ldr	r7, [sp], #4
     4c0: 4770         	bx	lr

000004c2 <Register<unsigned long, unsigned int, 12u>::clear(unsigned long)>:
; Register<unsigned long, unsigned int, 12u>::clear(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:17
;         void inline clear(RegisterType mask) { *reg &= ~mask; }
     4c2: b480         	push	{r7}
     4c4: b083         	sub	sp, #0xc
     4c6: af00         	add	r7, sp, #0x0
     4c8: 6078         	str	r0, [r7, #0x4]
     4ca: 6039         	str	r1, [r7]
     4cc: 687b         	ldr	r3, [r7, #0x4]
     4ce: 681b         	ldr	r3, [r3]
     4d0: 6819         	ldr	r1, [r3]
     4d2: 683b         	ldr	r3, [r7]
     4d4: 43da         	mvns	r2, r3
     4d6: 687b         	ldr	r3, [r7, #0x4]
     4d8: 681b         	ldr	r3, [r3]
     4da: 400a         	ands	r2, r1
     4dc: 601a         	str	r2, [r3]
     4de: bf00         	nop
     4e0: 370c         	adds	r7, #0xc
     4e2: 46bd         	mov	sp, r7
     4e4: f85d 7b04    	ldr	r7, [sp], #4
     4e8: 4770         	bx	lr

000004ea <Register<unsigned long, unsigned int, 16u>::clear(unsigned long)>:
; Register<unsigned long, unsigned int, 16u>::clear(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/timing/LPRTC_Registers.hpp:17
     4ea: b480         	push	{r7}
     4ec: b083         	sub	sp, #0xc
     4ee: af00         	add	r7, sp, #0x0
     4f0: 6078         	str	r0, [r7, #0x4]
     4f2: 6039         	str	r1, [r7]
     4f4: 687b         	ldr	r3, [r7, #0x4]
     4f6: 681b         	ldr	r3, [r3]
     4f8: 6819         	ldr	r1, [r3]
     4fa: 683b         	ldr	r3, [r7]
     4fc: 43da         	mvns	r2, r3
     4fe: 687b         	ldr	r3, [r7, #0x4]
     500: 681b         	ldr	r3, [r3]
     502: 400a         	ands	r2, r1
     504: 601a         	str	r2, [r3]
     506: bf00         	nop
     508: 370c         	adds	r7, #0xc
     50a: 46bd         	mov	sp, r7
     50c: f85d 7b04    	ldr	r7, [sp], #4
     510: 4770         	bx	lr

00000512 <JIT::Backend::addInstruction(unsigned short)>:
; JIT::Backend::addInstruction(unsigned short)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:5
; void JIT::Backend::addInstruction(Instructions::Instruction16 instruction) {
     512: b480         	push	{r7}
     514: b083         	sub	sp, #0xc
     516: af00         	add	r7, sp, #0x0
     518: 6078         	str	r0, [r7, #0x4]
     51a: 460b         	mov	r3, r1
     51c: 807b         	strh	r3, [r7, #0x2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:6
;     instructions[instructionCount++] = instruction;
     51e: 8879         	ldrh	r1, [r7, #0x2]
     520: 687b         	ldr	r3, [r7, #0x4]
     522: f9b3 2800    	ldrsh.w	r2, [r3, #0x800]
     526: b293         	uxth	r3, r2
     528: 3301         	adds	r3, #0x1
     52a: b29b         	uxth	r3, r3
     52c: b218         	sxth	r0, r3
     52e: 687b         	ldr	r3, [r7, #0x4]
     530: f8a3 0800    	strh.w	r0, [r3, #0x800]
     534: 687b         	ldr	r3, [r7, #0x4]
     536: f823 1012    	strh.w	r1, [r3, r2, lsl #1]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:7
; }
     53a: bf00         	nop
     53c: 370c         	adds	r7, #0xc
     53e: 46bd         	mov	sp, r7
     540: f85d 7b04    	ldr	r7, [sp], #4
     544: 4770         	bx	lr

00000546 <JIT::Backend::addInstruction(unsigned long)>:
; JIT::Backend::addInstruction(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:9
; void JIT::Backend::addInstruction(Instructions::Instruction32 instruction) {
     546: b480         	push	{r7}
     548: b083         	sub	sp, #0xc
     54a: af00         	add	r7, sp, #0x0
     54c: 6078         	str	r0, [r7, #0x4]
     54e: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:10
;     instructions[instructionCount++] = static_cast<Instructions::Instruction16>(instruction >> 16U); // select 16 highest bits
     550: 683b         	ldr	r3, [r7]
     552: 0c1b         	lsrs	r3, r3, #0x10
     554: b299         	uxth	r1, r3
     556: 687b         	ldr	r3, [r7, #0x4]
     558: f9b3 2800    	ldrsh.w	r2, [r3, #0x800]
     55c: b293         	uxth	r3, r2
     55e: 3301         	adds	r3, #0x1
     560: b29b         	uxth	r3, r3
     562: b218         	sxth	r0, r3
     564: 687b         	ldr	r3, [r7, #0x4]
     566: f8a3 0800    	strh.w	r0, [r3, #0x800]
     56a: 687b         	ldr	r3, [r7, #0x4]
     56c: f823 1012    	strh.w	r1, [r3, r2, lsl #1]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:11
;     instructions[instructionCount++] = static_cast<Instructions::Instruction16>(instruction); // select 16 lowest bits
     570: 683b         	ldr	r3, [r7]
     572: b299         	uxth	r1, r3
     574: 687b         	ldr	r3, [r7, #0x4]
     576: f9b3 2800    	ldrsh.w	r2, [r3, #0x800]
     57a: b293         	uxth	r3, r2
     57c: 3301         	adds	r3, #0x1
     57e: b29b         	uxth	r3, r3
     580: b218         	sxth	r0, r3
     582: 687b         	ldr	r3, [r7, #0x4]
     584: f8a3 0800    	strh.w	r0, [r3, #0x800]
     588: 687b         	ldr	r3, [r7, #0x4]
     58a: f823 1012    	strh.w	r1, [r3, r2, lsl #1]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:12
; }
     58e: bf00         	nop
     590: 370c         	adds	r7, #0xc
     592: 46bd         	mov	sp, r7
     594: f85d 7b04    	ldr	r7, [sp], #4
     598: 4770         	bx	lr

0000059a <JIT::Backend::addBranchInstruction(unsigned long)>:
; JIT::Backend::addBranchInstruction(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:14
; JIT::Instructions::Instruction16 * JIT::Backend::addBranchInstruction(Instructions::Instruction32 branchInstruction) {
     59a: b580         	push	{r7, lr}
     59c: b082         	sub	sp, #0x8
     59e: af00         	add	r7, sp, #0x0
     5a0: 6078         	str	r0, [r7, #0x4]
     5a2: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:15
;     addInstruction(branchInstruction);
     5a4: 6839         	ldr	r1, [r7]
     5a6: 6878         	ldr	r0, [r7, #0x4]
     5a8: f7ff ffcd    	bl	0x546 <JIT::Backend::addInstruction(unsigned long)> @ imm = #-0x66
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:16
;     return &instructions[instructionCount - 2]; // eingefügte Instruction war 32 Bit = 2 16 Bit Instruktions lang
     5ac: 687b         	ldr	r3, [r7, #0x4]
     5ae: f9b3 3800    	ldrsh.w	r3, [r3, #0x800]
     5b2: 3b02         	subs	r3, #0x2
     5b4: 005b         	lsls	r3, r3, #0x1
     5b6: 687a         	ldr	r2, [r7, #0x4]
     5b8: 4413         	add	r3, r2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:17
; }
     5ba: 4618         	mov	r0, r3
     5bc: 3708         	adds	r7, #0x8
     5be: 46bd         	mov	sp, r7
     5c0: bd80         	pop	{r7, pc}

000005c2 <JIT::Backend::addBranchInstruction(unsigned short)>:
; JIT::Backend::addBranchInstruction(unsigned short)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:19
; JIT::Instructions::Instruction16 * JIT::Backend::addBranchInstruction(Instructions::Instruction16 branchInstruction) {
     5c2: b580         	push	{r7, lr}
     5c4: b082         	sub	sp, #0x8
     5c6: af00         	add	r7, sp, #0x0
     5c8: 6078         	str	r0, [r7, #0x4]
     5ca: 460b         	mov	r3, r1
     5cc: 807b         	strh	r3, [r7, #0x2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:20
;     addInstruction(branchInstruction);
     5ce: 887b         	ldrh	r3, [r7, #0x2]
     5d0: 4619         	mov	r1, r3
     5d2: 6878         	ldr	r0, [r7, #0x4]
     5d4: f7ff ff9d    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0xc6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:21
;     return &instructions[instructionCount - 1];
     5d8: 687b         	ldr	r3, [r7, #0x4]
     5da: f9b3 3800    	ldrsh.w	r3, [r3, #0x800]
     5de: 3b01         	subs	r3, #0x1
     5e0: 005b         	lsls	r3, r3, #0x1
     5e2: 687a         	ldr	r2, [r7, #0x4]
     5e4: 4413         	add	r3, r2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:22
; }
     5e6: 4618         	mov	r0, r3
     5e8: 3708         	adds	r7, #0x8
     5ea: 46bd         	mov	sp, r7
     5ec: bd80         	pop	{r7, pc}

000005ee <JIT::Backend::getBranchOffset(unsigned short*)>:
; JIT::Backend::getBranchOffset(unsigned short*)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:24
; int16_t JIT::Backend::getBranchOffset(Instructions::Instruction16 * instrStart) {
     5ee: b480         	push	{r7}
     5f0: b083         	sub	sp, #0xc
     5f2: af00         	add	r7, sp, #0x0
     5f4: 6078         	str	r0, [r7, #0x4]
     5f6: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:25
;     return (instrStart - &instructions[instructionCount]) * 2; // jede Instruktion sind 16 Bit = 2 Byte
     5f8: 687b         	ldr	r3, [r7, #0x4]
     5fa: f9b3 3800    	ldrsh.w	r3, [r3, #0x800]
     5fe: 005b         	lsls	r3, r3, #0x1
     600: 687a         	ldr	r2, [r7, #0x4]
     602: 4413         	add	r3, r2
     604: 683a         	ldr	r2, [r7]
     606: 1ad3         	subs	r3, r2, r3
     608: b21b         	sxth	r3, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:27
; }
     60a: 4618         	mov	r0, r3
     60c: 370c         	adds	r7, #0xc
     60e: 46bd         	mov	sp, r7
     610: f85d 7b04    	ldr	r7, [sp], #4
     614: 4770         	bx	lr

00000616 <JIT::Backend::getInstructions()>:
; JIT::Backend::getInstructions():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:29
; JIT::Instructions::Instruction16 * JIT::Backend::getInstructions() {
     616: b480         	push	{r7}
     618: b083         	sub	sp, #0xc
     61a: af00         	add	r7, sp, #0x0
     61c: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:30
;     return instructions;
     61e: 687b         	ldr	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:31
; }
     620: 4618         	mov	r0, r3
     622: 370c         	adds	r7, #0xc
     624: 46bd         	mov	sp, r7
     626: f85d 7b04    	ldr	r7, [sp], #4
     62a: 4770         	bx	lr

0000062c <JIT::Backend::getThumbAddress() const>:
; JIT::Backend::getThumbAddress() const():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:33
; uintptr_t JIT::Backend::getThumbAddress() const {
     62c: b480         	push	{r7}
     62e: b083         	sub	sp, #0xc
     630: af00         	add	r7, sp, #0x0
     632: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:34
;     return reinterpret_cast<uintptr_t>(instructions) | 0x1U;
     634: 687b         	ldr	r3, [r7, #0x4]
     636: f043 0301    	orr	r3, r3, #0x1
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/backend/Backend.cpp:35
; }
     63a: 4618         	mov	r0, r3
     63c: 370c         	adds	r7, #0xc
     63e: 46bd         	mov	sp, r7
     640: f85d 7b04    	ldr	r7, [sp], #4
     644: 4770         	bx	lr

00000646 <JIT::Generators::Simple::generate()>:
; JIT::Generators::Simple::generate():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:8
; uint32_t ( *JIT::Generators::Simple::generate())() {
     646: b590         	push	{r4, r7, lr}
     648: b083         	sub	sp, #0xc
     64a: af00         	add	r7, sp, #0x0
     64c: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:9
     64e: 687c         	ldr	r4, [r7, #0x4]
     650: 2103         	movs	r1, #0x3
     652: 2000         	movs	r0, #0x0
     654: f000 f948    	bl	0x8e8 <JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)> @ imm = #0x290
     658: 4603         	mov	r3, r0
     65a: 4619         	mov	r1, r3
     65c: 4620         	mov	r0, r4
     65e: f7ff ff58    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0x150
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:11
     662: 687c         	ldr	r4, [r7, #0x4]
     664: 200e         	movs	r0, #0xe
     666: f000 f8c4    	bl	0x7f2 <JIT::Instructions::Base::bx(JIT::Instructions::Register)> @ imm = #0x188
     66a: 4603         	mov	r3, r0
     66c: 4619         	mov	r1, r3
     66e: 4620         	mov	r0, r4
     670: f7ff ff4f    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0x162
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:14
;     backend.addInstruction(Instructions::Base::bx(Instructions::Register::LR));
     674: f3bf 8f4f    	dsb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:15
     678: f3bf 8f6f    	isb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:16
     67c: 687b         	ldr	r3, [r7, #0x4]
     67e: 4618         	mov	r0, r3
     680: f7ff ffd4    	bl	0x62c <JIT::Backend::getThumbAddress() const> @ imm = #-0x58
     684: 4603         	mov	r3, r0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Simple.cpp:17
;     __asm("dsb");
     686: 4618         	mov	r0, r3
     688: 370c         	adds	r7, #0xc
     68a: 46bd         	mov	sp, r7
     68c: bd90         	pop	{r4, r7, pc}

0000068e <JIT::Generators::Triad::generate(unsigned long)>:
; JIT::Generators::Triad::generate(unsigned long)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:7
; void (*JIT::Generators::Triad::generate(uint32_t count)) (float const * a, float const * b, float * c, float const scalar) {
     68e: b590         	push	{r4, r7, lr}
     690: b087         	sub	sp, #0x1c
     692: af02         	add	r7, sp, #0x8
     694: 6078         	str	r0, [r7, #0x4]
     696: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:9
;     backend.addInstruction(Instructions::DataProcessing::push(Instructions::R4));
     698: 687c         	ldr	r4, [r7, #0x4]
     69a: 2004         	movs	r0, #0x4
     69c: f000 f944    	bl	0x928 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)> @ imm = #0x288
     6a0: 4603         	mov	r3, r0
     6a2: 4619         	mov	r1, r3
     6a4: 4620         	mov	r0, r4
     6a6: f7ff ff34    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0x198
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:11
;     backend.addInstruction(Instructions::DataProcessing::push(Instructions::Register::LR));
     6aa: 687c         	ldr	r4, [r7, #0x4]
     6ac: 200e         	movs	r0, #0xe
     6ae: f000 f93b    	bl	0x928 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)> @ imm = #0x276
     6b2: 4603         	mov	r3, r0
     6b4: 4619         	mov	r1, r3
     6b6: 4620         	mov	r0, r4
     6b8: f7ff ff2b    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0x1aa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:13
;     backend.addInstruction(Instructions::Vector::vmovGPxScalar(true, Instructions::S0, Instructions::R3));
     6bc: 687c         	ldr	r4, [r7, #0x4]
     6be: 2203         	movs	r2, #0x3
     6c0: 2100         	movs	r1, #0x0
     6c2: 2001         	movs	r0, #0x1
     6c4: f000 f96e    	bl	0x9a4 <JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)> @ imm = #0x2dc
     6c8: 4603         	mov	r3, r0
     6ca: 4619         	mov	r1, r3
     6cc: 4620         	mov	r0, r4
     6ce: f7ff ff3a    	bl	0x546 <JIT::Backend::addInstruction(unsigned long)> @ imm = #-0x18c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:16
;     backend.addInstruction(Instructions::DataProcessing::mov(Instructions::R4, count));
     6d2: 687c         	ldr	r4, [r7, #0x4]
     6d4: 683b         	ldr	r3, [r7]
     6d6: b2db         	uxtb	r3, r3
     6d8: 4619         	mov	r1, r3
     6da: 2004         	movs	r0, #0x4
     6dc: f000 f904    	bl	0x8e8 <JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)> @ imm = #0x208
     6e0: 4603         	mov	r3, r0
     6e2: 4619         	mov	r1, r3
     6e4: 4620         	mov	r0, r4
     6e6: f7ff ff14    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0x1d8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:19
;     Instructions::Instruction16 * dlstpStart = backend.addBranchInstruction(Instructions::Base::dlstp(Instructions::Register::R4, Instructions::Size32)); // todo
     6ea: 687c         	ldr	r4, [r7, #0x4]
     6ec: 2102         	movs	r1, #0x2
     6ee: 2004         	movs	r0, #0x4
     6f0: f000 f897    	bl	0x822 <JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)> @ imm = #0x12e
     6f4: 4603         	mov	r3, r0
     6f6: 4619         	mov	r1, r3
     6f8: 4620         	mov	r0, r4
     6fa: f7ff ff4e    	bl	0x59a <JIT::Backend::addBranchInstruction(unsigned long)> @ imm = #-0x164
     6fe: 4603         	mov	r3, r0
     700: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:21
;     backend.addInstruction(Instructions::Vector::vldrw(Instructions::Q0, Instructions::R0, 4, 0, 1, 0));
     702: 687c         	ldr	r4, [r7, #0x4]
     704: 2300         	movs	r3, #0x0
     706: 9301         	str	r3, [sp, #0x4]
     708: 2301         	movs	r3, #0x1
     70a: 9300         	str	r3, [sp]
     70c: 2300         	movs	r3, #0x0
     70e: 2204         	movs	r2, #0x4
     710: 2100         	movs	r1, #0x0
     712: 2000         	movs	r0, #0x0
     714: f000 f96a    	bl	0x9ec <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)> @ imm = #0x2d4
     718: 4603         	mov	r3, r0
     71a: 4619         	mov	r1, r3
     71c: 4620         	mov	r0, r4
     71e: f7ff ff12    	bl	0x546 <JIT::Backend::addInstruction(unsigned long)> @ imm = #-0x1dc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:23
;     backend.addInstruction(Instructions::Vector::vldrw(Instructions::Q0, Instructions::R1, 4, 0, 1, 0));
     722: 687c         	ldr	r4, [r7, #0x4]
     724: 2300         	movs	r3, #0x0
     726: 9301         	str	r3, [sp, #0x4]
     728: 2301         	movs	r3, #0x1
     72a: 9300         	str	r3, [sp]
     72c: 2300         	movs	r3, #0x0
     72e: 2204         	movs	r2, #0x4
     730: 2101         	movs	r1, #0x1
     732: 2000         	movs	r0, #0x0
     734: f000 f95a    	bl	0x9ec <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)> @ imm = #0x2b4
     738: 4603         	mov	r3, r0
     73a: 4619         	mov	r1, r3
     73c: 4620         	mov	r0, r4
     73e: f7ff ff02    	bl	0x546 <JIT::Backend::addInstruction(unsigned long)> @ imm = #-0x1fc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:25
;     backend.addInstruction(Instructions::Vector::vfmaVectorByScalarPlusVector(Instructions::Q2, Instructions::Q0, Instructions::R3, 0));
     742: 687c         	ldr	r4, [r7, #0x4]
     744: 2300         	movs	r3, #0x0
     746: 2203         	movs	r2, #0x3
     748: 2100         	movs	r1, #0x0
     74a: 2002         	movs	r0, #0x2
     74c: f000 f9b0    	bl	0xab0 <JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)> @ imm = #0x360
     750: 4603         	mov	r3, r0
     752: 4619         	mov	r1, r3
     754: 4620         	mov	r0, r4
     756: f7ff fef6    	bl	0x546 <JIT::Backend::addInstruction(unsigned long)> @ imm = #-0x214
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:27
;     backend.addInstruction(Instructions::Vector::vstrw(Instructions::Q2, Instructions::R2, 4, 0, 1, 0));
     75a: 687c         	ldr	r4, [r7, #0x4]
     75c: 2300         	movs	r3, #0x0
     75e: 9301         	str	r3, [sp, #0x4]
     760: 2301         	movs	r3, #0x1
     762: 9300         	str	r3, [sp]
     764: 2300         	movs	r3, #0x0
     766: 2204         	movs	r2, #0x4
     768: 2102         	movs	r1, #0x2
     76a: 2002         	movs	r0, #0x2
     76c: f000 f97a    	bl	0xa64 <JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)> @ imm = #0x2f4
     770: 4603         	mov	r3, r0
     772: 4619         	mov	r1, r3
     774: 4620         	mov	r0, r4
     776: f7ff fee6    	bl	0x546 <JIT::Backend::addInstruction(unsigned long)> @ imm = #-0x234
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:30
;     backend.addInstruction(Instructions::Base::letp(backend.getBranchOffset(dlstpStart) + 2));
     77a: 687c         	ldr	r4, [r7, #0x4]
     77c: 687b         	ldr	r3, [r7, #0x4]
     77e: 68f9         	ldr	r1, [r7, #0xc]
     780: 4618         	mov	r0, r3
     782: f7ff ff34    	bl	0x5ee <JIT::Backend::getBranchOffset(unsigned short*)> @ imm = #-0x198
     786: 4603         	mov	r3, r0
     788: b29b         	uxth	r3, r3
     78a: 3302         	adds	r3, #0x2
     78c: b29b         	uxth	r3, r3
     78e: b21b         	sxth	r3, r3
     790: 4618         	mov	r0, r3
     792: f000 f863    	bl	0x85c <JIT::Instructions::Base::letp(short)> @ imm = #0xc6
     796: 4603         	mov	r3, r0
     798: 4619         	mov	r1, r3
     79a: 4620         	mov	r0, r4
     79c: f7ff fed3    	bl	0x546 <JIT::Backend::addInstruction(unsigned long)> @ imm = #-0x25a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:33
;     backend.addInstruction(Instructions::DataProcessing::pop(Instructions::R4));
     7a0: 687c         	ldr	r4, [r7, #0x4]
     7a2: 2004         	movs	r0, #0x4
     7a4: f000 f8df    	bl	0x966 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)> @ imm = #0x1be
     7a8: 4603         	mov	r3, r0
     7aa: 4619         	mov	r1, r3
     7ac: 4620         	mov	r0, r4
     7ae: f7ff feb0    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0x2a0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:35
;     backend.addInstruction(Instructions::DataProcessing::pop(Instructions::PC));
     7b2: 687c         	ldr	r4, [r7, #0x4]
     7b4: 200f         	movs	r0, #0xf
     7b6: f000 f8d6    	bl	0x966 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)> @ imm = #0x1ac
     7ba: 4603         	mov	r3, r0
     7bc: 4619         	mov	r1, r3
     7be: 4620         	mov	r0, r4
     7c0: f7ff fea7    	bl	0x512 <JIT::Backend::addInstruction(unsigned short)> @ imm = #-0x2b2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:37
;     __asm("dsb");
     7c4: f3bf 8f4f    	dsb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:38
;     __asm("isb");
     7c8: f3bf 8f6f    	isb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:40
;     return reinterpret_cast<Func>(backend.getThumbAddress());
     7cc: 687b         	ldr	r3, [r7, #0x4]
     7ce: 4618         	mov	r0, r3
     7d0: f7ff ff2c    	bl	0x62c <JIT::Backend::getThumbAddress() const> @ imm = #-0x1a8
     7d4: 4603         	mov	r3, r0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/generators/Triad.cpp:41
; }
     7d6: 4618         	mov	r0, r3
     7d8: 3714         	adds	r7, #0x14
     7da: 46bd         	mov	sp, r7
     7dc: bd90         	pop	{r4, r7, pc}
     7de: 0000         	movs	r0, r0

000007e0 <JIT::Instructions::Base::nop()>:
; JIT::Instructions::Base::nop():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:3
; JIT::Instructions::Instruction16 JIT::Instructions::Base::nop() {
     7e0: b480         	push	{r7}
     7e2: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:4
;     return 0b1011'1111'0000'0000;
     7e4: f44f 433f    	mov.w	r3, #0xbf00
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:5
; }
     7e8: 4618         	mov	r0, r3
     7ea: 46bd         	mov	sp, r7
     7ec: f85d 7b04    	ldr	r7, [sp], #4
     7f0: 4770         	bx	lr

000007f2 <JIT::Instructions::Base::bx(JIT::Instructions::Register)>:
; JIT::Instructions::Base::bx(JIT::Instructions::Register)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:7
; JIT::Instructions::Instruction16 JIT::Instructions::Base::bx(Register Rm) {
     7f2: b480         	push	{r7}
     7f4: b085         	sub	sp, #0x14
     7f6: af00         	add	r7, sp, #0x0
     7f8: 4603         	mov	r3, r0
     7fa: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:8
;     Instruction16 instr = 0b0100011100000000;
     7fc: f44f 438e    	mov.w	r3, #0x4700
     800: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:9
;     instr |= Rm << 3U;
     802: 79fb         	ldrb	r3, [r7, #0x7]
     804: b21b         	sxth	r3, r3
     806: 00db         	lsls	r3, r3, #0x3
     808: b21a         	sxth	r2, r3
     80a: f9b7 300e    	ldrsh.w	r3, [r7, #0xe]
     80e: 4313         	orrs	r3, r2
     810: b21b         	sxth	r3, r3
     812: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:10
;     return instr;
     814: 89fb         	ldrh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:11
; }
     816: 4618         	mov	r0, r3
     818: 3714         	adds	r7, #0x14
     81a: 46bd         	mov	sp, r7
     81c: f85d 7b04    	ldr	r7, [sp], #4
     820: 4770         	bx	lr

00000822 <JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)>:
; JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:13
; JIT::Instructions::Instruction32 JIT::Instructions::Base::dlstp(Register Rn, Size size) {
     822: b480         	push	{r7}
     824: b085         	sub	sp, #0x14
     826: af00         	add	r7, sp, #0x0
     828: 4603         	mov	r3, r0
     82a: 460a         	mov	r2, r1
     82c: 71fb         	strb	r3, [r7, #0x7]
     82e: 4613         	mov	r3, r2
     830: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:14
;     Instruction32 instr = 0xF000'E001;
     832: 4b09         	ldr	r3, [pc, #0x24]         @ 0x858 <JIT::Instructions::Base::dlstp(JIT::Instructions::Register, JIT::Instructions::Size)+0x36>
     834: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:15
;     instr |= Rn << 16U;
     836: 79fb         	ldrb	r3, [r7, #0x7]
     838: 041b         	lsls	r3, r3, #0x10
     83a: 68fa         	ldr	r2, [r7, #0xc]
     83c: 4313         	orrs	r3, r2
     83e: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:16
;     instr |= size << 20U;
     840: 79bb         	ldrb	r3, [r7, #0x6]
     842: 051b         	lsls	r3, r3, #0x14
     844: 68fa         	ldr	r2, [r7, #0xc]
     846: 4313         	orrs	r3, r2
     848: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:18
;     return instr;
     84a: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:19
; }
     84c: 4618         	mov	r0, r3
     84e: 3714         	adds	r7, #0x14
     850: 46bd         	mov	sp, r7
     852: f85d 7b04    	ldr	r7, [sp], #4
     856: 4770         	bx	lr
     858: 01 e0 00 f0  	.word	0xf000e001

0000085c <JIT::Instructions::Base::letp(short)>:
; JIT::Instructions::Base::letp(short)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:23
; JIT::Instructions::Instruction32  JIT::Instructions::Base::letp(int16_t imm11) {
     85c: b480         	push	{r7}
     85e: b085         	sub	sp, #0x14
     860: af00         	add	r7, sp, #0x0
     862: 4603         	mov	r3, r0
     864: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:24
;     Instruction32 instr = 0xF01F'C001;
     866: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x8a4 <JIT::Instructions::Base::letp(short)+0x48>
     868: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:26
;     imm11 = -imm11; // wird von PC abgezogen, d.h. wenn imm11 negativ ist, dann muss es um zurückzuspringen positiv gesetzt werden
     86a: 88fb         	ldrh	r3, [r7, #0x6]
     86c: 425b         	rsbs	r3, r3, #0
     86e: b29b         	uxth	r3, r3
     870: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:27
;     imm11 >>= 1U; // right shift, weil im Decode ein "Left Shift" gemacht wird
     872: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
     876: 105b         	asrs	r3, r3, #0x1
     878: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:28
;     instr |= (0x01 & imm11) << 11U; // set imml
     87a: 88fb         	ldrh	r3, [r7, #0x6]
     87c: 02db         	lsls	r3, r3, #0xb
     87e: f403 6300    	and	r3, r3, #0x800
     882: 68fa         	ldr	r2, [r7, #0xc]
     884: 4313         	orrs	r3, r2
     886: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:29
;     instr |= (0xfe & imm11); // set immh
     888: 88fb         	ldrh	r3, [r7, #0x6]
     88a: f003 03fe    	and	r3, r3, #0xfe
     88e: 68fa         	ldr	r2, [r7, #0xc]
     890: 4313         	orrs	r3, r2
     892: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:30
;     return instr;
     894: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Base.cpp:31
; }
     896: 4618         	mov	r0, r3
     898: 3714         	adds	r7, #0x14
     89a: 46bd         	mov	sp, r7
     89c: f85d 7b04    	ldr	r7, [sp], #4
     8a0: 4770         	bx	lr
     8a2: bf00         	nop
     8a4: 01 c0 1f f0  	.word	0xf01fc001

000008a8 <JIT::Instructions::DataProcessing::str(JIT::Instructions::Register, JIT::Instructions::Register)>:
; JIT::Instructions::DataProcessing::str(JIT::Instructions::Register, JIT::Instructions::Register)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:23
;     instr |= Rt; // da Register enum ist, kann man sich mask off sparen
     8a8: b480         	push	{r7}
     8aa: b085         	sub	sp, #0x14
     8ac: af00         	add	r7, sp, #0x0
     8ae: 4603         	mov	r3, r0
     8b0: 460a         	mov	r2, r1
     8b2: 71fb         	strb	r3, [r7, #0x7]
     8b4: 4613         	mov	r3, r2
     8b6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:24
;     instr |= Rn << 3U;
     8b8: f44f 43c0    	mov.w	r3, #0x6000
     8bc: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:25
;     return instr;
     8be: 79bb         	ldrb	r3, [r7, #0x6]
     8c0: b29a         	uxth	r2, r3
     8c2: 89fb         	ldrh	r3, [r7, #0xe]
     8c4: 4313         	orrs	r3, r2
     8c6: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:26
; }
     8c8: 79fb         	ldrb	r3, [r7, #0x7]
     8ca: b21b         	sxth	r3, r3
     8cc: 00db         	lsls	r3, r3, #0x3
     8ce: b21a         	sxth	r2, r3
     8d0: f9b7 300e    	ldrsh.w	r3, [r7, #0xe]
     8d4: 4313         	orrs	r3, r2
     8d6: b21b         	sxth	r3, r3
     8d8: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:27
     8da: 89fb         	ldrh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:28
; JIT::Instructions::Instruction16 JIT::Instructions::DataProcessing::mov(Register Rd, uint8_t imm8) {
     8dc: 4618         	mov	r0, r3
     8de: 3714         	adds	r7, #0x14
     8e0: 46bd         	mov	sp, r7
     8e2: f85d 7b04    	ldr	r7, [sp], #4
     8e6: 4770         	bx	lr

000008e8 <JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)>:
; JIT::Instructions::DataProcessing::mov(JIT::Instructions::Register, unsigned char)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:30
;     instr |= imm8;
     8e8: b480         	push	{r7}
     8ea: b085         	sub	sp, #0x14
     8ec: af00         	add	r7, sp, #0x0
     8ee: 4603         	mov	r3, r0
     8f0: 460a         	mov	r2, r1
     8f2: 71fb         	strb	r3, [r7, #0x7]
     8f4: 4613         	mov	r3, r2
     8f6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:31
;     instr |= Rd << 8U;
     8f8: f44f 5300    	mov.w	r3, #0x2000
     8fc: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:32
;     return instr;
     8fe: 79bb         	ldrb	r3, [r7, #0x6]
     900: b29a         	uxth	r2, r3
     902: 89fb         	ldrh	r3, [r7, #0xe]
     904: 4313         	orrs	r3, r2
     906: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:33
; }
     908: 79fb         	ldrb	r3, [r7, #0x7]
     90a: b21b         	sxth	r3, r3
     90c: 021b         	lsls	r3, r3, #0x8
     90e: b21a         	sxth	r2, r3
     910: f9b7 300e    	ldrsh.w	r3, [r7, #0xe]
     914: 4313         	orrs	r3, r2
     916: b21b         	sxth	r3, r3
     918: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:34
     91a: 89fb         	ldrh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:35
; JIT::Instructions::Instruction16 JIT::Instructions::DataProcessing::push(Register const Rd) {
     91c: 4618         	mov	r0, r3
     91e: 3714         	adds	r7, #0x14
     920: 46bd         	mov	sp, r7
     922: f85d 7b04    	ldr	r7, [sp], #4
     926: 4770         	bx	lr

00000928 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)>:
; JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:37
     928: b480         	push	{r7}
     92a: b085         	sub	sp, #0x14
     92c: af00         	add	r7, sp, #0x0
     92e: 4603         	mov	r3, r0
     930: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:38
;     if (Rd == Register::LR) {
     932: f44f 4334    	mov.w	r3, #0xb400
     936: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:40
;     } else {
     938: 79fb         	ldrb	r3, [r7, #0x7]
     93a: 2b0e         	cmp	r3, #0xe
     93c: d104         	bne	0x948 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)+0x20> @ imm = #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:41
;         instr |= 1U << Rd;
     93e: 89fb         	ldrh	r3, [r7, #0xe]
     940: f443 7380    	orr	r3, r3, #0x100
     944: 81fb         	strh	r3, [r7, #0xe]
     946: e007         	b	0x958 <JIT::Instructions::DataProcessing::push(JIT::Instructions::Register)+0x30> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:43
;     return instr;
     948: 79fb         	ldrb	r3, [r7, #0x7]
     94a: 2201         	movs	r2, #0x1
     94c: fa02 f303    	lsl.w	r3, r2, r3
     950: b29a         	uxth	r2, r3
     952: 89fb         	ldrh	r3, [r7, #0xe]
     954: 4313         	orrs	r3, r2
     956: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:45
     958: 89fb         	ldrh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:46
; JIT::Instructions::Instruction16 JIT::Instructions::DataProcessing::pop(Register const Rd) {
     95a: 4618         	mov	r0, r3
     95c: 3714         	adds	r7, #0x14
     95e: 46bd         	mov	sp, r7
     960: f85d 7b04    	ldr	r7, [sp], #4
     964: 4770         	bx	lr

00000966 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)>:
; JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:48
     966: b480         	push	{r7}
     968: b085         	sub	sp, #0x14
     96a: af00         	add	r7, sp, #0x0
     96c: 4603         	mov	r3, r0
     96e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:49
;     if (Rd == Register::PC) {
     970: f44f 433c    	mov.w	r3, #0xbc00
     974: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:51
;     } else {
     976: 79fb         	ldrb	r3, [r7, #0x7]
     978: 2b0f         	cmp	r3, #0xf
     97a: d104         	bne	0x986 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)+0x20> @ imm = #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:52
;         // Man hat für jedes Low Register ein Bit von Bit 0-7. Wenn ein Bit davon auf 1 gesetzt wird, wird das Register gepopt
     97c: 89fb         	ldrh	r3, [r7, #0xe]
     97e: f443 7380    	orr	r3, r3, #0x100
     982: 81fb         	strh	r3, [r7, #0xe]
     984: e007         	b	0x996 <JIT::Instructions::DataProcessing::pop(JIT::Instructions::Register)+0x30> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:55
     986: 79fb         	ldrb	r3, [r7, #0x7]
     988: 2201         	movs	r2, #0x1
     98a: fa02 f303    	lsl.w	r3, r2, r3
     98e: b29a         	uxth	r2, r3
     990: 89fb         	ldrh	r3, [r7, #0xe]
     992: 4313         	orrs	r3, r2
     994: 81fb         	strh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:58
     996: 89fb         	ldrh	r3, [r7, #0xe]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/DataProcessing.cpp:59
     998: 4618         	mov	r0, r3
     99a: 3714         	adds	r7, #0x14
     99c: 46bd         	mov	sp, r7
     99e: f85d 7b04    	ldr	r7, [sp], #4
     9a2: 4770         	bx	lr

000009a4 <JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)>:
; JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:5
; JIT::Instructions::Instruction32 JIT::Instructions::Vector::vmovGPxScalar(bool toGP, FloatRegister Vn, Register Rt) {
     9a4: b480         	push	{r7}
     9a6: b085         	sub	sp, #0x14
     9a8: af00         	add	r7, sp, #0x0
     9aa: 4603         	mov	r3, r0
     9ac: 71fb         	strb	r3, [r7, #0x7]
     9ae: 460b         	mov	r3, r1
     9b0: 71bb         	strb	r3, [r7, #0x6]
     9b2: 4613         	mov	r3, r2
     9b4: 717b         	strb	r3, [r7, #0x5]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:6
;     Instruction32 instr = 0xEE000A10;
     9b6: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x9e8 <JIT::Instructions::Vector::vmovGPxScalar(bool, JIT::Instructions::FloatRegister, JIT::Instructions::Register)+0x44>
     9b8: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:8
;     instr |= static_cast<uint8_t>(toGP) << 20U;  // set op
     9ba: 79fb         	ldrb	r3, [r7, #0x7]
     9bc: 051b         	lsls	r3, r3, #0x14
     9be: 68fa         	ldr	r2, [r7, #0xc]
     9c0: 4313         	orrs	r3, r2
     9c2: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:9
;     instr |= Vn << 16U; // Set Scalar Register
     9c4: 79bb         	ldrb	r3, [r7, #0x6]
     9c6: 041b         	lsls	r3, r3, #0x10
     9c8: 68fa         	ldr	r2, [r7, #0xc]
     9ca: 4313         	orrs	r3, r2
     9cc: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:10
;     instr |= Rt << 12U; // Set GP Register
     9ce: 797b         	ldrb	r3, [r7, #0x5]
     9d0: 031b         	lsls	r3, r3, #0xc
     9d2: 68fa         	ldr	r2, [r7, #0xc]
     9d4: 4313         	orrs	r3, r2
     9d6: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:12
;     return instr;
     9d8: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:13
; }
     9da: 4618         	mov	r0, r3
     9dc: 3714         	adds	r7, #0x14
     9de: 46bd         	mov	sp, r7
     9e0: f85d 7b04    	ldr	r7, [sp], #4
     9e4: 4770         	bx	lr
     9e6: bf00         	nop
     9e8: 10 0a 00 ee  	.word	0xee000a10

000009ec <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>:
; JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:15
; JIT::Instructions::Instruction32 JIT::Instructions::Vector::vldrw(VectorRegister Qd, Register Rn, uint8_t imm, bool preIndexed, bool writeBack, bool subtractImm) {
     9ec: b490         	push	{r4, r7}
     9ee: b084         	sub	sp, #0x10
     9f0: af00         	add	r7, sp, #0x0
     9f2: 4604         	mov	r4, r0
     9f4: 4608         	mov	r0, r1
     9f6: 4611         	mov	r1, r2
     9f8: 461a         	mov	r2, r3
     9fa: 4623         	mov	r3, r4
     9fc: 71fb         	strb	r3, [r7, #0x7]
     9fe: 4603         	mov	r3, r0
     a00: 71bb         	strb	r3, [r7, #0x6]
     a02: 460b         	mov	r3, r1
     a04: 717b         	strb	r3, [r7, #0x5]
     a06: 4613         	mov	r3, r2
     a08: 713b         	strb	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:16
;     Instruction32 instr = 0xEC101F00;
     a0a: 4b15         	ldr	r3, [pc, #0x54]         @ 0xa60 <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)+0x74>
     a0c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:18
;     instr |= preIndexed << 24U; // Pre Indexed Variant (False -> Post-Indexed)
     a0e: 793b         	ldrb	r3, [r7, #0x4]
     a10: 061b         	lsls	r3, r3, #0x18
     a12: 68fa         	ldr	r2, [r7, #0xc]
     a14: 4313         	orrs	r3, r2
     a16: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:19
;     instr |= writeBack << 21U;
     a18: 7e3b         	ldrb	r3, [r7, #0x18]
     a1a: 055b         	lsls	r3, r3, #0x15
     a1c: 68fa         	ldr	r2, [r7, #0xc]
     a1e: 4313         	orrs	r3, r2
     a20: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:20
;     instr |= !subtractImm << 23U;
     a22: 7f3b         	ldrb	r3, [r7, #0x1c]
     a24: f083 0301    	eor	r3, r3, #0x1
     a28: b2db         	uxtb	r3, r3
     a2a: 05db         	lsls	r3, r3, #0x17
     a2c: 68fa         	ldr	r2, [r7, #0xc]
     a2e: 4313         	orrs	r3, r2
     a30: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:21
;     instr |= 0x7f & imm; // mask off highest bit
     a32: 797b         	ldrb	r3, [r7, #0x5]
     a34: f003 037f    	and	r3, r3, #0x7f
     a38: 68fa         	ldr	r2, [r7, #0xc]
     a3a: 4313         	orrs	r3, r2
     a3c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:22
;     instr |= Qd << 13U;
     a3e: 79fb         	ldrb	r3, [r7, #0x7]
     a40: 035b         	lsls	r3, r3, #0xd
     a42: 68fa         	ldr	r2, [r7, #0xc]
     a44: 4313         	orrs	r3, r2
     a46: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:23
;     instr |= Rn << 16U;
     a48: 79bb         	ldrb	r3, [r7, #0x6]
     a4a: 041b         	lsls	r3, r3, #0x10
     a4c: 68fa         	ldr	r2, [r7, #0xc]
     a4e: 4313         	orrs	r3, r2
     a50: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:25
;     return instr;
     a52: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:26
; }
     a54: 4618         	mov	r0, r3
     a56: 3710         	adds	r7, #0x10
     a58: 46bd         	mov	sp, r7
     a5a: bc90         	pop	{r4, r7}
     a5c: 4770         	bx	lr
     a5e: bf00         	nop
     a60: 00 1f 10 ec  	.word	0xec101f00

00000a64 <JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)>:
; JIT::Instructions::Vector::vstrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:28
; JIT::Instructions::Instruction32 JIT::Instructions::Vector::vstrw(VectorRegister Qd, Register Rn, uint8_t imm, bool preIndexed, bool writeBack, bool subtractImm) {
     a64: b590         	push	{r4, r7, lr}
     a66: b087         	sub	sp, #0x1c
     a68: af02         	add	r7, sp, #0x8
     a6a: 4604         	mov	r4, r0
     a6c: 4608         	mov	r0, r1
     a6e: 4611         	mov	r1, r2
     a70: 461a         	mov	r2, r3
     a72: 4623         	mov	r3, r4
     a74: 71fb         	strb	r3, [r7, #0x7]
     a76: 4603         	mov	r3, r0
     a78: 71bb         	strb	r3, [r7, #0x6]
     a7a: 460b         	mov	r3, r1
     a7c: 717b         	strb	r3, [r7, #0x5]
     a7e: 4613         	mov	r3, r2
     a80: 713b         	strb	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:29
;     Instruction32 instr = vldrw(Qd, Rn, imm, preIndexed, writeBack, subtractImm);
     a82: 793c         	ldrb	r4, [r7, #0x4]
     a84: 797a         	ldrb	r2, [r7, #0x5]
     a86: 79b9         	ldrb	r1, [r7, #0x6]
     a88: 79f8         	ldrb	r0, [r7, #0x7]
     a8a: f897 3024    	ldrb.w	r3, [r7, #0x24]
     a8e: 9301         	str	r3, [sp, #0x4]
     a90: f897 3020    	ldrb.w	r3, [r7, #0x20]
     a94: 9300         	str	r3, [sp]
     a96: 4623         	mov	r3, r4
     a98: f7ff ffa8    	bl	0x9ec <JIT::Instructions::Vector::vldrw(JIT::Instructions::VectorRegister, JIT::Instructions::Register, unsigned char, bool, bool, bool)> @ imm = #-0xb0
     a9c: 60f8         	str	r0, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:30
;     instr &= ~(1 << 20U); // 20th Bit is 0 instead of 1 (compared to vldrw) -> clear bit
     a9e: 68fb         	ldr	r3, [r7, #0xc]
     aa0: f423 1380    	bic	r3, r3, #0x100000
     aa4: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:31
;     return instr;
     aa6: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:32
; }
     aa8: 4618         	mov	r0, r3
     aaa: 3714         	adds	r7, #0x14
     aac: 46bd         	mov	sp, r7
     aae: bd90         	pop	{r4, r7, pc}

00000ab0 <JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)>:
; JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:35
; JIT::Instructions::Instruction32 JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(VectorRegister Qda, VectorRegister Qn, Register Rm, bool bf16) {
     ab0: b490         	push	{r4, r7}
     ab2: b084         	sub	sp, #0x10
     ab4: af00         	add	r7, sp, #0x0
     ab6: 4604         	mov	r4, r0
     ab8: 4608         	mov	r0, r1
     aba: 4611         	mov	r1, r2
     abc: 461a         	mov	r2, r3
     abe: 4623         	mov	r3, r4
     ac0: 71fb         	strb	r3, [r7, #0x7]
     ac2: 4603         	mov	r3, r0
     ac4: 71bb         	strb	r3, [r7, #0x6]
     ac6: 460b         	mov	r3, r1
     ac8: 717b         	strb	r3, [r7, #0x5]
     aca: 4613         	mov	r3, r2
     acc: 713b         	strb	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:36
;     Instruction32 instr = 0xEE310E40;
     ace: 4b0d         	ldr	r3, [pc, #0x34]         @ 0xb04 <JIT::Instructions::Vector::vfmaVectorByScalarPlusVector(JIT::Instructions::VectorRegister, JIT::Instructions::VectorRegister, JIT::Instructions::Register, bool)+0x54>
     ad0: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:38
;     instr |= bf16 << 28U; // use bf16 else use float32
     ad2: 793b         	ldrb	r3, [r7, #0x4]
     ad4: 071b         	lsls	r3, r3, #0x1c
     ad6: 68fa         	ldr	r2, [r7, #0xc]
     ad8: 4313         	orrs	r3, r2
     ada: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:39
;     instr |= Qda << 13U;
     adc: 79fb         	ldrb	r3, [r7, #0x7]
     ade: 035b         	lsls	r3, r3, #0xd
     ae0: 68fa         	ldr	r2, [r7, #0xc]
     ae2: 4313         	orrs	r3, r2
     ae4: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:40
;     instr |= Qn << 17U;
     ae6: 79bb         	ldrb	r3, [r7, #0x6]
     ae8: 045b         	lsls	r3, r3, #0x11
     aea: 68fa         	ldr	r2, [r7, #0xc]
     aec: 4313         	orrs	r3, r2
     aee: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:41
;     instr |= Rm;
     af0: 797b         	ldrb	r3, [r7, #0x5]
     af2: 68fa         	ldr	r2, [r7, #0xc]
     af4: 4313         	orrs	r3, r2
     af6: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:43
;     return instr;
     af8: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/jit_test/instructions/Vector.cpp:44
; }
     afa: 4618         	mov	r0, r3
     afc: 3710         	adds	r7, #0x10
     afe: 46bd         	mov	sp, r7
     b00: bc90         	pop	{r4, r7}
     b02: 4770         	bx	lr
     b04: 40 0e 31 ee  	.word	0xee310e40

00000b08 <in_fault_handler>:
; in_fault_handler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:294
; {
     b08: b480         	push	{r7}
     b0a: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:295
;     return fault_handler_active;
     b0c: 4b03         	ldr	r3, [pc, #0xc]          @ 0xb1c <in_fault_handler+0x14>
     b0e: 781b         	ldrb	r3, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:296
; }
     b10: 4618         	mov	r0, r3
     b12: 46bd         	mov	sp, r7
     b14: f85d 7b04    	ldr	r7, [sp], #4
     b18: 4770         	bx	lr
     b1a: bf00         	nop
     b1c: 05 12 00 20  	.word	0x20001205

00000b20 <fault_dump_enable>:
; fault_dump_enable():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:300
; {
     b20: b580         	push	{r7, lr}
     b22: b084         	sub	sp, #0x10
     b24: af00         	add	r7, sp, #0x0
     b26: 4603         	mov	r3, r0
     b28: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:301
;     fault_dump_enabled = enable;
     b2a: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0xb68 <fault_dump_enable+0x48>
     b2c: 79fb         	ldrb	r3, [r7, #0x7]
     b2e: 7013         	strb	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:302
;     fault_handler_active = false;
     b30: 4b0e         	ldr	r3, [pc, #0x38]         @ 0xb6c <fault_dump_enable+0x4c>
     b32: 2200         	movs	r2, #0x0
     b34: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:305
;     print_faults();
     b36: f000 f981    	bl	0xe3c <print_faults>    @ imm = #0x302
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:962
;   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     b3a: f3ef 8305    	mrs	r3, ipsr
     b3e: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:963
;   return (result);
     b40: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:308
;     ipsr.w = __get_IPSR();
     b42: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:309
;     if (ipsr.b.ISR != 0) {
     b44: 893b         	ldrh	r3, [r7, #0x8]
     b46: f3c3 0308    	ubfx	r3, r3, #0x0, #0x9
     b4a: b29b         	uxth	r3, r3
     b4c: 2b00         	cmp	r3, #0x0
     b4e: d007         	beq	0xb60 <fault_dump_enable+0x40> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:310
;         printf("!!! In exception %d !!!\n", ipsr.b.ISR);
     b50: 893b         	ldrh	r3, [r7, #0x8]
     b52: f3c3 0308    	ubfx	r3, r3, #0x0, #0x9
     b56: b29b         	uxth	r3, r3
     b58: 4619         	mov	r1, r3
     b5a: 4805         	ldr	r0, [pc, #0x14]         @ 0xb70 <fault_dump_enable+0x50>
     b5c: f007 ffd4    	bl	0x8b08 <printf>         @ imm = #0x7fa8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:312
; }
     b60: bf00         	nop
     b62: 3710         	adds	r7, #0x10
     b64: 46bd         	mov	sp, r7
     b66: bd80         	pop	{r7, pc}
     b68: 04 12 00 20  	.word	0x20001204
     b6c: 05 12 00 20  	.word	0x20001205
     b70: 18 19 21 80  	.word	0x80211918

00000b74 <HardFault_Handler>:
; HardFault_Handler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:317
;     __asm("MOVS R0, #0\n\t"
     b74: 2000         	movs	r0, #0x0
     b76: f000 b971    	b.w	0xe5c <CommonAsmFaultHandler> @ imm = #0x2e2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:319
; }
     b7a: bf00         	nop

00000b7c <MemManage_Handler>:
; MemManage_Handler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:324
;     __asm("MOVS R0, #1\n\t"
     b7c: 2001         	movs	r0, #0x1
     b7e: f000 b96d    	b.w	0xe5c <CommonAsmFaultHandler> @ imm = #0x2da
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:326
; }
     b82: bf00         	nop

00000b84 <BusFault_Handler>:
; BusFault_Handler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:331
;     __asm("MOVS R0, #2\n\t"
     b84: 2002         	movs	r0, #0x2
     b86: f000 b969    	b.w	0xe5c <CommonAsmFaultHandler> @ imm = #0x2d2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:333
; }
     b8a: bf00         	nop

00000b8c <UsageFault_Handler>:
; UsageFault_Handler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:338
;     __asm("MOVS R0, #3\n\t"
     b8c: 2003         	movs	r0, #0x3
     b8e: f000 b965    	b.w	0xe5c <CommonAsmFaultHandler> @ imm = #0x2ca
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:340
; }
     b92: bf00         	nop

00000b94 <SecureFault_Handler>:
; SecureFault_Handler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:345
;     __asm("MOVS R0, #4\n\t"
     b94: 2004         	movs	r0, #0x4
     b96: f000 b961    	b.w	0xe5c <CommonAsmFaultHandler> @ imm = #0x2c2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:347
; }
     b9a: bf00         	nop

00000b9c <DebugMonitor_Handler>:
; DebugMonitor_Handler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:352
;     __asm("MOVS R0, #5\n\t"
     b9c: 2005         	movs	r0, #0x5
     b9e: f000 b95d    	b.w	0xe5c <CommonAsmFaultHandler> @ imm = #0x2ba
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:354
; }
     ba2: bf00         	nop

00000ba4 <print_fsrbits>:
; print_fsrbits():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:177
; {
     ba4: b580         	push	{r7, lr}
     ba6: b086         	sub	sp, #0x18
     ba8: af00         	add	r7, sp, #0x0
     baa: 6078         	str	r0, [r7, #0x4]
     bac: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:178
;      bool first = true;
     bae: 2301         	movs	r3, #0x1
     bb0: 75fb         	strb	r3, [r7, #0x17]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:180
;      while (val != 0 && *bitnames != ' ') {
     bb2: e02e         	b	0xc12 <print_fsrbits+0x6e> @ imm = #0x5c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:181
;          int bit = *bitnames++;
     bb4: 683b         	ldr	r3, [r7]
     bb6: 1c5a         	adds	r2, r3, #0x1
     bb8: 603a         	str	r2, [r7]
     bba: 781b         	ldrb	r3, [r3]
     bbc: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:182
;          const char *next_bitname = bitnames;
     bbe: 683b         	ldr	r3, [r7]
     bc0: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:183
;          while (*next_bitname > ' ') {
     bc2: e002         	b	0xbca <print_fsrbits+0x26> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:184
;              next_bitname++;
     bc4: 693b         	ldr	r3, [r7, #0x10]
     bc6: 3301         	adds	r3, #0x1
     bc8: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:183
;          while (*next_bitname > ' ') {
     bca: 693b         	ldr	r3, [r7, #0x10]
     bcc: 781b         	ldrb	r3, [r3]
     bce: 2b20         	cmp	r3, #0x20
     bd0: d8f8         	bhi	0xbc4 <print_fsrbits+0x20> @ imm = #-0x10
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:186
;          if (val & (1U << bit)) {
     bd2: 2201         	movs	r2, #0x1
     bd4: 68fb         	ldr	r3, [r7, #0xc]
     bd6: 409a         	lsls	r2, r3
     bd8: 687b         	ldr	r3, [r7, #0x4]
     bda: 4013         	ands	r3, r2
     bdc: 2b00         	cmp	r3, #0x0
     bde: d016         	beq	0xc0e <print_fsrbits+0x6a> @ imm = #0x2c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:187
;              val &=~ (1U << bit);
     be0: 2201         	movs	r2, #0x1
     be2: 68fb         	ldr	r3, [r7, #0xc]
     be4: fa02 f303    	lsl.w	r3, r2, r3
     be8: 43db         	mvns	r3, r3
     bea: 687a         	ldr	r2, [r7, #0x4]
     bec: 4013         	ands	r3, r2
     bee: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:188
;              printf("%s%.*s", first ? " (" : ", ", next_bitname - bitnames, bitnames);
     bf0: 7dfb         	ldrb	r3, [r7, #0x17]
     bf2: 2b00         	cmp	r3, #0x0
     bf4: d001         	beq	0xbfa <print_fsrbits+0x56> @ imm = #0x2
     bf6: 4911         	ldr	r1, [pc, #0x44]         @ 0xc3c <print_fsrbits+0x98>
     bf8: e000         	b	0xbfc <print_fsrbits+0x58> @ imm = #0x0
     bfa: 4911         	ldr	r1, [pc, #0x44]         @ 0xc40 <print_fsrbits+0x9c>
     bfc: 693a         	ldr	r2, [r7, #0x10]
     bfe: 683b         	ldr	r3, [r7]
     c00: 1ad2         	subs	r2, r2, r3
     c02: 683b         	ldr	r3, [r7]
     c04: 480f         	ldr	r0, [pc, #0x3c]         @ 0xc44 <print_fsrbits+0xa0>
     c06: f007 ff7f    	bl	0x8b08 <printf>         @ imm = #0x7efe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:189
;              first = false;
     c0a: 2300         	movs	r3, #0x0
     c0c: 75fb         	strb	r3, [r7, #0x17]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:191
;          bitnames = next_bitname;
     c0e: 693b         	ldr	r3, [r7, #0x10]
     c10: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:180
;      while (val != 0 && *bitnames != ' ') {
     c12: 687b         	ldr	r3, [r7, #0x4]
     c14: 2b00         	cmp	r3, #0x0
     c16: d003         	beq	0xc20 <print_fsrbits+0x7c> @ imm = #0x6
     c18: 683b         	ldr	r3, [r7]
     c1a: 781b         	ldrb	r3, [r3]
     c1c: 2b20         	cmp	r3, #0x20
     c1e: d1c9         	bne	0xbb4 <print_fsrbits+0x10> @ imm = #-0x6e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:194
;      puts(first ? "" : ")");
     c20: 7dfb         	ldrb	r3, [r7, #0x17]
     c22: 2b00         	cmp	r3, #0x0
     c24: d001         	beq	0xc2a <print_fsrbits+0x86> @ imm = #0x2
     c26: 4b08         	ldr	r3, [pc, #0x20]         @ 0xc48 <print_fsrbits+0xa4>
     c28: e000         	b	0xc2c <print_fsrbits+0x88> @ imm = #0x0
     c2a: 4b08         	ldr	r3, [pc, #0x20]         @ 0xc4c <print_fsrbits+0xa8>
     c2c: 4618         	mov	r0, r3
     c2e: f007 ffe5    	bl	0x8bfc <puts>           @ imm = #0x7fca
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:195
; }
     c32: bf00         	nop
     c34: 3718         	adds	r7, #0x18
     c36: 46bd         	mov	sp, r7
     c38: bd80         	pop	{r7, pc}
     c3a: bf00         	nop
     c3c: 70 18 21 80  	.word	0x80211870
     c40: 74 18 21 80  	.word	0x80211874
     c44: 78 18 21 80  	.word	0x80211878
     c48: 80 18 21 80  	.word	0x80211880
     c4c: 84 18 21 80  	.word	0x80211884

00000c50 <print_memmanage>:
; print_memmanage():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:199
; {
     c50: b580         	push	{r7, lr}
     c52: b082         	sub	sp, #0x8
     c54: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:200
;      uint32_t mmfsr = MMFSR;
     c56: 4b11         	ldr	r3, [pc, #0x44]         @ 0xc9c <print_memmanage+0x4c>
     c58: 781b         	ldrb	r3, [r3]
     c5a: b2db         	uxtb	r3, r3
     c5c: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:201
;      if (mmfsr == 0) {
     c5e: 687b         	ldr	r3, [r7, #0x4]
     c60: 2b00         	cmp	r3, #0x0
     c62: d017         	beq	0xc94 <print_memmanage+0x44> @ imm = #0x2e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:204
;      printf("MMFSR = %02" PRIX32, mmfsr);
     c64: 6879         	ldr	r1, [r7, #0x4]
     c66: 480e         	ldr	r0, [pc, #0x38]         @ 0xca0 <print_memmanage+0x50>
     c68: f007 ff4e    	bl	0x8b08 <printf>         @ imm = #0x7e9c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:205
;      print_fsrbits(mmfsr, mmfsr_bits);
     c6c: 490d         	ldr	r1, [pc, #0x34]         @ 0xca4 <print_memmanage+0x54>
     c6e: 6878         	ldr	r0, [r7, #0x4]
     c70: f7ff ff98    	bl	0xba4 <print_fsrbits>   @ imm = #-0xd0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:206
;      if (mmfsr & 0x80) {
     c74: 687b         	ldr	r3, [r7, #0x4]
     c76: f003 0380    	and	r3, r3, #0x80
     c7a: 2b00         	cmp	r3, #0x0
     c7c: d005         	beq	0xc8a <print_memmanage+0x3a> @ imm = #0xa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:207
;         printf("MMFAR = %08" PRIX32 "\n", SCB->MMFAR);
     c7e: 4b0a         	ldr	r3, [pc, #0x28]         @ 0xca8 <print_memmanage+0x58>
     c80: 6b5b         	ldr	r3, [r3, #0x34]
     c82: 4619         	mov	r1, r3
     c84: 4809         	ldr	r0, [pc, #0x24]         @ 0xcac <print_memmanage+0x5c>
     c86: f007 ff3f    	bl	0x8b08 <printf>         @ imm = #0x7e7e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:209
;      MMFSR = mmfsr;
     c8a: 4b04         	ldr	r3, [pc, #0x10]         @ 0xc9c <print_memmanage+0x4c>
     c8c: 687a         	ldr	r2, [r7, #0x4]
     c8e: b2d2         	uxtb	r2, r2
     c90: 701a         	strb	r2, [r3]
     c92: e000         	b	0xc96 <print_memmanage+0x46> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:202
;          return;
     c94: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:210
; }
     c96: 3708         	adds	r7, #0x8
     c98: 46bd         	mov	sp, r7
     c9a: bd80         	pop	{r7, pc}
     c9c: 28 ed 00 e0  	.word	0xe000ed28
     ca0: 88 18 21 80  	.word	0x80211888
     ca4: e4 1a 21 80  	.word	0x80211ae4
     ca8: 00 ed 00 e0  	.word	0xe000ed00
     cac: 98 18 21 80  	.word	0x80211898

00000cb0 <print_busfault>:
; print_busfault():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:214
; {
     cb0: b580         	push	{r7, lr}
     cb2: b082         	sub	sp, #0x8
     cb4: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:215
;      uint32_t bfsr = BFSR;
     cb6: 4b18         	ldr	r3, [pc, #0x60]         @ 0xd18 <print_busfault+0x68>
     cb8: 781b         	ldrb	r3, [r3]
     cba: b2db         	uxtb	r3, r3
     cbc: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:216
;      if (bfsr == 0) {
     cbe: 687b         	ldr	r3, [r7, #0x4]
     cc0: 2b00         	cmp	r3, #0x0
     cc2: d025         	beq	0xd10 <print_busfault+0x60> @ imm = #0x4a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:219
;      printf("BFSR  = %02" PRIX32, bfsr);
     cc4: 6879         	ldr	r1, [r7, #0x4]
     cc6: 4815         	ldr	r0, [pc, #0x54]         @ 0xd1c <print_busfault+0x6c>
     cc8: f007 ff1e    	bl	0x8b08 <printf>         @ imm = #0x7e3c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:220
;      print_fsrbits(bfsr, bfsr_bits);
     ccc: 4914         	ldr	r1, [pc, #0x50]         @ 0xd20 <print_busfault+0x70>
     cce: 6878         	ldr	r0, [r7, #0x4]
     cd0: f7ff ff68    	bl	0xba4 <print_fsrbits>   @ imm = #-0x130
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:221
;      if (bfsr & 0x80) {
     cd4: 687b         	ldr	r3, [r7, #0x4]
     cd6: f003 0380    	and	r3, r3, #0x80
     cda: 2b00         	cmp	r3, #0x0
     cdc: d005         	beq	0xcea <print_busfault+0x3a> @ imm = #0xa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:222
;         printf("BFAR  = %08" PRIX32 "\n", SCB->BFAR);
     cde: 4b11         	ldr	r3, [pc, #0x44]         @ 0xd24 <print_busfault+0x74>
     ce0: 6b9b         	ldr	r3, [r3, #0x38]
     ce2: 4619         	mov	r1, r3
     ce4: 4810         	ldr	r0, [pc, #0x40]         @ 0xd28 <print_busfault+0x78>
     ce6: f007 ff0f    	bl	0x8b08 <printf>         @ imm = #0x7e1e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:225
;      uint32_t afsr = SCB->AFSR;
     cea: 4b0e         	ldr	r3, [pc, #0x38]         @ 0xd24 <print_busfault+0x74>
     cec: 6bdb         	ldr	r3, [r3, #0x3c]
     cee: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:226
;      printf("AFSR  = %08" PRIX32, afsr);
     cf0: 6839         	ldr	r1, [r7]
     cf2: 480e         	ldr	r0, [pc, #0x38]         @ 0xd2c <print_busfault+0x7c>
     cf4: f007 ff08    	bl	0x8b08 <printf>         @ imm = #0x7e10
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:228
;      print_fsrbits(afsr, afsr_bits);
     cf8: 490d         	ldr	r1, [pc, #0x34]         @ 0xd30 <print_busfault+0x80>
     cfa: 6838         	ldr	r0, [r7]
     cfc: f7ff ff52    	bl	0xba4 <print_fsrbits>   @ imm = #-0x15c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:229
;      SCB->AFSR = afsr;
     d00: 4a08         	ldr	r2, [pc, #0x20]         @ 0xd24 <print_busfault+0x74>
     d02: 683b         	ldr	r3, [r7]
     d04: 63d3         	str	r3, [r2, #0x3c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:231
;      BFSR = bfsr;
     d06: 4b04         	ldr	r3, [pc, #0x10]         @ 0xd18 <print_busfault+0x68>
     d08: 687a         	ldr	r2, [r7, #0x4]
     d0a: b2d2         	uxtb	r2, r2
     d0c: 701a         	strb	r2, [r3]
     d0e: e000         	b	0xd12 <print_busfault+0x62> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:217
;          return;
     d10: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:232
; }
     d12: 3708         	adds	r7, #0x8
     d14: 46bd         	mov	sp, r7
     d16: bd80         	pop	{r7, pc}
     d18: 29 ed 00 e0  	.word	0xe000ed29
     d1c: a8 18 21 80  	.word	0x802118a8
     d20: 1c 1b 21 80  	.word	0x80211b1c
     d24: 00 ed 00 e0  	.word	0xe000ed00
     d28: b8 18 21 80  	.word	0x802118b8
     d2c: c8 18 21 80  	.word	0x802118c8
     d30: 20 1c 21 80  	.word	0x80211c20

00000d34 <print_usagefault>:
; print_usagefault():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:236
; {
     d34: b580         	push	{r7, lr}
     d36: b082         	sub	sp, #0x8
     d38: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:237
;      uint32_t ufsr = UFSR;
     d3a: 4b0c         	ldr	r3, [pc, #0x30]         @ 0xd6c <print_usagefault+0x38>
     d3c: 881b         	ldrh	r3, [r3]
     d3e: b29b         	uxth	r3, r3
     d40: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:238
;      if (ufsr == 0) {
     d42: 687b         	ldr	r3, [r7, #0x4]
     d44: 2b00         	cmp	r3, #0x0
     d46: d00c         	beq	0xd62 <print_usagefault+0x2e> @ imm = #0x18
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:241
;      printf("UFSR  = %04" PRIX32, ufsr);
     d48: 6879         	ldr	r1, [r7, #0x4]
     d4a: 4809         	ldr	r0, [pc, #0x24]         @ 0xd70 <print_usagefault+0x3c>
     d4c: f007 fedc    	bl	0x8b08 <printf>         @ imm = #0x7db8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:242
;      print_fsrbits(ufsr, ufsr_bits);
     d50: 4908         	ldr	r1, [pc, #0x20]         @ 0xd74 <print_usagefault+0x40>
     d52: 6878         	ldr	r0, [r7, #0x4]
     d54: f7ff ff26    	bl	0xba4 <print_fsrbits>   @ imm = #-0x1b4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:243
;      UFSR = ufsr;
     d58: 4b04         	ldr	r3, [pc, #0x10]         @ 0xd6c <print_usagefault+0x38>
     d5a: 687a         	ldr	r2, [r7, #0x4]
     d5c: b292         	uxth	r2, r2
     d5e: 801a         	strh	r2, [r3]
     d60: e000         	b	0xd64 <print_usagefault+0x30> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:239
;          return;
     d62: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:244
; }
     d64: 3708         	adds	r7, #0x8
     d66: 46bd         	mov	sp, r7
     d68: bd80         	pop	{r7, pc}
     d6a: bf00         	nop
     d6c: 2a ed 00 e0  	.word	0xe000ed2a
     d70: d8 18 21 80  	.word	0x802118d8
     d74: 60 1b 21 80  	.word	0x80211b60

00000d78 <print_hardfault>:
; print_hardfault():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:248
; {
     d78: b580         	push	{r7, lr}
     d7a: b082         	sub	sp, #0x8
     d7c: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:249
;      uint32_t hfsr = SCB->HFSR;
     d7e: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0xdac <print_hardfault+0x34>
     d80: 6adb         	ldr	r3, [r3, #0x2c]
     d82: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:250
;      if (hfsr == 0) {
     d84: 687b         	ldr	r3, [r7, #0x4]
     d86: 2b00         	cmp	r3, #0x0
     d88: d00b         	beq	0xda2 <print_hardfault+0x2a> @ imm = #0x16
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:253
;      printf("HFSR  = %08" PRIX32, hfsr);
     d8a: 6879         	ldr	r1, [r7, #0x4]
     d8c: 4808         	ldr	r0, [pc, #0x20]         @ 0xdb0 <print_hardfault+0x38>
     d8e: f007 febb    	bl	0x8b08 <printf>         @ imm = #0x7d76
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:254
;      print_fsrbits(hfsr, hfsr_bits);
     d92: 4908         	ldr	r1, [pc, #0x20]         @ 0xdb4 <print_hardfault+0x3c>
     d94: 6878         	ldr	r0, [r7, #0x4]
     d96: f7ff ff05    	bl	0xba4 <print_fsrbits>   @ imm = #-0x1f6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:255
;      SCB->HFSR = hfsr;
     d9a: 4a04         	ldr	r2, [pc, #0x10]         @ 0xdac <print_hardfault+0x34>
     d9c: 687b         	ldr	r3, [r7, #0x4]
     d9e: 62d3         	str	r3, [r2, #0x2c]
     da0: e000         	b	0xda4 <print_hardfault+0x2c> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:251
;          return;
     da2: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:256
; }
     da4: 3708         	adds	r7, #0x8
     da6: 46bd         	mov	sp, r7
     da8: bd80         	pop	{r7, pc}
     daa: bf00         	nop
     dac: 00 ed 00 e0  	.word	0xe000ed00
     db0: e8 18 21 80  	.word	0x802118e8
     db4: 9c 1b 21 80  	.word	0x80211b9c

00000db8 <print_securefault>:
; print_securefault():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:260
; {
     db8: b580         	push	{r7, lr}
     dba: b082         	sub	sp, #0x8
     dbc: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:261
;      uint32_t sfsr = SCB->SFSR;
     dbe: 4b0c         	ldr	r3, [pc, #0x30]         @ 0xdf0 <print_securefault+0x38>
     dc0: f8d3 30e4    	ldr.w	r3, [r3, #0xe4]
     dc4: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:262
;      if (sfsr == 0) {
     dc6: 687b         	ldr	r3, [r7, #0x4]
     dc8: 2b00         	cmp	r3, #0x0
     dca: d00c         	beq	0xde6 <print_securefault+0x2e> @ imm = #0x18
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:265
;      printf("SFSR  = %08" PRIX32, sfsr);
     dcc: 6879         	ldr	r1, [r7, #0x4]
     dce: 4809         	ldr	r0, [pc, #0x24]         @ 0xdf4 <print_securefault+0x3c>
     dd0: f007 fe9a    	bl	0x8b08 <printf>         @ imm = #0x7d34
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:266
;      print_fsrbits(sfsr, sfsr_bits);
     dd4: 4908         	ldr	r1, [pc, #0x20]         @ 0xdf8 <print_securefault+0x40>
     dd6: 6878         	ldr	r0, [r7, #0x4]
     dd8: f7ff fee4    	bl	0xba4 <print_fsrbits>   @ imm = #-0x238
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:267
;      SCB->SFSR = sfsr;
     ddc: 4a04         	ldr	r2, [pc, #0x10]         @ 0xdf0 <print_securefault+0x38>
     dde: 687b         	ldr	r3, [r7, #0x4]
     de0: f8c2 30e4    	str.w	r3, [r2, #0xe4]
     de4: e000         	b	0xde8 <print_securefault+0x30> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:263
;          return;
     de6: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:268
; }
     de8: 3708         	adds	r7, #0x8
     dea: 46bd         	mov	sp, r7
     dec: bd80         	pop	{r7, pc}
     dee: bf00         	nop
     df0: 00 ed 00 e0  	.word	0xe000ed00
     df4: f8 18 21 80  	.word	0x802118f8
     df8: b8 1b 21 80  	.word	0x80211bb8

00000dfc <print_debugfault>:
; print_debugfault():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:272
; {
     dfc: b580         	push	{r7, lr}
     dfe: b082         	sub	sp, #0x8
     e00: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:273
;      uint32_t dfsr = SCB->DFSR;
     e02: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0xe30 <print_debugfault+0x34>
     e04: 6b1b         	ldr	r3, [r3, #0x30]
     e06: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:274
;      if (dfsr == 0) {
     e08: 687b         	ldr	r3, [r7, #0x4]
     e0a: 2b00         	cmp	r3, #0x0
     e0c: d00b         	beq	0xe26 <print_debugfault+0x2a> @ imm = #0x16
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:277
;      printf("DFSR  = %08" PRIX32, dfsr);
     e0e: 6879         	ldr	r1, [r7, #0x4]
     e10: 4808         	ldr	r0, [pc, #0x20]         @ 0xe34 <print_debugfault+0x38>
     e12: f007 fe79    	bl	0x8b08 <printf>         @ imm = #0x7cf2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:278
;      print_fsrbits(dfsr, dfsr_bits);
     e16: 4908         	ldr	r1, [pc, #0x20]         @ 0xe38 <print_debugfault+0x3c>
     e18: 6878         	ldr	r0, [r7, #0x4]
     e1a: f7ff fec3    	bl	0xba4 <print_fsrbits>   @ imm = #-0x27a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:279
;      SCB->DFSR = dfsr;
     e1e: 4a04         	ldr	r2, [pc, #0x10]         @ 0xe30 <print_debugfault+0x34>
     e20: 687b         	ldr	r3, [r7, #0x4]
     e22: 6313         	str	r3, [r2, #0x30]
     e24: e000         	b	0xe28 <print_debugfault+0x2c> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:275
;          return;
     e26: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:280
; }
     e28: 3708         	adds	r7, #0x8
     e2a: 46bd         	mov	sp, r7
     e2c: bd80         	pop	{r7, pc}
     e2e: bf00         	nop
     e30: 00 ed 00 e0  	.word	0xe000ed00
     e34: 08 19 21 80  	.word	0x80211908
     e38: f4 1b 21 80  	.word	0x80211bf4

00000e3c <print_faults>:
; print_faults():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:284
; {
     e3c: b580         	push	{r7, lr}
     e3e: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:285
;     print_usagefault();
     e40: f7ff ff78    	bl	0xd34 <print_usagefault> @ imm = #-0x110
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:286
;     print_memmanage();
     e44: f7ff ff04    	bl	0xc50 <print_memmanage> @ imm = #-0x1f8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:287
;     print_busfault();
     e48: f7ff ff32    	bl	0xcb0 <print_busfault>  @ imm = #-0x19c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:288
;     print_securefault();
     e4c: f7ff ffb4    	bl	0xdb8 <print_securefault> @ imm = #-0x98
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:289
;     print_debugfault();
     e50: f7ff ffd4    	bl	0xdfc <print_debugfault> @ imm = #-0x58
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:290
;     print_hardfault();
     e54: f7ff ff90    	bl	0xd78 <print_hardfault> @ imm = #-0xe0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:291
; }
     e58: bf00         	nop
     e5a: bd80         	pop	{r7, pc}

00000e5c <CommonAsmFaultHandler>:
; CommonAsmFaultHandler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:363
;     __asm("LDR   R1, =regs+4*4\n\t"
     e5c: f8df 1410    	ldr.w	r1, [pc, #0x410]        @ 0x1270 <FaultDump+0x274>
     e60: e881 0ff0    	stm.w	r1, {r4, r5, r6, r7, r8, r9, r10, r11}
     e64: f01e 0f04    	tst.w	lr, #0x4
     e68: bf07         	ittee	eq
     e6a: 4669         	moveq	r1, sp
     e6c: f3ef 830a    	mrseq	r3, msplim
     e70: f3ef 8109    	mrsne	r1, psp
     e74: f3ef 830b    	mrsne	r3, psplim
     e78: 4672         	mov	r2, lr
     e7a: f8df d3f8    	ldr.w	sp, [pc, #0x3f8]        @ 0x1274 <FaultDump+0x278>
     e7e: 4cfe         	ldr	r4, [pc, #0x3f8]        @ 0x1278 <FaultDump+0x27c>
     e80: f384 880a    	msr	msplim, r4
     e84: e00f         	b	0xea6 <CommonFaultHandler> @ imm = #0x1e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:376
; }
     e86: bf00         	nop

00000e88 <JumpToDump>:
; JumpToDump():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:380
; {
     e88: b480         	push	{r7}
     e8a: b083         	sub	sp, #0xc
     e8c: af00         	add	r7, sp, #0x0
     e8e: 6078         	str	r0, [r7, #0x4]
     e90: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:381
;     __asm("MOV   SP, %0\n\t" // sp parameter to SP
     e92: 683b         	ldr	r3, [r7]
     e94: 687a         	ldr	r2, [r7, #0x4]
     e96: 469d         	mov	sp, r3
     e98: 4710         	bx	r2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:383
; }
     e9a: bf00         	nop
     e9c: 370c         	adds	r7, #0xc
     e9e: 46bd         	mov	sp, r7
     ea0: f85d 7b04    	ldr	r7, [sp], #4
     ea4: 4770         	bx	lr

00000ea6 <CommonFaultHandler>:
; CommonFaultHandler():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:388
; {
     ea6: b580         	push	{r7, lr}
     ea8: b088         	sub	sp, #0x20
     eaa: af00         	add	r7, sp, #0x0
     eac: 60b9         	str	r1, [r7, #0x8]
     eae: 607a         	str	r2, [r7, #0x4]
     eb0: 603b         	str	r3, [r7]
     eb2: 4603         	mov	r3, r0
     eb4: 73fb         	strb	r3, [r7, #0xf]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:389
;     if (!fault_dump_enabled) {
     eb6: 4b47         	ldr	r3, [pc, #0x11c]        @ 0xfd4 <CommonFaultHandler+0x12e>
     eb8: 781b         	ldrb	r3, [r3]
     eba: f083 0301    	eor	r3, r3, #0x1
     ebe: b2db         	uxtb	r3, r3
     ec0: 2b00         	cmp	r3, #0x0
     ec2: d001         	beq	0xec8 <CommonFaultHandler+0x22> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:391
;             __WFE();
     ec4: bf20         	wfe
     ec6: e7fd         	b	0xec4 <CommonFaultHandler+0x1e> @ imm = #-0x6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:396
;     fault_dump_enabled = false;
     ec8: 4b42         	ldr	r3, [pc, #0x108]        @ 0xfd4 <CommonFaultHandler+0x12e>
     eca: 2200         	movs	r2, #0x0
     ecc: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:399
;     fault_handler_active = true;
     ece: 4b42         	ldr	r3, [pc, #0x108]        @ 0xfd8 <CommonFaultHandler+0x132>
     ed0: 2201         	movs	r2, #0x1
     ed2: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:401
;     exc_return = lr;
     ed4: 4a41         	ldr	r2, [pc, #0x104]        @ 0xfdc <CommonFaultHandler+0x136>
     ed6: 687b         	ldr	r3, [r7, #0x4]
     ed8: 6013         	str	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:402
;     fault_type = type;
     eda: 4a41         	ldr	r2, [pc, #0x104]        @ 0xfe0 <CommonFaultHandler+0x13a>
     edc: 7bfb         	ldrb	r3, [r7, #0xf]
     ede: 7013         	strb	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:403
;     uint32_t retpsr = sp[7];
     ee0: 68bb         	ldr	r3, [r7, #0x8]
     ee2: 69db         	ldr	r3, [r3, #0x1c]
     ee4: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:406
;     regs[0] = sp[0];
     ee6: 68bb         	ldr	r3, [r7, #0x8]
     ee8: 681b         	ldr	r3, [r3]
     eea: 4a3e         	ldr	r2, [pc, #0xf8]         @ 0xfe4 <CommonFaultHandler+0x13e>
     eec: 6013         	str	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:407
;     regs[1] = sp[1];
     eee: 68bb         	ldr	r3, [r7, #0x8]
     ef0: 685b         	ldr	r3, [r3, #0x4]
     ef2: 4a3c         	ldr	r2, [pc, #0xf0]         @ 0xfe4 <CommonFaultHandler+0x13e>
     ef4: 6053         	str	r3, [r2, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:408
;     regs[2] = sp[2];
     ef6: 68bb         	ldr	r3, [r7, #0x8]
     ef8: 689b         	ldr	r3, [r3, #0x8]
     efa: 4a3a         	ldr	r2, [pc, #0xe8]         @ 0xfe4 <CommonFaultHandler+0x13e>
     efc: 6093         	str	r3, [r2, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:409
;     regs[3] = sp[3];
     efe: 68bb         	ldr	r3, [r7, #0x8]
     f00: 68db         	ldr	r3, [r3, #0xc]
     f02: 4a38         	ldr	r2, [pc, #0xe0]         @ 0xfe4 <CommonFaultHandler+0x13e>
     f04: 60d3         	str	r3, [r2, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:410
;     regs[12] = sp[4];
     f06: 68bb         	ldr	r3, [r7, #0x8]
     f08: 691b         	ldr	r3, [r3, #0x10]
     f0a: 4a36         	ldr	r2, [pc, #0xd8]         @ 0xfe4 <CommonFaultHandler+0x13e>
     f0c: 6313         	str	r3, [r2, #0x30]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:413
;     if((UFSR & 0x10) && sp == orig_splim) {
     f0e: 4b36         	ldr	r3, [pc, #0xd8]         @ 0xfe8 <CommonFaultHandler+0x142>
     f10: 881b         	ldrh	r3, [r3]
     f12: b29b         	uxth	r3, r3
     f14: f003 0310    	and	r3, r3, #0x10
     f18: 2b00         	cmp	r3, #0x0
     f1a: d009         	beq	0xf30 <CommonFaultHandler+0x8a> @ imm = #0x12
     f1c: 68ba         	ldr	r2, [r7, #0x8]
     f1e: 683b         	ldr	r3, [r7]
     f20: 429a         	cmp	r2, r3
     f22: d105         	bne	0xf30 <CommonFaultHandler+0x8a> @ imm = #0xa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:414
;         regs[13] = (uint32_t)sp;
     f24: 68bb         	ldr	r3, [r7, #0x8]
     f26: 4a2f         	ldr	r2, [pc, #0xbc]         @ 0xfe4 <CommonFaultHandler+0x13e>
     f28: 6353         	str	r3, [r2, #0x34]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:415
;         retpsr = 0;  // can't trust that stack frame contains sane values as this is stack overflow fault
     f2a: 2300         	movs	r3, #0x0
     f2c: 61fb         	str	r3, [r7, #0x1c]
     f2e: e011         	b	0xf54 <CommonFaultHandler+0xae> @ imm = #0x22
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:418
;         regs[13] = (uint32_t)sp + (exc_return & 0x10 ? 0x20 : 0x68) + (retpsr & 0x200 ? 4 : 0);
     f30: 4b2a         	ldr	r3, [pc, #0xa8]         @ 0xfdc <CommonFaultHandler+0x136>
     f32: 681b         	ldr	r3, [r3]
     f34: f003 0310    	and	r3, r3, #0x10
     f38: 2b00         	cmp	r3, #0x0
     f3a: d001         	beq	0xf40 <CommonFaultHandler+0x9a> @ imm = #0x2
     f3c: 2220         	movs	r2, #0x20
     f3e: e000         	b	0xf42 <CommonFaultHandler+0x9c> @ imm = #0x0
     f40: 2268         	movs	r2, #0x68
     f42: 68bb         	ldr	r3, [r7, #0x8]
     f44: 441a         	add	r2, r3
     f46: 69fb         	ldr	r3, [r7, #0x1c]
     f48: 09db         	lsrs	r3, r3, #0x7
     f4a: f003 0304    	and	r3, r3, #0x4
     f4e: 4413         	add	r3, r2
     f50: 4a24         	ldr	r2, [pc, #0x90]         @ 0xfe4 <CommonFaultHandler+0x13e>
     f52: 6353         	str	r3, [r2, #0x34]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:420
;     regs[14] = sp[5];
     f54: 68bb         	ldr	r3, [r7, #0x8]
     f56: 695b         	ldr	r3, [r3, #0x14]
     f58: 4a22         	ldr	r2, [pc, #0x88]         @ 0xfe4 <CommonFaultHandler+0x13e>
     f5a: 6393         	str	r3, [r2, #0x38]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:421
;     regs[15] = sp[6];
     f5c: 68bb         	ldr	r3, [r7, #0x8]
     f5e: 699b         	ldr	r3, [r3, #0x18]
     f60: 4a20         	ldr	r2, [pc, #0x80]         @ 0xfe4 <CommonFaultHandler+0x13e>
     f62: 63d3         	str	r3, [r2, #0x3c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:422
;     regs[16] = sp[7];
     f64: 68bb         	ldr	r3, [r7, #0x8]
     f66: 69db         	ldr	r3, [r3, #0x1c]
     f68: 4a1e         	ldr	r2, [pc, #0x78]         @ 0xfe4 <CommonFaultHandler+0x13e>
     f6a: 6413         	str	r3, [r2, #0x40]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:425
;     fault_stack[FAULT_STACK_WORDS-1] = (1 << 24) | (retpsr & 0x1FF); // RETPSR, only set T32 state and exception state
     f6c: 69fb         	ldr	r3, [r7, #0x1c]
     f6e: f3c3 0308    	ubfx	r3, r3, #0x0, #0x9
     f72: f043 7380    	orr	r3, r3, #0x1000000
     f76: 4a1d         	ldr	r2, [pc, #0x74]         @ 0xfec <CommonFaultHandler+0x146>
     f78: f8c2 33fc    	str.w	r3, [r2, #0x3fc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:426
;     fault_stack[FAULT_STACK_WORDS-2] = (uint32_t) FaultDump;  // Return Address, this is where EXC_RETURN will return to later on
     f7c: 4a1c         	ldr	r2, [pc, #0x70]         @ 0xff0 <CommonFaultHandler+0x14a>
     f7e: 4b1b         	ldr	r3, [pc, #0x6c]         @ 0xfec <CommonFaultHandler+0x146>
     f80: f8c3 23f8    	str.w	r2, [r3, #0x3f8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:427
;     fault_stack[FAULT_STACK_WORDS-3] = 0xEFFFFFFE;  // LR, deliberately set to 'illegal' execution address as we're not expecting FaultDump to return
     f84: 4b19         	ldr	r3, [pc, #0x64]         @ 0xfec <CommonFaultHandler+0x146>
     f86: 4a1b         	ldr	r2, [pc, #0x6c]         @ 0xff4 <CommonFaultHandler+0x14e>
     f88: f8c3 23f4    	str.w	r2, [r3, #0x3f4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:428
;     fault_stack[FAULT_STACK_WORDS-4] = 0;  // R12
     f8c: 4b17         	ldr	r3, [pc, #0x5c]         @ 0xfec <CommonFaultHandler+0x146>
     f8e: 2200         	movs	r2, #0x0
     f90: f8c3 23f0    	str.w	r2, [r3, #0x3f0]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:429
;     fault_stack[FAULT_STACK_WORDS-5] = 0;  // R3
     f94: 4b15         	ldr	r3, [pc, #0x54]         @ 0xfec <CommonFaultHandler+0x146>
     f96: 2200         	movs	r2, #0x0
     f98: f8c3 23ec    	str.w	r2, [r3, #0x3ec]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:430
;     fault_stack[FAULT_STACK_WORDS-6] = 0;  // R2
     f9c: 4b13         	ldr	r3, [pc, #0x4c]         @ 0xfec <CommonFaultHandler+0x146>
     f9e: 2200         	movs	r2, #0x0
     fa0: f8c3 23e8    	str.w	r2, [r3, #0x3e8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:431
;     fault_stack[FAULT_STACK_WORDS-7] = 0;  // R1
     fa4: 4b11         	ldr	r3, [pc, #0x44]         @ 0xfec <CommonFaultHandler+0x146>
     fa6: 2200         	movs	r2, #0x0
     fa8: f8c3 23e4    	str.w	r2, [r3, #0x3e4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:432
;     fault_stack[FAULT_STACK_WORDS-8] = 0;  // R0
     fac: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0xfec <CommonFaultHandler+0x146>
     fae: 2200         	movs	r2, #0x0
     fb0: f8c3 23e0    	str.w	r2, [r3, #0x3e0]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:438
;     uint32_t new_exc_return = exc_return | 0x10;
     fb4: 4b09         	ldr	r3, [pc, #0x24]         @ 0xfdc <CommonFaultHandler+0x136>
     fb6: 681b         	ldr	r3, [r3]
     fb8: f043 0310    	orr	r3, r3, #0x10
     fbc: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:439
;     uint32_t* new_sp = fault_stack + FAULT_STACK_WORDS - 8;
     fbe: 4b0e         	ldr	r3, [pc, #0x38]         @ 0xff8 <CommonFaultHandler+0x152>
     fc0: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:441
;     JumpToDump(new_exc_return, new_sp);
     fc2: 6979         	ldr	r1, [r7, #0x14]
     fc4: 69b8         	ldr	r0, [r7, #0x18]
     fc6: f7ff ff5f    	bl	0xe88 <JumpToDump>      @ imm = #-0x142
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:442
; }
     fca: bf00         	nop
     fcc: 3720         	adds	r7, #0x20
     fce: 46bd         	mov	sp, r7
     fd0: bd80         	pop	{r7, pc}
     fd2: bf00         	nop
     fd4: 04 12 00 20  	.word	0x20001204
     fd8: 05 12 00 20  	.word	0x20001205
     fdc: bc 11 00 20  	.word	0x200011bc
     fe0: b8 11 00 20  	.word	0x200011b8
     fe4: c0 11 00 20  	.word	0x200011c0
     fe8: 2a ed 00 e0  	.word	0xe000ed2a
     fec: b8 0d 00 20  	.word	0x20000db8
     ff0: fd 0f 00 00  	.word	0x00000ffd
     ff4: fe ff ff ef  	.word	0xeffffffe
     ff8: 98 11 00 20  	.word	0x20001198

00000ffc <FaultDump>:
; FaultDump():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:446
; {
     ffc: b580         	push	{r7, lr}
     ffe: b08a         	sub	sp, #0x28
    1000: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:447
;     printf("\n==== %s exception ====\n\n", FaultNames[fault_type]);
    1002: 4b85         	ldr	r3, [pc, #0x214]        @ 0x1218 <FaultDump+0x21c>
    1004: 781b         	ldrb	r3, [r3]
    1006: 461a         	mov	r2, r3
    1008: 4b84         	ldr	r3, [pc, #0x210]        @ 0x121c <FaultDump+0x220>
    100a: f853 3022    	ldr.w	r3, [r3, r2, lsl #2]
    100e: 4619         	mov	r1, r3
    1010: 4883         	ldr	r0, [pc, #0x20c]        @ 0x1220 <FaultDump+0x224>
    1012: f007 fd79    	bl	0x8b08 <printf>         @ imm = #0x7af2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:449
;     print_faults();
    1016: f7ff ff11    	bl	0xe3c <print_faults>    @ imm = #-0x1de
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:451
;     printf("\nEXC_RETURN = %08" PRIX32 "\n\n"
    101a: 4b82         	ldr	r3, [pc, #0x208]        @ 0x1224 <FaultDump+0x228>
    101c: 681b         	ldr	r3, [r3]
    101e: 4a82         	ldr	r2, [pc, #0x208]        @ 0x1228 <FaultDump+0x22c>
    1020: 4619         	mov	r1, r3
    1022: 4882         	ldr	r0, [pc, #0x208]        @ 0x122c <FaultDump+0x230>
    1024: f007 fd70    	bl	0x8b08 <printf>         @ imm = #0x7ae0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:453
;     for (int i = 0; i < 13; i++) {
    1028: 2300         	movs	r3, #0x0
    102a: 627b         	str	r3, [r7, #0x24]
    102c: e018         	b	0x1060 <FaultDump+0x64> @ imm = #0x30
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:454
;         printf("R%-3d= %08" PRIX32 "%c", i, regs[i], i % 4 < 3 ? ' ' : '\n');
    102e: 4a7e         	ldr	r2, [pc, #0x1f8]        @ 0x1228 <FaultDump+0x22c>
    1030: 6a7b         	ldr	r3, [r7, #0x24]
    1032: f852 1023    	ldr.w	r1, [r2, r3, lsl #2]
    1036: 6a7b         	ldr	r3, [r7, #0x24]
    1038: 425a         	rsbs	r2, r3, #0
    103a: f003 0303    	and	r3, r3, #0x3
    103e: f002 0203    	and	r2, r2, #0x3
    1042: ea53 b342    	csneg	r3, r3, r2, mi
    1046: 2b02         	cmp	r3, #0x2
    1048: dc01         	bgt	0x104e <FaultDump+0x52> @ imm = #0x2
    104a: 2320         	movs	r3, #0x20
    104c: e000         	b	0x1050 <FaultDump+0x54> @ imm = #0x0
    104e: 230a         	movs	r3, #0xa
    1050: 460a         	mov	r2, r1
    1052: 6a79         	ldr	r1, [r7, #0x24]
    1054: 4876         	ldr	r0, [pc, #0x1d8]        @ 0x1230 <FaultDump+0x234>
    1056: f007 fd57    	bl	0x8b08 <printf>         @ imm = #0x7aae
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:453
;     for (int i = 0; i < 13; i++) {
    105a: 6a7b         	ldr	r3, [r7, #0x24]
    105c: 3301         	adds	r3, #0x1
    105e: 627b         	str	r3, [r7, #0x24]
    1060: 6a7b         	ldr	r3, [r7, #0x24]
    1062: 2b0c         	cmp	r3, #0xc
    1064: dde3         	ble	0x102e <FaultDump+0x32> @ imm = #-0x3a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:456
;     printf("SP  = %08" PRIX32 " LR  = %08" PRIX32 " PC  = %08" PRIX32 "\n", regs[13], regs[14], regs[15]);
    1066: 4b70         	ldr	r3, [pc, #0x1c0]        @ 0x1228 <FaultDump+0x22c>
    1068: 6b59         	ldr	r1, [r3, #0x34]
    106a: 4b6f         	ldr	r3, [pc, #0x1bc]        @ 0x1228 <FaultDump+0x22c>
    106c: 6b9a         	ldr	r2, [r3, #0x38]
    106e: 4b6e         	ldr	r3, [pc, #0x1b8]        @ 0x1228 <FaultDump+0x22c>
    1070: 6bdb         	ldr	r3, [r3, #0x3c]
    1072: 4870         	ldr	r0, [pc, #0x1c0]        @ 0x1234 <FaultDump+0x238>
    1074: f007 fd48    	bl	0x8b08 <printf>         @ imm = #0x7a90
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:457
;     printf("Mode %-8sflags set: ", exc_return & 8 ? "Thread" : "Handler");
    1078: 4b6a         	ldr	r3, [pc, #0x1a8]        @ 0x1224 <FaultDump+0x228>
    107a: 681b         	ldr	r3, [r3]
    107c: f003 0308    	and	r3, r3, #0x8
    1080: 2b00         	cmp	r3, #0x0
    1082: d001         	beq	0x1088 <FaultDump+0x8c> @ imm = #0x2
    1084: 4b6c         	ldr	r3, [pc, #0x1b0]        @ 0x1238 <FaultDump+0x23c>
    1086: e000         	b	0x108a <FaultDump+0x8e> @ imm = #0x0
    1088: 4b6c         	ldr	r3, [pc, #0x1b0]        @ 0x123c <FaultDump+0x240>
    108a: 4619         	mov	r1, r3
    108c: 486c         	ldr	r0, [pc, #0x1b0]        @ 0x1240 <FaultDump+0x244>
    108e: f007 fd3b    	bl	0x8b08 <printf>         @ imm = #0x7a76
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:458
;     for (size_t i = 0, bit = 1u<<31; i < 24; i++) {
    1092: 2300         	movs	r3, #0x0
    1094: 623b         	str	r3, [r7, #0x20]
    1096: f04f 4300    	mov.w	r3, #0x80000000
    109a: 61fb         	str	r3, [r7, #0x1c]
    109c: e025         	b	0x10ea <FaultDump+0xee> @ imm = #0x4a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:459
;         if (i < sizeof flag_names - 1) {
    109e: 6a3b         	ldr	r3, [r7, #0x20]
    10a0: 2b0f         	cmp	r3, #0xf
    10a2: d81c         	bhi	0x10de <FaultDump+0xe2> @ imm = #0x38
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:460
;             if (flag_names[i] != '0') {
    10a4: 4a67         	ldr	r2, [pc, #0x19c]        @ 0x1244 <FaultDump+0x248>
    10a6: 6a3b         	ldr	r3, [r7, #0x20]
    10a8: 4413         	add	r3, r2
    10aa: 781b         	ldrb	r3, [r3]
    10ac: 2b30         	cmp	r3, #0x30
    10ae: d012         	beq	0x10d6 <FaultDump+0xda> @ imm = #0x24
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:461
;                 putchar(regs[16] & bit ? flag_names[i] : flag_names[i] + 'a' - 'A');
    10b0: 4b5d         	ldr	r3, [pc, #0x174]        @ 0x1228 <FaultDump+0x22c>
    10b2: 6c1a         	ldr	r2, [r3, #0x40]
    10b4: 69fb         	ldr	r3, [r7, #0x1c]
    10b6: 4013         	ands	r3, r2
    10b8: 2b00         	cmp	r3, #0x0
    10ba: d004         	beq	0x10c6 <FaultDump+0xca> @ imm = #0x8
    10bc: 4a61         	ldr	r2, [pc, #0x184]        @ 0x1244 <FaultDump+0x248>
    10be: 6a3b         	ldr	r3, [r7, #0x20]
    10c0: 4413         	add	r3, r2
    10c2: 781b         	ldrb	r3, [r3]
    10c4: e004         	b	0x10d0 <FaultDump+0xd4> @ imm = #0x8
    10c6: 4a5f         	ldr	r2, [pc, #0x17c]        @ 0x1244 <FaultDump+0x248>
    10c8: 6a3b         	ldr	r3, [r7, #0x20]
    10ca: 4413         	add	r3, r2
    10cc: 781b         	ldrb	r3, [r3]
    10ce: 3320         	adds	r3, #0x20
    10d0: 4618         	mov	r0, r3
    10d2: f007 fd2d    	bl	0x8b30 <putchar>        @ imm = #0x7a5a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:463
;             bit >>= 1;
    10d6: 69fb         	ldr	r3, [r7, #0x1c]
    10d8: 085b         	lsrs	r3, r3, #0x1
    10da: 61fb         	str	r3, [r7, #0x1c]
    10dc: e002         	b	0x10e4 <FaultDump+0xe8> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:465
;             putchar(' ');
    10de: 2020         	movs	r0, #0x20
    10e0: f007 fd26    	bl	0x8b30 <putchar>        @ imm = #0x7a4c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:458
;     for (size_t i = 0, bit = 1u<<31; i < 24; i++) {
    10e4: 6a3b         	ldr	r3, [r7, #0x20]
    10e6: 3301         	adds	r3, #0x1
    10e8: 623b         	str	r3, [r7, #0x20]
    10ea: 6a3b         	ldr	r3, [r7, #0x20]
    10ec: 2b17         	cmp	r3, #0x17
    10ee: d9d6         	bls	0x109e <FaultDump+0xa2> @ imm = #-0x54
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:468
;     printf("PSR = %08" PRIX32 "\n", regs[16]);
    10f0: 4b4d         	ldr	r3, [pc, #0x134]        @ 0x1228 <FaultDump+0x22c>
    10f2: 6c1b         	ldr	r3, [r3, #0x40]
    10f4: 4619         	mov	r1, r3
    10f6: 4854         	ldr	r0, [pc, #0x150]        @ 0x1248 <FaultDump+0x24c>
    10f8: f007 fd06    	bl	0x8b08 <printf>         @ imm = #0x7a0c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:469
;     if (!(exc_return & 8)) {
    10fc: 4b49         	ldr	r3, [pc, #0x124]        @ 0x1224 <FaultDump+0x228>
    10fe: 681b         	ldr	r3, [r3]
    1100: f003 0308    	and	r3, r3, #0x8
    1104: 2b00         	cmp	r3, #0x0
    1106: d107         	bne	0x1118 <FaultDump+0x11c> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:470
;         printf("Exception %" PRId32 "\n", regs[16] & 0x1FF);
    1108: 4b47         	ldr	r3, [pc, #0x11c]        @ 0x1228 <FaultDump+0x22c>
    110a: 6c1b         	ldr	r3, [r3, #0x40]
    110c: f3c3 0308    	ubfx	r3, r3, #0x0, #0x9
    1110: 4619         	mov	r1, r3
    1112: 484e         	ldr	r0, [pc, #0x138]        @ 0x124c <FaultDump+0x250>
    1114: f007 fcf8    	bl	0x8b08 <printf>         @ imm = #0x79f0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:473
;     uintptr_t stack_top = VTOR_STACK_TOP;
    1118: 4b4d         	ldr	r3, [pc, #0x134]        @ 0x1250 <FaultDump+0x254>
    111a: 689b         	ldr	r3, [r3, #0x8]
    111c: 681b         	ldr	r3, [r3]
    111e: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:474
;     printf("Stack top from VTOR: %08" PRIXPTR "\n", stack_top);
    1120: 69b9         	ldr	r1, [r7, #0x18]
    1122: 484c         	ldr	r0, [pc, #0x130]        @ 0x1254 <FaultDump+0x258>
    1124: f007 fcf0    	bl	0x8b08 <printf>         @ imm = #0x79e0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:475
;     printf("\n==== Stack dump ====\n\n");
    1128: 484b         	ldr	r0, [pc, #0x12c]        @ 0x1258 <FaultDump+0x25c>
    112a: f007 fd67    	bl	0x8bfc <puts>           @ imm = #0x7ace
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:476
;     const uintptr_t stack_point = regs[13];
    112e: 4b3e         	ldr	r3, [pc, #0xf8]         @ 0x1228 <FaultDump+0x22c>
    1130: 6b5b         	ldr	r3, [r3, #0x34]
    1132: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:480
;     if (stack_top < stack_point) {
    1134: 69ba         	ldr	r2, [r7, #0x18]
    1136: 68bb         	ldr	r3, [r7, #0x8]
    1138: 429a         	cmp	r2, r3
    113a: d202         	bhs	0x1142 <FaultDump+0x146> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:481
;         stack_top = UINTPTR_MAX;
    113c: f04f 33ff    	mov.w	r3, #0xffffffff
    1140: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:489
;     const uintptr_t loop_start = stack_point - stack_point % (VALUES_PER_LINE * BYTES_IN_VALUE);
    1142: 68bb         	ldr	r3, [r7, #0x8]
    1144: f023 030f    	bic	r3, r3, #0xf
    1148: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:492
;     printf("Address  :     3 2 1 0     7 6 5 4     B A 9 8     F E D C       ASCII Data\n");
    114a: 4844         	ldr	r0, [pc, #0x110]        @ 0x125c <FaultDump+0x260>
    114c: f007 fd56    	bl	0x8bfc <puts>           @ imm = #0x7aac
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:494
;     for (uint32_t *p = (uint32_t *)loop_start; p < ((uint32_t *)loop_start + STACK_DUMP_MAX_LINES * VALUES_PER_LINE) && p < (uint32_t *)stack_top; p += VALUES_PER_LINE) {
    1150: 687b         	ldr	r3, [r7, #0x4]
    1152: 617b         	str	r3, [r7, #0x14]
    1154: e052         	b	0x11fc <FaultDump+0x200> @ imm = #0xa4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:496
;         printf("%08" PRIXPTR " :", (uintptr_t)p);
    1156: 697b         	ldr	r3, [r7, #0x14]
    1158: 4619         	mov	r1, r3
    115a: 4841         	ldr	r0, [pc, #0x104]        @ 0x1260 <FaultDump+0x264>
    115c: f007 fcd4    	bl	0x8b08 <printf>         @ imm = #0x79a8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:498
;         for (uint32_t *vp = p; vp < p + VALUES_PER_LINE; vp++) {
    1160: 697b         	ldr	r3, [r7, #0x14]
    1162: 613b         	str	r3, [r7, #0x10]
    1164: e014         	b	0x1190 <FaultDump+0x194> @ imm = #0x28
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:499
;             if (vp >= (uint32_t*)stack_point && vp < (uint32_t*)stack_top) {
    1166: 68bb         	ldr	r3, [r7, #0x8]
    1168: 693a         	ldr	r2, [r7, #0x10]
    116a: 429a         	cmp	r2, r3
    116c: d30a         	blo	0x1184 <FaultDump+0x188> @ imm = #0x14
    116e: 69bb         	ldr	r3, [r7, #0x18]
    1170: 693a         	ldr	r2, [r7, #0x10]
    1172: 429a         	cmp	r2, r3
    1174: d206         	bhs	0x1184 <FaultDump+0x188> @ imm = #0xc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:500
;                 printf("    %08" PRIX32, *vp);
    1176: 693b         	ldr	r3, [r7, #0x10]
    1178: 681b         	ldr	r3, [r3]
    117a: 4619         	mov	r1, r3
    117c: 4839         	ldr	r0, [pc, #0xe4]         @ 0x1264 <FaultDump+0x268>
    117e: f007 fcc3    	bl	0x8b08 <printf>         @ imm = #0x7986
    1182: e002         	b	0x118a <FaultDump+0x18e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:503
;                 printf("            ");
    1184: 4838         	ldr	r0, [pc, #0xe0]         @ 0x1268 <FaultDump+0x26c>
    1186: f007 fcbf    	bl	0x8b08 <printf>         @ imm = #0x797e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:498
;         for (uint32_t *vp = p; vp < p + VALUES_PER_LINE; vp++) {
    118a: 693b         	ldr	r3, [r7, #0x10]
    118c: 3304         	adds	r3, #0x4
    118e: 613b         	str	r3, [r7, #0x10]
    1190: 697b         	ldr	r3, [r7, #0x14]
    1192: 3310         	adds	r3, #0x10
    1194: 693a         	ldr	r2, [r7, #0x10]
    1196: 429a         	cmp	r2, r3
    1198: d3e5         	blo	0x1166 <FaultDump+0x16a> @ imm = #-0x36
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:506
;         printf("    ");
    119a: 4834         	ldr	r0, [pc, #0xd0]         @ 0x126c <FaultDump+0x270>
    119c: f007 fcb4    	bl	0x8b08 <printf>         @ imm = #0x7968
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:509
;         for (char *cp = (char *)p; cp < (char *)p + VALUES_PER_LINE * BYTES_IN_VALUE; cp++) {
    11a0: 697b         	ldr	r3, [r7, #0x14]
    11a2: 60fb         	str	r3, [r7, #0xc]
    11a4: e01f         	b	0x11e6 <FaultDump+0x1ea> @ imm = #0x3e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:510
;             if (cp >= (char*)stack_point && cp < (char*)stack_top) {
    11a6: 68bb         	ldr	r3, [r7, #0x8]
    11a8: 68fa         	ldr	r2, [r7, #0xc]
    11aa: 429a         	cmp	r2, r3
    11ac: d315         	blo	0x11da <FaultDump+0x1de> @ imm = #0x2a
    11ae: 69bb         	ldr	r3, [r7, #0x18]
    11b0: 68fa         	ldr	r2, [r7, #0xc]
    11b2: 429a         	cmp	r2, r3
    11b4: d211         	bhs	0x11da <FaultDump+0x1de> @ imm = #0x22
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:512
;                 if(*cp > 31 && *cp < 127) {
    11b6: 68fb         	ldr	r3, [r7, #0xc]
    11b8: 781b         	ldrb	r3, [r3]
    11ba: 2b1f         	cmp	r3, #0x1f
    11bc: d909         	bls	0x11d2 <FaultDump+0x1d6> @ imm = #0x12
    11be: 68fb         	ldr	r3, [r7, #0xc]
    11c0: 781b         	ldrb	r3, [r3]
    11c2: 2b7e         	cmp	r3, #0x7e
    11c4: d805         	bhi	0x11d2 <FaultDump+0x1d6> @ imm = #0xa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:513
;                     putchar(*cp);
    11c6: 68fb         	ldr	r3, [r7, #0xc]
    11c8: 781b         	ldrb	r3, [r3]
    11ca: 4618         	mov	r0, r3
    11cc: f007 fcb0    	bl	0x8b30 <putchar>        @ imm = #0x7960
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:512
;                 if(*cp > 31 && *cp < 127) {
    11d0: e006         	b	0x11e0 <FaultDump+0x1e4> @ imm = #0xc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:516
;                     putchar('.');
    11d2: 202e         	movs	r0, #0x2e
    11d4: f007 fcac    	bl	0x8b30 <putchar>        @ imm = #0x7958
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:512
;                 if(*cp > 31 && *cp < 127) {
    11d8: e002         	b	0x11e0 <FaultDump+0x1e4> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:520
;                 putchar(' ');
    11da: 2020         	movs	r0, #0x20
    11dc: f007 fca8    	bl	0x8b30 <putchar>        @ imm = #0x7950
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:509
;         for (char *cp = (char *)p; cp < (char *)p + VALUES_PER_LINE * BYTES_IN_VALUE; cp++) {
    11e0: 68fb         	ldr	r3, [r7, #0xc]
    11e2: 3301         	adds	r3, #0x1
    11e4: 60fb         	str	r3, [r7, #0xc]
    11e6: 697b         	ldr	r3, [r7, #0x14]
    11e8: 3310         	adds	r3, #0x10
    11ea: 68fa         	ldr	r2, [r7, #0xc]
    11ec: 429a         	cmp	r2, r3
    11ee: d3da         	blo	0x11a6 <FaultDump+0x1aa> @ imm = #-0x4c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:523
;         printf("\n");
    11f0: 200a         	movs	r0, #0xa
    11f2: f007 fc9d    	bl	0x8b30 <putchar>        @ imm = #0x793a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:494
;     for (uint32_t *p = (uint32_t *)loop_start; p < ((uint32_t *)loop_start + STACK_DUMP_MAX_LINES * VALUES_PER_LINE) && p < (uint32_t *)stack_top; p += VALUES_PER_LINE) {
    11f6: 697b         	ldr	r3, [r7, #0x14]
    11f8: 3310         	adds	r3, #0x10
    11fa: 617b         	str	r3, [r7, #0x14]
    11fc: 687b         	ldr	r3, [r7, #0x4]
    11fe: f503 73a0    	add.w	r3, r3, #0x140
    1202: 461a         	mov	r2, r3
    1204: 697b         	ldr	r3, [r7, #0x14]
    1206: 4293         	cmp	r3, r2
    1208: d300         	blo	0x120c <FaultDump+0x210> @ imm = #0x0
    120a: e003         	b	0x1214 <FaultDump+0x218> @ imm = #0x6
    120c: 69bb         	ldr	r3, [r7, #0x18]
    120e: 697a         	ldr	r2, [r7, #0x14]
    1210: 429a         	cmp	r2, r3
    1212: d3a0         	blo	0x1156 <FaultDump+0x15a> @ imm = #-0xc0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/common_app_utils/fault_handler/fault_handler.c:527
;         __WFE();
    1214: bf20         	wfe
    1216: e7fd         	b	0x1214 <FaultDump+0x218> @ imm = #-0x6
    1218: b8 11 00 20  	.word	0x200011b8
    121c: b8 1a 21 80  	.word	0x80211ab8
    1220: 34 19 21 80  	.word	0x80211934
    1224: bc 11 00 20  	.word	0x200011bc
    1228: c0 11 00 20  	.word	0x200011c0
    122c: 50 19 21 80  	.word	0x80211950
    1230: 8c 19 21 80  	.word	0x8021198c
    1234: 9c 19 21 80  	.word	0x8021199c
    1238: c4 19 21 80  	.word	0x802119c4
    123c: cc 19 21 80  	.word	0x802119cc
    1240: d4 19 21 80  	.word	0x802119d4
    1244: d0 1a 21 80  	.word	0x80211ad0
    1248: ec 19 21 80  	.word	0x802119ec
    124c: fc 19 21 80  	.word	0x802119fc
    1250: 00 ed 00 e0  	.word	0xe000ed00
    1254: 0c 1a 21 80  	.word	0x80211a0c
    1258: 28 1a 21 80  	.word	0x80211a28
    125c: 40 1a 21 80  	.word	0x80211a40
    1260: 8c 1a 21 80  	.word	0x80211a8c
    1264: 94 1a 21 80  	.word	0x80211a94
    1268: a0 1a 21 80  	.word	0x80211aa0
    126c: b0 1a 21 80  	.word	0x80211ab0
    1270: d0 11 00 20  	.word	0x200011d0
    1274: 98 1d 00 20  	.word	0x20001d98
    1278: b8 0d 00 20  	.word	0x20000db8

0000127c <_DoInit>:
; _DoInit():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:303
; static void _DoInit(void) {
    127c: b580         	push	{r7, lr}
    127e: b082         	sub	sp, #0x8
    1280: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:310
;   p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1282: 4b26         	ldr	r3, [pc, #0x98]         @ 0x131c <_DoInit+0xa0>
    1284: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:311
;   memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1286: 22a8         	movs	r2, #0xa8
    1288: 2100         	movs	r1, #0x0
    128a: 6838         	ldr	r0, [r7]
    128c: f007 fd8c    	bl	0x8da8 <memset>         @ imm = #0x7b18
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:312
;   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1290: 683b         	ldr	r3, [r7]
    1292: 2203         	movs	r2, #0x3
    1294: 611a         	str	r2, [r3, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:313
;   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1296: 683b         	ldr	r3, [r7]
    1298: 2203         	movs	r2, #0x3
    129a: 615a         	str	r2, [r3, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:317
;   p->aUp[0].sName         = "Terminal";
    129c: 683b         	ldr	r3, [r7]
    129e: 4a20         	ldr	r2, [pc, #0x80]         @ 0x1320 <_DoInit+0xa4>
    12a0: 619a         	str	r2, [r3, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:318
;   p->aUp[0].pBuffer       = _acUpBuffer;
    12a2: 683b         	ldr	r3, [r7]
    12a4: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x1324 <_DoInit+0xa8>
    12a6: 61da         	str	r2, [r3, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:319
;   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    12a8: 683b         	ldr	r3, [r7]
    12aa: f44f 6280    	mov.w	r2, #0x400
    12ae: 621a         	str	r2, [r3, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:320
;   p->aUp[0].RdOff         = 0u;
    12b0: 683b         	ldr	r3, [r7]
    12b2: 2200         	movs	r2, #0x0
    12b4: 629a         	str	r2, [r3, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:321
;   p->aUp[0].WrOff         = 0u;
    12b6: 683b         	ldr	r3, [r7]
    12b8: 2200         	movs	r2, #0x0
    12ba: 625a         	str	r2, [r3, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:322
;   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12bc: 683b         	ldr	r3, [r7]
    12be: 2200         	movs	r2, #0x0
    12c0: 62da         	str	r2, [r3, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:326
;   p->aDown[0].sName         = "Terminal";
    12c2: 683b         	ldr	r3, [r7]
    12c4: 4a16         	ldr	r2, [pc, #0x58]         @ 0x1320 <_DoInit+0xa4>
    12c6: 661a         	str	r2, [r3, #0x60]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:327
;   p->aDown[0].pBuffer       = _acDownBuffer;
    12c8: 683b         	ldr	r3, [r7]
    12ca: 4a17         	ldr	r2, [pc, #0x5c]         @ 0x1328 <_DoInit+0xac>
    12cc: 665a         	str	r2, [r3, #0x64]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:328
;   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    12ce: 683b         	ldr	r3, [r7]
    12d0: 2210         	movs	r2, #0x10
    12d2: 669a         	str	r2, [r3, #0x68]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:329
;   p->aDown[0].RdOff         = 0u;
    12d4: 683b         	ldr	r3, [r7]
    12d6: 2200         	movs	r2, #0x0
    12d8: 671a         	str	r2, [r3, #0x70]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:330
;   p->aDown[0].WrOff         = 0u;
    12da: 683b         	ldr	r3, [r7]
    12dc: 2200         	movs	r2, #0x0
    12de: 66da         	str	r2, [r3, #0x6c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:331
;   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12e0: 683b         	ldr	r3, [r7]
    12e2: 2200         	movs	r2, #0x0
    12e4: 675a         	str	r2, [r3, #0x74]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:337
;   RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    12e6: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:338
;   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    12ea: 2300         	movs	r3, #0x0
    12ec: 607b         	str	r3, [r7, #0x4]
    12ee: e00c         	b	0x130a <_DoInit+0x8e>   @ imm = #0x18
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:339
;     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    12f0: 687b         	ldr	r3, [r7, #0x4]
    12f2: f1c3 030f    	rsb.w	r3, r3, #0xf
    12f6: 4a0d         	ldr	r2, [pc, #0x34]         @ 0x132c <_DoInit+0xb0>
    12f8: 5cd1         	ldrb	r1, [r2, r3]
    12fa: 683a         	ldr	r2, [r7]
    12fc: 687b         	ldr	r3, [r7, #0x4]
    12fe: 4413         	add	r3, r2
    1300: 460a         	mov	r2, r1
    1302: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:338
;   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1304: 687b         	ldr	r3, [r7, #0x4]
    1306: 3301         	adds	r3, #0x1
    1308: 607b         	str	r3, [r7, #0x4]
    130a: 687b         	ldr	r3, [r7, #0x4]
    130c: 2b0f         	cmp	r3, #0xf
    130e: d9ef         	bls	0x12f0 <_DoInit+0x74>   @ imm = #-0x22
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:341
;   RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1310: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:342
; }
    1314: bf00         	nop
    1316: 3708         	adds	r7, #0x8
    1318: 46bd         	mov	sp, r7
    131a: bd80         	pop	{r7, pc}
    131c: 08 12 00 20  	.word	0x20001208
    1320: ec 1c 21 80  	.word	0x80211cec
    1324: b0 12 00 20  	.word	0x200012b0
    1328: b0 16 00 20  	.word	0x200016b0
    132c: f8 1c 21 80  	.word	0x80211cf8

00001330 <_WriteBlocking>:
; _WriteBlocking():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:363
; static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1330: b580         	push	{r7, lr}
    1332: b08a         	sub	sp, #0x28
    1334: af00         	add	r7, sp, #0x0
    1336: 60f8         	str	r0, [r7, #0xc]
    1338: 60b9         	str	r1, [r7, #0x8]
    133a: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:372
;   NumBytesWritten = 0u;
    133c: 2300         	movs	r3, #0x0
    133e: 623b         	str	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:373
;   WrOff = pRing->WrOff;
    1340: 68fb         	ldr	r3, [r7, #0xc]
    1342: 68db         	ldr	r3, [r3, #0xc]
    1344: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:375
;     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1346: 68fb         	ldr	r3, [r7, #0xc]
    1348: 691b         	ldr	r3, [r3, #0x10]
    134a: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:376
;     if (RdOff > WrOff) {
    134c: 69ba         	ldr	r2, [r7, #0x18]
    134e: 69fb         	ldr	r3, [r7, #0x1c]
    1350: 429a         	cmp	r2, r3
    1352: d905         	bls	0x1360 <_WriteBlocking+0x30> @ imm = #0xa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:377
;       NumBytesToWrite = RdOff - WrOff - 1u;
    1354: 69ba         	ldr	r2, [r7, #0x18]
    1356: 69fb         	ldr	r3, [r7, #0x1c]
    1358: 1ad3         	subs	r3, r2, r3
    135a: 3b01         	subs	r3, #0x1
    135c: 627b         	str	r3, [r7, #0x24]
    135e: e007         	b	0x1370 <_WriteBlocking+0x40> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:379
;       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1360: 68fb         	ldr	r3, [r7, #0xc]
    1362: 689a         	ldr	r2, [r3, #0x8]
    1364: 69b9         	ldr	r1, [r7, #0x18]
    1366: 69fb         	ldr	r3, [r7, #0x1c]
    1368: 1acb         	subs	r3, r1, r3
    136a: 4413         	add	r3, r2
    136c: 3b01         	subs	r3, #0x1
    136e: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:381
;     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1370: 68fb         	ldr	r3, [r7, #0xc]
    1372: 689a         	ldr	r2, [r3, #0x8]
    1374: 69fb         	ldr	r3, [r7, #0x1c]
    1376: 1ad3         	subs	r3, r2, r3
    1378: 6a7a         	ldr	r2, [r7, #0x24]
    137a: 4293         	cmp	r3, r2
    137c: bf28         	it	hs
    137e: 4613         	movhs	r3, r2
    1380: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:382
;     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1382: 6a7a         	ldr	r2, [r7, #0x24]
    1384: 687b         	ldr	r3, [r7, #0x4]
    1386: 4293         	cmp	r3, r2
    1388: bf28         	it	hs
    138a: 4613         	movhs	r3, r2
    138c: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:383
;     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    138e: 68fb         	ldr	r3, [r7, #0xc]
    1390: 685a         	ldr	r2, [r3, #0x4]
    1392: 69fb         	ldr	r3, [r7, #0x1c]
    1394: 4413         	add	r3, r2
    1396: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:392
;     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    1398: 6a7a         	ldr	r2, [r7, #0x24]
    139a: 68b9         	ldr	r1, [r7, #0x8]
    139c: 6978         	ldr	r0, [r7, #0x14]
    139e: f007 fdc5    	bl	0x8f2c <memcpy>         @ imm = #0x7b8a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:393
;     NumBytesWritten += NumBytesToWrite;
    13a2: 6a3a         	ldr	r2, [r7, #0x20]
    13a4: 6a7b         	ldr	r3, [r7, #0x24]
    13a6: 4413         	add	r3, r2
    13a8: 623b         	str	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:394
;     pBuffer         += NumBytesToWrite;
    13aa: 68ba         	ldr	r2, [r7, #0x8]
    13ac: 6a7b         	ldr	r3, [r7, #0x24]
    13ae: 4413         	add	r3, r2
    13b0: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:395
;     NumBytes        -= NumBytesToWrite;
    13b2: 687a         	ldr	r2, [r7, #0x4]
    13b4: 6a7b         	ldr	r3, [r7, #0x24]
    13b6: 1ad3         	subs	r3, r2, r3
    13b8: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:396
;     WrOff           += NumBytesToWrite;
    13ba: 69fa         	ldr	r2, [r7, #0x1c]
    13bc: 6a7b         	ldr	r3, [r7, #0x24]
    13be: 4413         	add	r3, r2
    13c0: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:398
;     if (WrOff == pRing->SizeOfBuffer) {
    13c2: 68fb         	ldr	r3, [r7, #0xc]
    13c4: 689b         	ldr	r3, [r3, #0x8]
    13c6: 69fa         	ldr	r2, [r7, #0x1c]
    13c8: 429a         	cmp	r2, r3
    13ca: d101         	bne	0x13d0 <_WriteBlocking+0xa0> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:399
;       WrOff = 0u;
    13cc: 2300         	movs	r3, #0x0
    13ce: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:401
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    13d0: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:402
;     pRing->WrOff = WrOff;
    13d4: 68fb         	ldr	r3, [r7, #0xc]
    13d6: 69fa         	ldr	r2, [r7, #0x1c]
    13d8: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:403
;   } while (NumBytes);
    13da: 687b         	ldr	r3, [r7, #0x4]
    13dc: 2b00         	cmp	r3, #0x0
    13de: d1b2         	bne	0x1346 <_WriteBlocking+0x16> @ imm = #-0x9c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:404
;   return NumBytesWritten;
    13e0: 6a3b         	ldr	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:405
; }
    13e2: 4618         	mov	r0, r3
    13e4: 3728         	adds	r7, #0x28
    13e6: 46bd         	mov	sp, r7
    13e8: bd80         	pop	{r7, pc}

000013ea <_WriteNoCheck>:
; _WriteNoCheck():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:425
; static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13ea: b580         	push	{r7, lr}
    13ec: b088         	sub	sp, #0x20
    13ee: af00         	add	r7, sp, #0x0
    13f0: 60f8         	str	r0, [r7, #0xc]
    13f2: 60b9         	str	r1, [r7, #0x8]
    13f4: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:431
;   WrOff = pRing->WrOff;
    13f6: 68fb         	ldr	r3, [r7, #0xc]
    13f8: 68db         	ldr	r3, [r3, #0xc]
    13fa: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:432
;   Rem = pRing->SizeOfBuffer - WrOff;
    13fc: 68fb         	ldr	r3, [r7, #0xc]
    13fe: 689a         	ldr	r2, [r3, #0x8]
    1400: 69fb         	ldr	r3, [r7, #0x1c]
    1402: 1ad3         	subs	r3, r2, r3
    1404: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:433
;   if (Rem > NumBytes) {
    1406: 69ba         	ldr	r2, [r7, #0x18]
    1408: 687b         	ldr	r3, [r7, #0x4]
    140a: 429a         	cmp	r2, r3
    140c: d911         	bls	0x1432 <_WriteNoCheck+0x48> @ imm = #0x22
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:437
;     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    140e: 68fb         	ldr	r3, [r7, #0xc]
    1410: 685a         	ldr	r2, [r3, #0x4]
    1412: 69fb         	ldr	r3, [r7, #0x1c]
    1414: 4413         	add	r3, r2
    1416: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:446
;     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1418: 687a         	ldr	r2, [r7, #0x4]
    141a: 68b9         	ldr	r1, [r7, #0x8]
    141c: 6938         	ldr	r0, [r7, #0x10]
    141e: f007 fd85    	bl	0x8f2c <memcpy>         @ imm = #0x7b0a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:447
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1422: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:448
;     pRing->WrOff = WrOff + NumBytes;
    1426: 69fa         	ldr	r2, [r7, #0x1c]
    1428: 687b         	ldr	r3, [r7, #0x4]
    142a: 441a         	add	r2, r3
    142c: 68fb         	ldr	r3, [r7, #0xc]
    142e: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:478
; }
    1430: e01f         	b	0x1472 <_WriteNoCheck+0x88> @ imm = #0x3e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:468
;     NumBytesAtOnce = Rem;
    1432: 69bb         	ldr	r3, [r7, #0x18]
    1434: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:469
;     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1436: 68fb         	ldr	r3, [r7, #0xc]
    1438: 685a         	ldr	r2, [r3, #0x4]
    143a: 69fb         	ldr	r3, [r7, #0x1c]
    143c: 4413         	add	r3, r2
    143e: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:470
;     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1440: 697a         	ldr	r2, [r7, #0x14]
    1442: 68b9         	ldr	r1, [r7, #0x8]
    1444: 6938         	ldr	r0, [r7, #0x10]
    1446: f007 fd71    	bl	0x8f2c <memcpy>         @ imm = #0x7ae2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:471
;     NumBytesAtOnce = NumBytes - Rem;
    144a: 687a         	ldr	r2, [r7, #0x4]
    144c: 69bb         	ldr	r3, [r7, #0x18]
    144e: 1ad3         	subs	r3, r2, r3
    1450: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:472
;     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1452: 68fb         	ldr	r3, [r7, #0xc]
    1454: 685b         	ldr	r3, [r3, #0x4]
    1456: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:473
;     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1458: 68ba         	ldr	r2, [r7, #0x8]
    145a: 69bb         	ldr	r3, [r7, #0x18]
    145c: 4413         	add	r3, r2
    145e: 697a         	ldr	r2, [r7, #0x14]
    1460: 4619         	mov	r1, r3
    1462: 6938         	ldr	r0, [r7, #0x10]
    1464: f007 fd62    	bl	0x8f2c <memcpy>         @ imm = #0x7ac4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:474
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1468: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:475
;     pRing->WrOff = NumBytesAtOnce;
    146c: 68fb         	ldr	r3, [r7, #0xc]
    146e: 697a         	ldr	r2, [r7, #0x14]
    1470: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:478
; }
    1472: bf00         	nop
    1474: 3720         	adds	r7, #0x20
    1476: 46bd         	mov	sp, r7
    1478: bd80         	pop	{r7, pc}

0000147a <_PostTerminalSwitch>:
; _PostTerminalSwitch():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:493
; static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
    147a: b580         	push	{r7, lr}
    147c: b084         	sub	sp, #0x10
    147e: af00         	add	r7, sp, #0x0
    1480: 6078         	str	r0, [r7, #0x4]
    1482: 460b         	mov	r3, r1
    1484: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:496
;   ac[0] = 0xFFu;
    1486: 23ff         	movs	r3, #0xff
    1488: 733b         	strb	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:497
;   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed our terminal limit
    148a: 78fb         	ldrb	r3, [r7, #0x3]
    148c: 4a06         	ldr	r2, [pc, #0x18]         @ 0x14a8 <_PostTerminalSwitch+0x2e>
    148e: 5cd3         	ldrb	r3, [r2, r3]
    1490: 737b         	strb	r3, [r7, #0xd]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:498
;   _WriteBlocking(pRing, (const char*)ac, 2u);
    1492: f107 030c    	add.w	r3, r7, #0xc
    1496: 2202         	movs	r2, #0x2
    1498: 4619         	mov	r1, r3
    149a: 6878         	ldr	r0, [r7, #0x4]
    149c: f7ff ff48    	bl	0x1330 <_WriteBlocking> @ imm = #-0x170
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:499
; }
    14a0: bf00         	nop
    14a2: 3710         	adds	r7, #0x10
    14a4: 46bd         	mov	sp, r7
    14a6: bd80         	pop	{r7, pc}
    14a8: dc 1c 21 80  	.word	0x80211cdc

000014ac <_GetAvailWriteSpace>:
; _GetAvailWriteSpace():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:515
; static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    14ac: b480         	push	{r7}
    14ae: b087         	sub	sp, #0x1c
    14b0: af00         	add	r7, sp, #0x0
    14b2: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:523
;   RdOff = pRing->RdOff;
    14b4: 687b         	ldr	r3, [r7, #0x4]
    14b6: 691b         	ldr	r3, [r3, #0x10]
    14b8: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:524
;   WrOff = pRing->WrOff;
    14ba: 687b         	ldr	r3, [r7, #0x4]
    14bc: 68db         	ldr	r3, [r3, #0xc]
    14be: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:525
;   if (RdOff <= WrOff) {
    14c0: 693a         	ldr	r2, [r7, #0x10]
    14c2: 68fb         	ldr	r3, [r7, #0xc]
    14c4: 429a         	cmp	r2, r3
    14c6: d808         	bhi	0x14da <_GetAvailWriteSpace+0x2e> @ imm = #0x10
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:526
;     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    14c8: 687b         	ldr	r3, [r7, #0x4]
    14ca: 689a         	ldr	r2, [r3, #0x8]
    14cc: 68fb         	ldr	r3, [r7, #0xc]
    14ce: 1ad2         	subs	r2, r2, r3
    14d0: 693b         	ldr	r3, [r7, #0x10]
    14d2: 4413         	add	r3, r2
    14d4: 3b01         	subs	r3, #0x1
    14d6: 617b         	str	r3, [r7, #0x14]
    14d8: e004         	b	0x14e4 <_GetAvailWriteSpace+0x38> @ imm = #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:528
;     r = RdOff - WrOff - 1u;
    14da: 693a         	ldr	r2, [r7, #0x10]
    14dc: 68fb         	ldr	r3, [r7, #0xc]
    14de: 1ad3         	subs	r3, r2, r3
    14e0: 3b01         	subs	r3, #0x1
    14e2: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:530
;   return r;
    14e4: 697b         	ldr	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:531
; }
    14e6: 4618         	mov	r0, r3
    14e8: 371c         	adds	r7, #0x1c
    14ea: 46bd         	mov	sp, r7
    14ec: f85d 7b04    	ldr	r7, [sp], #4
    14f0: 4770         	bx	lr

000014f2 <SEGGER_RTT_ReadUpBufferNoLock>:
; SEGGER_RTT_ReadUpBufferNoLock():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:562
; unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
    14f2: b580         	push	{r7, lr}
    14f4: b08c         	sub	sp, #0x30
    14f6: af00         	add	r7, sp, #0x0
    14f8: 60f8         	str	r0, [r7, #0xc]
    14fa: 60b9         	str	r1, [r7, #0x8]
    14fc: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:571
;   INIT();
    14fe: 4b3f         	ldr	r3, [pc, #0xfc]         @ 0x15fc <SEGGER_RTT_ReadUpBufferNoLock+0x10a>
    1500: 623b         	str	r3, [r7, #0x20]
    1502: 6a3b         	ldr	r3, [r7, #0x20]
    1504: 781b         	ldrb	r3, [r3]
    1506: b2db         	uxtb	r3, r3
    1508: 2b53         	cmp	r3, #0x53
    150a: d001         	beq	0x1510 <SEGGER_RTT_ReadUpBufferNoLock+0x1e> @ imm = #0x2
    150c: f7ff feb6    	bl	0x127c <_DoInit>        @ imm = #-0x294
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:572
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1510: 68fb         	ldr	r3, [r7, #0xc]
    1512: 1c5a         	adds	r2, r3, #0x1
    1514: 4613         	mov	r3, r2
    1516: 005b         	lsls	r3, r3, #0x1
    1518: 4413         	add	r3, r2
    151a: 00db         	lsls	r3, r3, #0x3
    151c: 4a37         	ldr	r2, [pc, #0xdc]         @ 0x15fc <SEGGER_RTT_ReadUpBufferNoLock+0x10a>
    151e: 4413         	add	r3, r2
    1520: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:573
;   pBuffer = (unsigned char*)pData;
    1522: 68bb         	ldr	r3, [r7, #0x8]
    1524: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:574
;   RdOff = pRing->RdOff;
    1526: 69fb         	ldr	r3, [r7, #0x1c]
    1528: 691b         	ldr	r3, [r3, #0x10]
    152a: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:575
;   WrOff = pRing->WrOff;
    152c: 69fb         	ldr	r3, [r7, #0x1c]
    152e: 68db         	ldr	r3, [r3, #0xc]
    1530: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:576
;   NumBytesRead = 0u;
    1532: 2300         	movs	r3, #0x0
    1534: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:580
;   if (RdOff > WrOff) {
    1536: 6aba         	ldr	r2, [r7, #0x28]
    1538: 69bb         	ldr	r3, [r7, #0x18]
    153a: 429a         	cmp	r2, r3
    153c: d92b         	bls	0x1596 <SEGGER_RTT_ReadUpBufferNoLock+0xa4> @ imm = #0x56
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:581
;     NumBytesRem = pRing->SizeOfBuffer - RdOff;
    153e: 69fb         	ldr	r3, [r7, #0x1c]
    1540: 689a         	ldr	r2, [r3, #0x8]
    1542: 6abb         	ldr	r3, [r7, #0x28]
    1544: 1ad3         	subs	r3, r2, r3
    1546: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:582
;     NumBytesRem = MIN(NumBytesRem, BufferSize);
    1548: 697a         	ldr	r2, [r7, #0x14]
    154a: 687b         	ldr	r3, [r7, #0x4]
    154c: 4293         	cmp	r3, r2
    154e: bf28         	it	hs
    1550: 4613         	movhs	r3, r2
    1552: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:583
;     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
    1554: 69fb         	ldr	r3, [r7, #0x1c]
    1556: 685a         	ldr	r2, [r3, #0x4]
    1558: 6abb         	ldr	r3, [r7, #0x28]
    155a: 4413         	add	r3, r2
    155c: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:592
;     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
    155e: 697a         	ldr	r2, [r7, #0x14]
    1560: 6939         	ldr	r1, [r7, #0x10]
    1562: 6a78         	ldr	r0, [r7, #0x24]
    1564: f007 fce2    	bl	0x8f2c <memcpy>         @ imm = #0x79c4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:593
;     NumBytesRead += NumBytesRem;
    1568: 6afa         	ldr	r2, [r7, #0x2c]
    156a: 697b         	ldr	r3, [r7, #0x14]
    156c: 4413         	add	r3, r2
    156e: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:594
;     pBuffer      += NumBytesRem;
    1570: 6a7a         	ldr	r2, [r7, #0x24]
    1572: 697b         	ldr	r3, [r7, #0x14]
    1574: 4413         	add	r3, r2
    1576: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:595
;     BufferSize   -= NumBytesRem;
    1578: 687a         	ldr	r2, [r7, #0x4]
    157a: 697b         	ldr	r3, [r7, #0x14]
    157c: 1ad3         	subs	r3, r2, r3
    157e: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:596
;     RdOff        += NumBytesRem;
    1580: 6aba         	ldr	r2, [r7, #0x28]
    1582: 697b         	ldr	r3, [r7, #0x14]
    1584: 4413         	add	r3, r2
    1586: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:601
;     if (RdOff == pRing->SizeOfBuffer) {
    1588: 69fb         	ldr	r3, [r7, #0x1c]
    158a: 689b         	ldr	r3, [r3, #0x8]
    158c: 6aba         	ldr	r2, [r7, #0x28]
    158e: 429a         	cmp	r2, r3
    1590: d101         	bne	0x1596 <SEGGER_RTT_ReadUpBufferNoLock+0xa4> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:602
;       RdOff = 0u;
    1592: 2300         	movs	r3, #0x0
    1594: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:608
;   NumBytesRem = WrOff - RdOff;
    1596: 69ba         	ldr	r2, [r7, #0x18]
    1598: 6abb         	ldr	r3, [r7, #0x28]
    159a: 1ad3         	subs	r3, r2, r3
    159c: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:609
;   NumBytesRem = MIN(NumBytesRem, BufferSize);
    159e: 697a         	ldr	r2, [r7, #0x14]
    15a0: 687b         	ldr	r3, [r7, #0x4]
    15a2: 4293         	cmp	r3, r2
    15a4: bf28         	it	hs
    15a6: 4613         	movhs	r3, r2
    15a8: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:610
;   if (NumBytesRem > 0u) {
    15aa: 697b         	ldr	r3, [r7, #0x14]
    15ac: 2b00         	cmp	r3, #0x0
    15ae: d019         	beq	0x15e4 <SEGGER_RTT_ReadUpBufferNoLock+0xf2> @ imm = #0x32
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:611
;     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
    15b0: 69fb         	ldr	r3, [r7, #0x1c]
    15b2: 685a         	ldr	r2, [r3, #0x4]
    15b4: 6abb         	ldr	r3, [r7, #0x28]
    15b6: 4413         	add	r3, r2
    15b8: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:620
;     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
    15ba: 697a         	ldr	r2, [r7, #0x14]
    15bc: 6939         	ldr	r1, [r7, #0x10]
    15be: 6a78         	ldr	r0, [r7, #0x24]
    15c0: f007 fcb4    	bl	0x8f2c <memcpy>         @ imm = #0x7968
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:621
;     NumBytesRead += NumBytesRem;
    15c4: 6afa         	ldr	r2, [r7, #0x2c]
    15c6: 697b         	ldr	r3, [r7, #0x14]
    15c8: 4413         	add	r3, r2
    15ca: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:622
;     pBuffer      += NumBytesRem;
    15cc: 6a7a         	ldr	r2, [r7, #0x24]
    15ce: 697b         	ldr	r3, [r7, #0x14]
    15d0: 4413         	add	r3, r2
    15d2: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:623
;     BufferSize   -= NumBytesRem;
    15d4: 687a         	ldr	r2, [r7, #0x4]
    15d6: 697b         	ldr	r3, [r7, #0x14]
    15d8: 1ad3         	subs	r3, r2, r3
    15da: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:624
;     RdOff        += NumBytesRem;
    15dc: 6aba         	ldr	r2, [r7, #0x28]
    15de: 697b         	ldr	r3, [r7, #0x14]
    15e0: 4413         	add	r3, r2
    15e2: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:630
;   if (NumBytesRead) {
    15e4: 6afb         	ldr	r3, [r7, #0x2c]
    15e6: 2b00         	cmp	r3, #0x0
    15e8: d002         	beq	0x15f0 <SEGGER_RTT_ReadUpBufferNoLock+0xfe> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:631
;     pRing->RdOff = RdOff;
    15ea: 69fb         	ldr	r3, [r7, #0x1c]
    15ec: 6aba         	ldr	r2, [r7, #0x28]
    15ee: 611a         	str	r2, [r3, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:634
;   return NumBytesRead;
    15f0: 6afb         	ldr	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:635
; }
    15f2: 4618         	mov	r0, r3
    15f4: 3730         	adds	r7, #0x30
    15f6: 46bd         	mov	sp, r7
    15f8: bd80         	pop	{r7, pc}
    15fa: bf00         	nop
    15fc: 08 12 00 20  	.word	0x20001208

00001600 <SEGGER_RTT_ReadNoLock>:
; SEGGER_RTT_ReadNoLock():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:654
; unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
    1600: b580         	push	{r7, lr}
    1602: b08c         	sub	sp, #0x30
    1604: af00         	add	r7, sp, #0x0
    1606: 60f8         	str	r0, [r7, #0xc]
    1608: 60b9         	str	r1, [r7, #0x8]
    160a: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:663
;   INIT();
    160c: 4b3e         	ldr	r3, [pc, #0xf8]         @ 0x1708 <SEGGER_RTT_ReadNoLock+0x108>
    160e: 623b         	str	r3, [r7, #0x20]
    1610: 6a3b         	ldr	r3, [r7, #0x20]
    1612: 781b         	ldrb	r3, [r3]
    1614: b2db         	uxtb	r3, r3
    1616: 2b53         	cmp	r3, #0x53
    1618: d001         	beq	0x161e <SEGGER_RTT_ReadNoLock+0x1e> @ imm = #0x2
    161a: f7ff fe2f    	bl	0x127c <_DoInit>        @ imm = #-0x3a2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:664
;   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    161e: 68fa         	ldr	r2, [r7, #0xc]
    1620: 4613         	mov	r3, r2
    1622: 005b         	lsls	r3, r3, #0x1
    1624: 4413         	add	r3, r2
    1626: 00db         	lsls	r3, r3, #0x3
    1628: 3360         	adds	r3, #0x60
    162a: 4a37         	ldr	r2, [pc, #0xdc]         @ 0x1708 <SEGGER_RTT_ReadNoLock+0x108>
    162c: 4413         	add	r3, r2
    162e: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:665
;   pBuffer = (unsigned char*)pData;
    1630: 68bb         	ldr	r3, [r7, #0x8]
    1632: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:666
;   RdOff = pRing->RdOff;
    1634: 69fb         	ldr	r3, [r7, #0x1c]
    1636: 691b         	ldr	r3, [r3, #0x10]
    1638: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:667
;   WrOff = pRing->WrOff;
    163a: 69fb         	ldr	r3, [r7, #0x1c]
    163c: 68db         	ldr	r3, [r3, #0xc]
    163e: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:668
;   NumBytesRead = 0u;
    1640: 2300         	movs	r3, #0x0
    1642: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:672
;   if (RdOff > WrOff) {
    1644: 6aba         	ldr	r2, [r7, #0x28]
    1646: 69bb         	ldr	r3, [r7, #0x18]
    1648: 429a         	cmp	r2, r3
    164a: d92b         	bls	0x16a4 <SEGGER_RTT_ReadNoLock+0xa4> @ imm = #0x56
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:673
;     NumBytesRem = pRing->SizeOfBuffer - RdOff;
    164c: 69fb         	ldr	r3, [r7, #0x1c]
    164e: 689a         	ldr	r2, [r3, #0x8]
    1650: 6abb         	ldr	r3, [r7, #0x28]
    1652: 1ad3         	subs	r3, r2, r3
    1654: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:674
;     NumBytesRem = MIN(NumBytesRem, BufferSize);
    1656: 697a         	ldr	r2, [r7, #0x14]
    1658: 687b         	ldr	r3, [r7, #0x4]
    165a: 4293         	cmp	r3, r2
    165c: bf28         	it	hs
    165e: 4613         	movhs	r3, r2
    1660: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:675
;     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
    1662: 69fb         	ldr	r3, [r7, #0x1c]
    1664: 685a         	ldr	r2, [r3, #0x4]
    1666: 6abb         	ldr	r3, [r7, #0x28]
    1668: 4413         	add	r3, r2
    166a: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:684
;     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
    166c: 697a         	ldr	r2, [r7, #0x14]
    166e: 6939         	ldr	r1, [r7, #0x10]
    1670: 6a78         	ldr	r0, [r7, #0x24]
    1672: f007 fc5b    	bl	0x8f2c <memcpy>         @ imm = #0x78b6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:685
;     NumBytesRead += NumBytesRem;
    1676: 6afa         	ldr	r2, [r7, #0x2c]
    1678: 697b         	ldr	r3, [r7, #0x14]
    167a: 4413         	add	r3, r2
    167c: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:686
;     pBuffer      += NumBytesRem;
    167e: 6a7a         	ldr	r2, [r7, #0x24]
    1680: 697b         	ldr	r3, [r7, #0x14]
    1682: 4413         	add	r3, r2
    1684: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:687
;     BufferSize   -= NumBytesRem;
    1686: 687a         	ldr	r2, [r7, #0x4]
    1688: 697b         	ldr	r3, [r7, #0x14]
    168a: 1ad3         	subs	r3, r2, r3
    168c: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:688
;     RdOff        += NumBytesRem;
    168e: 6aba         	ldr	r2, [r7, #0x28]
    1690: 697b         	ldr	r3, [r7, #0x14]
    1692: 4413         	add	r3, r2
    1694: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:693
;     if (RdOff == pRing->SizeOfBuffer) {
    1696: 69fb         	ldr	r3, [r7, #0x1c]
    1698: 689b         	ldr	r3, [r3, #0x8]
    169a: 6aba         	ldr	r2, [r7, #0x28]
    169c: 429a         	cmp	r2, r3
    169e: d101         	bne	0x16a4 <SEGGER_RTT_ReadNoLock+0xa4> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:694
;       RdOff = 0u;
    16a0: 2300         	movs	r3, #0x0
    16a2: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:700
;   NumBytesRem = WrOff - RdOff;
    16a4: 69ba         	ldr	r2, [r7, #0x18]
    16a6: 6abb         	ldr	r3, [r7, #0x28]
    16a8: 1ad3         	subs	r3, r2, r3
    16aa: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:701
;   NumBytesRem = MIN(NumBytesRem, BufferSize);
    16ac: 697a         	ldr	r2, [r7, #0x14]
    16ae: 687b         	ldr	r3, [r7, #0x4]
    16b0: 4293         	cmp	r3, r2
    16b2: bf28         	it	hs
    16b4: 4613         	movhs	r3, r2
    16b6: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:702
;   if (NumBytesRem > 0u) {
    16b8: 697b         	ldr	r3, [r7, #0x14]
    16ba: 2b00         	cmp	r3, #0x0
    16bc: d019         	beq	0x16f2 <SEGGER_RTT_ReadNoLock+0xf2> @ imm = #0x32
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:703
;     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
    16be: 69fb         	ldr	r3, [r7, #0x1c]
    16c0: 685a         	ldr	r2, [r3, #0x4]
    16c2: 6abb         	ldr	r3, [r7, #0x28]
    16c4: 4413         	add	r3, r2
    16c6: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:712
;     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
    16c8: 697a         	ldr	r2, [r7, #0x14]
    16ca: 6939         	ldr	r1, [r7, #0x10]
    16cc: 6a78         	ldr	r0, [r7, #0x24]
    16ce: f007 fc2d    	bl	0x8f2c <memcpy>         @ imm = #0x785a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:713
;     NumBytesRead += NumBytesRem;
    16d2: 6afa         	ldr	r2, [r7, #0x2c]
    16d4: 697b         	ldr	r3, [r7, #0x14]
    16d6: 4413         	add	r3, r2
    16d8: 62fb         	str	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:714
;     pBuffer      += NumBytesRem;
    16da: 6a7a         	ldr	r2, [r7, #0x24]
    16dc: 697b         	ldr	r3, [r7, #0x14]
    16de: 4413         	add	r3, r2
    16e0: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:715
;     BufferSize   -= NumBytesRem;
    16e2: 687a         	ldr	r2, [r7, #0x4]
    16e4: 697b         	ldr	r3, [r7, #0x14]
    16e6: 1ad3         	subs	r3, r2, r3
    16e8: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:716
;     RdOff        += NumBytesRem;
    16ea: 6aba         	ldr	r2, [r7, #0x28]
    16ec: 697b         	ldr	r3, [r7, #0x14]
    16ee: 4413         	add	r3, r2
    16f0: 62bb         	str	r3, [r7, #0x28]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:719
;   if (NumBytesRead) {
    16f2: 6afb         	ldr	r3, [r7, #0x2c]
    16f4: 2b00         	cmp	r3, #0x0
    16f6: d002         	beq	0x16fe <SEGGER_RTT_ReadNoLock+0xfe> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:720
;     pRing->RdOff = RdOff;
    16f8: 69fb         	ldr	r3, [r7, #0x1c]
    16fa: 6aba         	ldr	r2, [r7, #0x28]
    16fc: 611a         	str	r2, [r3, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:723
;   return NumBytesRead;
    16fe: 6afb         	ldr	r3, [r7, #0x2c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:724
; }
    1700: 4618         	mov	r0, r3
    1702: 3730         	adds	r7, #0x30
    1704: 46bd         	mov	sp, r7
    1706: bd80         	pop	{r7, pc}
    1708: 08 12 00 20  	.word	0x20001208

0000170c <SEGGER_RTT_ReadUpBuffer>:
; SEGGER_RTT_ReadUpBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:751
; unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
    170c: b580         	push	{r7, lr}
    170e: b086         	sub	sp, #0x18
    1710: af00         	add	r7, sp, #0x0
    1712: 60f8         	str	r0, [r7, #0xc]
    1714: 60b9         	str	r1, [r7, #0x8]
    1716: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:754
;   SEGGER_RTT_LOCK();
    1718: f3ef 8311    	mrs	r3, basepri
    171c: f04f 0120    	mov.w	r1, #0x20
    1720: f381 8811    	msr	basepri, r1
    1724: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:758
;   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
    1726: 687a         	ldr	r2, [r7, #0x4]
    1728: 68b9         	ldr	r1, [r7, #0x8]
    172a: 68f8         	ldr	r0, [r7, #0xc]
    172c: f7ff fee1    	bl	0x14f2 <SEGGER_RTT_ReadUpBufferNoLock> @ imm = #-0x23e
    1730: 6138         	str	r0, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:762
;   SEGGER_RTT_UNLOCK();
    1732: 697b         	ldr	r3, [r7, #0x14]
    1734: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:764
;   return NumBytesRead;
    1738: 693b         	ldr	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:765
; }
    173a: 4618         	mov	r0, r3
    173c: 3718         	adds	r7, #0x18
    173e: 46bd         	mov	sp, r7
    1740: bd80         	pop	{r7, pc}

00001742 <SEGGER_RTT_Read>:
; SEGGER_RTT_Read():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:783
; unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
    1742: b580         	push	{r7, lr}
    1744: b086         	sub	sp, #0x18
    1746: af00         	add	r7, sp, #0x0
    1748: 60f8         	str	r0, [r7, #0xc]
    174a: 60b9         	str	r1, [r7, #0x8]
    174c: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:786
;   SEGGER_RTT_LOCK();
    174e: f3ef 8311    	mrs	r3, basepri
    1752: f04f 0120    	mov.w	r1, #0x20
    1756: f381 8811    	msr	basepri, r1
    175a: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:790
;   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
    175c: 687a         	ldr	r2, [r7, #0x4]
    175e: 68b9         	ldr	r1, [r7, #0x8]
    1760: 68f8         	ldr	r0, [r7, #0xc]
    1762: f7ff ff4d    	bl	0x1600 <SEGGER_RTT_ReadNoLock> @ imm = #-0x166
    1766: 6138         	str	r0, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:794
;   SEGGER_RTT_UNLOCK();
    1768: 697b         	ldr	r3, [r7, #0x14]
    176a: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:796
;   return NumBytesRead;
    176e: 693b         	ldr	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:797
; }
    1770: 4618         	mov	r0, r3
    1772: 3718         	adds	r7, #0x18
    1774: 46bd         	mov	sp, r7
    1776: bd80         	pop	{r7, pc}

00001778 <SEGGER_RTT_WriteWithOverwriteNoLock>:
; SEGGER_RTT_WriteWithOverwriteNoLock():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:822
; void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1778: b580         	push	{r7, lr}
    177a: b088         	sub	sp, #0x20
    177c: af00         	add	r7, sp, #0x0
    177e: 60f8         	str	r0, [r7, #0xc]
    1780: 60b9         	str	r1, [r7, #0x8]
    1782: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:830
;   pData = (const char *)pBuffer;
    1784: 68bb         	ldr	r3, [r7, #0x8]
    1786: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:831
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1788: 68fb         	ldr	r3, [r7, #0xc]
    178a: 1c5a         	adds	r2, r3, #0x1
    178c: 4613         	mov	r3, r2
    178e: 005b         	lsls	r3, r3, #0x1
    1790: 4413         	add	r3, r2
    1792: 00db         	lsls	r3, r3, #0x3
    1794: 4a40         	ldr	r2, [pc, #0x100]        @ 0x1898 <SEGGER_RTT_WriteWithOverwriteNoLock+0x120>
    1796: 4413         	add	r3, r2
    1798: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:835
;   if (pRing->WrOff == pRing->RdOff) {
    179a: 697b         	ldr	r3, [r7, #0x14]
    179c: 68da         	ldr	r2, [r3, #0xc]
    179e: 697b         	ldr	r3, [r7, #0x14]
    17a0: 691b         	ldr	r3, [r3, #0x10]
    17a2: 429a         	cmp	r2, r3
    17a4: d104         	bne	0x17b0 <SEGGER_RTT_WriteWithOverwriteNoLock+0x38> @ imm = #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:836
;     Avail = pRing->SizeOfBuffer - 1u;
    17a6: 697b         	ldr	r3, [r7, #0x14]
    17a8: 689b         	ldr	r3, [r3, #0x8]
    17aa: 3b01         	subs	r3, #0x1
    17ac: 61bb         	str	r3, [r7, #0x18]
    17ae: e017         	b	0x17e0 <SEGGER_RTT_WriteWithOverwriteNoLock+0x68> @ imm = #0x2e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:837
;   } else if ( pRing->WrOff < pRing->RdOff) {
    17b0: 697b         	ldr	r3, [r7, #0x14]
    17b2: 68da         	ldr	r2, [r3, #0xc]
    17b4: 697b         	ldr	r3, [r7, #0x14]
    17b6: 691b         	ldr	r3, [r3, #0x10]
    17b8: 429a         	cmp	r2, r3
    17ba: d207         	bhs	0x17cc <SEGGER_RTT_WriteWithOverwriteNoLock+0x54> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:838
;     Avail = pRing->RdOff - pRing->WrOff - 1u;
    17bc: 697b         	ldr	r3, [r7, #0x14]
    17be: 691a         	ldr	r2, [r3, #0x10]
    17c0: 697b         	ldr	r3, [r7, #0x14]
    17c2: 68db         	ldr	r3, [r3, #0xc]
    17c4: 1ad3         	subs	r3, r2, r3
    17c6: 3b01         	subs	r3, #0x1
    17c8: 61bb         	str	r3, [r7, #0x18]
    17ca: e009         	b	0x17e0 <SEGGER_RTT_WriteWithOverwriteNoLock+0x68> @ imm = #0x12
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:840
;     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
    17cc: 697b         	ldr	r3, [r7, #0x14]
    17ce: 691a         	ldr	r2, [r3, #0x10]
    17d0: 697b         	ldr	r3, [r7, #0x14]
    17d2: 68db         	ldr	r3, [r3, #0xc]
    17d4: 1ad2         	subs	r2, r2, r3
    17d6: 697b         	ldr	r3, [r7, #0x14]
    17d8: 689b         	ldr	r3, [r3, #0x8]
    17da: 4413         	add	r3, r2
    17dc: 3b01         	subs	r3, #0x1
    17de: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:842
;   if (NumBytes > Avail) {
    17e0: 687a         	ldr	r2, [r7, #0x4]
    17e2: 69bb         	ldr	r3, [r7, #0x18]
    17e4: 429a         	cmp	r2, r3
    17e6: d915         	bls	0x1814 <SEGGER_RTT_WriteWithOverwriteNoLock+0x9c> @ imm = #0x2a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:843
;     pRing->RdOff += (NumBytes - Avail);
    17e8: 697b         	ldr	r3, [r7, #0x14]
    17ea: 691a         	ldr	r2, [r3, #0x10]
    17ec: 6879         	ldr	r1, [r7, #0x4]
    17ee: 69bb         	ldr	r3, [r7, #0x18]
    17f0: 1acb         	subs	r3, r1, r3
    17f2: 441a         	add	r2, r3
    17f4: 697b         	ldr	r3, [r7, #0x14]
    17f6: 611a         	str	r2, [r3, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:844
;     while (pRing->RdOff >= pRing->SizeOfBuffer) {
    17f8: e006         	b	0x1808 <SEGGER_RTT_WriteWithOverwriteNoLock+0x90> @ imm = #0xc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:845
;       pRing->RdOff -= pRing->SizeOfBuffer;
    17fa: 697b         	ldr	r3, [r7, #0x14]
    17fc: 691a         	ldr	r2, [r3, #0x10]
    17fe: 697b         	ldr	r3, [r7, #0x14]
    1800: 689b         	ldr	r3, [r3, #0x8]
    1802: 1ad2         	subs	r2, r2, r3
    1804: 697b         	ldr	r3, [r7, #0x14]
    1806: 611a         	str	r2, [r3, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:844
;     while (pRing->RdOff >= pRing->SizeOfBuffer) {
    1808: 697b         	ldr	r3, [r7, #0x14]
    180a: 691a         	ldr	r2, [r3, #0x10]
    180c: 697b         	ldr	r3, [r7, #0x14]
    180e: 689b         	ldr	r3, [r3, #0x8]
    1810: 429a         	cmp	r2, r3
    1812: d2f2         	bhs	0x17fa <SEGGER_RTT_WriteWithOverwriteNoLock+0x82> @ imm = #-0x1c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:851
;   Avail = pRing->SizeOfBuffer - pRing->WrOff;
    1814: 697b         	ldr	r3, [r7, #0x14]
    1816: 689a         	ldr	r2, [r3, #0x8]
    1818: 697b         	ldr	r3, [r7, #0x14]
    181a: 68db         	ldr	r3, [r3, #0xc]
    181c: 1ad3         	subs	r3, r2, r3
    181e: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:853
;     if (Avail > NumBytes) {
    1820: 69ba         	ldr	r2, [r7, #0x18]
    1822: 687b         	ldr	r3, [r7, #0x4]
    1824: 429a         	cmp	r2, r3
    1826: d913         	bls	0x1850 <SEGGER_RTT_WriteWithOverwriteNoLock+0xd8> @ imm = #0x26
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:857
;       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1828: 697b         	ldr	r3, [r7, #0x14]
    182a: 685a         	ldr	r2, [r3, #0x4]
    182c: 697b         	ldr	r3, [r7, #0x14]
    182e: 68db         	ldr	r3, [r3, #0xc]
    1830: 4413         	add	r3, r2
    1832: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:866
;       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1834: 687a         	ldr	r2, [r7, #0x4]
    1836: 69f9         	ldr	r1, [r7, #0x1c]
    1838: 6938         	ldr	r0, [r7, #0x10]
    183a: f007 fb77    	bl	0x8f2c <memcpy>         @ imm = #0x76ee
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:867
;       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    183e: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:868
;       pRing->WrOff += NumBytes;
    1842: 697b         	ldr	r3, [r7, #0x14]
    1844: 68da         	ldr	r2, [r3, #0xc]
    1846: 687b         	ldr	r3, [r7, #0x4]
    1848: 441a         	add	r2, r3
    184a: 697b         	ldr	r3, [r7, #0x14]
    184c: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:870
;       break;
    184e: e01f         	b	0x1890 <SEGGER_RTT_WriteWithOverwriteNoLock+0x118> @ imm = #0x3e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:875
;       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1850: 697b         	ldr	r3, [r7, #0x14]
    1852: 685a         	ldr	r2, [r3, #0x4]
    1854: 697b         	ldr	r3, [r7, #0x14]
    1856: 68db         	ldr	r3, [r3, #0xc]
    1858: 4413         	add	r3, r2
    185a: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:884
;       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
    185c: 69ba         	ldr	r2, [r7, #0x18]
    185e: 69f9         	ldr	r1, [r7, #0x1c]
    1860: 6938         	ldr	r0, [r7, #0x10]
    1862: f007 fb63    	bl	0x8f2c <memcpy>         @ imm = #0x76c6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:885
;       pData += Avail;
    1866: 69fa         	ldr	r2, [r7, #0x1c]
    1868: 69bb         	ldr	r3, [r7, #0x18]
    186a: 4413         	add	r3, r2
    186c: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:886
;       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    186e: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:887
;       pRing->WrOff = 0;
    1872: 697b         	ldr	r3, [r7, #0x14]
    1874: 2200         	movs	r2, #0x0
    1876: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:888
;       NumBytes -= Avail;
    1878: 687a         	ldr	r2, [r7, #0x4]
    187a: 69bb         	ldr	r3, [r7, #0x18]
    187c: 1ad3         	subs	r3, r2, r3
    187e: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:890
;       Avail = (pRing->SizeOfBuffer - 1);
    1880: 697b         	ldr	r3, [r7, #0x14]
    1882: 689b         	ldr	r3, [r3, #0x8]
    1884: 3b01         	subs	r3, #0x1
    1886: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:892
;   } while (NumBytes);
    1888: 687b         	ldr	r3, [r7, #0x4]
    188a: 2b00         	cmp	r3, #0x0
    188c: d1c8         	bne	0x1820 <SEGGER_RTT_WriteWithOverwriteNoLock+0xa8> @ imm = #-0x70
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:893
; }
    188e: bf00         	nop
    1890: bf00         	nop
    1892: 3720         	adds	r7, #0x20
    1894: 46bd         	mov	sp, r7
    1896: bd80         	pop	{r7, pc}
    1898: 08 12 00 20  	.word	0x20001208

0000189c <SEGGER_RTT_WriteDownBufferNoLock>:
; SEGGER_RTT_WriteDownBufferNoLock():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1014
; unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    189c: b580         	push	{r7, lr}
    189e: b088         	sub	sp, #0x20
    18a0: af00         	add	r7, sp, #0x0
    18a2: 60f8         	str	r0, [r7, #0xc]
    18a4: 60b9         	str	r1, [r7, #0x8]
    18a6: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1023
;   pData = (const char *)pBuffer;
    18a8: 68bb         	ldr	r3, [r7, #0x8]
    18aa: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1024
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    18ac: 68fa         	ldr	r2, [r7, #0xc]
    18ae: 4613         	mov	r3, r2
    18b0: 005b         	lsls	r3, r3, #0x1
    18b2: 4413         	add	r3, r2
    18b4: 00db         	lsls	r3, r3, #0x3
    18b6: 3360         	adds	r3, #0x60
    18b8: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x1938 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>
    18ba: 4413         	add	r3, r2
    18bc: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1028
;   switch (pRing->Flags) {
    18be: 697b         	ldr	r3, [r7, #0x14]
    18c0: 695b         	ldr	r3, [r3, #0x14]
    18c2: 2b02         	cmp	r3, #0x2
    18c4: d029         	beq	0x191a <SEGGER_RTT_WriteDownBufferNoLock+0x7e> @ imm = #0x52
    18c6: 2b02         	cmp	r3, #0x2
    18c8: d82e         	bhi	0x1928 <SEGGER_RTT_WriteDownBufferNoLock+0x8c> @ imm = #0x5c
    18ca: 2b00         	cmp	r3, #0x0
    18cc: d002         	beq	0x18d4 <SEGGER_RTT_WriteDownBufferNoLock+0x38> @ imm = #0x4
    18ce: 2b01         	cmp	r3, #0x1
    18d0: d013         	beq	0x18fa <SEGGER_RTT_WriteDownBufferNoLock+0x5e> @ imm = #0x26
    18d2: e029         	b	0x1928 <SEGGER_RTT_WriteDownBufferNoLock+0x8c> @ imm = #0x52
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1034
;     Avail = _GetAvailWriteSpace(pRing);
    18d4: 6978         	ldr	r0, [r7, #0x14]
    18d6: f7ff fde9    	bl	0x14ac <_GetAvailWriteSpace> @ imm = #-0x42e
    18da: 6138         	str	r0, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1035
;     if (Avail < NumBytes) {
    18dc: 693a         	ldr	r2, [r7, #0x10]
    18de: 687b         	ldr	r3, [r7, #0x4]
    18e0: 429a         	cmp	r2, r3
    18e2: d202         	bhs	0x18ea <SEGGER_RTT_WriteDownBufferNoLock+0x4e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1036
;       Status = 0u;
    18e4: 2300         	movs	r3, #0x0
    18e6: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1041
;     break;
    18e8: e021         	b	0x192e <SEGGER_RTT_WriteDownBufferNoLock+0x92> @ imm = #0x42
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1038
;       Status = NumBytes;
    18ea: 687b         	ldr	r3, [r7, #0x4]
    18ec: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1039
;       _WriteNoCheck(pRing, pData, NumBytes);
    18ee: 687a         	ldr	r2, [r7, #0x4]
    18f0: 69b9         	ldr	r1, [r7, #0x18]
    18f2: 6978         	ldr	r0, [r7, #0x14]
    18f4: f7ff fd79    	bl	0x13ea <_WriteNoCheck>  @ imm = #-0x50e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1041
;     break;
    18f8: e019         	b	0x192e <SEGGER_RTT_WriteDownBufferNoLock+0x92> @ imm = #0x32
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1046
;     Avail = _GetAvailWriteSpace(pRing);
    18fa: 6978         	ldr	r0, [r7, #0x14]
    18fc: f7ff fdd6    	bl	0x14ac <_GetAvailWriteSpace> @ imm = #-0x454
    1900: 6138         	str	r0, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1047
;     Status = Avail < NumBytes ? Avail : NumBytes;
    1902: 687a         	ldr	r2, [r7, #0x4]
    1904: 693b         	ldr	r3, [r7, #0x10]
    1906: 4293         	cmp	r3, r2
    1908: bf28         	it	hs
    190a: 4613         	movhs	r3, r2
    190c: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1048
;     _WriteNoCheck(pRing, pData, Status);
    190e: 69fa         	ldr	r2, [r7, #0x1c]
    1910: 69b9         	ldr	r1, [r7, #0x18]
    1912: 6978         	ldr	r0, [r7, #0x14]
    1914: f7ff fd69    	bl	0x13ea <_WriteNoCheck>  @ imm = #-0x52e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1049
;     break;
    1918: e009         	b	0x192e <SEGGER_RTT_WriteDownBufferNoLock+0x92> @ imm = #0x12
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1054
;     Status = _WriteBlocking(pRing, pData, NumBytes);
    191a: 687a         	ldr	r2, [r7, #0x4]
    191c: 69b9         	ldr	r1, [r7, #0x18]
    191e: 6978         	ldr	r0, [r7, #0x14]
    1920: f7ff fd06    	bl	0x1330 <_WriteBlocking> @ imm = #-0x5f4
    1924: 61f8         	str	r0, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1055
;     break;
    1926: e002         	b	0x192e <SEGGER_RTT_WriteDownBufferNoLock+0x92> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1057
;     Status = 0u;
    1928: 2300         	movs	r3, #0x0
    192a: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1058
;     break;
    192c: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1063
;   return Status;
    192e: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1064
; }
    1930: 4618         	mov	r0, r3
    1932: 3720         	adds	r7, #0x20
    1934: 46bd         	mov	sp, r7
    1936: bd80         	pop	{r7, pc}
    1938: 08 12 00 20  	.word	0x20001208

0000193c <SEGGER_RTT_WriteNoLock>:
; SEGGER_RTT_WriteNoLock():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1089
; unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    193c: b580         	push	{r7, lr}
    193e: b088         	sub	sp, #0x20
    1940: af00         	add	r7, sp, #0x0
    1942: 60f8         	str	r0, [r7, #0xc]
    1944: 60b9         	str	r1, [r7, #0x8]
    1946: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1097
;   pData = (const char *)pBuffer;
    1948: 68bb         	ldr	r3, [r7, #0x8]
    194a: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1098
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    194c: 68fb         	ldr	r3, [r7, #0xc]
    194e: 1c5a         	adds	r2, r3, #0x1
    1950: 4613         	mov	r3, r2
    1952: 005b         	lsls	r3, r3, #0x1
    1954: 4413         	add	r3, r2
    1956: 00db         	lsls	r3, r3, #0x3
    1958: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x19d8 <SEGGER_RTT_WriteNoLock+0x9c>
    195a: 4413         	add	r3, r2
    195c: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1102
;   switch (pRing->Flags) {
    195e: 697b         	ldr	r3, [r7, #0x14]
    1960: 695b         	ldr	r3, [r3, #0x14]
    1962: 2b02         	cmp	r3, #0x2
    1964: d029         	beq	0x19ba <SEGGER_RTT_WriteNoLock+0x7e> @ imm = #0x52
    1966: 2b02         	cmp	r3, #0x2
    1968: d82e         	bhi	0x19c8 <SEGGER_RTT_WriteNoLock+0x8c> @ imm = #0x5c
    196a: 2b00         	cmp	r3, #0x0
    196c: d002         	beq	0x1974 <SEGGER_RTT_WriteNoLock+0x38> @ imm = #0x4
    196e: 2b01         	cmp	r3, #0x1
    1970: d013         	beq	0x199a <SEGGER_RTT_WriteNoLock+0x5e> @ imm = #0x26
    1972: e029         	b	0x19c8 <SEGGER_RTT_WriteNoLock+0x8c> @ imm = #0x52
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1108
;     Avail = _GetAvailWriteSpace(pRing);
    1974: 6978         	ldr	r0, [r7, #0x14]
    1976: f7ff fd99    	bl	0x14ac <_GetAvailWriteSpace> @ imm = #-0x4ce
    197a: 6138         	str	r0, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1109
;     if (Avail < NumBytes) {
    197c: 693a         	ldr	r2, [r7, #0x10]
    197e: 687b         	ldr	r3, [r7, #0x4]
    1980: 429a         	cmp	r2, r3
    1982: d202         	bhs	0x198a <SEGGER_RTT_WriteNoLock+0x4e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1110
;       Status = 0u;
    1984: 2300         	movs	r3, #0x0
    1986: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1115
;     break;
    1988: e021         	b	0x19ce <SEGGER_RTT_WriteNoLock+0x92> @ imm = #0x42
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1112
;       Status = NumBytes;
    198a: 687b         	ldr	r3, [r7, #0x4]
    198c: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1113
;       _WriteNoCheck(pRing, pData, NumBytes);
    198e: 687a         	ldr	r2, [r7, #0x4]
    1990: 69b9         	ldr	r1, [r7, #0x18]
    1992: 6978         	ldr	r0, [r7, #0x14]
    1994: f7ff fd29    	bl	0x13ea <_WriteNoCheck>  @ imm = #-0x5ae
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1115
;     break;
    1998: e019         	b	0x19ce <SEGGER_RTT_WriteNoLock+0x92> @ imm = #0x32
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1120
;     Avail = _GetAvailWriteSpace(pRing);
    199a: 6978         	ldr	r0, [r7, #0x14]
    199c: f7ff fd86    	bl	0x14ac <_GetAvailWriteSpace> @ imm = #-0x4f4
    19a0: 6138         	str	r0, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1121
;     Status = Avail < NumBytes ? Avail : NumBytes;
    19a2: 687a         	ldr	r2, [r7, #0x4]
    19a4: 693b         	ldr	r3, [r7, #0x10]
    19a6: 4293         	cmp	r3, r2
    19a8: bf28         	it	hs
    19aa: 4613         	movhs	r3, r2
    19ac: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1122
;     _WriteNoCheck(pRing, pData, Status);
    19ae: 69fa         	ldr	r2, [r7, #0x1c]
    19b0: 69b9         	ldr	r1, [r7, #0x18]
    19b2: 6978         	ldr	r0, [r7, #0x14]
    19b4: f7ff fd19    	bl	0x13ea <_WriteNoCheck>  @ imm = #-0x5ce
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1123
;     break;
    19b8: e009         	b	0x19ce <SEGGER_RTT_WriteNoLock+0x92> @ imm = #0x12
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1128
;     Status = _WriteBlocking(pRing, pData, NumBytes);
    19ba: 687a         	ldr	r2, [r7, #0x4]
    19bc: 69b9         	ldr	r1, [r7, #0x18]
    19be: 6978         	ldr	r0, [r7, #0x14]
    19c0: f7ff fcb6    	bl	0x1330 <_WriteBlocking> @ imm = #-0x694
    19c4: 61f8         	str	r0, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1129
;     break;
    19c6: e002         	b	0x19ce <SEGGER_RTT_WriteNoLock+0x92> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1131
;     Status = 0u;
    19c8: 2300         	movs	r3, #0x0
    19ca: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1132
;     break;
    19cc: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1137
;   return Status;
    19ce: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1138
; }
    19d0: 4618         	mov	r0, r3
    19d2: 3720         	adds	r7, #0x20
    19d4: 46bd         	mov	sp, r7
    19d6: bd80         	pop	{r7, pc}
    19d8: 08 12 00 20  	.word	0x20001208

000019dc <SEGGER_RTT_WriteDownBuffer>:
; SEGGER_RTT_WriteDownBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1165
; unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    19dc: b580         	push	{r7, lr}
    19de: b088         	sub	sp, #0x20
    19e0: af00         	add	r7, sp, #0x0
    19e2: 60f8         	str	r0, [r7, #0xc]
    19e4: 60b9         	str	r1, [r7, #0x8]
    19e6: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1168
;   INIT();
    19e8: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x1a24 <SEGGER_RTT_WriteDownBuffer+0x48>
    19ea: 61fb         	str	r3, [r7, #0x1c]
    19ec: 69fb         	ldr	r3, [r7, #0x1c]
    19ee: 781b         	ldrb	r3, [r3]
    19f0: b2db         	uxtb	r3, r3
    19f2: 2b53         	cmp	r3, #0x53
    19f4: d001         	beq	0x19fa <SEGGER_RTT_WriteDownBuffer+0x1e> @ imm = #0x2
    19f6: f7ff fc41    	bl	0x127c <_DoInit>        @ imm = #-0x77e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1169
;   SEGGER_RTT_LOCK();
    19fa: f3ef 8311    	mrs	r3, basepri
    19fe: f04f 0120    	mov.w	r1, #0x20
    1a02: f381 8811    	msr	basepri, r1
    1a06: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1170
;   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1a08: 687a         	ldr	r2, [r7, #0x4]
    1a0a: 68b9         	ldr	r1, [r7, #0x8]
    1a0c: 68f8         	ldr	r0, [r7, #0xc]
    1a0e: f7ff ff45    	bl	0x189c <SEGGER_RTT_WriteDownBufferNoLock> @ imm = #-0x176
    1a12: 6178         	str	r0, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1171
;   SEGGER_RTT_UNLOCK();
    1a14: 69bb         	ldr	r3, [r7, #0x18]
    1a16: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1172
;   return Status;
    1a1a: 697b         	ldr	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1173
; }
    1a1c: 4618         	mov	r0, r3
    1a1e: 3720         	adds	r7, #0x20
    1a20: 46bd         	mov	sp, r7
    1a22: bd80         	pop	{r7, pc}
    1a24: 08 12 00 20  	.word	0x20001208

00001a28 <SEGGER_RTT_Write>:
; SEGGER_RTT_Write():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1194
; unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a28: b580         	push	{r7, lr}
    1a2a: b088         	sub	sp, #0x20
    1a2c: af00         	add	r7, sp, #0x0
    1a2e: 60f8         	str	r0, [r7, #0xc]
    1a30: 60b9         	str	r1, [r7, #0x8]
    1a32: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1197
;   INIT();
    1a34: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x1a70 <SEGGER_RTT_Write+0x48>
    1a36: 61fb         	str	r3, [r7, #0x1c]
    1a38: 69fb         	ldr	r3, [r7, #0x1c]
    1a3a: 781b         	ldrb	r3, [r3]
    1a3c: b2db         	uxtb	r3, r3
    1a3e: 2b53         	cmp	r3, #0x53
    1a40: d001         	beq	0x1a46 <SEGGER_RTT_Write+0x1e> @ imm = #0x2
    1a42: f7ff fc1b    	bl	0x127c <_DoInit>        @ imm = #-0x7ca
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1198
;   SEGGER_RTT_LOCK();
    1a46: f3ef 8311    	mrs	r3, basepri
    1a4a: f04f 0120    	mov.w	r1, #0x20
    1a4e: f381 8811    	msr	basepri, r1
    1a52: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1199
;   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1a54: 687a         	ldr	r2, [r7, #0x4]
    1a56: 68b9         	ldr	r1, [r7, #0x8]
    1a58: 68f8         	ldr	r0, [r7, #0xc]
    1a5a: f7ff ff6f    	bl	0x193c <SEGGER_RTT_WriteNoLock> @ imm = #-0x122
    1a5e: 6178         	str	r0, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1200
;   SEGGER_RTT_UNLOCK();
    1a60: 69bb         	ldr	r3, [r7, #0x18]
    1a62: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1201
;   return Status;
    1a66: 697b         	ldr	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1202
; }
    1a68: 4618         	mov	r0, r3
    1a6a: 3720         	adds	r7, #0x20
    1a6c: 46bd         	mov	sp, r7
    1a6e: bd80         	pop	{r7, pc}
    1a70: 08 12 00 20  	.word	0x20001208

00001a74 <SEGGER_RTT_WriteString>:
; SEGGER_RTT_WriteString():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1224
; unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
    1a74: b580         	push	{r7, lr}
    1a76: b084         	sub	sp, #0x10
    1a78: af00         	add	r7, sp, #0x0
    1a7a: 6078         	str	r0, [r7, #0x4]
    1a7c: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1227
;   Len = STRLEN(s);
    1a7e: 6838         	ldr	r0, [r7]
    1a80: f007 faca    	bl	0x9018 <strlen>         @ imm = #0x7594
    1a84: 60f8         	str	r0, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1228
;   return SEGGER_RTT_Write(BufferIndex, s, Len);
    1a86: 68fa         	ldr	r2, [r7, #0xc]
    1a88: 6839         	ldr	r1, [r7]
    1a8a: 6878         	ldr	r0, [r7, #0x4]
    1a8c: f7ff ffcc    	bl	0x1a28 <SEGGER_RTT_Write> @ imm = #-0x68
    1a90: 4603         	mov	r3, r0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1229
; }
    1a92: 4618         	mov	r0, r3
    1a94: 3710         	adds	r7, #0x10
    1a96: 46bd         	mov	sp, r7
    1a98: bd80         	pop	{r7, pc}

00001a9a <SEGGER_RTT_PutCharSkipNoLock>:
; SEGGER_RTT_PutCharSkipNoLock():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1254
; unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
    1a9a: b480         	push	{r7}
    1a9c: b087         	sub	sp, #0x1c
    1a9e: af00         	add	r7, sp, #0x0
    1aa0: 6078         	str	r0, [r7, #0x4]
    1aa2: 460b         	mov	r3, r1
    1aa4: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1262
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1aa6: 687b         	ldr	r3, [r7, #0x4]
    1aa8: 1c5a         	adds	r2, r3, #0x1
    1aaa: 4613         	mov	r3, r2
    1aac: 005b         	lsls	r3, r3, #0x1
    1aae: 4413         	add	r3, r2
    1ab0: 00db         	lsls	r3, r3, #0x3
    1ab2: 4a16         	ldr	r2, [pc, #0x58]         @ 0x1b0c <SEGGER_RTT_PutCharSkipNoLock+0x72>
    1ab4: 4413         	add	r3, r2
    1ab6: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1266
;   WrOff = pRing->WrOff + 1;
    1ab8: 68fb         	ldr	r3, [r7, #0xc]
    1aba: 68db         	ldr	r3, [r3, #0xc]
    1abc: 3301         	adds	r3, #0x1
    1abe: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1267
;   if (WrOff == pRing->SizeOfBuffer) {
    1ac0: 68fb         	ldr	r3, [r7, #0xc]
    1ac2: 689b         	ldr	r3, [r3, #0x8]
    1ac4: 697a         	ldr	r2, [r7, #0x14]
    1ac6: 429a         	cmp	r2, r3
    1ac8: d101         	bne	0x1ace <SEGGER_RTT_PutCharSkipNoLock+0x34> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1268
;     WrOff = 0;
    1aca: 2300         	movs	r3, #0x0
    1acc: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1273
;   if (WrOff != pRing->RdOff) {
    1ace: 68fb         	ldr	r3, [r7, #0xc]
    1ad0: 691b         	ldr	r3, [r3, #0x10]
    1ad2: 697a         	ldr	r2, [r7, #0x14]
    1ad4: 429a         	cmp	r2, r3
    1ad6: d010         	beq	0x1afa <SEGGER_RTT_PutCharSkipNoLock+0x60> @ imm = #0x20
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1274
;     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1ad8: 68fb         	ldr	r3, [r7, #0xc]
    1ada: 685a         	ldr	r2, [r3, #0x4]
    1adc: 68fb         	ldr	r3, [r7, #0xc]
    1ade: 68db         	ldr	r3, [r3, #0xc]
    1ae0: 4413         	add	r3, r2
    1ae2: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1275
;     *pDst = c;
    1ae4: 68bb         	ldr	r3, [r7, #0x8]
    1ae6: 78fa         	ldrb	r2, [r7, #0x3]
    1ae8: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1276
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1aea: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1277
;     pRing->WrOff = WrOff;
    1aee: 68fb         	ldr	r3, [r7, #0xc]
    1af0: 697a         	ldr	r2, [r7, #0x14]
    1af2: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1278
;     Status = 1;
    1af4: 2301         	movs	r3, #0x1
    1af6: 613b         	str	r3, [r7, #0x10]
    1af8: e001         	b	0x1afe <SEGGER_RTT_PutCharSkipNoLock+0x64> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1280
;     Status = 0;
    1afa: 2300         	movs	r3, #0x0
    1afc: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1283
;   return Status;
    1afe: 693b         	ldr	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1284
; }
    1b00: 4618         	mov	r0, r3
    1b02: 371c         	adds	r7, #0x1c
    1b04: 46bd         	mov	sp, r7
    1b06: f85d 7b04    	ldr	r7, [sp], #4
    1b0a: 4770         	bx	lr
    1b0c: 08 12 00 20  	.word	0x20001208

00001b10 <SEGGER_RTT_PutCharSkip>:
; SEGGER_RTT_PutCharSkip():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1304
; unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
    1b10: b580         	push	{r7, lr}
    1b12: b088         	sub	sp, #0x20
    1b14: af00         	add	r7, sp, #0x0
    1b16: 6078         	str	r0, [r7, #0x4]
    1b18: 460b         	mov	r3, r1
    1b1a: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1312
;   INIT();
    1b1c: 4b21         	ldr	r3, [pc, #0x84]         @ 0x1ba4 <SEGGER_RTT_PutCharSkip+0x94>
    1b1e: 617b         	str	r3, [r7, #0x14]
    1b20: 697b         	ldr	r3, [r7, #0x14]
    1b22: 781b         	ldrb	r3, [r3]
    1b24: b2db         	uxtb	r3, r3
    1b26: 2b53         	cmp	r3, #0x53
    1b28: d001         	beq	0x1b2e <SEGGER_RTT_PutCharSkip+0x1e> @ imm = #0x2
    1b2a: f7ff fba7    	bl	0x127c <_DoInit>        @ imm = #-0x8b2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1313
;   SEGGER_RTT_LOCK();
    1b2e: f3ef 8311    	mrs	r3, basepri
    1b32: f04f 0120    	mov.w	r1, #0x20
    1b36: f381 8811    	msr	basepri, r1
    1b3a: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1317
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1b3c: 687b         	ldr	r3, [r7, #0x4]
    1b3e: 1c5a         	adds	r2, r3, #0x1
    1b40: 4613         	mov	r3, r2
    1b42: 005b         	lsls	r3, r3, #0x1
    1b44: 4413         	add	r3, r2
    1b46: 00db         	lsls	r3, r3, #0x3
    1b48: 4a16         	ldr	r2, [pc, #0x58]         @ 0x1ba4 <SEGGER_RTT_PutCharSkip+0x94>
    1b4a: 4413         	add	r3, r2
    1b4c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1321
;   WrOff = pRing->WrOff + 1;
    1b4e: 68fb         	ldr	r3, [r7, #0xc]
    1b50: 68db         	ldr	r3, [r3, #0xc]
    1b52: 3301         	adds	r3, #0x1
    1b54: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1322
;   if (WrOff == pRing->SizeOfBuffer) {
    1b56: 68fb         	ldr	r3, [r7, #0xc]
    1b58: 689b         	ldr	r3, [r3, #0x8]
    1b5a: 69fa         	ldr	r2, [r7, #0x1c]
    1b5c: 429a         	cmp	r2, r3
    1b5e: d101         	bne	0x1b64 <SEGGER_RTT_PutCharSkip+0x54> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1323
;     WrOff = 0;
    1b60: 2300         	movs	r3, #0x0
    1b62: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1328
;   if (WrOff != pRing->RdOff) {
    1b64: 68fb         	ldr	r3, [r7, #0xc]
    1b66: 691b         	ldr	r3, [r3, #0x10]
    1b68: 69fa         	ldr	r2, [r7, #0x1c]
    1b6a: 429a         	cmp	r2, r3
    1b6c: d010         	beq	0x1b90 <SEGGER_RTT_PutCharSkip+0x80> @ imm = #0x20
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1329
;     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1b6e: 68fb         	ldr	r3, [r7, #0xc]
    1b70: 685a         	ldr	r2, [r3, #0x4]
    1b72: 68fb         	ldr	r3, [r7, #0xc]
    1b74: 68db         	ldr	r3, [r3, #0xc]
    1b76: 4413         	add	r3, r2
    1b78: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1330
;     *pDst = c;
    1b7a: 68bb         	ldr	r3, [r7, #0x8]
    1b7c: 78fa         	ldrb	r2, [r7, #0x3]
    1b7e: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1331
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1b80: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1332
;     pRing->WrOff = WrOff;
    1b84: 68fb         	ldr	r3, [r7, #0xc]
    1b86: 69fa         	ldr	r2, [r7, #0x1c]
    1b88: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1333
;     Status = 1;
    1b8a: 2301         	movs	r3, #0x1
    1b8c: 61bb         	str	r3, [r7, #0x18]
    1b8e: e001         	b	0x1b94 <SEGGER_RTT_PutCharSkip+0x84> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1335
;     Status = 0;
    1b90: 2300         	movs	r3, #0x0
    1b92: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1340
;   SEGGER_RTT_UNLOCK();
    1b94: 693b         	ldr	r3, [r7, #0x10]
    1b96: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1342
;   return Status;
    1b9a: 69bb         	ldr	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1343
; }
    1b9c: 4618         	mov	r0, r3
    1b9e: 3720         	adds	r7, #0x20
    1ba0: 46bd         	mov	sp, r7
    1ba2: bd80         	pop	{r7, pc}
    1ba4: 08 12 00 20  	.word	0x20001208

00001ba8 <SEGGER_RTT_PutChar>:
; SEGGER_RTT_PutChar():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1363
; unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
    1ba8: b580         	push	{r7, lr}
    1baa: b088         	sub	sp, #0x20
    1bac: af00         	add	r7, sp, #0x0
    1bae: 6078         	str	r0, [r7, #0x4]
    1bb0: 460b         	mov	r3, r1
    1bb2: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1371
;   INIT();
    1bb4: 4b26         	ldr	r3, [pc, #0x98]         @ 0x1c50 <SEGGER_RTT_PutChar+0xa8>
    1bb6: 617b         	str	r3, [r7, #0x14]
    1bb8: 697b         	ldr	r3, [r7, #0x14]
    1bba: 781b         	ldrb	r3, [r3]
    1bbc: b2db         	uxtb	r3, r3
    1bbe: 2b53         	cmp	r3, #0x53
    1bc0: d001         	beq	0x1bc6 <SEGGER_RTT_PutChar+0x1e> @ imm = #0x2
    1bc2: f7ff fb5b    	bl	0x127c <_DoInit>        @ imm = #-0x94a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1372
;   SEGGER_RTT_LOCK();
    1bc6: f3ef 8311    	mrs	r3, basepri
    1bca: f04f 0120    	mov.w	r1, #0x20
    1bce: f381 8811    	msr	basepri, r1
    1bd2: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1376
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1bd4: 687b         	ldr	r3, [r7, #0x4]
    1bd6: 1c5a         	adds	r2, r3, #0x1
    1bd8: 4613         	mov	r3, r2
    1bda: 005b         	lsls	r3, r3, #0x1
    1bdc: 4413         	add	r3, r2
    1bde: 00db         	lsls	r3, r3, #0x3
    1be0: 4a1b         	ldr	r2, [pc, #0x6c]         @ 0x1c50 <SEGGER_RTT_PutChar+0xa8>
    1be2: 4413         	add	r3, r2
    1be4: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1380
;   WrOff = pRing->WrOff + 1;
    1be6: 68fb         	ldr	r3, [r7, #0xc]
    1be8: 68db         	ldr	r3, [r3, #0xc]
    1bea: 3301         	adds	r3, #0x1
    1bec: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1381
;   if (WrOff == pRing->SizeOfBuffer) {
    1bee: 68fb         	ldr	r3, [r7, #0xc]
    1bf0: 689b         	ldr	r3, [r3, #0x8]
    1bf2: 69fa         	ldr	r2, [r7, #0x1c]
    1bf4: 429a         	cmp	r2, r3
    1bf6: d101         	bne	0x1bfc <SEGGER_RTT_PutChar+0x54> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1382
;     WrOff = 0;
    1bf8: 2300         	movs	r3, #0x0
    1bfa: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1387
;   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
    1bfc: 68fb         	ldr	r3, [r7, #0xc]
    1bfe: 695b         	ldr	r3, [r3, #0x14]
    1c00: 2b02         	cmp	r3, #0x2
    1c02: d105         	bne	0x1c10 <SEGGER_RTT_PutChar+0x68> @ imm = #0xa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1388
;     while (WrOff == pRing->RdOff) {
    1c04: bf00         	nop
    1c06: 68fb         	ldr	r3, [r7, #0xc]
    1c08: 691b         	ldr	r3, [r3, #0x10]
    1c0a: 69fa         	ldr	r2, [r7, #0x1c]
    1c0c: 429a         	cmp	r2, r3
    1c0e: d0fa         	beq	0x1c06 <SEGGER_RTT_PutChar+0x5e> @ imm = #-0xc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1395
;   if (WrOff != pRing->RdOff) {
    1c10: 68fb         	ldr	r3, [r7, #0xc]
    1c12: 691b         	ldr	r3, [r3, #0x10]
    1c14: 69fa         	ldr	r2, [r7, #0x1c]
    1c16: 429a         	cmp	r2, r3
    1c18: d010         	beq	0x1c3c <SEGGER_RTT_PutChar+0x94> @ imm = #0x20
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1396
;     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1c1a: 68fb         	ldr	r3, [r7, #0xc]
    1c1c: 685a         	ldr	r2, [r3, #0x4]
    1c1e: 68fb         	ldr	r3, [r7, #0xc]
    1c20: 68db         	ldr	r3, [r3, #0xc]
    1c22: 4413         	add	r3, r2
    1c24: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1397
;     *pDst = c;
    1c26: 68bb         	ldr	r3, [r7, #0x8]
    1c28: 78fa         	ldrb	r2, [r7, #0x3]
    1c2a: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1398
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1c2c: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1399
;     pRing->WrOff = WrOff;
    1c30: 68fb         	ldr	r3, [r7, #0xc]
    1c32: 69fa         	ldr	r2, [r7, #0x1c]
    1c34: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1400
;     Status = 1;
    1c36: 2301         	movs	r3, #0x1
    1c38: 61bb         	str	r3, [r7, #0x18]
    1c3a: e001         	b	0x1c40 <SEGGER_RTT_PutChar+0x98> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1402
;     Status = 0;
    1c3c: 2300         	movs	r3, #0x0
    1c3e: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1407
;   SEGGER_RTT_UNLOCK();
    1c40: 693b         	ldr	r3, [r7, #0x10]
    1c42: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1408
;   return Status;
    1c46: 69bb         	ldr	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1409
; }
    1c48: 4618         	mov	r0, r3
    1c4a: 3720         	adds	r7, #0x20
    1c4c: 46bd         	mov	sp, r7
    1c4e: bd80         	pop	{r7, pc}
    1c50: 08 12 00 20  	.word	0x20001208

00001c54 <SEGGER_RTT_GetKey>:
; SEGGER_RTT_GetKey():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1426
; int SEGGER_RTT_GetKey(void) {
    1c54: b580         	push	{r7, lr}
    1c56: b082         	sub	sp, #0x8
    1c58: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1430
;   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
    1c5a: 1cfb         	adds	r3, r7, #0x3
    1c5c: 2201         	movs	r2, #0x1
    1c5e: 4619         	mov	r1, r3
    1c60: 2000         	movs	r0, #0x0
    1c62: f7ff fd6e    	bl	0x1742 <SEGGER_RTT_Read> @ imm = #-0x524
    1c66: 4603         	mov	r3, r0
    1c68: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1431
;   if (r == 1) {
    1c6a: 687b         	ldr	r3, [r7, #0x4]
    1c6c: 2b01         	cmp	r3, #0x1
    1c6e: d102         	bne	0x1c76 <SEGGER_RTT_GetKey+0x22> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1432
;     r = (int)(unsigned char)c;
    1c70: 78fb         	ldrb	r3, [r7, #0x3]
    1c72: 607b         	str	r3, [r7, #0x4]
    1c74: e002         	b	0x1c7c <SEGGER_RTT_GetKey+0x28> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1434
;     r = -1;
    1c76: f04f 33ff    	mov.w	r3, #0xffffffff
    1c7a: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1436
;   return r;
    1c7c: 687b         	ldr	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1437
; }
    1c7e: 4618         	mov	r0, r3
    1c80: 3708         	adds	r7, #0x8
    1c82: 46bd         	mov	sp, r7
    1c84: bd80         	pop	{r7, pc}

00001c86 <SEGGER_RTT_WaitKey>:
; SEGGER_RTT_WaitKey():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1454
; int SEGGER_RTT_WaitKey(void) {
    1c86: b580         	push	{r7, lr}
    1c88: b082         	sub	sp, #0x8
    1c8a: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1458
;     r = SEGGER_RTT_GetKey();
    1c8c: f7ff ffe2    	bl	0x1c54 <SEGGER_RTT_GetKey> @ imm = #-0x3c
    1c90: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1459
;   } while (r < 0);
    1c92: 687b         	ldr	r3, [r7, #0x4]
    1c94: 2b00         	cmp	r3, #0x0
    1c96: dbf9         	blt	0x1c8c <SEGGER_RTT_WaitKey+0x6> @ imm = #-0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1460
;   return r;
    1c98: 687b         	ldr	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1461
; }
    1c9a: 4618         	mov	r0, r3
    1c9c: 3708         	adds	r7, #0x8
    1c9e: 46bd         	mov	sp, r7
    1ca0: bd80         	pop	{r7, pc}

00001ca2 <SEGGER_RTT_HasKey>:
; SEGGER_RTT_HasKey():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1477
; int SEGGER_RTT_HasKey(void) {
    1ca2: b580         	push	{r7, lr}
    1ca4: b084         	sub	sp, #0x10
    1ca6: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1482
;   INIT();
    1ca8: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x1ce4 <SEGGER_RTT_HasKey+0x42>
    1caa: 60bb         	str	r3, [r7, #0x8]
    1cac: 68bb         	ldr	r3, [r7, #0x8]
    1cae: 781b         	ldrb	r3, [r3]
    1cb0: b2db         	uxtb	r3, r3
    1cb2: 2b53         	cmp	r3, #0x53
    1cb4: d001         	beq	0x1cba <SEGGER_RTT_HasKey+0x18> @ imm = #0x2
    1cb6: f7ff fae1    	bl	0x127c <_DoInit>        @ imm = #-0xa3e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1483
;   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1cba: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x1ce8 <SEGGER_RTT_HasKey+0x46>
    1cbc: 607b         	str	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1484
;   RdOff = pRing->RdOff;
    1cbe: 687b         	ldr	r3, [r7, #0x4]
    1cc0: 691b         	ldr	r3, [r3, #0x10]
    1cc2: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1485
;   if (RdOff != pRing->WrOff) {
    1cc4: 687b         	ldr	r3, [r7, #0x4]
    1cc6: 68db         	ldr	r3, [r3, #0xc]
    1cc8: 683a         	ldr	r2, [r7]
    1cca: 429a         	cmp	r2, r3
    1ccc: d002         	beq	0x1cd4 <SEGGER_RTT_HasKey+0x32> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1486
;     r = 1;
    1cce: 2301         	movs	r3, #0x1
    1cd0: 60fb         	str	r3, [r7, #0xc]
    1cd2: e001         	b	0x1cd8 <SEGGER_RTT_HasKey+0x36> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1488
;     r = 0;
    1cd4: 2300         	movs	r3, #0x0
    1cd6: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1490
;   return r;
    1cd8: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1491
; }
    1cda: 4618         	mov	r0, r3
    1cdc: 3710         	adds	r7, #0x10
    1cde: 46bd         	mov	sp, r7
    1ce0: bd80         	pop	{r7, pc}
    1ce2: bf00         	nop
    1ce4: 08 12 00 20  	.word	0x20001208
    1ce8: 68 12 00 20  	.word	0x20001268

00001cec <SEGGER_RTT_HasData>:
; SEGGER_RTT_HasData():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1505
; unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
    1cec: b480         	push	{r7}
    1cee: b085         	sub	sp, #0x14
    1cf0: af00         	add	r7, sp, #0x0
    1cf2: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1509
;   pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1cf4: 687a         	ldr	r2, [r7, #0x4]
    1cf6: 4613         	mov	r3, r2
    1cf8: 005b         	lsls	r3, r3, #0x1
    1cfa: 4413         	add	r3, r2
    1cfc: 00db         	lsls	r3, r3, #0x3
    1cfe: 3360         	adds	r3, #0x60
    1d00: 4a07         	ldr	r2, [pc, #0x1c]         @ 0x1d20 <SEGGER_RTT_HasData+0x34>
    1d02: 4413         	add	r3, r2
    1d04: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1510
;   v = pRing->WrOff;
    1d06: 68fb         	ldr	r3, [r7, #0xc]
    1d08: 68db         	ldr	r3, [r3, #0xc]
    1d0a: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1511
;   return v - pRing->RdOff;
    1d0c: 68fb         	ldr	r3, [r7, #0xc]
    1d0e: 691b         	ldr	r3, [r3, #0x10]
    1d10: 68ba         	ldr	r2, [r7, #0x8]
    1d12: 1ad3         	subs	r3, r2, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1512
; }
    1d14: 4618         	mov	r0, r3
    1d16: 3714         	adds	r7, #0x14
    1d18: 46bd         	mov	sp, r7
    1d1a: f85d 7b04    	ldr	r7, [sp], #4
    1d1e: 4770         	bx	lr
    1d20: 08 12 00 20  	.word	0x20001208

00001d24 <SEGGER_RTT_HasDataUp>:
; SEGGER_RTT_HasDataUp():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1526
; unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
    1d24: b480         	push	{r7}
    1d26: b085         	sub	sp, #0x14
    1d28: af00         	add	r7, sp, #0x0
    1d2a: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1530
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1d2c: 687b         	ldr	r3, [r7, #0x4]
    1d2e: 1c5a         	adds	r2, r3, #0x1
    1d30: 4613         	mov	r3, r2
    1d32: 005b         	lsls	r3, r3, #0x1
    1d34: 4413         	add	r3, r2
    1d36: 00db         	lsls	r3, r3, #0x3
    1d38: 4a07         	ldr	r2, [pc, #0x1c]         @ 0x1d58 <SEGGER_RTT_HasDataUp+0x34>
    1d3a: 4413         	add	r3, r2
    1d3c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1531
;   v = pRing->RdOff;
    1d3e: 68fb         	ldr	r3, [r7, #0xc]
    1d40: 691b         	ldr	r3, [r3, #0x10]
    1d42: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1532
;   return pRing->WrOff - v;
    1d44: 68fb         	ldr	r3, [r7, #0xc]
    1d46: 68da         	ldr	r2, [r3, #0xc]
    1d48: 68bb         	ldr	r3, [r7, #0x8]
    1d4a: 1ad3         	subs	r3, r2, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1533
; }
    1d4c: 4618         	mov	r0, r3
    1d4e: 3714         	adds	r7, #0x14
    1d50: 46bd         	mov	sp, r7
    1d52: f85d 7b04    	ldr	r7, [sp], #4
    1d56: 4770         	bx	lr
    1d58: 08 12 00 20  	.word	0x20001208

00001d5c <SEGGER_RTT_AllocDownBuffer>:
; SEGGER_RTT_AllocDownBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1555
; int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1d5c: b580         	push	{r7, lr}
    1d5e: b088         	sub	sp, #0x20
    1d60: af00         	add	r7, sp, #0x0
    1d62: 60f8         	str	r0, [r7, #0xc]
    1d64: 60b9         	str	r1, [r7, #0x8]
    1d66: 607a         	str	r2, [r7, #0x4]
    1d68: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1559
;   INIT();
    1d6a: 4b3c         	ldr	r3, [pc, #0xf0]         @ 0x1e5c <SEGGER_RTT_AllocDownBuffer+0x100>
    1d6c: 61bb         	str	r3, [r7, #0x18]
    1d6e: 69bb         	ldr	r3, [r7, #0x18]
    1d70: 781b         	ldrb	r3, [r3]
    1d72: b2db         	uxtb	r3, r3
    1d74: 2b53         	cmp	r3, #0x53
    1d76: d001         	beq	0x1d7c <SEGGER_RTT_AllocDownBuffer+0x20> @ imm = #0x2
    1d78: f7ff fa80    	bl	0x127c <_DoInit>        @ imm = #-0xb00
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1560
;   SEGGER_RTT_LOCK();
    1d7c: f3ef 8311    	mrs	r3, basepri
    1d80: f04f 0120    	mov.w	r1, #0x20
    1d84: f381 8811    	msr	basepri, r1
    1d88: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1561
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1d8a: 4b34         	ldr	r3, [pc, #0xd0]         @ 0x1e5c <SEGGER_RTT_AllocDownBuffer+0x100>
    1d8c: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1562
;   BufferIndex = 0;
    1d8e: 2300         	movs	r3, #0x0
    1d90: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1564
;     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
    1d92: 6939         	ldr	r1, [r7, #0x10]
    1d94: 69fa         	ldr	r2, [r7, #0x1c]
    1d96: 4613         	mov	r3, r2
    1d98: 005b         	lsls	r3, r3, #0x1
    1d9a: 4413         	add	r3, r2
    1d9c: 00db         	lsls	r3, r3, #0x3
    1d9e: 440b         	add	r3, r1
    1da0: 3364         	adds	r3, #0x64
    1da2: 681b         	ldr	r3, [r3]
    1da4: 2b00         	cmp	r3, #0x0
    1da6: d008         	beq	0x1dba <SEGGER_RTT_AllocDownBuffer+0x5e> @ imm = #0x10
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1567
;     BufferIndex++;
    1da8: 69fb         	ldr	r3, [r7, #0x1c]
    1daa: 3301         	adds	r3, #0x1
    1dac: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1568
;   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
    1dae: 693b         	ldr	r3, [r7, #0x10]
    1db0: 695b         	ldr	r3, [r3, #0x14]
    1db2: 69fa         	ldr	r2, [r7, #0x1c]
    1db4: 429a         	cmp	r2, r3
    1db6: dbec         	blt	0x1d92 <SEGGER_RTT_AllocDownBuffer+0x36> @ imm = #-0x28
    1db8: e000         	b	0x1dbc <SEGGER_RTT_AllocDownBuffer+0x60> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1565
;       break;
    1dba: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1569
;   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
    1dbc: 693b         	ldr	r3, [r7, #0x10]
    1dbe: 695b         	ldr	r3, [r3, #0x14]
    1dc0: 69fa         	ldr	r2, [r7, #0x1c]
    1dc2: 429a         	cmp	r2, r3
    1dc4: da3e         	bge	0x1e44 <SEGGER_RTT_AllocDownBuffer+0xe8> @ imm = #0x7c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1570
;     pRTTCB->aDown[BufferIndex].sName        = sName;
    1dc6: 6939         	ldr	r1, [r7, #0x10]
    1dc8: 69fa         	ldr	r2, [r7, #0x1c]
    1dca: 4613         	mov	r3, r2
    1dcc: 005b         	lsls	r3, r3, #0x1
    1dce: 4413         	add	r3, r2
    1dd0: 00db         	lsls	r3, r3, #0x3
    1dd2: 440b         	add	r3, r1
    1dd4: 3360         	adds	r3, #0x60
    1dd6: 68fa         	ldr	r2, [r7, #0xc]
    1dd8: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1571
;     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
    1dda: 6939         	ldr	r1, [r7, #0x10]
    1ddc: 69fa         	ldr	r2, [r7, #0x1c]
    1dde: 4613         	mov	r3, r2
    1de0: 005b         	lsls	r3, r3, #0x1
    1de2: 4413         	add	r3, r2
    1de4: 00db         	lsls	r3, r3, #0x3
    1de6: 440b         	add	r3, r1
    1de8: 3364         	adds	r3, #0x64
    1dea: 68ba         	ldr	r2, [r7, #0x8]
    1dec: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1572
;     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
    1dee: 6939         	ldr	r1, [r7, #0x10]
    1df0: 69fa         	ldr	r2, [r7, #0x1c]
    1df2: 4613         	mov	r3, r2
    1df4: 005b         	lsls	r3, r3, #0x1
    1df6: 4413         	add	r3, r2
    1df8: 00db         	lsls	r3, r3, #0x3
    1dfa: 440b         	add	r3, r1
    1dfc: 3368         	adds	r3, #0x68
    1dfe: 687a         	ldr	r2, [r7, #0x4]
    1e00: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1573
;     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
    1e02: 6939         	ldr	r1, [r7, #0x10]
    1e04: 69fa         	ldr	r2, [r7, #0x1c]
    1e06: 4613         	mov	r3, r2
    1e08: 005b         	lsls	r3, r3, #0x1
    1e0a: 4413         	add	r3, r2
    1e0c: 00db         	lsls	r3, r3, #0x3
    1e0e: 440b         	add	r3, r1
    1e10: 3370         	adds	r3, #0x70
    1e12: 2200         	movs	r2, #0x0
    1e14: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1574
;     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
    1e16: 6939         	ldr	r1, [r7, #0x10]
    1e18: 69fa         	ldr	r2, [r7, #0x1c]
    1e1a: 4613         	mov	r3, r2
    1e1c: 005b         	lsls	r3, r3, #0x1
    1e1e: 4413         	add	r3, r2
    1e20: 00db         	lsls	r3, r3, #0x3
    1e22: 440b         	add	r3, r1
    1e24: 336c         	adds	r3, #0x6c
    1e26: 2200         	movs	r2, #0x0
    1e28: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1575
;     pRTTCB->aDown[BufferIndex].Flags        = Flags;
    1e2a: 6939         	ldr	r1, [r7, #0x10]
    1e2c: 69fa         	ldr	r2, [r7, #0x1c]
    1e2e: 4613         	mov	r3, r2
    1e30: 005b         	lsls	r3, r3, #0x1
    1e32: 4413         	add	r3, r2
    1e34: 00db         	lsls	r3, r3, #0x3
    1e36: 440b         	add	r3, r1
    1e38: 3374         	adds	r3, #0x74
    1e3a: 683a         	ldr	r2, [r7]
    1e3c: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1576
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1e3e: f3bf 8f5f    	dmb	sy
    1e42: e002         	b	0x1e4a <SEGGER_RTT_AllocDownBuffer+0xee> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1578
;     BufferIndex = -1;
    1e44: f04f 33ff    	mov.w	r3, #0xffffffff
    1e48: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1580
;   SEGGER_RTT_UNLOCK();
    1e4a: 697b         	ldr	r3, [r7, #0x14]
    1e4c: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1581
;   return BufferIndex;
    1e50: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1582
; }
    1e52: 4618         	mov	r0, r3
    1e54: 3720         	adds	r7, #0x20
    1e56: 46bd         	mov	sp, r7
    1e58: bd80         	pop	{r7, pc}
    1e5a: bf00         	nop
    1e5c: 08 12 00 20  	.word	0x20001208

00001e60 <SEGGER_RTT_AllocUpBuffer>:
; SEGGER_RTT_AllocUpBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1604
; int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1e60: b580         	push	{r7, lr}
    1e62: b088         	sub	sp, #0x20
    1e64: af00         	add	r7, sp, #0x0
    1e66: 60f8         	str	r0, [r7, #0xc]
    1e68: 60b9         	str	r1, [r7, #0x8]
    1e6a: 607a         	str	r2, [r7, #0x4]
    1e6c: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1608
;   INIT();
    1e6e: 4b3d         	ldr	r3, [pc, #0xf4]         @ 0x1f64 <SEGGER_RTT_AllocUpBuffer+0x104>
    1e70: 61bb         	str	r3, [r7, #0x18]
    1e72: 69bb         	ldr	r3, [r7, #0x18]
    1e74: 781b         	ldrb	r3, [r3]
    1e76: b2db         	uxtb	r3, r3
    1e78: 2b53         	cmp	r3, #0x53
    1e7a: d001         	beq	0x1e80 <SEGGER_RTT_AllocUpBuffer+0x20> @ imm = #0x2
    1e7c: f7ff f9fe    	bl	0x127c <_DoInit>        @ imm = #-0xc04
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1609
;   SEGGER_RTT_LOCK();
    1e80: f3ef 8311    	mrs	r3, basepri
    1e84: f04f 0120    	mov.w	r1, #0x20
    1e88: f381 8811    	msr	basepri, r1
    1e8c: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1610
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1e8e: 4b35         	ldr	r3, [pc, #0xd4]         @ 0x1f64 <SEGGER_RTT_AllocUpBuffer+0x104>
    1e90: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1611
;   BufferIndex = 0;
    1e92: 2300         	movs	r3, #0x0
    1e94: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1613
;     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
    1e96: 6939         	ldr	r1, [r7, #0x10]
    1e98: 69fb         	ldr	r3, [r7, #0x1c]
    1e9a: 1c5a         	adds	r2, r3, #0x1
    1e9c: 4613         	mov	r3, r2
    1e9e: 005b         	lsls	r3, r3, #0x1
    1ea0: 4413         	add	r3, r2
    1ea2: 00db         	lsls	r3, r3, #0x3
    1ea4: 440b         	add	r3, r1
    1ea6: 3304         	adds	r3, #0x4
    1ea8: 681b         	ldr	r3, [r3]
    1eaa: 2b00         	cmp	r3, #0x0
    1eac: d008         	beq	0x1ec0 <SEGGER_RTT_AllocUpBuffer+0x60> @ imm = #0x10
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1616
;     BufferIndex++;
    1eae: 69fb         	ldr	r3, [r7, #0x1c]
    1eb0: 3301         	adds	r3, #0x1
    1eb2: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1617
;   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
    1eb4: 693b         	ldr	r3, [r7, #0x10]
    1eb6: 691b         	ldr	r3, [r3, #0x10]
    1eb8: 69fa         	ldr	r2, [r7, #0x1c]
    1eba: 429a         	cmp	r2, r3
    1ebc: dbeb         	blt	0x1e96 <SEGGER_RTT_AllocUpBuffer+0x36> @ imm = #-0x2a
    1ebe: e000         	b	0x1ec2 <SEGGER_RTT_AllocUpBuffer+0x62> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1614
;       break;
    1ec0: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1618
;   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
    1ec2: 693b         	ldr	r3, [r7, #0x10]
    1ec4: 691b         	ldr	r3, [r3, #0x10]
    1ec6: 69fa         	ldr	r2, [r7, #0x1c]
    1ec8: 429a         	cmp	r2, r3
    1eca: da3f         	bge	0x1f4c <SEGGER_RTT_AllocUpBuffer+0xec> @ imm = #0x7e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1619
;     pRTTCB->aUp[BufferIndex].sName        = sName;
    1ecc: 6939         	ldr	r1, [r7, #0x10]
    1ece: 69fb         	ldr	r3, [r7, #0x1c]
    1ed0: 1c5a         	adds	r2, r3, #0x1
    1ed2: 4613         	mov	r3, r2
    1ed4: 005b         	lsls	r3, r3, #0x1
    1ed6: 4413         	add	r3, r2
    1ed8: 00db         	lsls	r3, r3, #0x3
    1eda: 440b         	add	r3, r1
    1edc: 68fa         	ldr	r2, [r7, #0xc]
    1ede: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1620
;     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
    1ee0: 6939         	ldr	r1, [r7, #0x10]
    1ee2: 69fb         	ldr	r3, [r7, #0x1c]
    1ee4: 1c5a         	adds	r2, r3, #0x1
    1ee6: 4613         	mov	r3, r2
    1ee8: 005b         	lsls	r3, r3, #0x1
    1eea: 4413         	add	r3, r2
    1eec: 00db         	lsls	r3, r3, #0x3
    1eee: 440b         	add	r3, r1
    1ef0: 3304         	adds	r3, #0x4
    1ef2: 68ba         	ldr	r2, [r7, #0x8]
    1ef4: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1621
;     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
    1ef6: 6939         	ldr	r1, [r7, #0x10]
    1ef8: 69fa         	ldr	r2, [r7, #0x1c]
    1efa: 4613         	mov	r3, r2
    1efc: 005b         	lsls	r3, r3, #0x1
    1efe: 4413         	add	r3, r2
    1f00: 00db         	lsls	r3, r3, #0x3
    1f02: 440b         	add	r3, r1
    1f04: 3320         	adds	r3, #0x20
    1f06: 687a         	ldr	r2, [r7, #0x4]
    1f08: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1622
;     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
    1f0a: 6939         	ldr	r1, [r7, #0x10]
    1f0c: 69fa         	ldr	r2, [r7, #0x1c]
    1f0e: 4613         	mov	r3, r2
    1f10: 005b         	lsls	r3, r3, #0x1
    1f12: 4413         	add	r3, r2
    1f14: 00db         	lsls	r3, r3, #0x3
    1f16: 440b         	add	r3, r1
    1f18: 3328         	adds	r3, #0x28
    1f1a: 2200         	movs	r2, #0x0
    1f1c: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1623
;     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
    1f1e: 6939         	ldr	r1, [r7, #0x10]
    1f20: 69fa         	ldr	r2, [r7, #0x1c]
    1f22: 4613         	mov	r3, r2
    1f24: 005b         	lsls	r3, r3, #0x1
    1f26: 4413         	add	r3, r2
    1f28: 00db         	lsls	r3, r3, #0x3
    1f2a: 440b         	add	r3, r1
    1f2c: 3324         	adds	r3, #0x24
    1f2e: 2200         	movs	r2, #0x0
    1f30: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1624
;     pRTTCB->aUp[BufferIndex].Flags        = Flags;
    1f32: 6939         	ldr	r1, [r7, #0x10]
    1f34: 69fa         	ldr	r2, [r7, #0x1c]
    1f36: 4613         	mov	r3, r2
    1f38: 005b         	lsls	r3, r3, #0x1
    1f3a: 4413         	add	r3, r2
    1f3c: 00db         	lsls	r3, r3, #0x3
    1f3e: 440b         	add	r3, r1
    1f40: 332c         	adds	r3, #0x2c
    1f42: 683a         	ldr	r2, [r7]
    1f44: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1625
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1f46: f3bf 8f5f    	dmb	sy
    1f4a: e002         	b	0x1f52 <SEGGER_RTT_AllocUpBuffer+0xf2> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1627
;     BufferIndex = -1;
    1f4c: f04f 33ff    	mov.w	r3, #0xffffffff
    1f50: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1629
;   SEGGER_RTT_UNLOCK();
    1f52: 697b         	ldr	r3, [r7, #0x14]
    1f54: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1630
;   return BufferIndex;
    1f58: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1631
; }
    1f5a: 4618         	mov	r0, r3
    1f5c: 3720         	adds	r7, #0x20
    1f5e: 46bd         	mov	sp, r7
    1f60: bd80         	pop	{r7, pc}
    1f62: bf00         	nop
    1f64: 08 12 00 20  	.word	0x20001208

00001f68 <SEGGER_RTT_ConfigUpBuffer>:
; SEGGER_RTT_ConfigUpBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1659
; int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1f68: b580         	push	{r7, lr}
    1f6a: b08a         	sub	sp, #0x28
    1f6c: af00         	add	r7, sp, #0x0
    1f6e: 60f8         	str	r0, [r7, #0xc]
    1f70: 60b9         	str	r1, [r7, #0x8]
    1f72: 607a         	str	r2, [r7, #0x4]
    1f74: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1664
;   INIT();
    1f76: 4b20         	ldr	r3, [pc, #0x80]         @ 0x1ff8 <SEGGER_RTT_ConfigUpBuffer+0x90>
    1f78: 623b         	str	r3, [r7, #0x20]
    1f7a: 6a3b         	ldr	r3, [r7, #0x20]
    1f7c: 781b         	ldrb	r3, [r3]
    1f7e: b2db         	uxtb	r3, r3
    1f80: 2b53         	cmp	r3, #0x53
    1f82: d001         	beq	0x1f88 <SEGGER_RTT_ConfigUpBuffer+0x20> @ imm = #0x2
    1f84: f7ff f97a    	bl	0x127c <_DoInit>        @ imm = #-0xd0c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1665
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1f88: 4b1b         	ldr	r3, [pc, #0x6c]         @ 0x1ff8 <SEGGER_RTT_ConfigUpBuffer+0x90>
    1f8a: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1666
;   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
    1f8c: 68fb         	ldr	r3, [r7, #0xc]
    1f8e: 2b02         	cmp	r3, #0x2
    1f90: d82a         	bhi	0x1fe8 <SEGGER_RTT_ConfigUpBuffer+0x80> @ imm = #0x54
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1667
;     SEGGER_RTT_LOCK();
    1f92: f3ef 8311    	mrs	r3, basepri
    1f96: f04f 0120    	mov.w	r1, #0x20
    1f9a: f381 8811    	msr	basepri, r1
    1f9e: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1668
;     pUp = &pRTTCB->aUp[BufferIndex];
    1fa0: 68fb         	ldr	r3, [r7, #0xc]
    1fa2: 1c5a         	adds	r2, r3, #0x1
    1fa4: 4613         	mov	r3, r2
    1fa6: 005b         	lsls	r3, r3, #0x1
    1fa8: 4413         	add	r3, r2
    1faa: 00db         	lsls	r3, r3, #0x3
    1fac: 69fa         	ldr	r2, [r7, #0x1c]
    1fae: 4413         	add	r3, r2
    1fb0: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1669
;     if (BufferIndex) {
    1fb2: 68fb         	ldr	r3, [r7, #0xc]
    1fb4: 2b00         	cmp	r3, #0x0
    1fb6: d00e         	beq	0x1fd6 <SEGGER_RTT_ConfigUpBuffer+0x6e> @ imm = #0x1c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1670
;       pUp->sName        = sName;
    1fb8: 697b         	ldr	r3, [r7, #0x14]
    1fba: 68ba         	ldr	r2, [r7, #0x8]
    1fbc: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1671
;       pUp->pBuffer      = (char*)pBuffer;
    1fbe: 697b         	ldr	r3, [r7, #0x14]
    1fc0: 687a         	ldr	r2, [r7, #0x4]
    1fc2: 605a         	str	r2, [r3, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1672
;       pUp->SizeOfBuffer = BufferSize;
    1fc4: 697b         	ldr	r3, [r7, #0x14]
    1fc6: 683a         	ldr	r2, [r7]
    1fc8: 609a         	str	r2, [r3, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1673
;       pUp->RdOff        = 0u;
    1fca: 697b         	ldr	r3, [r7, #0x14]
    1fcc: 2200         	movs	r2, #0x0
    1fce: 611a         	str	r2, [r3, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1674
;       pUp->WrOff        = 0u;
    1fd0: 697b         	ldr	r3, [r7, #0x14]
    1fd2: 2200         	movs	r2, #0x0
    1fd4: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1676
;     pUp->Flags          = Flags;
    1fd6: 697b         	ldr	r3, [r7, #0x14]
    1fd8: 6b3a         	ldr	r2, [r7, #0x30]
    1fda: 615a         	str	r2, [r3, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1677
;     SEGGER_RTT_UNLOCK();
    1fdc: 69bb         	ldr	r3, [r7, #0x18]
    1fde: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1678
;     r =  0;
    1fe2: 2300         	movs	r3, #0x0
    1fe4: 627b         	str	r3, [r7, #0x24]
    1fe6: e002         	b	0x1fee <SEGGER_RTT_ConfigUpBuffer+0x86> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1680
;     r = -1;
    1fe8: f04f 33ff    	mov.w	r3, #0xffffffff
    1fec: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1682
;   return r;
    1fee: 6a7b         	ldr	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1683
; }
    1ff0: 4618         	mov	r0, r3
    1ff2: 3728         	adds	r7, #0x28
    1ff4: 46bd         	mov	sp, r7
    1ff6: bd80         	pop	{r7, pc}
    1ff8: 08 12 00 20  	.word	0x20001208

00001ffc <SEGGER_RTT_ConfigDownBuffer>:
; SEGGER_RTT_ConfigDownBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1711
; int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1ffc: b580         	push	{r7, lr}
    1ffe: b08a         	sub	sp, #0x28
    2000: af00         	add	r7, sp, #0x0
    2002: 60f8         	str	r0, [r7, #0xc]
    2004: 60b9         	str	r1, [r7, #0x8]
    2006: 607a         	str	r2, [r7, #0x4]
    2008: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1716
;   INIT();
    200a: 4b21         	ldr	r3, [pc, #0x84]         @ 0x2090 <SEGGER_RTT_ConfigDownBuffer+0x94>
    200c: 623b         	str	r3, [r7, #0x20]
    200e: 6a3b         	ldr	r3, [r7, #0x20]
    2010: 781b         	ldrb	r3, [r3]
    2012: b2db         	uxtb	r3, r3
    2014: 2b53         	cmp	r3, #0x53
    2016: d001         	beq	0x201c <SEGGER_RTT_ConfigDownBuffer+0x20> @ imm = #0x2
    2018: f7ff f930    	bl	0x127c <_DoInit>        @ imm = #-0xda0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1717
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    201c: 4b1c         	ldr	r3, [pc, #0x70]         @ 0x2090 <SEGGER_RTT_ConfigDownBuffer+0x94>
    201e: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1718
;   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
    2020: 68fb         	ldr	r3, [r7, #0xc]
    2022: 2b02         	cmp	r3, #0x2
    2024: d82c         	bhi	0x2080 <SEGGER_RTT_ConfigDownBuffer+0x84> @ imm = #0x58
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1719
;     SEGGER_RTT_LOCK();
    2026: f3ef 8311    	mrs	r3, basepri
    202a: f04f 0120    	mov.w	r1, #0x20
    202e: f381 8811    	msr	basepri, r1
    2032: 61bb         	str	r3, [r7, #0x18]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1720
;     pDown = &pRTTCB->aDown[BufferIndex];
    2034: 68fa         	ldr	r2, [r7, #0xc]
    2036: 4613         	mov	r3, r2
    2038: 005b         	lsls	r3, r3, #0x1
    203a: 4413         	add	r3, r2
    203c: 00db         	lsls	r3, r3, #0x3
    203e: 3360         	adds	r3, #0x60
    2040: 69fa         	ldr	r2, [r7, #0x1c]
    2042: 4413         	add	r3, r2
    2044: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1721
;     if (BufferIndex) {
    2046: 68fb         	ldr	r3, [r7, #0xc]
    2048: 2b00         	cmp	r3, #0x0
    204a: d00e         	beq	0x206a <SEGGER_RTT_ConfigDownBuffer+0x6e> @ imm = #0x1c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1722
;       pDown->sName        = sName;
    204c: 697b         	ldr	r3, [r7, #0x14]
    204e: 68ba         	ldr	r2, [r7, #0x8]
    2050: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1723
;       pDown->pBuffer      = (char*)pBuffer;
    2052: 697b         	ldr	r3, [r7, #0x14]
    2054: 687a         	ldr	r2, [r7, #0x4]
    2056: 605a         	str	r2, [r3, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1724
;       pDown->SizeOfBuffer = BufferSize;
    2058: 697b         	ldr	r3, [r7, #0x14]
    205a: 683a         	ldr	r2, [r7]
    205c: 609a         	str	r2, [r3, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1725
;       pDown->RdOff        = 0u;
    205e: 697b         	ldr	r3, [r7, #0x14]
    2060: 2200         	movs	r2, #0x0
    2062: 611a         	str	r2, [r3, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1726
;       pDown->WrOff        = 0u;
    2064: 697b         	ldr	r3, [r7, #0x14]
    2066: 2200         	movs	r2, #0x0
    2068: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1728
;     pDown->Flags          = Flags;
    206a: 697b         	ldr	r3, [r7, #0x14]
    206c: 6b3a         	ldr	r2, [r7, #0x30]
    206e: 615a         	str	r2, [r3, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1729
;     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    2070: f3bf 8f5f    	dmb	sy
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1730
;     SEGGER_RTT_UNLOCK();
    2074: 69bb         	ldr	r3, [r7, #0x18]
    2076: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1731
;     r =  0;
    207a: 2300         	movs	r3, #0x0
    207c: 627b         	str	r3, [r7, #0x24]
    207e: e002         	b	0x2086 <SEGGER_RTT_ConfigDownBuffer+0x8a> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1733
;     r = -1;
    2080: f04f 33ff    	mov.w	r3, #0xffffffff
    2084: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1735
;   return r;
    2086: 6a7b         	ldr	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1736
; }
    2088: 4618         	mov	r0, r3
    208a: 3728         	adds	r7, #0x28
    208c: 46bd         	mov	sp, r7
    208e: bd80         	pop	{r7, pc}
    2090: 08 12 00 20  	.word	0x20001208

00002094 <SEGGER_RTT_SetNameUpBuffer>:
; SEGGER_RTT_SetNameUpBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1754
; int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
    2094: b580         	push	{r7, lr}
    2096: b088         	sub	sp, #0x20
    2098: af00         	add	r7, sp, #0x0
    209a: 6078         	str	r0, [r7, #0x4]
    209c: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1759
;   INIT();
    209e: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x20fc <SEGGER_RTT_SetNameUpBuffer+0x68>
    20a0: 61bb         	str	r3, [r7, #0x18]
    20a2: 69bb         	ldr	r3, [r7, #0x18]
    20a4: 781b         	ldrb	r3, [r3]
    20a6: b2db         	uxtb	r3, r3
    20a8: 2b53         	cmp	r3, #0x53
    20aa: d001         	beq	0x20b0 <SEGGER_RTT_SetNameUpBuffer+0x1c> @ imm = #0x2
    20ac: f7ff f8e6    	bl	0x127c <_DoInit>        @ imm = #-0xe34
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1760
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    20b0: 4b12         	ldr	r3, [pc, #0x48]         @ 0x20fc <SEGGER_RTT_SetNameUpBuffer+0x68>
    20b2: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1761
;   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
    20b4: 687b         	ldr	r3, [r7, #0x4]
    20b6: 2b02         	cmp	r3, #0x2
    20b8: d818         	bhi	0x20ec <SEGGER_RTT_SetNameUpBuffer+0x58> @ imm = #0x30
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1762
;     SEGGER_RTT_LOCK();
    20ba: f3ef 8311    	mrs	r3, basepri
    20be: f04f 0120    	mov.w	r1, #0x20
    20c2: f381 8811    	msr	basepri, r1
    20c6: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1763
;     pUp = &pRTTCB->aUp[BufferIndex];
    20c8: 687b         	ldr	r3, [r7, #0x4]
    20ca: 1c5a         	adds	r2, r3, #0x1
    20cc: 4613         	mov	r3, r2
    20ce: 005b         	lsls	r3, r3, #0x1
    20d0: 4413         	add	r3, r2
    20d2: 00db         	lsls	r3, r3, #0x3
    20d4: 697a         	ldr	r2, [r7, #0x14]
    20d6: 4413         	add	r3, r2
    20d8: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1764
;     pUp->sName = sName;
    20da: 68fb         	ldr	r3, [r7, #0xc]
    20dc: 683a         	ldr	r2, [r7]
    20de: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1765
;     SEGGER_RTT_UNLOCK();
    20e0: 693b         	ldr	r3, [r7, #0x10]
    20e2: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1766
;     r =  0;
    20e6: 2300         	movs	r3, #0x0
    20e8: 61fb         	str	r3, [r7, #0x1c]
    20ea: e002         	b	0x20f2 <SEGGER_RTT_SetNameUpBuffer+0x5e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1768
;     r = -1;
    20ec: f04f 33ff    	mov.w	r3, #0xffffffff
    20f0: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1770
;   return r;
    20f2: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1771
; }
    20f4: 4618         	mov	r0, r3
    20f6: 3720         	adds	r7, #0x20
    20f8: 46bd         	mov	sp, r7
    20fa: bd80         	pop	{r7, pc}
    20fc: 08 12 00 20  	.word	0x20001208

00002100 <SEGGER_RTT_SetNameDownBuffer>:
; SEGGER_RTT_SetNameDownBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1789
; int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
    2100: b580         	push	{r7, lr}
    2102: b088         	sub	sp, #0x20
    2104: af00         	add	r7, sp, #0x0
    2106: 6078         	str	r0, [r7, #0x4]
    2108: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1794
;   INIT();
    210a: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x2168 <SEGGER_RTT_SetNameDownBuffer+0x68>
    210c: 61bb         	str	r3, [r7, #0x18]
    210e: 69bb         	ldr	r3, [r7, #0x18]
    2110: 781b         	ldrb	r3, [r3]
    2112: b2db         	uxtb	r3, r3
    2114: 2b53         	cmp	r3, #0x53
    2116: d001         	beq	0x211c <SEGGER_RTT_SetNameDownBuffer+0x1c> @ imm = #0x2
    2118: f7ff f8b0    	bl	0x127c <_DoInit>        @ imm = #-0xea0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1795
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    211c: 4b12         	ldr	r3, [pc, #0x48]         @ 0x2168 <SEGGER_RTT_SetNameDownBuffer+0x68>
    211e: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1796
;   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
    2120: 687b         	ldr	r3, [r7, #0x4]
    2122: 2b02         	cmp	r3, #0x2
    2124: d818         	bhi	0x2158 <SEGGER_RTT_SetNameDownBuffer+0x58> @ imm = #0x30
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1797
;     SEGGER_RTT_LOCK();
    2126: f3ef 8311    	mrs	r3, basepri
    212a: f04f 0120    	mov.w	r1, #0x20
    212e: f381 8811    	msr	basepri, r1
    2132: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1798
;     pDown = &pRTTCB->aDown[BufferIndex];
    2134: 687a         	ldr	r2, [r7, #0x4]
    2136: 4613         	mov	r3, r2
    2138: 005b         	lsls	r3, r3, #0x1
    213a: 4413         	add	r3, r2
    213c: 00db         	lsls	r3, r3, #0x3
    213e: 3360         	adds	r3, #0x60
    2140: 697a         	ldr	r2, [r7, #0x14]
    2142: 4413         	add	r3, r2
    2144: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1799
;     pDown->sName = sName;
    2146: 68fb         	ldr	r3, [r7, #0xc]
    2148: 683a         	ldr	r2, [r7]
    214a: 601a         	str	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1800
;     SEGGER_RTT_UNLOCK();
    214c: 693b         	ldr	r3, [r7, #0x10]
    214e: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1801
;     r =  0;
    2152: 2300         	movs	r3, #0x0
    2154: 61fb         	str	r3, [r7, #0x1c]
    2156: e002         	b	0x215e <SEGGER_RTT_SetNameDownBuffer+0x5e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1803
;     r = -1;
    2158: f04f 33ff    	mov.w	r3, #0xffffffff
    215c: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1805
;   return r;
    215e: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1806
; }
    2160: 4618         	mov	r0, r3
    2162: 3720         	adds	r7, #0x20
    2164: 46bd         	mov	sp, r7
    2166: bd80         	pop	{r7, pc}
    2168: 08 12 00 20  	.word	0x20001208

0000216c <SEGGER_RTT_SetFlagsUpBuffer>:
; SEGGER_RTT_SetFlagsUpBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1825
; int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
    216c: b580         	push	{r7, lr}
    216e: b088         	sub	sp, #0x20
    2170: af00         	add	r7, sp, #0x0
    2172: 6078         	str	r0, [r7, #0x4]
    2174: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1830
;   INIT();
    2176: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x21d4 <SEGGER_RTT_SetFlagsUpBuffer+0x68>
    2178: 61bb         	str	r3, [r7, #0x18]
    217a: 69bb         	ldr	r3, [r7, #0x18]
    217c: 781b         	ldrb	r3, [r3]
    217e: b2db         	uxtb	r3, r3
    2180: 2b53         	cmp	r3, #0x53
    2182: d001         	beq	0x2188 <SEGGER_RTT_SetFlagsUpBuffer+0x1c> @ imm = #0x2
    2184: f7ff f87a    	bl	0x127c <_DoInit>        @ imm = #-0xf0c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1831
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    2188: 4b12         	ldr	r3, [pc, #0x48]         @ 0x21d4 <SEGGER_RTT_SetFlagsUpBuffer+0x68>
    218a: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1832
;   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
    218c: 687b         	ldr	r3, [r7, #0x4]
    218e: 2b02         	cmp	r3, #0x2
    2190: d818         	bhi	0x21c4 <SEGGER_RTT_SetFlagsUpBuffer+0x58> @ imm = #0x30
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1833
;     SEGGER_RTT_LOCK();
    2192: f3ef 8311    	mrs	r3, basepri
    2196: f04f 0120    	mov.w	r1, #0x20
    219a: f381 8811    	msr	basepri, r1
    219e: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1834
;     pUp = &pRTTCB->aUp[BufferIndex];
    21a0: 687b         	ldr	r3, [r7, #0x4]
    21a2: 1c5a         	adds	r2, r3, #0x1
    21a4: 4613         	mov	r3, r2
    21a6: 005b         	lsls	r3, r3, #0x1
    21a8: 4413         	add	r3, r2
    21aa: 00db         	lsls	r3, r3, #0x3
    21ac: 697a         	ldr	r2, [r7, #0x14]
    21ae: 4413         	add	r3, r2
    21b0: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1835
;     pUp->Flags = Flags;
    21b2: 68fb         	ldr	r3, [r7, #0xc]
    21b4: 683a         	ldr	r2, [r7]
    21b6: 615a         	str	r2, [r3, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1836
;     SEGGER_RTT_UNLOCK();
    21b8: 693b         	ldr	r3, [r7, #0x10]
    21ba: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1837
;     r =  0;
    21be: 2300         	movs	r3, #0x0
    21c0: 61fb         	str	r3, [r7, #0x1c]
    21c2: e002         	b	0x21ca <SEGGER_RTT_SetFlagsUpBuffer+0x5e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1839
;     r = -1;
    21c4: f04f 33ff    	mov.w	r3, #0xffffffff
    21c8: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1841
;   return r;
    21ca: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1842
; }
    21cc: 4618         	mov	r0, r3
    21ce: 3720         	adds	r7, #0x20
    21d0: 46bd         	mov	sp, r7
    21d2: bd80         	pop	{r7, pc}
    21d4: 08 12 00 20  	.word	0x20001208

000021d8 <SEGGER_RTT_SetFlagsDownBuffer>:
; SEGGER_RTT_SetFlagsDownBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1861
; int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
    21d8: b580         	push	{r7, lr}
    21da: b088         	sub	sp, #0x20
    21dc: af00         	add	r7, sp, #0x0
    21de: 6078         	str	r0, [r7, #0x4]
    21e0: 6039         	str	r1, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1866
;   INIT();
    21e2: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x2240 <SEGGER_RTT_SetFlagsDownBuffer+0x68>
    21e4: 61bb         	str	r3, [r7, #0x18]
    21e6: 69bb         	ldr	r3, [r7, #0x18]
    21e8: 781b         	ldrb	r3, [r3]
    21ea: b2db         	uxtb	r3, r3
    21ec: 2b53         	cmp	r3, #0x53
    21ee: d001         	beq	0x21f4 <SEGGER_RTT_SetFlagsDownBuffer+0x1c> @ imm = #0x2
    21f0: f7ff f844    	bl	0x127c <_DoInit>        @ imm = #-0xf78
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1867
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    21f4: 4b12         	ldr	r3, [pc, #0x48]         @ 0x2240 <SEGGER_RTT_SetFlagsDownBuffer+0x68>
    21f6: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1868
;   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
    21f8: 687b         	ldr	r3, [r7, #0x4]
    21fa: 2b02         	cmp	r3, #0x2
    21fc: d818         	bhi	0x2230 <SEGGER_RTT_SetFlagsDownBuffer+0x58> @ imm = #0x30
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1869
;     SEGGER_RTT_LOCK();
    21fe: f3ef 8311    	mrs	r3, basepri
    2202: f04f 0120    	mov.w	r1, #0x20
    2206: f381 8811    	msr	basepri, r1
    220a: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1870
;     pDown = &pRTTCB->aDown[BufferIndex];
    220c: 687a         	ldr	r2, [r7, #0x4]
    220e: 4613         	mov	r3, r2
    2210: 005b         	lsls	r3, r3, #0x1
    2212: 4413         	add	r3, r2
    2214: 00db         	lsls	r3, r3, #0x3
    2216: 3360         	adds	r3, #0x60
    2218: 697a         	ldr	r2, [r7, #0x14]
    221a: 4413         	add	r3, r2
    221c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1871
;     pDown->Flags = Flags;
    221e: 68fb         	ldr	r3, [r7, #0xc]
    2220: 683a         	ldr	r2, [r7]
    2222: 615a         	str	r2, [r3, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1872
;     SEGGER_RTT_UNLOCK();
    2224: 693b         	ldr	r3, [r7, #0x10]
    2226: f383 8811    	msr	basepri, r3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1873
;     r =  0;
    222a: 2300         	movs	r3, #0x0
    222c: 61fb         	str	r3, [r7, #0x1c]
    222e: e002         	b	0x2236 <SEGGER_RTT_SetFlagsDownBuffer+0x5e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1875
;     r = -1;
    2230: f04f 33ff    	mov.w	r3, #0xffffffff
    2234: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1877
;   return r;
    2236: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1878
; }
    2238: 4618         	mov	r0, r3
    223a: 3720         	adds	r7, #0x20
    223c: 46bd         	mov	sp, r7
    223e: bd80         	pop	{r7, pc}
    2240: 08 12 00 20  	.word	0x20001208

00002244 <SEGGER_RTT_Init>:
; SEGGER_RTT_Init():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1889
; void SEGGER_RTT_Init (void) {
    2244: b580         	push	{r7, lr}
    2246: af00         	add	r7, sp, #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1890
;   _DoInit();
    2248: f7ff f818    	bl	0x127c <_DoInit>        @ imm = #-0xfd0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1891
; }
    224c: bf00         	nop
    224e: bd80         	pop	{r7, pc}

00002250 <SEGGER_RTT_SetTerminal>:
; SEGGER_RTT_SetTerminal():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1910
; int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
    2250: b580         	push	{r7, lr}
    2252: b088         	sub	sp, #0x20
    2254: af00         	add	r7, sp, #0x0
    2256: 4603         	mov	r3, r0
    2258: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1916
;   INIT();
    225a: 4b27         	ldr	r3, [pc, #0x9c]         @ 0x22f8 <SEGGER_RTT_SetTerminal+0xa8>
    225c: 61bb         	str	r3, [r7, #0x18]
    225e: 69bb         	ldr	r3, [r7, #0x18]
    2260: 781b         	ldrb	r3, [r3]
    2262: b2db         	uxtb	r3, r3
    2264: 2b53         	cmp	r3, #0x53
    2266: d001         	beq	0x226c <SEGGER_RTT_SetTerminal+0x1c> @ imm = #0x2
    2268: f7ff f808    	bl	0x127c <_DoInit>        @ imm = #-0xff0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1917
;   r = 0;
    226c: 2300         	movs	r3, #0x0
    226e: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1918
;   ac[0] = 0xFFu;
    2270: 23ff         	movs	r3, #0xff
    2272: 723b         	strb	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1919
;   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
    2274: 79fb         	ldrb	r3, [r7, #0x7]
    2276: 2b0f         	cmp	r3, #0xf
    2278: d836         	bhi	0x22e8 <SEGGER_RTT_SetTerminal+0x98> @ imm = #0x6c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1920
;     ac[1] = _aTerminalId[TerminalId];
    227a: 79fb         	ldrb	r3, [r7, #0x7]
    227c: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x22fc <SEGGER_RTT_SetTerminal+0xac>
    227e: 5cd3         	ldrb	r3, [r2, r3]
    2280: 727b         	strb	r3, [r7, #0x9]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1921
;     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    2282: 4b1f         	ldr	r3, [pc, #0x7c]         @ 0x2300 <SEGGER_RTT_SetTerminal+0xb0>
    2284: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1922
;     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into buffer, while we are and number of free bytes in buffer does not change downwards after checking and before writing
    2286: f3ef 8311    	mrs	r3, basepri
    228a: f04f 0120    	mov.w	r1, #0x20
    228e: f381 8811    	msr	basepri, r1
    2292: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1923
;     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
    2294: 697b         	ldr	r3, [r7, #0x14]
    2296: 695b         	ldr	r3, [r3, #0x14]
    2298: f003 0303    	and	r3, r3, #0x3
    229c: 2b02         	cmp	r3, #0x2
    229e: d10a         	bne	0x22b6 <SEGGER_RTT_SetTerminal+0x66> @ imm = #0x14
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1924
;       _ActiveTerminal = TerminalId;
    22a0: 4a18         	ldr	r2, [pc, #0x60]         @ 0x2304 <SEGGER_RTT_SetTerminal+0xb4>
    22a2: 79fb         	ldrb	r3, [r7, #0x7]
    22a4: 7013         	strb	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1925
;       _WriteBlocking(pRing, (const char*)ac, 2u);
    22a6: f107 0308    	add.w	r3, r7, #0x8
    22aa: 2202         	movs	r2, #0x2
    22ac: 4619         	mov	r1, r3
    22ae: 6978         	ldr	r0, [r7, #0x14]
    22b0: f7ff f83e    	bl	0x1330 <_WriteBlocking> @ imm = #-0xf84
    22b4: e014         	b	0x22e0 <SEGGER_RTT_SetTerminal+0x90> @ imm = #0x28
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1927
;       Avail = _GetAvailWriteSpace(pRing);
    22b6: 6978         	ldr	r0, [r7, #0x14]
    22b8: f7ff f8f8    	bl	0x14ac <_GetAvailWriteSpace> @ imm = #-0xe10
    22bc: 60f8         	str	r0, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1928
;       if (Avail >= 2) {
    22be: 68fb         	ldr	r3, [r7, #0xc]
    22c0: 2b01         	cmp	r3, #0x1
    22c2: d90a         	bls	0x22da <SEGGER_RTT_SetTerminal+0x8a> @ imm = #0x14
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1929
;         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
    22c4: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0x2304 <SEGGER_RTT_SetTerminal+0xb4>
    22c6: 79fb         	ldrb	r3, [r7, #0x7]
    22c8: 7013         	strb	r3, [r2]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1930
;         _WriteNoCheck(pRing, (const char*)ac, 2u);
    22ca: f107 0308    	add.w	r3, r7, #0x8
    22ce: 2202         	movs	r2, #0x2
    22d0: 4619         	mov	r1, r3
    22d2: 6978         	ldr	r0, [r7, #0x14]
    22d4: f7ff f889    	bl	0x13ea <_WriteNoCheck>  @ imm = #-0xeee
    22d8: e002         	b	0x22e0 <SEGGER_RTT_SetTerminal+0x90> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1932
;         r = -1;
    22da: f04f 33ff    	mov.w	r3, #0xffffffff
    22de: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1935
;     SEGGER_RTT_UNLOCK();
    22e0: 693b         	ldr	r3, [r7, #0x10]
    22e2: f383 8811    	msr	basepri, r3
    22e6: e002         	b	0x22ee <SEGGER_RTT_SetTerminal+0x9e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1937
;     r = -1;
    22e8: f04f 33ff    	mov.w	r3, #0xffffffff
    22ec: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1939
;   return r;
    22ee: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1940
; }
    22f0: 4618         	mov	r0, r3
    22f2: 3720         	adds	r7, #0x20
    22f4: 46bd         	mov	sp, r7
    22f6: bd80         	pop	{r7, pc}
    22f8: 08 12 00 20  	.word	0x20001208
    22fc: dc 1c 21 80  	.word	0x80211cdc
    2300: 20 12 00 20  	.word	0x20001220
    2304: c0 16 00 20  	.word	0x200016c0

00002308 <SEGGER_RTT_TerminalOut>:
; SEGGER_RTT_TerminalOut():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1959
; int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
    2308: b580         	push	{r7, lr}
    230a: b088         	sub	sp, #0x20
    230c: af00         	add	r7, sp, #0x0
    230e: 4603         	mov	r3, r0
    2310: 6039         	str	r1, [r7]
    2312: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1965
;   INIT();
    2314: 4b43         	ldr	r3, [pc, #0x10c]        @ 0x2424 <SEGGER_RTT_TerminalOut+0x11c>
    2316: 61bb         	str	r3, [r7, #0x18]
    2318: 69bb         	ldr	r3, [r7, #0x18]
    231a: 781b         	ldrb	r3, [r3]
    231c: b2db         	uxtb	r3, r3
    231e: 2b53         	cmp	r3, #0x53
    2320: d001         	beq	0x2326 <SEGGER_RTT_TerminalOut+0x1e> @ imm = #0x2
    2322: f7fe ffab    	bl	0x127c <_DoInit>        @ imm = #-0x10aa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1969
;   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
    2326: 79fb         	ldrb	r3, [r7, #0x7]
    2328: 2b0f         	cmp	r3, #0xf
    232a: d873         	bhi	0x2414 <SEGGER_RTT_TerminalOut+0x10c> @ imm = #0xe6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1973
;     pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    232c: 4b3e         	ldr	r3, [pc, #0xf8]         @ 0x2428 <SEGGER_RTT_TerminalOut+0x120>
    232e: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1978
;     FragLen = STRLEN(s);
    2330: 6838         	ldr	r0, [r7]
    2332: f006 fe71    	bl	0x9018 <strlen>         @ imm = #0x6ce2
    2336: 6138         	str	r0, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1982
;     SEGGER_RTT_LOCK();
    2338: f3ef 8311    	mrs	r3, basepri
    233c: f04f 0120    	mov.w	r1, #0x20
    2340: f381 8811    	msr	basepri, r1
    2344: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1983
;     Avail = _GetAvailWriteSpace(pRing);
    2346: 6978         	ldr	r0, [r7, #0x14]
    2348: f7ff f8b0    	bl	0x14ac <_GetAvailWriteSpace> @ imm = #-0xea0
    234c: 60b8         	str	r0, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1984
;     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
    234e: 697b         	ldr	r3, [r7, #0x14]
    2350: 695b         	ldr	r3, [r3, #0x14]
    2352: f003 0303    	and	r3, r3, #0x3
    2356: 2b02         	cmp	r3, #0x2
    2358: d041         	beq	0x23de <SEGGER_RTT_TerminalOut+0xd6> @ imm = #0x82
    235a: 2b02         	cmp	r3, #0x2
    235c: d852         	bhi	0x2404 <SEGGER_RTT_TerminalOut+0xfc> @ imm = #0xa4
    235e: 2b00         	cmp	r3, #0x0
    2360: d002         	beq	0x2368 <SEGGER_RTT_TerminalOut+0x60> @ imm = #0x4
    2362: 2b01         	cmp	r3, #0x1
    2364: d01b         	beq	0x239e <SEGGER_RTT_TerminalOut+0x96> @ imm = #0x36
    2366: e04d         	b	0x2404 <SEGGER_RTT_TerminalOut+0xfc> @ imm = #0x9a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1990
;       if (Avail < (FragLen + 4u)) {
    2368: 693b         	ldr	r3, [r7, #0x10]
    236a: 3304         	adds	r3, #0x4
    236c: 68ba         	ldr	r2, [r7, #0x8]
    236e: 429a         	cmp	r2, r3
    2370: d202         	bhs	0x2378 <SEGGER_RTT_TerminalOut+0x70> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1991
;         Status = 0;
    2372: 2300         	movs	r3, #0x0
    2374: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1997
;       break;
    2376: e049         	b	0x240c <SEGGER_RTT_TerminalOut+0x104> @ imm = #0x92
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1993
;         _PostTerminalSwitch(pRing, TerminalId);
    2378: 79fb         	ldrb	r3, [r7, #0x7]
    237a: 4619         	mov	r1, r3
    237c: 6978         	ldr	r0, [r7, #0x14]
    237e: f7ff f87c    	bl	0x147a <_PostTerminalSwitch> @ imm = #-0xf08
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1994
;         Status = (int)_WriteBlocking(pRing, s, FragLen);
    2382: 693a         	ldr	r2, [r7, #0x10]
    2384: 6839         	ldr	r1, [r7]
    2386: 6978         	ldr	r0, [r7, #0x14]
    2388: f7fe ffd2    	bl	0x1330 <_WriteBlocking> @ imm = #-0x105c
    238c: 4603         	mov	r3, r0
    238e: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1995
;         _PostTerminalSwitch(pRing, _ActiveTerminal);
    2390: 4b26         	ldr	r3, [pc, #0x98]         @ 0x242c <SEGGER_RTT_TerminalOut+0x124>
    2392: 781b         	ldrb	r3, [r3]
    2394: 4619         	mov	r1, r3
    2396: 6978         	ldr	r0, [r7, #0x14]
    2398: f7ff f86f    	bl	0x147a <_PostTerminalSwitch> @ imm = #-0xf22
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:1997
;       break;
    239c: e036         	b	0x240c <SEGGER_RTT_TerminalOut+0x104> @ imm = #0x6c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2004
;       if (Avail < 4u) {
    239e: 68bb         	ldr	r3, [r7, #0x8]
    23a0: 2b03         	cmp	r3, #0x3
    23a2: d803         	bhi	0x23ac <SEGGER_RTT_TerminalOut+0xa4> @ imm = #0x6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2005
;         Status = -1;
    23a4: f04f 33ff    	mov.w	r3, #0xffffffff
    23a8: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2011
;       break;
    23aa: e02f         	b	0x240c <SEGGER_RTT_TerminalOut+0x104> @ imm = #0x5e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2007
;         _PostTerminalSwitch(pRing, TerminalId);
    23ac: 79fb         	ldrb	r3, [r7, #0x7]
    23ae: 4619         	mov	r1, r3
    23b0: 6978         	ldr	r0, [r7, #0x14]
    23b2: f7ff f862    	bl	0x147a <_PostTerminalSwitch> @ imm = #-0xf3c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2008
;         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
    23b6: 68bb         	ldr	r3, [r7, #0x8]
    23b8: 1f1a         	subs	r2, r3, #0x4
    23ba: 693b         	ldr	r3, [r7, #0x10]
    23bc: 4293         	cmp	r3, r2
    23be: bf28         	it	hs
    23c0: 4613         	movhs	r3, r2
    23c2: 461a         	mov	r2, r3
    23c4: 6839         	ldr	r1, [r7]
    23c6: 6978         	ldr	r0, [r7, #0x14]
    23c8: f7fe ffb2    	bl	0x1330 <_WriteBlocking> @ imm = #-0x109c
    23cc: 4603         	mov	r3, r0
    23ce: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2009
;         _PostTerminalSwitch(pRing, _ActiveTerminal);
    23d0: 4b16         	ldr	r3, [pc, #0x58]         @ 0x242c <SEGGER_RTT_TerminalOut+0x124>
    23d2: 781b         	ldrb	r3, [r3]
    23d4: 4619         	mov	r1, r3
    23d6: 6978         	ldr	r0, [r7, #0x14]
    23d8: f7ff f84f    	bl	0x147a <_PostTerminalSwitch> @ imm = #-0xf62
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2011
;       break;
    23dc: e016         	b	0x240c <SEGGER_RTT_TerminalOut+0x104> @ imm = #0x2c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2016
;       _PostTerminalSwitch(pRing, TerminalId);
    23de: 79fb         	ldrb	r3, [r7, #0x7]
    23e0: 4619         	mov	r1, r3
    23e2: 6978         	ldr	r0, [r7, #0x14]
    23e4: f7ff f849    	bl	0x147a <_PostTerminalSwitch> @ imm = #-0xf6e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2017
;       Status = (int)_WriteBlocking(pRing, s, FragLen);
    23e8: 693a         	ldr	r2, [r7, #0x10]
    23ea: 6839         	ldr	r1, [r7]
    23ec: 6978         	ldr	r0, [r7, #0x14]
    23ee: f7fe ff9f    	bl	0x1330 <_WriteBlocking> @ imm = #-0x10c2
    23f2: 4603         	mov	r3, r0
    23f4: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2018
;       _PostTerminalSwitch(pRing, _ActiveTerminal);
    23f6: 4b0d         	ldr	r3, [pc, #0x34]         @ 0x242c <SEGGER_RTT_TerminalOut+0x124>
    23f8: 781b         	ldrb	r3, [r3]
    23fa: 4619         	mov	r1, r3
    23fc: 6978         	ldr	r0, [r7, #0x14]
    23fe: f7ff f83c    	bl	0x147a <_PostTerminalSwitch> @ imm = #-0xf88
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2019
;       break;
    2402: e003         	b	0x240c <SEGGER_RTT_TerminalOut+0x104> @ imm = #0x6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2021
;       Status = -1;
    2404: f04f 33ff    	mov.w	r3, #0xffffffff
    2408: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2022
;       break;
    240a: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2027
;     SEGGER_RTT_UNLOCK();
    240c: 68fb         	ldr	r3, [r7, #0xc]
    240e: f383 8811    	msr	basepri, r3
    2412: e002         	b	0x241a <SEGGER_RTT_TerminalOut+0x112> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2029
;     Status = -1;
    2414: f04f 33ff    	mov.w	r3, #0xffffffff
    2418: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2031
;   return Status;
    241a: 69fb         	ldr	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2032
; }
    241c: 4618         	mov	r0, r3
    241e: 3720         	adds	r7, #0x20
    2420: 46bd         	mov	sp, r7
    2422: bd80         	pop	{r7, pc}
    2424: 08 12 00 20  	.word	0x20001208
    2428: 20 12 00 20  	.word	0x20001220
    242c: c0 16 00 20  	.word	0x200016c0

00002430 <SEGGER_RTT_GetAvailWriteSpace>:
; SEGGER_RTT_GetAvailWriteSpace():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2047
; unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
    2430: b580         	push	{r7, lr}
    2432: b084         	sub	sp, #0x10
    2434: af00         	add	r7, sp, #0x0
    2436: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2050
;   pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    2438: 687b         	ldr	r3, [r7, #0x4]
    243a: 1c5a         	adds	r2, r3, #0x1
    243c: 4613         	mov	r3, r2
    243e: 005b         	lsls	r3, r3, #0x1
    2440: 4413         	add	r3, r2
    2442: 00db         	lsls	r3, r3, #0x3
    2444: 4a05         	ldr	r2, [pc, #0x14]         @ 0x245c <SEGGER_RTT_GetAvailWriteSpace+0x2c>
    2446: 4413         	add	r3, r2
    2448: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2051
;   return _GetAvailWriteSpace(pRing);
    244a: 68f8         	ldr	r0, [r7, #0xc]
    244c: f7ff f82e    	bl	0x14ac <_GetAvailWriteSpace> @ imm = #-0xfa4
    2450: 4603         	mov	r3, r0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2052
; }
    2452: 4618         	mov	r0, r3
    2454: 3710         	adds	r7, #0x10
    2456: 46bd         	mov	sp, r7
    2458: bd80         	pop	{r7, pc}
    245a: bf00         	nop
    245c: 08 12 00 20  	.word	0x20001208

00002460 <SEGGER_RTT_GetBytesInBuffer>:
; SEGGER_RTT_GetBytesInBuffer():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2068
; unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
    2460: b480         	push	{r7}
    2462: b087         	sub	sp, #0x1c
    2464: af00         	add	r7, sp, #0x0
    2466: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2077
;   pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    2468: 4b19         	ldr	r3, [pc, #0x64]         @ 0x24d0 <SEGGER_RTT_GetBytesInBuffer+0x70>
    246a: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2078
;   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
    246c: 6939         	ldr	r1, [r7, #0x10]
    246e: 687a         	ldr	r2, [r7, #0x4]
    2470: 4613         	mov	r3, r2
    2472: 005b         	lsls	r3, r3, #0x1
    2474: 4413         	add	r3, r2
    2476: 00db         	lsls	r3, r3, #0x3
    2478: 440b         	add	r3, r1
    247a: 3328         	adds	r3, #0x28
    247c: 681b         	ldr	r3, [r3]
    247e: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2079
;   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
    2480: 6939         	ldr	r1, [r7, #0x10]
    2482: 687a         	ldr	r2, [r7, #0x4]
    2484: 4613         	mov	r3, r2
    2486: 005b         	lsls	r3, r3, #0x1
    2488: 4413         	add	r3, r2
    248a: 00db         	lsls	r3, r3, #0x3
    248c: 440b         	add	r3, r1
    248e: 3324         	adds	r3, #0x24
    2490: 681b         	ldr	r3, [r3]
    2492: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2080
;   if (RdOff <= WrOff) {
    2494: 68fa         	ldr	r2, [r7, #0xc]
    2496: 68bb         	ldr	r3, [r7, #0x8]
    2498: 429a         	cmp	r2, r3
    249a: d804         	bhi	0x24a6 <SEGGER_RTT_GetBytesInBuffer+0x46> @ imm = #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2081
;     r = WrOff - RdOff;
    249c: 68ba         	ldr	r2, [r7, #0x8]
    249e: 68fb         	ldr	r3, [r7, #0xc]
    24a0: 1ad3         	subs	r3, r2, r3
    24a2: 617b         	str	r3, [r7, #0x14]
    24a4: e00d         	b	0x24c2 <SEGGER_RTT_GetBytesInBuffer+0x62> @ imm = #0x1a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2083
;     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
    24a6: 6939         	ldr	r1, [r7, #0x10]
    24a8: 687a         	ldr	r2, [r7, #0x4]
    24aa: 4613         	mov	r3, r2
    24ac: 005b         	lsls	r3, r3, #0x1
    24ae: 4413         	add	r3, r2
    24b0: 00db         	lsls	r3, r3, #0x3
    24b2: 440b         	add	r3, r1
    24b4: 3320         	adds	r3, #0x20
    24b6: 681a         	ldr	r2, [r3]
    24b8: 68f9         	ldr	r1, [r7, #0xc]
    24ba: 68bb         	ldr	r3, [r7, #0x8]
    24bc: 1acb         	subs	r3, r1, r3
    24be: 4413         	add	r3, r2
    24c0: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2085
;   return r;
    24c2: 697b         	ldr	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT.c:2086
; }
    24c4: 4618         	mov	r0, r3
    24c6: 371c         	adds	r7, #0x1c
    24c8: 46bd         	mov	sp, r7
    24ca: f85d 7b04    	ldr	r7, [sp], #4
    24ce: 4770         	bx	lr
    24d0: 08 12 00 20  	.word	0x20001208

000024d4 <_StoreChar>:
; _StoreChar():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:107
; static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    24d4: b580         	push	{r7, lr}
    24d6: b084         	sub	sp, #0x10
    24d8: af00         	add	r7, sp, #0x0
    24da: 6078         	str	r0, [r7, #0x4]
    24dc: 460b         	mov	r3, r1
    24de: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:110
;   Cnt = p->Cnt;
    24e0: 687b         	ldr	r3, [r7, #0x4]
    24e2: 689b         	ldr	r3, [r3, #0x8]
    24e4: 60fb         	str	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:111
;   if ((Cnt + 1u) <= p->BufferSize) {
    24e6: 68fb         	ldr	r3, [r7, #0xc]
    24e8: 1c5a         	adds	r2, r3, #0x1
    24ea: 687b         	ldr	r3, [r7, #0x4]
    24ec: 685b         	ldr	r3, [r3, #0x4]
    24ee: 429a         	cmp	r2, r3
    24f0: d80e         	bhi	0x2510 <_StoreChar+0x3c> @ imm = #0x1c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:112
;     *(p->pBuffer + Cnt) = c;
    24f2: 687b         	ldr	r3, [r7, #0x4]
    24f4: 681a         	ldr	r2, [r3]
    24f6: 68fb         	ldr	r3, [r7, #0xc]
    24f8: 4413         	add	r3, r2
    24fa: 78fa         	ldrb	r2, [r7, #0x3]
    24fc: 701a         	strb	r2, [r3]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:113
;     p->Cnt = Cnt + 1u;
    24fe: 68fb         	ldr	r3, [r7, #0xc]
    2500: 1c5a         	adds	r2, r3, #0x1
    2502: 687b         	ldr	r3, [r7, #0x4]
    2504: 609a         	str	r2, [r3, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:114
;     p->ReturnValue++;
    2506: 687b         	ldr	r3, [r7, #0x4]
    2508: 68db         	ldr	r3, [r3, #0xc]
    250a: 1c5a         	adds	r2, r3, #0x1
    250c: 687b         	ldr	r3, [r7, #0x4]
    250e: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:119
;   if (p->Cnt == p->BufferSize) {
    2510: 687b         	ldr	r3, [r7, #0x4]
    2512: 689a         	ldr	r2, [r3, #0x8]
    2514: 687b         	ldr	r3, [r7, #0x4]
    2516: 685b         	ldr	r3, [r3, #0x4]
    2518: 429a         	cmp	r2, r3
    251a: d115         	bne	0x2548 <_StoreChar+0x74> @ imm = #0x2a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:120
;     if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    251c: 687b         	ldr	r3, [r7, #0x4]
    251e: 6918         	ldr	r0, [r3, #0x10]
    2520: 687b         	ldr	r3, [r7, #0x4]
    2522: 6819         	ldr	r1, [r3]
    2524: 687b         	ldr	r3, [r7, #0x4]
    2526: 689b         	ldr	r3, [r3, #0x8]
    2528: 461a         	mov	r2, r3
    252a: f7ff fa7d    	bl	0x1a28 <SEGGER_RTT_Write> @ imm = #-0xb06
    252e: 4602         	mov	r2, r0
    2530: 687b         	ldr	r3, [r7, #0x4]
    2532: 689b         	ldr	r3, [r3, #0x8]
    2534: 429a         	cmp	r2, r3
    2536: d004         	beq	0x2542 <_StoreChar+0x6e> @ imm = #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:121
;       p->ReturnValue = -1;
    2538: 687b         	ldr	r3, [r7, #0x4]
    253a: f04f 32ff    	mov.w	r2, #0xffffffff
    253e: 60da         	str	r2, [r3, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:126
; }
    2540: e002         	b	0x2548 <_StoreChar+0x74> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:123
;       p->Cnt = 0u;
    2542: 687b         	ldr	r3, [r7, #0x4]
    2544: 2200         	movs	r2, #0x0
    2546: 609a         	str	r2, [r3, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:126
; }
    2548: bf00         	nop
    254a: 3710         	adds	r7, #0x10
    254c: 46bd         	mov	sp, r7
    254e: bd80         	pop	{r7, pc}

00002550 <_PrintUnsigned>:
; _PrintUnsigned():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:132
; static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    2550: b580         	push	{r7, lr}
    2552: b08a         	sub	sp, #0x28
    2554: af00         	add	r7, sp, #0x0
    2556: 60f8         	str	r0, [r7, #0xc]
    2558: 60b9         	str	r1, [r7, #0x8]
    255a: 607a         	str	r2, [r7, #0x4]
    255c: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:140
;   Number = v;
    255e: 68bb         	ldr	r3, [r7, #0x8]
    2560: 623b         	str	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:141
;   Digit = 1u;
    2562: 2301         	movs	r3, #0x1
    2564: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:145
;   Width = 1u;
    2566: 2301         	movs	r3, #0x1
    2568: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:146
;   while (Number >= Base) {
    256a: e007         	b	0x257c <_PrintUnsigned+0x2c> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:147
;     Number = (Number / Base);
    256c: 6a3a         	ldr	r2, [r7, #0x20]
    256e: 687b         	ldr	r3, [r7, #0x4]
    2570: fbb2 f3f3    	udiv	r3, r2, r3
    2574: 623b         	str	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:148
;     Width++;
    2576: 69fb         	ldr	r3, [r7, #0x1c]
    2578: 3301         	adds	r3, #0x1
    257a: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:146
;   while (Number >= Base) {
    257c: 6a3a         	ldr	r2, [r7, #0x20]
    257e: 687b         	ldr	r3, [r7, #0x4]
    2580: 429a         	cmp	r2, r3
    2582: d2f3         	bhs	0x256c <_PrintUnsigned+0x1c> @ imm = #-0x1a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:150
;   if (NumDigits > Width) {
    2584: 683a         	ldr	r2, [r7]
    2586: 69fb         	ldr	r3, [r7, #0x1c]
    2588: 429a         	cmp	r2, r3
    258a: d901         	bls	0x2590 <_PrintUnsigned+0x40> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:151
;     Width = NumDigits;
    258c: 683b         	ldr	r3, [r7]
    258e: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:156
;   if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    2590: 6b7b         	ldr	r3, [r7, #0x34]
    2592: f003 0301    	and	r3, r3, #0x1
    2596: 2b00         	cmp	r3, #0x0
    2598: d125         	bne	0x25e6 <_PrintUnsigned+0x96> @ imm = #0x4a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:157
;     if (FieldWidth != 0u) {
    259a: 6b3b         	ldr	r3, [r7, #0x30]
    259c: 2b00         	cmp	r3, #0x0
    259e: d022         	beq	0x25e6 <_PrintUnsigned+0x96> @ imm = #0x44
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:158
;       if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    25a0: 6b7b         	ldr	r3, [r7, #0x34]
    25a2: f003 0302    	and	r3, r3, #0x2
    25a6: 2b00         	cmp	r3, #0x0
    25a8: d005         	beq	0x25b6 <_PrintUnsigned+0x66> @ imm = #0xa
    25aa: 683b         	ldr	r3, [r7]
    25ac: 2b00         	cmp	r3, #0x0
    25ae: d102         	bne	0x25b6 <_PrintUnsigned+0x66> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:159
;         c = '0';
    25b0: 2330         	movs	r3, #0x30
    25b2: 76fb         	strb	r3, [r7, #0x1b]
    25b4: e001         	b	0x25ba <_PrintUnsigned+0x6a> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:161
;         c = ' ';
    25b6: 2320         	movs	r3, #0x20
    25b8: 76fb         	strb	r3, [r7, #0x1b]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:163
;       while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    25ba: e00b         	b	0x25d4 <_PrintUnsigned+0x84> @ imm = #0x16
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:164
;         FieldWidth--;
    25bc: 6b3b         	ldr	r3, [r7, #0x30]
    25be: 3b01         	subs	r3, #0x1
    25c0: 633b         	str	r3, [r7, #0x30]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:165
;         _StoreChar(pBufferDesc, c);
    25c2: 7efb         	ldrb	r3, [r7, #0x1b]
    25c4: 4619         	mov	r1, r3
    25c6: 68f8         	ldr	r0, [r7, #0xc]
    25c8: f7ff ff84    	bl	0x24d4 <_StoreChar>     @ imm = #-0xf8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:166
;         if (pBufferDesc->ReturnValue < 0) {
    25cc: 68fb         	ldr	r3, [r7, #0xc]
    25ce: 68db         	ldr	r3, [r3, #0xc]
    25d0: 2b00         	cmp	r3, #0x0
    25d2: db07         	blt	0x25e4 <_PrintUnsigned+0x94> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:163
;       while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    25d4: 6b3b         	ldr	r3, [r7, #0x30]
    25d6: 2b00         	cmp	r3, #0x0
    25d8: d005         	beq	0x25e6 <_PrintUnsigned+0x96> @ imm = #0xa
    25da: 69fa         	ldr	r2, [r7, #0x1c]
    25dc: 6b3b         	ldr	r3, [r7, #0x30]
    25de: 429a         	cmp	r2, r3
    25e0: d3ec         	blo	0x25bc <_PrintUnsigned+0x6c> @ imm = #-0x28
    25e2: e000         	b	0x25e6 <_PrintUnsigned+0x96> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:167
;           break;
    25e4: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:172
;   if (pBufferDesc->ReturnValue >= 0) {
    25e6: 68fb         	ldr	r3, [r7, #0xc]
    25e8: 68db         	ldr	r3, [r3, #0xc]
    25ea: 2b00         	cmp	r3, #0x0
    25ec: db55         	blt	0x269a <_PrintUnsigned+0x14a> @ imm = #0xaa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:179
;       if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    25ee: 683b         	ldr	r3, [r7]
    25f0: 2b01         	cmp	r3, #0x1
    25f2: d903         	bls	0x25fc <_PrintUnsigned+0xac> @ imm = #0x6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:180
;         NumDigits--;
    25f4: 683b         	ldr	r3, [r7]
    25f6: 3b01         	subs	r3, #0x1
    25f8: 603b         	str	r3, [r7]
    25fa: e009         	b	0x2610 <_PrintUnsigned+0xc0> @ imm = #0x12
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:182
;         Div = v / Digit;
    25fc: 68ba         	ldr	r2, [r7, #0x8]
    25fe: 6a7b         	ldr	r3, [r7, #0x24]
    2600: fbb2 f3f3    	udiv	r3, r2, r3
    2604: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:183
;         if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    2606: 697a         	ldr	r2, [r7, #0x14]
    2608: 687b         	ldr	r3, [r7, #0x4]
    260a: 429a         	cmp	r2, r3
    260c: d200         	bhs	0x2610 <_PrintUnsigned+0xc0> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:184
;           break;
    260e: e005         	b	0x261c <_PrintUnsigned+0xcc> @ imm = #0xa
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:187
;       Digit *= Base;
    2610: 6a7b         	ldr	r3, [r7, #0x24]
    2612: 687a         	ldr	r2, [r7, #0x4]
    2614: fb02 f303    	mul	r3, r2, r3
    2618: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:179
;       if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    261a: e7e8         	b	0x25ee <_PrintUnsigned+0x9e> @ imm = #-0x30
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:193
;       Div = v / Digit;
    261c: 68ba         	ldr	r2, [r7, #0x8]
    261e: 6a7b         	ldr	r3, [r7, #0x24]
    2620: fbb2 f3f3    	udiv	r3, r2, r3
    2624: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:194
;       v -= Div * Digit;
    2626: 697b         	ldr	r3, [r7, #0x14]
    2628: 6a7a         	ldr	r2, [r7, #0x24]
    262a: fb02 f303    	mul	r3, r2, r3
    262e: 68ba         	ldr	r2, [r7, #0x8]
    2630: 1ad3         	subs	r3, r2, r3
    2632: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:195
;       _StoreChar(pBufferDesc, _aV2C[Div]);
    2634: 4a1b         	ldr	r2, [pc, #0x6c]         @ 0x26a4 <_PrintUnsigned+0x154>
    2636: 697b         	ldr	r3, [r7, #0x14]
    2638: 4413         	add	r3, r2
    263a: 781b         	ldrb	r3, [r3]
    263c: 4619         	mov	r1, r3
    263e: 68f8         	ldr	r0, [r7, #0xc]
    2640: f7ff ff48    	bl	0x24d4 <_StoreChar>     @ imm = #-0x170
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:196
;       if (pBufferDesc->ReturnValue < 0) {
    2644: 68fb         	ldr	r3, [r7, #0xc]
    2646: 68db         	ldr	r3, [r3, #0xc]
    2648: 2b00         	cmp	r3, #0x0
    264a: db08         	blt	0x265e <_PrintUnsigned+0x10e> @ imm = #0x10
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:199
;       Digit /= Base;
    264c: 6a7a         	ldr	r2, [r7, #0x24]
    264e: 687b         	ldr	r3, [r7, #0x4]
    2650: fbb2 f3f3    	udiv	r3, r2, r3
    2654: 627b         	str	r3, [r7, #0x24]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:200
;     } while (Digit);
    2656: 6a7b         	ldr	r3, [r7, #0x24]
    2658: 2b00         	cmp	r3, #0x0
    265a: d1df         	bne	0x261c <_PrintUnsigned+0xcc> @ imm = #-0x42
    265c: e000         	b	0x2660 <_PrintUnsigned+0x110> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:197
;         break;
    265e: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:204
;     if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    2660: 6b7b         	ldr	r3, [r7, #0x34]
    2662: f003 0301    	and	r3, r3, #0x1
    2666: 2b00         	cmp	r3, #0x0
    2668: d017         	beq	0x269a <_PrintUnsigned+0x14a> @ imm = #0x2e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:205
;       if (FieldWidth != 0u) {
    266a: 6b3b         	ldr	r3, [r7, #0x30]
    266c: 2b00         	cmp	r3, #0x0
    266e: d014         	beq	0x269a <_PrintUnsigned+0x14a> @ imm = #0x28
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:206
;         while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2670: e00a         	b	0x2688 <_PrintUnsigned+0x138> @ imm = #0x14
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:207
;           FieldWidth--;
    2672: 6b3b         	ldr	r3, [r7, #0x30]
    2674: 3b01         	subs	r3, #0x1
    2676: 633b         	str	r3, [r7, #0x30]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:208
;           _StoreChar(pBufferDesc, ' ');
    2678: 2120         	movs	r1, #0x20
    267a: 68f8         	ldr	r0, [r7, #0xc]
    267c: f7ff ff2a    	bl	0x24d4 <_StoreChar>     @ imm = #-0x1ac
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:209
;           if (pBufferDesc->ReturnValue < 0) {
    2680: 68fb         	ldr	r3, [r7, #0xc]
    2682: 68db         	ldr	r3, [r3, #0xc]
    2684: 2b00         	cmp	r3, #0x0
    2686: db07         	blt	0x2698 <_PrintUnsigned+0x148> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:206
;         while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2688: 6b3b         	ldr	r3, [r7, #0x30]
    268a: 2b00         	cmp	r3, #0x0
    268c: d005         	beq	0x269a <_PrintUnsigned+0x14a> @ imm = #0xa
    268e: 69fa         	ldr	r2, [r7, #0x1c]
    2690: 6b3b         	ldr	r3, [r7, #0x30]
    2692: 429a         	cmp	r2, r3
    2694: d3ed         	blo	0x2672 <_PrintUnsigned+0x122> @ imm = #-0x26
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:216
; }
    2696: e000         	b	0x269a <_PrintUnsigned+0x14a> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:210
;             break;
    2698: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:216
; }
    269a: bf00         	nop
    269c: 3728         	adds	r7, #0x28
    269e: 46bd         	mov	sp, r7
    26a0: bd80         	pop	{r7, pc}
    26a2: bf00         	nop
    26a4: 14 1d 21 80  	.word	0x80211d14

000026a8 <_PrintInt>:
; _PrintInt():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:222
; static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    26a8: b580         	push	{r7, lr}
    26aa: b088         	sub	sp, #0x20
    26ac: af02         	add	r7, sp, #0x8
    26ae: 60f8         	str	r0, [r7, #0xc]
    26b0: 60b9         	str	r1, [r7, #0x8]
    26b2: 607a         	str	r2, [r7, #0x4]
    26b4: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:226
;   Number = (v < 0) ? -v : v;
    26b6: 68bb         	ldr	r3, [r7, #0x8]
    26b8: 2b00         	cmp	r3, #0x0
    26ba: bfb8         	it	lt
    26bc: 425b         	rsblt	r3, r3, #0
    26be: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:231
;   Width = 1u;
    26c0: 2301         	movs	r3, #0x1
    26c2: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:232
;   while (Number >= (int)Base) {
    26c4: e007         	b	0x26d6 <_PrintInt+0x2e> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:233
;     Number = (Number / (int)Base);
    26c6: 687b         	ldr	r3, [r7, #0x4]
    26c8: 693a         	ldr	r2, [r7, #0x10]
    26ca: fb92 f3f3    	sdiv	r3, r2, r3
    26ce: 613b         	str	r3, [r7, #0x10]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:234
;     Width++;
    26d0: 697b         	ldr	r3, [r7, #0x14]
    26d2: 3301         	adds	r3, #0x1
    26d4: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:232
;   while (Number >= (int)Base) {
    26d6: 687b         	ldr	r3, [r7, #0x4]
    26d8: 693a         	ldr	r2, [r7, #0x10]
    26da: 429a         	cmp	r2, r3
    26dc: daf3         	bge	0x26c6 <_PrintInt+0x1e> @ imm = #-0x1a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:236
;   if (NumDigits > Width) {
    26de: 683a         	ldr	r2, [r7]
    26e0: 697b         	ldr	r3, [r7, #0x14]
    26e2: 429a         	cmp	r2, r3
    26e4: d901         	bls	0x26ea <_PrintInt+0x42> @ imm = #0x2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:237
;     Width = NumDigits;
    26e6: 683b         	ldr	r3, [r7]
    26e8: 617b         	str	r3, [r7, #0x14]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:239
;   if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    26ea: 6a3b         	ldr	r3, [r7, #0x20]
    26ec: 2b00         	cmp	r3, #0x0
    26ee: d00a         	beq	0x2706 <_PrintInt+0x5e> @ imm = #0x14
    26f0: 68bb         	ldr	r3, [r7, #0x8]
    26f2: 2b00         	cmp	r3, #0x0
    26f4: db04         	blt	0x2700 <_PrintInt+0x58> @ imm = #0x8
    26f6: 6a7b         	ldr	r3, [r7, #0x24]
    26f8: f003 0304    	and	r3, r3, #0x4
    26fc: 2b00         	cmp	r3, #0x0
    26fe: d002         	beq	0x2706 <_PrintInt+0x5e> @ imm = #0x4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:240
;     FieldWidth--;
    2700: 6a3b         	ldr	r3, [r7, #0x20]
    2702: 3b01         	subs	r3, #0x1
    2704: 623b         	str	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:246
;   if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    2706: 6a7b         	ldr	r3, [r7, #0x24]
    2708: f003 0302    	and	r3, r3, #0x2
    270c: 2b00         	cmp	r3, #0x0
    270e: d002         	beq	0x2716 <_PrintInt+0x6e> @ imm = #0x4
    2710: 683b         	ldr	r3, [r7]
    2712: 2b00         	cmp	r3, #0x0
    2714: d01c         	beq	0x2750 <_PrintInt+0xa8> @ imm = #0x38
    2716: 6a7b         	ldr	r3, [r7, #0x24]
    2718: f003 0301    	and	r3, r3, #0x1
    271c: 2b00         	cmp	r3, #0x0
    271e: d117         	bne	0x2750 <_PrintInt+0xa8> @ imm = #0x2e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:247
;     if (FieldWidth != 0u) {
    2720: 6a3b         	ldr	r3, [r7, #0x20]
    2722: 2b00         	cmp	r3, #0x0
    2724: d014         	beq	0x2750 <_PrintInt+0xa8> @ imm = #0x28
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:248
;       while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2726: e00a         	b	0x273e <_PrintInt+0x96> @ imm = #0x14
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:249
;         FieldWidth--;
    2728: 6a3b         	ldr	r3, [r7, #0x20]
    272a: 3b01         	subs	r3, #0x1
    272c: 623b         	str	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:250
;         _StoreChar(pBufferDesc, ' ');
    272e: 2120         	movs	r1, #0x20
    2730: 68f8         	ldr	r0, [r7, #0xc]
    2732: f7ff fecf    	bl	0x24d4 <_StoreChar>     @ imm = #-0x262
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:251
;         if (pBufferDesc->ReturnValue < 0) {
    2736: 68fb         	ldr	r3, [r7, #0xc]
    2738: 68db         	ldr	r3, [r3, #0xc]
    273a: 2b00         	cmp	r3, #0x0
    273c: db07         	blt	0x274e <_PrintInt+0xa6> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:248
;       while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    273e: 6a3b         	ldr	r3, [r7, #0x20]
    2740: 2b00         	cmp	r3, #0x0
    2742: d005         	beq	0x2750 <_PrintInt+0xa8> @ imm = #0xa
    2744: 697a         	ldr	r2, [r7, #0x14]
    2746: 6a3b         	ldr	r3, [r7, #0x20]
    2748: 429a         	cmp	r2, r3
    274a: d3ed         	blo	0x2728 <_PrintInt+0x80> @ imm = #-0x26
    274c: e000         	b	0x2750 <_PrintInt+0xa8> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:252
;           break;
    274e: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:260
;   if (pBufferDesc->ReturnValue >= 0) {
    2750: 68fb         	ldr	r3, [r7, #0xc]
    2752: 68db         	ldr	r3, [r3, #0xc]
    2754: 2b00         	cmp	r3, #0x0
    2756: db4a         	blt	0x27ee <_PrintInt+0x146> @ imm = #0x94
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:261
;     if (v < 0) {
    2758: 68bb         	ldr	r3, [r7, #0x8]
    275a: 2b00         	cmp	r3, #0x0
    275c: da07         	bge	0x276e <_PrintInt+0xc6> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:262
;       v = -v;
    275e: 68bb         	ldr	r3, [r7, #0x8]
    2760: 425b         	rsbs	r3, r3, #0
    2762: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:263
;       _StoreChar(pBufferDesc, '-');
    2764: 212d         	movs	r1, #0x2d
    2766: 68f8         	ldr	r0, [r7, #0xc]
    2768: f7ff feb4    	bl	0x24d4 <_StoreChar>     @ imm = #-0x298
    276c: e008         	b	0x2780 <_PrintInt+0xd8> @ imm = #0x10
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:264
;     } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    276e: 6a7b         	ldr	r3, [r7, #0x24]
    2770: f003 0304    	and	r3, r3, #0x4
    2774: 2b00         	cmp	r3, #0x0
    2776: d003         	beq	0x2780 <_PrintInt+0xd8> @ imm = #0x6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:265
;       _StoreChar(pBufferDesc, '+');
    2778: 212b         	movs	r1, #0x2b
    277a: 68f8         	ldr	r0, [r7, #0xc]
    277c: f7ff feaa    	bl	0x24d4 <_StoreChar>     @ imm = #-0x2ac
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:269
;     if (pBufferDesc->ReturnValue >= 0) {
    2780: 68fb         	ldr	r3, [r7, #0xc]
    2782: 68db         	ldr	r3, [r3, #0xc]
    2784: 2b00         	cmp	r3, #0x0
    2786: db32         	blt	0x27ee <_PrintInt+0x146> @ imm = #0x64
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:273
;       if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    2788: 6a7b         	ldr	r3, [r7, #0x24]
    278a: f003 0302    	and	r3, r3, #0x2
    278e: 2b00         	cmp	r3, #0x0
    2790: d01f         	beq	0x27d2 <_PrintInt+0x12a> @ imm = #0x3e
    2792: 6a7b         	ldr	r3, [r7, #0x24]
    2794: f003 0301    	and	r3, r3, #0x1
    2798: 2b00         	cmp	r3, #0x0
    279a: d11a         	bne	0x27d2 <_PrintInt+0x12a> @ imm = #0x34
    279c: 683b         	ldr	r3, [r7]
    279e: 2b00         	cmp	r3, #0x0
    27a0: d117         	bne	0x27d2 <_PrintInt+0x12a> @ imm = #0x2e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:274
;         if (FieldWidth != 0u) {
    27a2: 6a3b         	ldr	r3, [r7, #0x20]
    27a4: 2b00         	cmp	r3, #0x0
    27a6: d014         	beq	0x27d2 <_PrintInt+0x12a> @ imm = #0x28
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:275
;           while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    27a8: e00a         	b	0x27c0 <_PrintInt+0x118> @ imm = #0x14
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:276
;             FieldWidth--;
    27aa: 6a3b         	ldr	r3, [r7, #0x20]
    27ac: 3b01         	subs	r3, #0x1
    27ae: 623b         	str	r3, [r7, #0x20]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:277
;             _StoreChar(pBufferDesc, '0');
    27b0: 2130         	movs	r1, #0x30
    27b2: 68f8         	ldr	r0, [r7, #0xc]
    27b4: f7ff fe8e    	bl	0x24d4 <_StoreChar>     @ imm = #-0x2e4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:278
;             if (pBufferDesc->ReturnValue < 0) {
    27b8: 68fb         	ldr	r3, [r7, #0xc]
    27ba: 68db         	ldr	r3, [r3, #0xc]
    27bc: 2b00         	cmp	r3, #0x0
    27be: db07         	blt	0x27d0 <_PrintInt+0x128> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:275
;           while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    27c0: 6a3b         	ldr	r3, [r7, #0x20]
    27c2: 2b00         	cmp	r3, #0x0
    27c4: d005         	beq	0x27d2 <_PrintInt+0x12a> @ imm = #0xa
    27c6: 697a         	ldr	r2, [r7, #0x14]
    27c8: 6a3b         	ldr	r3, [r7, #0x20]
    27ca: 429a         	cmp	r2, r3
    27cc: d3ed         	blo	0x27aa <_PrintInt+0x102> @ imm = #-0x26
    27ce: e000         	b	0x27d2 <_PrintInt+0x12a> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:279
;               break;
    27d0: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:284
;       if (pBufferDesc->ReturnValue >= 0) {
    27d2: 68fb         	ldr	r3, [r7, #0xc]
    27d4: 68db         	ldr	r3, [r3, #0xc]
    27d6: 2b00         	cmp	r3, #0x0
    27d8: db09         	blt	0x27ee <_PrintInt+0x146> @ imm = #0x12
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:288
;         _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    27da: 68b9         	ldr	r1, [r7, #0x8]
    27dc: 6a7b         	ldr	r3, [r7, #0x24]
    27de: 9301         	str	r3, [sp, #0x4]
    27e0: 6a3b         	ldr	r3, [r7, #0x20]
    27e2: 9300         	str	r3, [sp]
    27e4: 683b         	ldr	r3, [r7]
    27e6: 687a         	ldr	r2, [r7, #0x4]
    27e8: 68f8         	ldr	r0, [r7, #0xc]
    27ea: f7ff feb1    	bl	0x2550 <_PrintUnsigned> @ imm = #-0x29e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:292
; }
    27ee: bf00         	nop
    27f0: 3718         	adds	r7, #0x18
    27f2: 46bd         	mov	sp, r7
    27f4: bd80         	pop	{r7, pc}

000027f6 <SEGGER_RTT_vprintf>:
; SEGGER_RTT_vprintf():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:317
; int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    27f6: b580         	push	{r7, lr}
    27f8: b0a4         	sub	sp, #0x90
    27fa: af02         	add	r7, sp, #0x8
    27fc: 60f8         	str	r0, [r7, #0xc]
    27fe: 60b9         	str	r1, [r7, #0x8]
    2800: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:327
;   BufferDesc.pBuffer        = acBuffer;
    2802: f107 0314    	add.w	r3, r7, #0x14
    2806: 657b         	str	r3, [r7, #0x54]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:328
;   BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    2808: 2340         	movs	r3, #0x40
    280a: 65bb         	str	r3, [r7, #0x58]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:329
;   BufferDesc.Cnt            = 0u;
    280c: 2300         	movs	r3, #0x0
    280e: 65fb         	str	r3, [r7, #0x5c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:330
;   BufferDesc.RTTBufferIndex = BufferIndex;
    2810: 68fb         	ldr	r3, [r7, #0xc]
    2812: 667b         	str	r3, [r7, #0x64]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:331
;   BufferDesc.ReturnValue    = 0;
    2814: 2300         	movs	r3, #0x0
    2816: 663b         	str	r3, [r7, #0x60]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:334
;     c = *sFormat;
    2818: 68bb         	ldr	r3, [r7, #0x8]
    281a: 781b         	ldrb	r3, [r3]
    281c: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:335
;     sFormat++;
    2820: 68bb         	ldr	r3, [r7, #0x8]
    2822: 3301         	adds	r3, #0x1
    2824: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:336
;     if (c == 0u) {
    2826: f897 3087    	ldrb.w	r3, [r7, #0x87]
    282a: 2b00         	cmp	r3, #0x0
    282c: f000 81d8    	beq.w	0x2be0 <SEGGER_RTT_vprintf+0x3ea> @ imm = #0x3b0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:339
;     if (c == '%') {
    2830: f897 3087    	ldrb.w	r3, [r7, #0x87]
    2834: 2b25         	cmp	r3, #0x25
    2836: f040 81c6    	bne.w	0x2bc6 <SEGGER_RTT_vprintf+0x3d0> @ imm = #0x38c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:343
;       FormatFlags = 0u;
    283a: 2300         	movs	r3, #0x0
    283c: 677b         	str	r3, [r7, #0x74]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:344
;       v = 1;
    283e: 2301         	movs	r3, #0x1
    2840: f8c7 3080    	str.w	r3, [r7, #0x80]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:346
;         c = *sFormat;
    2844: 68bb         	ldr	r3, [r7, #0x8]
    2846: 781b         	ldrb	r3, [r3]
    2848: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:347
;         switch (c) {
    284c: f897 3087    	ldrb.w	r3, [r7, #0x87]
    2850: 3b23         	subs	r3, #0x23
    2852: 2b0d         	cmp	r3, #0xd
    2854: d83e         	bhi	0x28d4 <SEGGER_RTT_vprintf+0xde> @ imm = #0x7c
    2856: a201         	adr	r2, #4 <SEGGER_RTT_vprintf+0x65>
    2858: f852 f023    	ldr.w	pc, [r2, r3, lsl #2]
    285c: c5 28 00 00  	.word	0x000028c5
    2860: d5 28 00 00  	.word	0x000028d5
    2864: d5 28 00 00  	.word	0x000028d5
    2868: d5 28 00 00  	.word	0x000028d5
    286c: d5 28 00 00  	.word	0x000028d5
    2870: d5 28 00 00  	.word	0x000028d5
    2874: d5 28 00 00  	.word	0x000028d5
    2878: d5 28 00 00  	.word	0x000028d5
    287c: b5 28 00 00  	.word	0x000028b5
    2880: d5 28 00 00  	.word	0x000028d5
    2884: 95 28 00 00  	.word	0x00002895
    2888: d5 28 00 00  	.word	0x000028d5
    288c: d5 28 00 00  	.word	0x000028d5
    2890: a5 28 00 00  	.word	0x000028a5
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:348
;         case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    2894: 6f7b         	ldr	r3, [r7, #0x74]
    2896: f043 0301    	orr	r3, r3, #0x1
    289a: 677b         	str	r3, [r7, #0x74]
    289c: 68bb         	ldr	r3, [r7, #0x8]
    289e: 3301         	adds	r3, #0x1
    28a0: 60bb         	str	r3, [r7, #0x8]
    28a2: e01b         	b	0x28dc <SEGGER_RTT_vprintf+0xe6> @ imm = #0x36
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:349
;         case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    28a4: 6f7b         	ldr	r3, [r7, #0x74]
    28a6: f043 0302    	orr	r3, r3, #0x2
    28aa: 677b         	str	r3, [r7, #0x74]
    28ac: 68bb         	ldr	r3, [r7, #0x8]
    28ae: 3301         	adds	r3, #0x1
    28b0: 60bb         	str	r3, [r7, #0x8]
    28b2: e013         	b	0x28dc <SEGGER_RTT_vprintf+0xe6> @ imm = #0x26
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:350
;         case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    28b4: 6f7b         	ldr	r3, [r7, #0x74]
    28b6: f043 0304    	orr	r3, r3, #0x4
    28ba: 677b         	str	r3, [r7, #0x74]
    28bc: 68bb         	ldr	r3, [r7, #0x8]
    28be: 3301         	adds	r3, #0x1
    28c0: 60bb         	str	r3, [r7, #0x8]
    28c2: e00b         	b	0x28dc <SEGGER_RTT_vprintf+0xe6> @ imm = #0x16
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:351
;         case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    28c4: 6f7b         	ldr	r3, [r7, #0x74]
    28c6: f043 0308    	orr	r3, r3, #0x8
    28ca: 677b         	str	r3, [r7, #0x74]
    28cc: 68bb         	ldr	r3, [r7, #0x8]
    28ce: 3301         	adds	r3, #0x1
    28d0: 60bb         	str	r3, [r7, #0x8]
    28d2: e003         	b	0x28dc <SEGGER_RTT_vprintf+0xe6> @ imm = #0x6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:352
;         default:  v = 0; break;
    28d4: 2300         	movs	r3, #0x0
    28d6: f8c7 3080    	str.w	r3, [r7, #0x80]
    28da: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:354
;       } while (v);
    28dc: f8d7 3080    	ldr.w	r3, [r7, #0x80]
    28e0: 2b00         	cmp	r3, #0x0
    28e2: d1af         	bne	0x2844 <SEGGER_RTT_vprintf+0x4e> @ imm = #-0xa2
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:358
;       FieldWidth = 0u;
    28e4: 2300         	movs	r3, #0x0
    28e6: 673b         	str	r3, [r7, #0x70]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:360
;         c = *sFormat;
    28e8: 68bb         	ldr	r3, [r7, #0x8]
    28ea: 781b         	ldrb	r3, [r3]
    28ec: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:361
;         if ((c < '0') || (c > '9')) {
    28f0: f897 3087    	ldrb.w	r3, [r7, #0x87]
    28f4: 2b2f         	cmp	r3, #0x2f
    28f6: d912         	bls	0x291e <SEGGER_RTT_vprintf+0x128> @ imm = #0x24
    28f8: f897 3087    	ldrb.w	r3, [r7, #0x87]
    28fc: 2b39         	cmp	r3, #0x39
    28fe: d80e         	bhi	0x291e <SEGGER_RTT_vprintf+0x128> @ imm = #0x1c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:364
;         sFormat++;
    2900: 68bb         	ldr	r3, [r7, #0x8]
    2902: 3301         	adds	r3, #0x1
    2904: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:365
;         FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    2906: 6f3a         	ldr	r2, [r7, #0x70]
    2908: 4613         	mov	r3, r2
    290a: 009b         	lsls	r3, r3, #0x2
    290c: 4413         	add	r3, r2
    290e: 005b         	lsls	r3, r3, #0x1
    2910: 461a         	mov	r2, r3
    2912: f897 3087    	ldrb.w	r3, [r7, #0x87]
    2916: 4413         	add	r3, r2
    2918: 3b30         	subs	r3, #0x30
    291a: 673b         	str	r3, [r7, #0x70]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:360
;         c = *sFormat;
    291c: e7e4         	b	0x28e8 <SEGGER_RTT_vprintf+0xf2> @ imm = #-0x38
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:371
;       PrecisionSet = 0;
    291e: 2300         	movs	r3, #0x0
    2920: f887 307f    	strb.w	r3, [r7, #0x7f]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:372
;       Precision = 0u;
    2924: 2300         	movs	r3, #0x0
    2926: 67bb         	str	r3, [r7, #0x78]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:373
;       c = *sFormat;
    2928: 68bb         	ldr	r3, [r7, #0x8]
    292a: 781b         	ldrb	r3, [r3]
    292c: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:374
;       if (c == '.') {
    2930: f897 3087    	ldrb.w	r3, [r7, #0x87]
    2934: 2b2e         	cmp	r3, #0x2e
    2936: d132         	bne	0x299e <SEGGER_RTT_vprintf+0x1a8> @ imm = #0x64
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:375
;         sFormat++;
    2938: 68bb         	ldr	r3, [r7, #0x8]
    293a: 3301         	adds	r3, #0x1
    293c: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:376
;         if (*sFormat == '*') {
    293e: 68bb         	ldr	r3, [r7, #0x8]
    2940: 781b         	ldrb	r3, [r3]
    2942: 2b2a         	cmp	r3, #0x2a
    2944: d10d         	bne	0x2962 <SEGGER_RTT_vprintf+0x16c> @ imm = #0x1a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:377
;           sFormat++;
    2946: 68bb         	ldr	r3, [r7, #0x8]
    2948: 3301         	adds	r3, #0x1
    294a: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:378
;           PrecisionSet = 1;
    294c: 2301         	movs	r3, #0x1
    294e: f887 307f    	strb.w	r3, [r7, #0x7f]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:379
;           Precision = va_arg(*pParamList, int);
    2952: 687b         	ldr	r3, [r7, #0x4]
    2954: 681b         	ldr	r3, [r3]
    2956: 1d19         	adds	r1, r3, #0x4
    2958: 687a         	ldr	r2, [r7, #0x4]
    295a: 6011         	str	r1, [r2]
    295c: 681b         	ldr	r3, [r3]
    295e: 67bb         	str	r3, [r7, #0x78]
    2960: e01d         	b	0x299e <SEGGER_RTT_vprintf+0x1a8> @ imm = #0x3a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:382
;             c = *sFormat;
    2962: 68bb         	ldr	r3, [r7, #0x8]
    2964: 781b         	ldrb	r3, [r3]
    2966: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:383
;             if ((c < '0') || (c > '9')) {
    296a: f897 3087    	ldrb.w	r3, [r7, #0x87]
    296e: 2b2f         	cmp	r3, #0x2f
    2970: d915         	bls	0x299e <SEGGER_RTT_vprintf+0x1a8> @ imm = #0x2a
    2972: f897 3087    	ldrb.w	r3, [r7, #0x87]
    2976: 2b39         	cmp	r3, #0x39
    2978: d811         	bhi	0x299e <SEGGER_RTT_vprintf+0x1a8> @ imm = #0x22
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:386
;             PrecisionSet = 1;
    297a: 2301         	movs	r3, #0x1
    297c: f887 307f    	strb.w	r3, [r7, #0x7f]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:387
;             sFormat++;
    2980: 68bb         	ldr	r3, [r7, #0x8]
    2982: 3301         	adds	r3, #0x1
    2984: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:388
;             Precision = Precision * 10u + ((unsigned)c - '0');
    2986: 6fba         	ldr	r2, [r7, #0x78]
    2988: 4613         	mov	r3, r2
    298a: 009b         	lsls	r3, r3, #0x2
    298c: 4413         	add	r3, r2
    298e: 005b         	lsls	r3, r3, #0x1
    2990: 461a         	mov	r2, r3
    2992: f897 3087    	ldrb.w	r3, [r7, #0x87]
    2996: 4413         	add	r3, r2
    2998: 3b30         	subs	r3, #0x30
    299a: 67bb         	str	r3, [r7, #0x78]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:382
;             c = *sFormat;
    299c: e7e1         	b	0x2962 <SEGGER_RTT_vprintf+0x16c> @ imm = #-0x3e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:395
;       c = *sFormat;
    299e: 68bb         	ldr	r3, [r7, #0x8]
    29a0: 781b         	ldrb	r3, [r3]
    29a2: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:397
;         if ((c == 'l') || (c == 'h')) {
    29a6: f897 3087    	ldrb.w	r3, [r7, #0x87]
    29aa: 2b6c         	cmp	r3, #0x6c
    29ac: d003         	beq	0x29b6 <SEGGER_RTT_vprintf+0x1c0> @ imm = #0x6
    29ae: f897 3087    	ldrb.w	r3, [r7, #0x87]
    29b2: 2b68         	cmp	r3, #0x68
    29b4: d107         	bne	0x29c6 <SEGGER_RTT_vprintf+0x1d0> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:398
;           sFormat++;
    29b6: 68bb         	ldr	r3, [r7, #0x8]
    29b8: 3301         	adds	r3, #0x1
    29ba: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:399
;           c = *sFormat;
    29bc: 68bb         	ldr	r3, [r7, #0x8]
    29be: 781b         	ldrb	r3, [r3]
    29c0: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:397
;         if ((c == 'l') || (c == 'h')) {
    29c4: e7ef         	b	0x29a6 <SEGGER_RTT_vprintf+0x1b0> @ imm = #-0x22
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:407
;       switch (c) {
    29c6: f897 3087    	ldrb.w	r3, [r7, #0x87]
    29ca: 2b25         	cmp	r3, #0x25
    29cc: f000 80ef    	beq.w	0x2bae <SEGGER_RTT_vprintf+0x3b8> @ imm = #0x1de
    29d0: 2b25         	cmp	r3, #0x25
    29d2: f2c0 80f3    	blt.w	0x2bbc <SEGGER_RTT_vprintf+0x3c6> @ imm = #0x1e6
    29d6: 2b78         	cmp	r3, #0x78
    29d8: f300 80f0    	bgt.w	0x2bbc <SEGGER_RTT_vprintf+0x3c6> @ imm = #0x1e0
    29dc: 2b58         	cmp	r3, #0x58
    29de: f2c0 80ed    	blt.w	0x2bbc <SEGGER_RTT_vprintf+0x3c6> @ imm = #0x1da
    29e2: 3b58         	subs	r3, #0x58
    29e4: 2b20         	cmp	r3, #0x20
    29e6: f200 80e9    	bhi.w	0x2bbc <SEGGER_RTT_vprintf+0x3c6> @ imm = #0x1d2
    29ea: a201         	adr	r2, #4 <SEGGER_RTT_vprintf+0x1f9>
    29ec: f852 f023    	ldr.w	pc, [r2, r3, lsl #2]
    29f0: f3 2a 00 00  	.word	0x00002af3
    29f4: bd 2b 00 00  	.word	0x00002bbd
    29f8: bd 2b 00 00  	.word	0x00002bbd
    29fc: bd 2b 00 00  	.word	0x00002bbd
    2a00: bd 2b 00 00  	.word	0x00002bbd
    2a04: bd 2b 00 00  	.word	0x00002bbd
    2a08: bd 2b 00 00  	.word	0x00002bbd
    2a0c: bd 2b 00 00  	.word	0x00002bbd
    2a10: bd 2b 00 00  	.word	0x00002bbd
    2a14: bd 2b 00 00  	.word	0x00002bbd
    2a18: bd 2b 00 00  	.word	0x00002bbd
    2a1c: 75 2a 00 00  	.word	0x00002a75
    2a20: 9f 2a 00 00  	.word	0x00002a9f
    2a24: bd 2b 00 00  	.word	0x00002bbd
    2a28: bd 2b 00 00  	.word	0x00002bbd
    2a2c: bd 2b 00 00  	.word	0x00002bbd
    2a30: bd 2b 00 00  	.word	0x00002bbd
    2a34: bd 2b 00 00  	.word	0x00002bbd
    2a38: bd 2b 00 00  	.word	0x00002bbd
    2a3c: bd 2b 00 00  	.word	0x00002bbd
    2a40: bd 2b 00 00  	.word	0x00002bbd
    2a44: bd 2b 00 00  	.word	0x00002bbd
    2a48: bd 2b 00 00  	.word	0x00002bbd
    2a4c: bd 2b 00 00  	.word	0x00002bbd
    2a50: 85 2b 00 00  	.word	0x00002b85
    2a54: bd 2b 00 00  	.word	0x00002bbd
    2a58: bd 2b 00 00  	.word	0x00002bbd
    2a5c: 1d 2b 00 00  	.word	0x00002b1d
    2a60: bd 2b 00 00  	.word	0x00002bbd
    2a64: c9 2a 00 00  	.word	0x00002ac9
    2a68: bd 2b 00 00  	.word	0x00002bbd
    2a6c: bd 2b 00 00  	.word	0x00002bbd
    2a70: f3 2a 00 00  	.word	0x00002af3
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:410
;         v = va_arg(*pParamList, int);
    2a74: 687b         	ldr	r3, [r7, #0x4]
    2a76: 681b         	ldr	r3, [r3]
    2a78: 1d19         	adds	r1, r3, #0x4
    2a7a: 687a         	ldr	r2, [r7, #0x4]
    2a7c: 6011         	str	r1, [r2]
    2a7e: 681b         	ldr	r3, [r3]
    2a80: f8c7 3080    	str.w	r3, [r7, #0x80]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:411
;         c0 = (char)v;
    2a84: f8d7 3080    	ldr.w	r3, [r7, #0x80]
    2a88: f887 306b    	strb.w	r3, [r7, #0x6b]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:412
;         _StoreChar(&BufferDesc, c0);
    2a8c: f897 206b    	ldrb.w	r2, [r7, #0x6b]
    2a90: f107 0354    	add.w	r3, r7, #0x54
    2a94: 4611         	mov	r1, r2
    2a96: 4618         	mov	r0, r3
    2a98: f7ff fd1c    	bl	0x24d4 <_StoreChar>     @ imm = #-0x5c8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:413
;         break;
    2a9c: e08f         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0x11e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:416
;         v = va_arg(*pParamList, int);
    2a9e: 687b         	ldr	r3, [r7, #0x4]
    2aa0: 681b         	ldr	r3, [r3]
    2aa2: 1d19         	adds	r1, r3, #0x4
    2aa4: 687a         	ldr	r2, [r7, #0x4]
    2aa6: 6011         	str	r1, [r2]
    2aa8: 681b         	ldr	r3, [r3]
    2aaa: f8c7 3080    	str.w	r3, [r7, #0x80]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:417
;         _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
    2aae: f107 0054    	add.w	r0, r7, #0x54
    2ab2: 6f7b         	ldr	r3, [r7, #0x74]
    2ab4: 9301         	str	r3, [sp, #0x4]
    2ab6: 6f3b         	ldr	r3, [r7, #0x70]
    2ab8: 9300         	str	r3, [sp]
    2aba: 6fbb         	ldr	r3, [r7, #0x78]
    2abc: 220a         	movs	r2, #0xa
    2abe: f8d7 1080    	ldr.w	r1, [r7, #0x80]
    2ac2: f7ff fdf1    	bl	0x26a8 <_PrintInt>      @ imm = #-0x41e
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:418
;         break;
    2ac6: e07a         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0xf4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:420
;         v = va_arg(*pParamList, int);
    2ac8: 687b         	ldr	r3, [r7, #0x4]
    2aca: 681b         	ldr	r3, [r3]
    2acc: 1d19         	adds	r1, r3, #0x4
    2ace: 687a         	ldr	r2, [r7, #0x4]
    2ad0: 6011         	str	r1, [r2]
    2ad2: 681b         	ldr	r3, [r3]
    2ad4: f8c7 3080    	str.w	r3, [r7, #0x80]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:421
;         _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
    2ad8: f8d7 1080    	ldr.w	r1, [r7, #0x80]
    2adc: f107 0054    	add.w	r0, r7, #0x54
    2ae0: 6f7b         	ldr	r3, [r7, #0x74]
    2ae2: 9301         	str	r3, [sp, #0x4]
    2ae4: 6f3b         	ldr	r3, [r7, #0x70]
    2ae6: 9300         	str	r3, [sp]
    2ae8: 6fbb         	ldr	r3, [r7, #0x78]
    2aea: 220a         	movs	r2, #0xa
    2aec: f7ff fd30    	bl	0x2550 <_PrintUnsigned> @ imm = #-0x5a0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:422
;         break;
    2af0: e065         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0xca
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:425
;         v = va_arg(*pParamList, int);
    2af2: 687b         	ldr	r3, [r7, #0x4]
    2af4: 681b         	ldr	r3, [r3]
    2af6: 1d19         	adds	r1, r3, #0x4
    2af8: 687a         	ldr	r2, [r7, #0x4]
    2afa: 6011         	str	r1, [r2]
    2afc: 681b         	ldr	r3, [r3]
    2afe: f8c7 3080    	str.w	r3, [r7, #0x80]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:426
;         _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
    2b02: f8d7 1080    	ldr.w	r1, [r7, #0x80]
    2b06: f107 0054    	add.w	r0, r7, #0x54
    2b0a: 6f7b         	ldr	r3, [r7, #0x74]
    2b0c: 9301         	str	r3, [sp, #0x4]
    2b0e: 6f3b         	ldr	r3, [r7, #0x70]
    2b10: 9300         	str	r3, [sp]
    2b12: 6fbb         	ldr	r3, [r7, #0x78]
    2b14: 2210         	movs	r2, #0x10
    2b16: f7ff fd1b    	bl	0x2550 <_PrintUnsigned> @ imm = #-0x5ca
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:427
;         break;
    2b1a: e050         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0xa0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:430
;           const char * s = va_arg(*pParamList, const char *);
    2b1c: 687b         	ldr	r3, [r7, #0x4]
    2b1e: 681b         	ldr	r3, [r3]
    2b20: 1d19         	adds	r1, r3, #0x4
    2b22: 687a         	ldr	r2, [r7, #0x4]
    2b24: 6011         	str	r1, [r2]
    2b26: 681b         	ldr	r3, [r3]
    2b28: 66fb         	str	r3, [r7, #0x6c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:431
;           if (s == NULL) {
    2b2a: 6efb         	ldr	r3, [r7, #0x6c]
    2b2c: 2b00         	cmp	r3, #0x0
    2b2e: d104         	bne	0x2b3a <SEGGER_RTT_vprintf+0x344> @ imm = #0x8
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:432
;             s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    2b30: 4b37         	ldr	r3, [pc, #0xdc]         @ 0x2c10 <SEGGER_RTT_vprintf+0x41a>
    2b32: 66fb         	str	r3, [r7, #0x6c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:433
;             PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
    2b34: 2300         	movs	r3, #0x0
    2b36: f887 307f    	strb.w	r3, [r7, #0x7f]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:436
;             c = *s;
    2b3a: 6efb         	ldr	r3, [r7, #0x6c]
    2b3c: 781b         	ldrb	r3, [r3]
    2b3e: f887 3087    	strb.w	r3, [r7, #0x87]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:437
;             s++;
    2b42: 6efb         	ldr	r3, [r7, #0x6c]
    2b44: 3301         	adds	r3, #0x1
    2b46: 66fb         	str	r3, [r7, #0x6c]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:438
;             if (c == '\0') {
    2b48: f897 3087    	ldrb.w	r3, [r7, #0x87]
    2b4c: 2b00         	cmp	r3, #0x0
    2b4e: d015         	beq	0x2b7c <SEGGER_RTT_vprintf+0x386> @ imm = #0x2a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:441
;             if ((PrecisionSet != 0) && (Precision == 0)) {
    2b50: f897 307f    	ldrb.w	r3, [r7, #0x7f]
    2b54: 2b00         	cmp	r3, #0x0
    2b56: d002         	beq	0x2b5e <SEGGER_RTT_vprintf+0x368> @ imm = #0x4
    2b58: 6fbb         	ldr	r3, [r7, #0x78]
    2b5a: 2b00         	cmp	r3, #0x0
    2b5c: d010         	beq	0x2b80 <SEGGER_RTT_vprintf+0x38a> @ imm = #0x20
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:444
;             _StoreChar(&BufferDesc, c);
    2b5e: f897 2087    	ldrb.w	r2, [r7, #0x87]
    2b62: f107 0354    	add.w	r3, r7, #0x54
    2b66: 4611         	mov	r1, r2
    2b68: 4618         	mov	r0, r3
    2b6a: f7ff fcb3    	bl	0x24d4 <_StoreChar>     @ imm = #-0x69a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:445
;             Precision--;
    2b6e: 6fbb         	ldr	r3, [r7, #0x78]
    2b70: 3b01         	subs	r3, #0x1
    2b72: 67bb         	str	r3, [r7, #0x78]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:446
;           } while (BufferDesc.ReturnValue >= 0);
    2b74: 6e3b         	ldr	r3, [r7, #0x60]
    2b76: 2b00         	cmp	r3, #0x0
    2b78: dadf         	bge	0x2b3a <SEGGER_RTT_vprintf+0x344> @ imm = #-0x42
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:448
;         break;
    2b7a: e020         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0x40
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:439
;               break;
    2b7c: bf00         	nop
    2b7e: e01e         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0x3c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:442
;               break;
    2b80: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:448
;         break;
    2b82: e01c         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0x38
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:450
;         v = va_arg(*pParamList, int);
    2b84: 687b         	ldr	r3, [r7, #0x4]
    2b86: 681b         	ldr	r3, [r3]
    2b88: 1d19         	adds	r1, r3, #0x4
    2b8a: 687a         	ldr	r2, [r7, #0x4]
    2b8c: 6011         	str	r1, [r2]
    2b8e: 681b         	ldr	r3, [r3]
    2b90: f8c7 3080    	str.w	r3, [r7, #0x80]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:451
;         _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    2b94: f8d7 1080    	ldr.w	r1, [r7, #0x80]
    2b98: f107 0054    	add.w	r0, r7, #0x54
    2b9c: 2300         	movs	r3, #0x0
    2b9e: 9301         	str	r3, [sp, #0x4]
    2ba0: 2308         	movs	r3, #0x8
    2ba2: 9300         	str	r3, [sp]
    2ba4: 2308         	movs	r3, #0x8
    2ba6: 2210         	movs	r2, #0x10
    2ba8: f7ff fcd2    	bl	0x2550 <_PrintUnsigned> @ imm = #-0x65c
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:452
;         break;
    2bac: e007         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:454
;         _StoreChar(&BufferDesc, '%');
    2bae: f107 0354    	add.w	r3, r7, #0x54
    2bb2: 2125         	movs	r1, #0x25
    2bb4: 4618         	mov	r0, r3
    2bb6: f7ff fc8d    	bl	0x24d4 <_StoreChar>     @ imm = #-0x6e6
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:455
;         break;
    2bba: e000         	b	0x2bbe <SEGGER_RTT_vprintf+0x3c8> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:457
;         break;
    2bbc: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:459
;       sFormat++;
    2bbe: 68bb         	ldr	r3, [r7, #0x8]
    2bc0: 3301         	adds	r3, #0x1
    2bc2: 60bb         	str	r3, [r7, #0x8]
    2bc4: e007         	b	0x2bd6 <SEGGER_RTT_vprintf+0x3e0> @ imm = #0xe
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:461
;       _StoreChar(&BufferDesc, c);
    2bc6: f897 2087    	ldrb.w	r2, [r7, #0x87]
    2bca: f107 0354    	add.w	r3, r7, #0x54
    2bce: 4611         	mov	r1, r2
    2bd0: 4618         	mov	r0, r3
    2bd2: f7ff fc7f    	bl	0x24d4 <_StoreChar>     @ imm = #-0x702
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:463
;   } while (BufferDesc.ReturnValue >= 0);
    2bd6: 6e3b         	ldr	r3, [r7, #0x60]
    2bd8: 2b00         	cmp	r3, #0x0
    2bda: f6bf ae1d    	bge.w	0x2818 <SEGGER_RTT_vprintf+0x22> @ imm = #-0x3c6
    2bde: e000         	b	0x2be2 <SEGGER_RTT_vprintf+0x3ec> @ imm = #0x0
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:337
;       break;
    2be0: bf00         	nop
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:465
;   if (BufferDesc.ReturnValue > 0) {
    2be2: 6e3b         	ldr	r3, [r7, #0x60]
    2be4: 2b00         	cmp	r3, #0x0
    2be6: dd0d         	ble	0x2c04 <SEGGER_RTT_vprintf+0x40e> @ imm = #0x1a
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:469
;     if (BufferDesc.Cnt != 0u) {
    2be8: 6dfb         	ldr	r3, [r7, #0x5c]
    2bea: 2b00         	cmp	r3, #0x0
    2bec: d006         	beq	0x2bfc <SEGGER_RTT_vprintf+0x406> @ imm = #0xc
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:470
;       SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    2bee: 6dfa         	ldr	r2, [r7, #0x5c]
    2bf0: f107 0314    	add.w	r3, r7, #0x14
    2bf4: 4619         	mov	r1, r3
    2bf6: 68f8         	ldr	r0, [r7, #0xc]
    2bf8: f7fe ff16    	bl	0x1a28 <SEGGER_RTT_Write> @ imm = #-0x11d4
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:472
;     BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    2bfc: 6e3b         	ldr	r3, [r7, #0x60]
    2bfe: 6dfa         	ldr	r2, [r7, #0x5c]
    2c00: 4413         	add	r3, r2
    2c02: 663b         	str	r3, [r7, #0x60]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:474
;   return BufferDesc.ReturnValue;
    2c04: 6e3b         	ldr	r3, [r7, #0x60]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:475
; }
    2c06: 4618         	mov	r0, r3
    2c08: 3788         	adds	r7, #0x88
    2c0a: 46bd         	mov	sp, r7
    2c0c: bd80         	pop	{r7, pc}
    2c0e: bf00         	nop
    2c10: 0c 1d 21 80  	.word	0x80211d0c

00002c14 <SEGGER_RTT_printf>:
; SEGGER_RTT_printf():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:508
; int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    2c14: b40e         	push	{r1, r2, r3}
    2c16: b580         	push	{r7, lr}
    2c18: b085         	sub	sp, #0x14
    2c1a: af00         	add	r7, sp, #0x0
    2c1c: 6078         	str	r0, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:512
;   va_start(ParamList, sFormat);
    2c1e: f107 0320    	add.w	r3, r7, #0x20
    2c22: 60bb         	str	r3, [r7, #0x8]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:513
;   r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    2c24: f107 0308    	add.w	r3, r7, #0x8
    2c28: 461a         	mov	r2, r3
    2c2a: 69f9         	ldr	r1, [r7, #0x1c]
    2c2c: 6878         	ldr	r0, [r7, #0x4]
    2c2e: f7ff fde2    	bl	0x27f6 <SEGGER_RTT_vprintf> @ imm = #-0x43c
    2c32: 60f8         	str	r0, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:515
;   return r;
    2c34: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/RTT/SEGGER_RTT_printf.c:516
; }
    2c36: 4618         	mov	r0, r3
    2c38: 3714         	adds	r7, #0x14
    2c3a: 46bd         	mov	sp, r7
    2c3c: e8bd 4080    	pop.w	{r7, lr}
    2c40: b003         	add	sp, #0xc
    2c42: 4770         	bx	lr

00002c44 <_write>:
; _write():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:96
; _ssize_t _write(int file, const void *ptr, size_t len) {
    2c44: b580         	push	{r7, lr}
    2c46: b084         	sub	sp, #0x10
    2c48: af00         	add	r7, sp, #0x0
    2c4a: 60f8         	str	r0, [r7, #0xc]
    2c4c: 60b9         	str	r1, [r7, #0x8]
    2c4e: 607a         	str	r2, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:98
;   SEGGER_RTT_Write(0, ptr, len);
    2c50: 687a         	ldr	r2, [r7, #0x4]
    2c52: 68b9         	ldr	r1, [r7, #0x8]
    2c54: 2000         	movs	r0, #0x0
    2c56: f7fe fee7    	bl	0x1a28 <SEGGER_RTT_Write> @ imm = #-0x1232
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:99
;   return len;
    2c5a: 687b         	ldr	r3, [r7, #0x4]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:100
; }
    2c5c: 4618         	mov	r0, r3
    2c5e: 3710         	adds	r7, #0x10
    2c60: 46bd         	mov	sp, r7
    2c62: bd80         	pop	{r7, pc}

00002c64 <_write_r>:
; _write_r():
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:112
; _ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
    2c64: b580         	push	{r7, lr}
    2c66: b084         	sub	sp, #0x10
    2c68: af00         	add	r7, sp, #0x0
    2c6a: 60f8         	str	r0, [r7, #0xc]
    2c6c: 60b9         	str	r1, [r7, #0x8]
    2c6e: 607a         	str	r2, [r7, #0x4]
    2c70: 603b         	str	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:115
;   SEGGER_RTT_Write(0, ptr, len);
    2c72: 683a         	ldr	r2, [r7]
    2c74: 6879         	ldr	r1, [r7, #0x4]
    2c76: 2000         	movs	r0, #0x0
    2c78: f7fe fed6    	bl	0x1a28 <SEGGER_RTT_Write> @ imm = #-0x1254
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:116
;   return len;
    2c7c: 683b         	ldr	r3, [r7]
; /Users/till/Documents/Studium/Module/2025_SoSe/Tests/alif_e7_tests/libs/SEGGER_RTT_V824/Syscalls/SEGGER_RTT_Syscalls_GCC.c:117
; }
    2c7e: 4618         	mov	r0, r3
    2c80: 3710         	adds	r7, #0x10
    2c82: 46bd         	mov	sp, r7
    2c84: bd80         	pop	{r7, pc}
    2c86: 0000         	movs	r0, r0

00002c88 <__NVIC_EnableIRQ>:
; __NVIC_EnableIRQ():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3735
; {
    2c88: b480         	push	{r7}
    2c8a: b083         	sub	sp, #0xc
    2c8c: af00         	add	r7, sp, #0x0
    2c8e: 4603         	mov	r3, r0
    2c90: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3736
;   if ((int32_t)(IRQn) >= 0)
    2c92: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2c96: 2b00         	cmp	r3, #0x0
    2c98: db0b         	blt	0x2cb2 <__NVIC_EnableIRQ+0x2a> @ imm = #0x16
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3739
;     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c9a: 88fb         	ldrh	r3, [r7, #0x6]
    2c9c: f003 021f    	and	r2, r3, #0x1f
    2ca0: 4907         	ldr	r1, [pc, #0x1c]         @ 0x2cc0 <__NVIC_EnableIRQ+0x38>
    2ca2: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2ca6: 095b         	lsrs	r3, r3, #0x5
    2ca8: 2001         	movs	r0, #0x1
    2caa: fa00 f202    	lsl.w	r2, r0, r2
    2cae: f841 2023    	str.w	r2, [r1, r3, lsl #2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3742
; }
    2cb2: bf00         	nop
    2cb4: 370c         	adds	r7, #0xc
    2cb6: 46bd         	mov	sp, r7
    2cb8: f85d 7b04    	ldr	r7, [sp], #4
    2cbc: 4770         	bx	lr
    2cbe: bf00         	nop
    2cc0: 00 e1 00 e0  	.word	0xe000e100

00002cc4 <__NVIC_DisableIRQ>:
; __NVIC_DisableIRQ():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3773
; {
    2cc4: b480         	push	{r7}
    2cc6: b083         	sub	sp, #0xc
    2cc8: af00         	add	r7, sp, #0x0
    2cca: 4603         	mov	r3, r0
    2ccc: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3774
;   if ((int32_t)(IRQn) >= 0)
    2cce: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2cd2: 2b00         	cmp	r3, #0x0
    2cd4: db12         	blt	0x2cfc <__NVIC_DisableIRQ+0x38> @ imm = #0x24
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3776
;     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cd6: 88fb         	ldrh	r3, [r7, #0x6]
    2cd8: f003 021f    	and	r2, r3, #0x1f
    2cdc: 490a         	ldr	r1, [pc, #0x28]         @ 0x2d08 <__NVIC_DisableIRQ+0x44>
    2cde: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2ce2: 095b         	lsrs	r3, r3, #0x5
    2ce4: 2001         	movs	r0, #0x1
    2ce6: fa00 f202    	lsl.w	r2, r0, r2
    2cea: 3320         	adds	r3, #0x20
    2cec: f841 2023    	str.w	r2, [r1, r3, lsl #2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
    2cf0: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
    2cf4: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
    2cf6: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
    2cfa: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3780
; }
    2cfc: bf00         	nop
    2cfe: 370c         	adds	r7, #0xc
    2d00: 46bd         	mov	sp, r7
    2d02: f85d 7b04    	ldr	r7, [sp], #4
    2d06: 4770         	bx	lr
    2d08: 00 e1 00 e0  	.word	0xe000e100

00002d0c <__NVIC_ClearPendingIRQ>:
; __NVIC_ClearPendingIRQ():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3826
; {
    2d0c: b480         	push	{r7}
    2d0e: b083         	sub	sp, #0xc
    2d10: af00         	add	r7, sp, #0x0
    2d12: 4603         	mov	r3, r0
    2d14: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3827
;   if ((int32_t)(IRQn) >= 0)
    2d16: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2d1a: 2b00         	cmp	r3, #0x0
    2d1c: db0c         	blt	0x2d38 <__NVIC_ClearPendingIRQ+0x2c> @ imm = #0x18
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3829
;     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d1e: 88fb         	ldrh	r3, [r7, #0x6]
    2d20: f003 021f    	and	r2, r3, #0x1f
    2d24: 4907         	ldr	r1, [pc, #0x1c]         @ 0x2d44 <__NVIC_ClearPendingIRQ+0x38>
    2d26: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2d2a: 095b         	lsrs	r3, r3, #0x5
    2d2c: 2001         	movs	r0, #0x1
    2d2e: fa00 f202    	lsl.w	r2, r0, r2
    2d32: 3360         	adds	r3, #0x60
    2d34: f841 2023    	str.w	r2, [r1, r3, lsl #2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3831
; }
    2d38: bf00         	nop
    2d3a: 370c         	adds	r7, #0xc
    2d3c: 46bd         	mov	sp, r7
    2d3e: f85d 7b04    	ldr	r7, [sp], #4
    2d42: 4770         	bx	lr
    2d44: 00 e1 00 e0  	.word	0xe000e100

00002d48 <__NVIC_SetPriority>:
; __NVIC_SetPriority():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3932
; {
    2d48: b480         	push	{r7}
    2d4a: b083         	sub	sp, #0xc
    2d4c: af00         	add	r7, sp, #0x0
    2d4e: 4603         	mov	r3, r0
    2d50: 6039         	str	r1, [r7]
    2d52: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3933
;   if ((int32_t)(IRQn) >= 0)
    2d54: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2d58: 2b00         	cmp	r3, #0x0
    2d5a: db09         	blt	0x2d70 <__NVIC_SetPriority+0x28> @ imm = #0x12
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3935
;     NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d5c: 4a0c         	ldr	r2, [pc, #0x30]         @ 0x2d90 <__NVIC_SetPriority+0x48>
    2d5e: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    2d62: 6839         	ldr	r1, [r7]
    2d64: b2c9         	uxtb	r1, r1
    2d66: 4413         	add	r3, r2
    2d68: 460a         	mov	r2, r1
    2d6a: f883 2300    	strb.w	r2, [r3, #0x300]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3941
; }
    2d6e: e009         	b	0x2d84 <__NVIC_SetPriority+0x3c> @ imm = #0x12
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3939
;     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d70: 4a08         	ldr	r2, [pc, #0x20]         @ 0x2d94 <__NVIC_SetPriority+0x4c>
    2d72: 88fb         	ldrh	r3, [r7, #0x6]
    2d74: f003 030f    	and	r3, r3, #0xf
    2d78: 3b04         	subs	r3, #0x4
    2d7a: 6839         	ldr	r1, [r7]
    2d7c: b2c9         	uxtb	r1, r1
    2d7e: 4413         	add	r3, r2
    2d80: 460a         	mov	r2, r1
    2d82: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3941
; }
    2d84: bf00         	nop
    2d86: 370c         	adds	r7, #0xc
    2d88: 46bd         	mov	sp, r7
    2d8a: f85d 7b04    	ldr	r7, [sp], #4
    2d8e: 4770         	bx	lr
    2d90: 00 e1 00 e0  	.word	0xe000e100
    2d94: 00 ed 00 e0  	.word	0xe000ed00

00002d98 <gpio_set_direction_input>:
; gpio_set_direction_input():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:77
; {
    2d98: b480         	push	{r7}
    2d9a: b083         	sub	sp, #0xc
    2d9c: af00         	add	r7, sp, #0x0
    2d9e: 6078         	str	r0, [r7, #0x4]
    2da0: 460b         	mov	r3, r1
    2da2: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:78
;     gpio->GPIO_SWPORTA_DDR &= ~(1 << pin_no);
    2da4: 687b         	ldr	r3, [r7, #0x4]
    2da6: 685b         	ldr	r3, [r3, #0x4]
    2da8: 78fa         	ldrb	r2, [r7, #0x3]
    2daa: 2101         	movs	r1, #0x1
    2dac: fa01 f202    	lsl.w	r2, r1, r2
    2db0: 43d2         	mvns	r2, r2
    2db2: 401a         	ands	r2, r3
    2db4: 687b         	ldr	r3, [r7, #0x4]
    2db6: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:79
; }
    2db8: bf00         	nop
    2dba: 370c         	adds	r7, #0xc
    2dbc: 46bd         	mov	sp, r7
    2dbe: f85d 7b04    	ldr	r7, [sp], #4
    2dc2: 4770         	bx	lr

00002dc4 <gpio_set_direction_output>:
; gpio_set_direction_output():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:89
; {
    2dc4: b480         	push	{r7}
    2dc6: b083         	sub	sp, #0xc
    2dc8: af00         	add	r7, sp, #0x0
    2dca: 6078         	str	r0, [r7, #0x4]
    2dcc: 460b         	mov	r3, r1
    2dce: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:90
;     gpio->GPIO_SWPORTA_DDR |= (1 << pin_no);
    2dd0: 687b         	ldr	r3, [r7, #0x4]
    2dd2: 685b         	ldr	r3, [r3, #0x4]
    2dd4: 78fa         	ldrb	r2, [r7, #0x3]
    2dd6: 2101         	movs	r1, #0x1
    2dd8: fa01 f202    	lsl.w	r2, r1, r2
    2ddc: 431a         	orrs	r2, r3
    2dde: 687b         	ldr	r3, [r7, #0x4]
    2de0: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:91
; }
    2de2: bf00         	nop
    2de4: 370c         	adds	r7, #0xc
    2de6: 46bd         	mov	sp, r7
    2de8: f85d 7b04    	ldr	r7, [sp], #4
    2dec: 4770         	bx	lr

00002dee <gpio_get_direction>:
; gpio_get_direction():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:101
; {
    2dee: b480         	push	{r7}
    2df0: b083         	sub	sp, #0xc
    2df2: af00         	add	r7, sp, #0x0
    2df4: 6078         	str	r0, [r7, #0x4]
    2df6: 460b         	mov	r3, r1
    2df8: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:102
;     if ((gpio->GPIO_SWPORTA_DDR & (1 << pin_no)) >> pin_no)
    2dfa: 687b         	ldr	r3, [r7, #0x4]
    2dfc: 685b         	ldr	r3, [r3, #0x4]
    2dfe: 78fa         	ldrb	r2, [r7, #0x3]
    2e00: 2101         	movs	r1, #0x1
    2e02: fa01 f202    	lsl.w	r2, r1, r2
    2e06: 401a         	ands	r2, r3
    2e08: 78fb         	ldrb	r3, [r7, #0x3]
    2e0a: fa22 f303    	lsr.w	r3, r2, r3
    2e0e: 2b00         	cmp	r3, #0x0
    2e10: d001         	beq	0x2e16 <gpio_get_direction+0x28> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:104
;         return GPIO_PIN_DIR_OUTPUT;
    2e12: 2301         	movs	r3, #0x1
    2e14: e000         	b	0x2e18 <gpio_get_direction+0x2a> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:108
;         return GPIO_PIN_DIR_INPUT;
    2e16: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:110
; }
    2e18: 4618         	mov	r0, r3
    2e1a: 370c         	adds	r7, #0xc
    2e1c: 46bd         	mov	sp, r7
    2e1e: f85d 7b04    	ldr	r7, [sp], #4
    2e22: 4770         	bx	lr

00002e24 <gpio_set_value_low>:
; gpio_set_value_low():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:120
; {
    2e24: b480         	push	{r7}
    2e26: b083         	sub	sp, #0xc
    2e28: af00         	add	r7, sp, #0x0
    2e2a: 6078         	str	r0, [r7, #0x4]
    2e2c: 460b         	mov	r3, r1
    2e2e: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:121
;     gpio->GPIO_SWPORTA_DR &= ~(1 << pin_no);
    2e30: 687b         	ldr	r3, [r7, #0x4]
    2e32: 681b         	ldr	r3, [r3]
    2e34: 78fa         	ldrb	r2, [r7, #0x3]
    2e36: 2101         	movs	r1, #0x1
    2e38: fa01 f202    	lsl.w	r2, r1, r2
    2e3c: 43d2         	mvns	r2, r2
    2e3e: 401a         	ands	r2, r3
    2e40: 687b         	ldr	r3, [r7, #0x4]
    2e42: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:122
; }
    2e44: bf00         	nop
    2e46: 370c         	adds	r7, #0xc
    2e48: 46bd         	mov	sp, r7
    2e4a: f85d 7b04    	ldr	r7, [sp], #4
    2e4e: 4770         	bx	lr

00002e50 <gpio_set_value_high>:
; gpio_set_value_high():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:132
; {
    2e50: b480         	push	{r7}
    2e52: b083         	sub	sp, #0xc
    2e54: af00         	add	r7, sp, #0x0
    2e56: 6078         	str	r0, [r7, #0x4]
    2e58: 460b         	mov	r3, r1
    2e5a: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:133
;     gpio->GPIO_SWPORTA_DR |= (1 << pin_no);
    2e5c: 687b         	ldr	r3, [r7, #0x4]
    2e5e: 681b         	ldr	r3, [r3]
    2e60: 78fa         	ldrb	r2, [r7, #0x3]
    2e62: 2101         	movs	r1, #0x1
    2e64: fa01 f202    	lsl.w	r2, r1, r2
    2e68: 431a         	orrs	r2, r3
    2e6a: 687b         	ldr	r3, [r7, #0x4]
    2e6c: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:134
; }
    2e6e: bf00         	nop
    2e70: 370c         	adds	r7, #0xc
    2e72: 46bd         	mov	sp, r7
    2e74: f85d 7b04    	ldr	r7, [sp], #4
    2e78: 4770         	bx	lr

00002e7a <gpio_toggle_value>:
; gpio_toggle_value():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:144
; {
    2e7a: b480         	push	{r7}
    2e7c: b083         	sub	sp, #0xc
    2e7e: af00         	add	r7, sp, #0x0
    2e80: 6078         	str	r0, [r7, #0x4]
    2e82: 460b         	mov	r3, r1
    2e84: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:145
;     gpio->GPIO_SWPORTA_DR ^= (1 << pin_no);
    2e86: 687b         	ldr	r3, [r7, #0x4]
    2e88: 681b         	ldr	r3, [r3]
    2e8a: 78fa         	ldrb	r2, [r7, #0x3]
    2e8c: 2101         	movs	r1, #0x1
    2e8e: fa01 f202    	lsl.w	r2, r1, r2
    2e92: 405a         	eors	r2, r3
    2e94: 687b         	ldr	r3, [r7, #0x4]
    2e96: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:146
; }
    2e98: bf00         	nop
    2e9a: 370c         	adds	r7, #0xc
    2e9c: 46bd         	mov	sp, r7
    2e9e: f85d 7b04    	ldr	r7, [sp], #4
    2ea2: 4770         	bx	lr

00002ea4 <gpio_get_value>:
; gpio_get_value():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:156
; {
    2ea4: b480         	push	{r7}
    2ea6: b083         	sub	sp, #0xc
    2ea8: af00         	add	r7, sp, #0x0
    2eaa: 6078         	str	r0, [r7, #0x4]
    2eac: 460b         	mov	r3, r1
    2eae: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:157
;     return gpio->GPIO_EXT_PORTA & (1 << pin_no) ? 1: 0;
    2eb0: 687b         	ldr	r3, [r7, #0x4]
    2eb2: 6d1b         	ldr	r3, [r3, #0x50]
    2eb4: 78fa         	ldrb	r2, [r7, #0x3]
    2eb6: 2101         	movs	r1, #0x1
    2eb8: fa01 f202    	lsl.w	r2, r1, r2
    2ebc: 4013         	ands	r3, r2
    2ebe: 2b00         	cmp	r3, #0x0
    2ec0: bf14         	ite	ne
    2ec2: 2301         	movne	r3, #0x1
    2ec4: 2300         	moveq	r3, #0x0
    2ec6: b2db         	uxtb	r3, r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:158
; }
    2ec8: 4618         	mov	r0, r3
    2eca: 370c         	adds	r7, #0xc
    2ecc: 46bd         	mov	sp, r7
    2ece: f85d 7b04    	ldr	r7, [sp], #4
    2ed2: 4770         	bx	lr

00002ed4 <gpio_read_config1>:
; gpio_read_config1():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:168
; {
    2ed4: b480         	push	{r7}
    2ed6: b083         	sub	sp, #0xc
    2ed8: af00         	add	r7, sp, #0x0
    2eda: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:169
;     return gpio->GPIO_CONFIG_REG1;
    2edc: 687b         	ldr	r3, [r7, #0x4]
    2ede: 6f5b         	ldr	r3, [r3, #0x74]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:170
; }
    2ee0: 4618         	mov	r0, r3
    2ee2: 370c         	adds	r7, #0xc
    2ee4: 46bd         	mov	sp, r7
    2ee6: f85d 7b04    	ldr	r7, [sp], #4
    2eea: 4770         	bx	lr

00002eec <gpio_read_config2>:
; gpio_read_config2():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:180
; {
    2eec: b480         	push	{r7}
    2eee: b083         	sub	sp, #0xc
    2ef0: af00         	add	r7, sp, #0x0
    2ef2: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:181
;     return gpio->GPIO_CONFIG_REG2;
    2ef4: 687b         	ldr	r3, [r7, #0x4]
    2ef6: 6f1b         	ldr	r3, [r3, #0x70]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:182
; }
    2ef8: 4618         	mov	r0, r3
    2efa: 370c         	adds	r7, #0xc
    2efc: 46bd         	mov	sp, r7
    2efe: f85d 7b04    	ldr	r7, [sp], #4
    2f02: 4770         	bx	lr

00002f04 <gpio_enable_interrupt>:
; gpio_enable_interrupt():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:192
; {
    2f04: b480         	push	{r7}
    2f06: b083         	sub	sp, #0xc
    2f08: af00         	add	r7, sp, #0x0
    2f0a: 6078         	str	r0, [r7, #0x4]
    2f0c: 460b         	mov	r3, r1
    2f0e: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:193
;     gpio->GPIO_INTEN |= (1 << pin_no);
    2f10: 687b         	ldr	r3, [r7, #0x4]
    2f12: 6b1b         	ldr	r3, [r3, #0x30]
    2f14: 78fa         	ldrb	r2, [r7, #0x3]
    2f16: 2101         	movs	r1, #0x1
    2f18: fa01 f202    	lsl.w	r2, r1, r2
    2f1c: 431a         	orrs	r2, r3
    2f1e: 687b         	ldr	r3, [r7, #0x4]
    2f20: 631a         	str	r2, [r3, #0x30]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:194
; }
    2f22: bf00         	nop
    2f24: 370c         	adds	r7, #0xc
    2f26: 46bd         	mov	sp, r7
    2f28: f85d 7b04    	ldr	r7, [sp], #4
    2f2c: 4770         	bx	lr

00002f2e <gpio_disable_interrupt>:
; gpio_disable_interrupt():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:204
; {
    2f2e: b480         	push	{r7}
    2f30: b083         	sub	sp, #0xc
    2f32: af00         	add	r7, sp, #0x0
    2f34: 6078         	str	r0, [r7, #0x4]
    2f36: 460b         	mov	r3, r1
    2f38: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:205
;     gpio->GPIO_INTEN &= ~(1 << pin_no);
    2f3a: 687b         	ldr	r3, [r7, #0x4]
    2f3c: 6b1b         	ldr	r3, [r3, #0x30]
    2f3e: 78fa         	ldrb	r2, [r7, #0x3]
    2f40: 2101         	movs	r1, #0x1
    2f42: fa01 f202    	lsl.w	r2, r1, r2
    2f46: 43d2         	mvns	r2, r2
    2f48: 401a         	ands	r2, r3
    2f4a: 687b         	ldr	r3, [r7, #0x4]
    2f4c: 631a         	str	r2, [r3, #0x30]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:206
; }
    2f4e: bf00         	nop
    2f50: 370c         	adds	r7, #0xc
    2f52: 46bd         	mov	sp, r7
    2f54: f85d 7b04    	ldr	r7, [sp], #4
    2f58: 4770         	bx	lr

00002f5a <gpio_mask_interrupt>:
; gpio_mask_interrupt():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:216
; {
    2f5a: b480         	push	{r7}
    2f5c: b083         	sub	sp, #0xc
    2f5e: af00         	add	r7, sp, #0x0
    2f60: 6078         	str	r0, [r7, #0x4]
    2f62: 460b         	mov	r3, r1
    2f64: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:217
;     gpio->GPIO_INTMASK |= (1 << pin_no);
    2f66: 687b         	ldr	r3, [r7, #0x4]
    2f68: 6b5b         	ldr	r3, [r3, #0x34]
    2f6a: 78fa         	ldrb	r2, [r7, #0x3]
    2f6c: 2101         	movs	r1, #0x1
    2f6e: fa01 f202    	lsl.w	r2, r1, r2
    2f72: 431a         	orrs	r2, r3
    2f74: 687b         	ldr	r3, [r7, #0x4]
    2f76: 635a         	str	r2, [r3, #0x34]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:218
; }
    2f78: bf00         	nop
    2f7a: 370c         	adds	r7, #0xc
    2f7c: 46bd         	mov	sp, r7
    2f7e: f85d 7b04    	ldr	r7, [sp], #4
    2f82: 4770         	bx	lr

00002f84 <gpio_unmask_interrupt>:
; gpio_unmask_interrupt():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:228
; {
    2f84: b480         	push	{r7}
    2f86: b083         	sub	sp, #0xc
    2f88: af00         	add	r7, sp, #0x0
    2f8a: 6078         	str	r0, [r7, #0x4]
    2f8c: 460b         	mov	r3, r1
    2f8e: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:229
;     gpio->GPIO_INTMASK &= ~(1 << pin_no);
    2f90: 687b         	ldr	r3, [r7, #0x4]
    2f92: 6b5b         	ldr	r3, [r3, #0x34]
    2f94: 78fa         	ldrb	r2, [r7, #0x3]
    2f96: 2101         	movs	r1, #0x1
    2f98: fa01 f202    	lsl.w	r2, r1, r2
    2f9c: 43d2         	mvns	r2, r2
    2f9e: 401a         	ands	r2, r3
    2fa0: 687b         	ldr	r3, [r7, #0x4]
    2fa2: 635a         	str	r2, [r3, #0x34]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:230
; }
    2fa4: bf00         	nop
    2fa6: 370c         	adds	r7, #0xc
    2fa8: 46bd         	mov	sp, r7
    2faa: f85d 7b04    	ldr	r7, [sp], #4
    2fae: 4770         	bx	lr

00002fb0 <gpio_interrupt_set_both_edge_trigger>:
; gpio_interrupt_set_both_edge_trigger():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:252
; {
    2fb0: b480         	push	{r7}
    2fb2: b083         	sub	sp, #0xc
    2fb4: af00         	add	r7, sp, #0x0
    2fb6: 6078         	str	r0, [r7, #0x4]
    2fb8: 460b         	mov	r3, r1
    2fba: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:253
;     gpio->GPIO_INT_BOTHEDGE |= (1 << pin_no);
    2fbc: 687b         	ldr	r3, [r7, #0x4]
    2fbe: 6e9b         	ldr	r3, [r3, #0x68]
    2fc0: 78fa         	ldrb	r2, [r7, #0x3]
    2fc2: 2101         	movs	r1, #0x1
    2fc4: fa01 f202    	lsl.w	r2, r1, r2
    2fc8: 431a         	orrs	r2, r3
    2fca: 687b         	ldr	r3, [r7, #0x4]
    2fcc: 669a         	str	r2, [r3, #0x68]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:254
; }
    2fce: bf00         	nop
    2fd0: 370c         	adds	r7, #0xc
    2fd2: 46bd         	mov	sp, r7
    2fd4: f85d 7b04    	ldr	r7, [sp], #4
    2fd8: 4770         	bx	lr

00002fda <gpio_interrupt_set_level_trigger>:
; gpio_interrupt_set_level_trigger():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:264
; {
    2fda: b480         	push	{r7}
    2fdc: b083         	sub	sp, #0xc
    2fde: af00         	add	r7, sp, #0x0
    2fe0: 6078         	str	r0, [r7, #0x4]
    2fe2: 460b         	mov	r3, r1
    2fe4: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:265
;     gpio->GPIO_INTTYPE_LEVEL &= ~(1 << pin_no);
    2fe6: 687b         	ldr	r3, [r7, #0x4]
    2fe8: 6b9b         	ldr	r3, [r3, #0x38]
    2fea: 78fa         	ldrb	r2, [r7, #0x3]
    2fec: 2101         	movs	r1, #0x1
    2fee: fa01 f202    	lsl.w	r2, r1, r2
    2ff2: 43d2         	mvns	r2, r2
    2ff4: 401a         	ands	r2, r3
    2ff6: 687b         	ldr	r3, [r7, #0x4]
    2ff8: 639a         	str	r2, [r3, #0x38]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:266
; }
    2ffa: bf00         	nop
    2ffc: 370c         	adds	r7, #0xc
    2ffe: 46bd         	mov	sp, r7
    3000: f85d 7b04    	ldr	r7, [sp], #4
    3004: 4770         	bx	lr

00003006 <gpio_interrupt_set_edge_trigger>:
; gpio_interrupt_set_edge_trigger():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:276
; {
    3006: b480         	push	{r7}
    3008: b083         	sub	sp, #0xc
    300a: af00         	add	r7, sp, #0x0
    300c: 6078         	str	r0, [r7, #0x4]
    300e: 460b         	mov	r3, r1
    3010: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:277
;     gpio->GPIO_INTTYPE_LEVEL |= (1 << pin_no);
    3012: 687b         	ldr	r3, [r7, #0x4]
    3014: 6b9b         	ldr	r3, [r3, #0x38]
    3016: 78fa         	ldrb	r2, [r7, #0x3]
    3018: 2101         	movs	r1, #0x1
    301a: fa01 f202    	lsl.w	r2, r1, r2
    301e: 431a         	orrs	r2, r3
    3020: 687b         	ldr	r3, [r7, #0x4]
    3022: 639a         	str	r2, [r3, #0x38]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:278
; }
    3024: bf00         	nop
    3026: 370c         	adds	r7, #0xc
    3028: 46bd         	mov	sp, r7
    302a: f85d 7b04    	ldr	r7, [sp], #4
    302e: 4770         	bx	lr

00003030 <gpio_interrupt_set_polarity_high>:
; gpio_interrupt_set_polarity_high():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:300
; {
    3030: b480         	push	{r7}
    3032: b083         	sub	sp, #0xc
    3034: af00         	add	r7, sp, #0x0
    3036: 6078         	str	r0, [r7, #0x4]
    3038: 460b         	mov	r3, r1
    303a: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:301
;     gpio->GPIO_INT_POLARITY |= (1 << pin_no);
    303c: 687b         	ldr	r3, [r7, #0x4]
    303e: 6bdb         	ldr	r3, [r3, #0x3c]
    3040: 78fa         	ldrb	r2, [r7, #0x3]
    3042: 2101         	movs	r1, #0x1
    3044: fa01 f202    	lsl.w	r2, r1, r2
    3048: 431a         	orrs	r2, r3
    304a: 687b         	ldr	r3, [r7, #0x4]
    304c: 63da         	str	r2, [r3, #0x3c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:302
; }
    304e: bf00         	nop
    3050: 370c         	adds	r7, #0xc
    3052: 46bd         	mov	sp, r7
    3054: f85d 7b04    	ldr	r7, [sp], #4
    3058: 4770         	bx	lr

0000305a <gpio_interrupt_set_polarity_low>:
; gpio_interrupt_set_polarity_low():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:312
; {
    305a: b480         	push	{r7}
    305c: b083         	sub	sp, #0xc
    305e: af00         	add	r7, sp, #0x0
    3060: 6078         	str	r0, [r7, #0x4]
    3062: 460b         	mov	r3, r1
    3064: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:313
;     gpio->GPIO_INT_POLARITY &= ~(1 << pin_no);
    3066: 687b         	ldr	r3, [r7, #0x4]
    3068: 6bdb         	ldr	r3, [r3, #0x3c]
    306a: 78fa         	ldrb	r2, [r7, #0x3]
    306c: 2101         	movs	r1, #0x1
    306e: fa01 f202    	lsl.w	r2, r1, r2
    3072: 43d2         	mvns	r2, r2
    3074: 401a         	ands	r2, r3
    3076: 687b         	ldr	r3, [r7, #0x4]
    3078: 63da         	str	r2, [r3, #0x3c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:314
; }
    307a: bf00         	nop
    307c: 370c         	adds	r7, #0xc
    307e: 46bd         	mov	sp, r7
    3080: f85d 7b04    	ldr	r7, [sp], #4
    3084: 4770         	bx	lr

00003086 <gpio_enable_debounce>:
; gpio_enable_debounce():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:324
; {
    3086: b480         	push	{r7}
    3088: b083         	sub	sp, #0xc
    308a: af00         	add	r7, sp, #0x0
    308c: 6078         	str	r0, [r7, #0x4]
    308e: 460b         	mov	r3, r1
    3090: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:325
;     gpio->GPIO_DEBOUNCE |= (1 << pin_no);
    3092: 687b         	ldr	r3, [r7, #0x4]
    3094: 6c9b         	ldr	r3, [r3, #0x48]
    3096: 78fa         	ldrb	r2, [r7, #0x3]
    3098: 2101         	movs	r1, #0x1
    309a: fa01 f202    	lsl.w	r2, r1, r2
    309e: 431a         	orrs	r2, r3
    30a0: 687b         	ldr	r3, [r7, #0x4]
    30a2: 649a         	str	r2, [r3, #0x48]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:326
; }
    30a4: bf00         	nop
    30a6: 370c         	adds	r7, #0xc
    30a8: 46bd         	mov	sp, r7
    30aa: f85d 7b04    	ldr	r7, [sp], #4
    30ae: 4770         	bx	lr

000030b0 <gpio_disable_debounce>:
; gpio_disable_debounce():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:336
; {
    30b0: b480         	push	{r7}
    30b2: b083         	sub	sp, #0xc
    30b4: af00         	add	r7, sp, #0x0
    30b6: 6078         	str	r0, [r7, #0x4]
    30b8: 460b         	mov	r3, r1
    30ba: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:337
;     gpio->GPIO_DEBOUNCE &= ~(1 << pin_no);
    30bc: 687b         	ldr	r3, [r7, #0x4]
    30be: 6c9b         	ldr	r3, [r3, #0x48]
    30c0: 78fa         	ldrb	r2, [r7, #0x3]
    30c2: 2101         	movs	r1, #0x1
    30c4: fa01 f202    	lsl.w	r2, r1, r2
    30c8: 43d2         	mvns	r2, r2
    30ca: 401a         	ands	r2, r3
    30cc: 687b         	ldr	r3, [r7, #0x4]
    30ce: 649a         	str	r2, [r3, #0x48]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:338
; }
    30d0: bf00         	nop
    30d2: 370c         	adds	r7, #0xc
    30d4: 46bd         	mov	sp, r7
    30d6: f85d 7b04    	ldr	r7, [sp], #4
    30da: 4770         	bx	lr

000030dc <gpio_interrupt_eoi>:
; gpio_interrupt_eoi():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:348
; {
    30dc: b480         	push	{r7}
    30de: b083         	sub	sp, #0xc
    30e0: af00         	add	r7, sp, #0x0
    30e2: 6078         	str	r0, [r7, #0x4]
    30e4: 460b         	mov	r3, r1
    30e6: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:349
;     gpio->GPIO_PORTA_EOI |= (1 << pin_no);
    30e8: 687b         	ldr	r3, [r7, #0x4]
    30ea: 6cdb         	ldr	r3, [r3, #0x4c]
    30ec: 78fa         	ldrb	r2, [r7, #0x3]
    30ee: 2101         	movs	r1, #0x1
    30f0: fa01 f202    	lsl.w	r2, r1, r2
    30f4: 431a         	orrs	r2, r3
    30f6: 687b         	ldr	r3, [r7, #0x4]
    30f8: 64da         	str	r2, [r3, #0x4c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:350
;     (void) gpio->GPIO_PORTA_EOI;
    30fa: 687b         	ldr	r3, [r7, #0x4]
    30fc: 6cdb         	ldr	r3, [r3, #0x4c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:351
; }
    30fe: bf00         	nop
    3100: 370c         	adds	r7, #0xc
    3102: 46bd         	mov	sp, r7
    3104: f85d 7b04    	ldr	r7, [sp], #4
    3108: 4770         	bx	lr

0000310a <gpio_is_flexio>:
; gpio_is_flexio():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:360
; {
    310a: b480         	push	{r7}
    310c: b083         	sub	sp, #0xc
    310e: af00         	add	r7, sp, #0x0
    3110: 4603         	mov	r3, r0
    3112: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:361
;     if (pin_no == 4 || pin_no == 5 || pin_no == 6 || pin_no == 7)
    3114: 79fb         	ldrb	r3, [r7, #0x7]
    3116: 2b04         	cmp	r3, #0x4
    3118: d008         	beq	0x312c <gpio_is_flexio+0x22> @ imm = #0x10
    311a: 79fb         	ldrb	r3, [r7, #0x7]
    311c: 2b05         	cmp	r3, #0x5
    311e: d005         	beq	0x312c <gpio_is_flexio+0x22> @ imm = #0xa
    3120: 79fb         	ldrb	r3, [r7, #0x7]
    3122: 2b06         	cmp	r3, #0x6
    3124: d002         	beq	0x312c <gpio_is_flexio+0x22> @ imm = #0x4
    3126: 79fb         	ldrb	r3, [r7, #0x7]
    3128: 2b07         	cmp	r3, #0x7
    312a: d101         	bne	0x3130 <gpio_is_flexio+0x26> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:363
;         return 1;
    312c: 2301         	movs	r3, #0x1
    312e: e000         	b	0x3132 <gpio_is_flexio+0x28> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:367
;         return 0;
    3130: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:369
; }
    3132: 4618         	mov	r0, r3
    3134: 370c         	adds	r7, #0xc
    3136: 46bd         	mov	sp, r7
    3138: f85d 7b04    	ldr	r7, [sp], #4
    313c: 4770         	bx	lr

0000313e <lpgpio_is_flexio>:
; lpgpio_is_flexio():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:378
; {
    313e: b480         	push	{r7}
    3140: b083         	sub	sp, #0xc
    3142: af00         	add	r7, sp, #0x0
    3144: 4603         	mov	r3, r0
    3146: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:379
;     if (pin_no == 0 || pin_no == 1 || pin_no == 2 || pin_no == 3)
    3148: 79fb         	ldrb	r3, [r7, #0x7]
    314a: 2b00         	cmp	r3, #0x0
    314c: d008         	beq	0x3160 <lpgpio_is_flexio+0x22> @ imm = #0x10
    314e: 79fb         	ldrb	r3, [r7, #0x7]
    3150: 2b01         	cmp	r3, #0x1
    3152: d005         	beq	0x3160 <lpgpio_is_flexio+0x22> @ imm = #0xa
    3154: 79fb         	ldrb	r3, [r7, #0x7]
    3156: 2b02         	cmp	r3, #0x2
    3158: d002         	beq	0x3160 <lpgpio_is_flexio+0x22> @ imm = #0x4
    315a: 79fb         	ldrb	r3, [r7, #0x7]
    315c: 2b03         	cmp	r3, #0x3
    315e: d101         	bne	0x3164 <lpgpio_is_flexio+0x26> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:381
;         return 1;
    3160: 2301         	movs	r3, #0x1
    3162: e000         	b	0x3166 <lpgpio_is_flexio+0x28> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:385
;         return 0;
    3164: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:387
; }
    3166: 4618         	mov	r0, r3
    3168: 370c         	adds	r7, #0xc
    316a: 46bd         	mov	sp, r7
    316c: f85d 7b04    	ldr	r7, [sp], #4
    3170: 4770         	bx	lr

00003172 <gpio_set_hardware_mode>:
; gpio_set_hardware_mode():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:397
; {
    3172: b480         	push	{r7}
    3174: b083         	sub	sp, #0xc
    3176: af00         	add	r7, sp, #0x0
    3178: 6078         	str	r0, [r7, #0x4]
    317a: 460b         	mov	r3, r1
    317c: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:398
;     gpio->GPIO_SWPORTA_CTL |= (1 << pin_no);
    317e: 687b         	ldr	r3, [r7, #0x4]
    3180: 689b         	ldr	r3, [r3, #0x8]
    3182: 78fa         	ldrb	r2, [r7, #0x3]
    3184: 2101         	movs	r1, #0x1
    3186: fa01 f202    	lsl.w	r2, r1, r2
    318a: 431a         	orrs	r2, r3
    318c: 687b         	ldr	r3, [r7, #0x4]
    318e: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:399
; }
    3190: bf00         	nop
    3192: 370c         	adds	r7, #0xc
    3194: 46bd         	mov	sp, r7
    3196: f85d 7b04    	ldr	r7, [sp], #4
    319a: 4770         	bx	lr

0000319c <gpio_set_software_mode>:
; gpio_set_software_mode():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:409
; {
    319c: b480         	push	{r7}
    319e: b083         	sub	sp, #0xc
    31a0: af00         	add	r7, sp, #0x0
    31a2: 6078         	str	r0, [r7, #0x4]
    31a4: 460b         	mov	r3, r1
    31a6: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:410
;     gpio->GPIO_SWPORTA_CTL &= ~(1 << pin_no);
    31a8: 687b         	ldr	r3, [r7, #0x4]
    31aa: 689b         	ldr	r3, [r3, #0x8]
    31ac: 78fa         	ldrb	r2, [r7, #0x3]
    31ae: 2101         	movs	r1, #0x1
    31b0: fa01 f202    	lsl.w	r2, r1, r2
    31b4: 43d2         	mvns	r2, r2
    31b6: 401a         	ands	r2, r3
    31b8: 687b         	ldr	r3, [r7, #0x4]
    31ba: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/gpio.h:411
; }
    31bc: bf00         	nop
    31be: 370c         	adds	r7, #0xc
    31c0: 46bd         	mov	sp, r7
    31c2: f85d 7b04    	ldr	r7, [sp], #4
    31c6: 4770         	bx	lr

000031c8 <enable_gpio_debounce_clk>:
; enable_gpio_debounce_clk():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:37
; {
    31c8: b480         	push	{r7}
    31ca: b085         	sub	sp, #0x14
    31cc: af00         	add	r7, sp, #0x0
    31ce: 4603         	mov	r3, r0
    31d0: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:38
;     volatile uint32_t *gpio_ctrl = (volatile uint32_t*) ((&CLKCTL_PER_SLV->GPIO_CTRL0) + instance);
    31d2: 79fb         	ldrb	r3, [r7, #0x7]
    31d4: 009a         	lsls	r2, r3, #0x2
    31d6: 4b07         	ldr	r3, [pc, #0x1c]         @ 0x31f4 <enable_gpio_debounce_clk+0x2c>
    31d8: 4413         	add	r3, r2
    31da: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:41
;     *gpio_ctrl |= GPIO_CTRL_DB_CKEN;
    31dc: 68fb         	ldr	r3, [r7, #0xc]
    31de: 681b         	ldr	r3, [r3]
    31e0: f443 5280    	orr	r2, r3, #0x1000
    31e4: 68fb         	ldr	r3, [r7, #0xc]
    31e6: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:42
; }
    31e8: bf00         	nop
    31ea: 3714         	adds	r7, #0x14
    31ec: 46bd         	mov	sp, r7
    31ee: f85d 7b04    	ldr	r7, [sp], #4
    31f2: 4770         	bx	lr
    31f4: 80 f0 02 49  	.word	0x4902f080

000031f8 <disable_gpio_debounce_clk>:
; disable_gpio_debounce_clk():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:51
; {
    31f8: b480         	push	{r7}
    31fa: b085         	sub	sp, #0x14
    31fc: af00         	add	r7, sp, #0x0
    31fe: 4603         	mov	r3, r0
    3200: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:52
;     volatile uint32_t *gpio_ctrl = (volatile uint32_t*) ((&CLKCTL_PER_SLV->GPIO_CTRL0) + instance);
    3202: 79fb         	ldrb	r3, [r7, #0x7]
    3204: 009a         	lsls	r2, r3, #0x2
    3206: 4b07         	ldr	r3, [pc, #0x1c]         @ 0x3224 <disable_gpio_debounce_clk+0x2c>
    3208: 4413         	add	r3, r2
    320a: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:55
;     *gpio_ctrl &= ~GPIO_CTRL_DB_CKEN;
    320c: 68fb         	ldr	r3, [r7, #0xc]
    320e: 681b         	ldr	r3, [r3]
    3210: f423 5280    	bic	r2, r3, #0x1000
    3214: 68fb         	ldr	r3, [r7, #0xc]
    3216: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:56
; }
    3218: bf00         	nop
    321a: 3714         	adds	r7, #0x14
    321c: 46bd         	mov	sp, r7
    321e: f85d 7b04    	ldr	r7, [sp], #4
    3222: 4770         	bx	lr
    3224: 80 f0 02 49  	.word	0x4902f080

00003228 <set_gpio_debounce_clkdiv>:
; set_gpio_debounce_clkdiv():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:66
; {
    3228: b480         	push	{r7}
    322a: b085         	sub	sp, #0x14
    322c: af00         	add	r7, sp, #0x0
    322e: 4603         	mov	r3, r0
    3230: 460a         	mov	r2, r1
    3232: 80fb         	strh	r3, [r7, #0x6]
    3234: 4613         	mov	r3, r2
    3236: 717b         	strb	r3, [r7, #0x5]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:67
;     volatile uint32_t *gpio_ctrl = (volatile uint32_t*) ((&CLKCTL_PER_SLV->GPIO_CTRL0) + instance);
    3238: 797b         	ldrb	r3, [r7, #0x5]
    323a: 009a         	lsls	r2, r3, #0x2
    323c: 4b07         	ldr	r3, [pc, #0x1c]         @ 0x325c <set_gpio_debounce_clkdiv+0x34>
    323e: 4413         	add	r3, r2
    3240: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:70
;     *gpio_ctrl |= clk_div;
    3242: 68fb         	ldr	r3, [r7, #0xc]
    3244: 681a         	ldr	r2, [r3]
    3246: 88fb         	ldrh	r3, [r7, #0x6]
    3248: 431a         	orrs	r2, r3
    324a: 68fb         	ldr	r3, [r7, #0xc]
    324c: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:71
; }
    324e: bf00         	nop
    3250: 3714         	adds	r7, #0x14
    3252: 46bd         	mov	sp, r7
    3254: f85d 7b04    	ldr	r7, [sp], #4
    3258: 4770         	bx	lr
    325a: bf00         	nop
    325c: 80 f0 02 49  	.word	0x4902f080

00003260 <set_flexio_gpio_voltage_1v8>:
; set_flexio_gpio_voltage_1v8():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:80
; {
    3260: b480         	push	{r7}
    3262: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:82
;     VBAT->GPIO_CTRL = GPIO_CTRL_VOLT_1V8;
    3264: 4b03         	ldr	r3, [pc, #0xc]          @ 0x3274 <set_flexio_gpio_voltage_1v8+0x14>
    3266: 2201         	movs	r2, #0x1
    3268: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:83
; }
    326a: bf00         	nop
    326c: 46bd         	mov	sp, r7
    326e: f85d 7b04    	ldr	r7, [sp], #4
    3272: 4770         	bx	lr
    3274: 00 90 60 1a  	.word	0x1a609000

00003278 <set_flexio_gpio_voltage_3v3>:
; set_flexio_gpio_voltage_3v3():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:92
; {
    3278: b480         	push	{r7}
    327a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:94
;     VBAT->GPIO_CTRL = ~GPIO_CTRL_VOLT_1V8;
    327c: 4b04         	ldr	r3, [pc, #0x10]         @ 0x3290 <set_flexio_gpio_voltage_3v3+0x18>
    327e: f06f 0201    	mvn	r2, #0x1
    3282: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_gpio.h:95
; }
    3284: bf00         	nop
    3286: 46bd         	mov	sp, r7
    3288: f85d 7b04    	ldr	r7, [sp], #4
    328c: 4770         	bx	lr
    328e: bf00         	nop
    3290: 00 90 60 1a  	.word	0x1a609000

00003294 <GPIO_Initialize>:
; GPIO_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:45
; {
    3294: b580         	push	{r7, lr}
    3296: b084         	sub	sp, #0x10
    3298: af00         	add	r7, sp, #0x0
    329a: 60f8         	str	r0, [r7, #0xc]
    329c: 60b9         	str	r1, [r7, #0x8]
    329e: 4613         	mov	r3, r2
    32a0: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:46
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    32a2: 79fb         	ldrb	r3, [r7, #0x7]
    32a4: 2b07         	cmp	r3, #0x7
    32a6: d902         	bls	0x32ae <GPIO_Initialize+0x1a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:48
;         return ARM_DRIVER_ERROR_PARAMETER;
    32a8: f06f 0304    	mvn	r3, #0x4
    32ac: e012         	b	0x32d4 <GPIO_Initialize+0x40> @ imm = #0x24
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:52
;     gpio_mask_interrupt (GPIO->reg_base, pin_no);
    32ae: 68fb         	ldr	r3, [r7, #0xc]
    32b0: 681b         	ldr	r3, [r3]
    32b2: 79fa         	ldrb	r2, [r7, #0x7]
    32b4: 4611         	mov	r1, r2
    32b6: 4618         	mov	r0, r3
    32b8: f7ff fe4f    	bl	0x2f5a <gpio_mask_interrupt> @ imm = #-0x362
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:54
;     GPIO->cb_event[pin_no] = cb_event;
    32bc: 79fa         	ldrb	r2, [r7, #0x7]
    32be: 68fb         	ldr	r3, [r7, #0xc]
    32c0: 3206         	adds	r2, #0x6
    32c2: 68b9         	ldr	r1, [r7, #0x8]
    32c4: f843 1022    	str.w	r1, [r3, r2, lsl #2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:56
;     GPIO->state.initialized = 1;
    32c8: 68fa         	ldr	r2, [r7, #0xc]
    32ca: 7a13         	ldrb	r3, [r2, #0x8]
    32cc: f043 0301    	orr	r3, r3, #0x1
    32d0: 7213         	strb	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:58
;     return ARM_DRIVER_OK;
    32d2: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:59
; }
    32d4: 4618         	mov	r0, r3
    32d6: 3710         	adds	r7, #0x10
    32d8: 46bd         	mov	sp, r7
    32da: bd80         	pop	{r7, pc}

000032dc <GPIO_PowerControl>:
; GPIO_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:71
; {
    32dc: b480         	push	{r7}
    32de: b083         	sub	sp, #0xc
    32e0: af00         	add	r7, sp, #0x0
    32e2: 6078         	str	r0, [r7, #0x4]
    32e4: 460b         	mov	r3, r1
    32e6: 70fb         	strb	r3, [r7, #0x3]
    32e8: 4613         	mov	r3, r2
    32ea: 70bb         	strb	r3, [r7, #0x2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:72
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    32ec: 78fb         	ldrb	r3, [r7, #0x3]
    32ee: 2b07         	cmp	r3, #0x7
    32f0: d902         	bls	0x32f8 <GPIO_PowerControl+0x1c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:74
;         return ARM_DRIVER_ERROR_PARAMETER;
    32f2: f06f 0304    	mvn	r3, #0x4
    32f6: e028         	b	0x334a <GPIO_PowerControl+0x6e> @ imm = #0x50
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:77
;     switch (state)
    32f8: 78bb         	ldrb	r3, [r7, #0x2]
    32fa: 2b00         	cmp	r3, #0x0
    32fc: d002         	beq	0x3304 <GPIO_PowerControl+0x28> @ imm = #0x4
    32fe: 2b02         	cmp	r3, #0x2
    3300: d00f         	beq	0x3322 <GPIO_PowerControl+0x46> @ imm = #0x1e
    3302: e01e         	b	0x3342 <GPIO_PowerControl+0x66> @ imm = #0x3c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:81
;             if (GPIO->state.powered == 0)
    3304: 687b         	ldr	r3, [r7, #0x4]
    3306: 7a1b         	ldrb	r3, [r3, #0x8]
    3308: f003 0302    	and	r3, r3, #0x2
    330c: b2db         	uxtb	r3, r3
    330e: 2b00         	cmp	r3, #0x0
    3310: d101         	bne	0x3316 <GPIO_PowerControl+0x3a> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:83
;                 return ARM_DRIVER_OK;
    3312: 2300         	movs	r3, #0x0
    3314: e019         	b	0x334a <GPIO_PowerControl+0x6e> @ imm = #0x32
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:86
;             GPIO->state.powered = 0;
    3316: 687a         	ldr	r2, [r7, #0x4]
    3318: 7a13         	ldrb	r3, [r2, #0x8]
    331a: f023 0302    	bic	r3, r3, #0x2
    331e: 7213         	strb	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:87
;             break;
    3320: e012         	b	0x3348 <GPIO_PowerControl+0x6c> @ imm = #0x24
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:91
;             if (GPIO->state.initialized == 0)
    3322: 687b         	ldr	r3, [r7, #0x4]
    3324: 7a1b         	ldrb	r3, [r3, #0x8]
    3326: f003 0301    	and	r3, r3, #0x1
    332a: b2db         	uxtb	r3, r3
    332c: 2b00         	cmp	r3, #0x0
    332e: d102         	bne	0x3336 <GPIO_PowerControl+0x5a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:93
;                 return ARM_DRIVER_ERROR;
    3330: f04f 33ff    	mov.w	r3, #0xffffffff
    3334: e009         	b	0x334a <GPIO_PowerControl+0x6e> @ imm = #0x12
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:96
;             GPIO->state.powered = 1;
    3336: 687a         	ldr	r2, [r7, #0x4]
    3338: 7a13         	ldrb	r3, [r2, #0x8]
    333a: f043 0302    	orr	r3, r3, #0x2
    333e: 7213         	strb	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:97
;             break;
    3340: e002         	b	0x3348 <GPIO_PowerControl+0x6c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:102
;             return ARM_DRIVER_ERROR_UNSUPPORTED;
    3342: f06f 0303    	mvn	r3, #0x3
    3346: e000         	b	0x334a <GPIO_PowerControl+0x6e> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:105
;     return ARM_DRIVER_OK;
    3348: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:106
; }
    334a: 4618         	mov	r0, r3
    334c: 370c         	adds	r7, #0xc
    334e: 46bd         	mov	sp, r7
    3350: f85d 7b04    	ldr	r7, [sp], #4
    3354: 4770         	bx	lr

00003356 <GPIO_SetDirection>:
; GPIO_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:118
; {
    3356: b580         	push	{r7, lr}
    3358: b082         	sub	sp, #0x8
    335a: af00         	add	r7, sp, #0x0
    335c: 6078         	str	r0, [r7, #0x4]
    335e: 460b         	mov	r3, r1
    3360: 70fb         	strb	r3, [r7, #0x3]
    3362: 4613         	mov	r3, r2
    3364: 70bb         	strb	r3, [r7, #0x2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:119
;     if (GPIO->state.powered == 0)
    3366: 687b         	ldr	r3, [r7, #0x4]
    3368: 7a1b         	ldrb	r3, [r3, #0x8]
    336a: f003 0302    	and	r3, r3, #0x2
    336e: b2db         	uxtb	r3, r3
    3370: 2b00         	cmp	r3, #0x0
    3372: d102         	bne	0x337a <GPIO_SetDirection+0x24> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:121
;         return ARM_DRIVER_ERROR;
    3374: f04f 33ff    	mov.w	r3, #0xffffffff
    3378: e01f         	b	0x33ba <GPIO_SetDirection+0x64> @ imm = #0x3e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:123
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    337a: 78fb         	ldrb	r3, [r7, #0x3]
    337c: 2b07         	cmp	r3, #0x7
    337e: d902         	bls	0x3386 <GPIO_SetDirection+0x30> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:125
;         return ARM_DRIVER_ERROR_PARAMETER;
    3380: f06f 0304    	mvn	r3, #0x4
    3384: e019         	b	0x33ba <GPIO_SetDirection+0x64> @ imm = #0x32
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:128
;     switch (dir)
    3386: 78bb         	ldrb	r3, [r7, #0x2]
    3388: 2b00         	cmp	r3, #0x0
    338a: d002         	beq	0x3392 <GPIO_SetDirection+0x3c> @ imm = #0x4
    338c: 2b01         	cmp	r3, #0x1
    338e: d008         	beq	0x33a2 <GPIO_SetDirection+0x4c> @ imm = #0x10
    3390: e00f         	b	0x33b2 <GPIO_SetDirection+0x5c> @ imm = #0x1e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:133
;             gpio_set_direction_input(GPIO->reg_base, pin_no);
    3392: 687b         	ldr	r3, [r7, #0x4]
    3394: 681b         	ldr	r3, [r3]
    3396: 78fa         	ldrb	r2, [r7, #0x3]
    3398: 4611         	mov	r1, r2
    339a: 4618         	mov	r0, r3
    339c: f7ff fcfc    	bl	0x2d98 <gpio_set_direction_input> @ imm = #-0x608
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:134
;             break;
    33a0: e00a         	b	0x33b8 <GPIO_SetDirection+0x62> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:139
;             gpio_set_direction_output(GPIO->reg_base, pin_no);
    33a2: 687b         	ldr	r3, [r7, #0x4]
    33a4: 681b         	ldr	r3, [r3]
    33a6: 78fa         	ldrb	r2, [r7, #0x3]
    33a8: 4611         	mov	r1, r2
    33aa: 4618         	mov	r0, r3
    33ac: f7ff fd0a    	bl	0x2dc4 <gpio_set_direction_output> @ imm = #-0x5ec
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:140
;             break;
    33b0: e002         	b	0x33b8 <GPIO_SetDirection+0x62> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:144
;             return ARM_DRIVER_ERROR_PARAMETER;
    33b2: f06f 0304    	mvn	r3, #0x4
    33b6: e000         	b	0x33ba <GPIO_SetDirection+0x64> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:147
;     return ARM_DRIVER_OK;
    33b8: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:148
; }
    33ba: 4618         	mov	r0, r3
    33bc: 3708         	adds	r7, #0x8
    33be: 46bd         	mov	sp, r7
    33c0: bd80         	pop	{r7, pc}

000033c2 <GPIO_GetDirection>:
; GPIO_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:160
; {
    33c2: b580         	push	{r7, lr}
    33c4: b084         	sub	sp, #0x10
    33c6: af00         	add	r7, sp, #0x0
    33c8: 60f8         	str	r0, [r7, #0xc]
    33ca: 460b         	mov	r3, r1
    33cc: 607a         	str	r2, [r7, #0x4]
    33ce: 72fb         	strb	r3, [r7, #0xb]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:161
;     if (GPIO->state.powered == 0)
    33d0: 68fb         	ldr	r3, [r7, #0xc]
    33d2: 7a1b         	ldrb	r3, [r3, #0x8]
    33d4: f003 0302    	and	r3, r3, #0x2
    33d8: b2db         	uxtb	r3, r3
    33da: 2b00         	cmp	r3, #0x0
    33dc: d102         	bne	0x33e4 <GPIO_GetDirection+0x22> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:163
;         return ARM_DRIVER_ERROR;
    33de: f04f 33ff    	mov.w	r3, #0xffffffff
    33e2: e01d         	b	0x3420 <GPIO_GetDirection+0x5e> @ imm = #0x3a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:165
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    33e4: 7afb         	ldrb	r3, [r7, #0xb]
    33e6: 2b07         	cmp	r3, #0x7
    33e8: d902         	bls	0x33f0 <GPIO_GetDirection+0x2e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:167
;         return ARM_DRIVER_ERROR_PARAMETER;
    33ea: f06f 0304    	mvn	r3, #0x4
    33ee: e017         	b	0x3420 <GPIO_GetDirection+0x5e> @ imm = #0x2e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:169
;     if (dir == NULL)
    33f0: 687b         	ldr	r3, [r7, #0x4]
    33f2: 2b00         	cmp	r3, #0x0
    33f4: d102         	bne	0x33fc <GPIO_GetDirection+0x3a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:171
;         return ARM_DRIVER_ERROR_PARAMETER;
    33f6: f06f 0304    	mvn	r3, #0x4
    33fa: e011         	b	0x3420 <GPIO_GetDirection+0x5e> @ imm = #0x22
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:174
;     if (gpio_get_direction (GPIO->reg_base, pin_no))
    33fc: 68fb         	ldr	r3, [r7, #0xc]
    33fe: 681b         	ldr	r3, [r3]
    3400: 7afa         	ldrb	r2, [r7, #0xb]
    3402: 4611         	mov	r1, r2
    3404: 4618         	mov	r0, r3
    3406: f7ff fcf2    	bl	0x2dee <gpio_get_direction> @ imm = #-0x61c
    340a: 4603         	mov	r3, r0
    340c: 2b00         	cmp	r3, #0x0
    340e: d003         	beq	0x3418 <GPIO_GetDirection+0x56> @ imm = #0x6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:176
;         *dir = GPIO_PIN_DIRECTION_OUTPUT;
    3410: 687b         	ldr	r3, [r7, #0x4]
    3412: 2201         	movs	r2, #0x1
    3414: 601a         	str	r2, [r3]
    3416: e002         	b	0x341e <GPIO_GetDirection+0x5c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:180
;         *dir = GPIO_PIN_DIRECTION_INPUT;
    3418: 687b         	ldr	r3, [r7, #0x4]
    341a: 2200         	movs	r2, #0x0
    341c: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:183
;     return ARM_DRIVER_OK;
    341e: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:184
; }
    3420: 4618         	mov	r0, r3
    3422: 3710         	adds	r7, #0x10
    3424: 46bd         	mov	sp, r7
    3426: bd80         	pop	{r7, pc}

00003428 <GPIO_SetValue>:
; GPIO_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:196
; {
    3428: b580         	push	{r7, lr}
    342a: b082         	sub	sp, #0x8
    342c: af00         	add	r7, sp, #0x0
    342e: 6078         	str	r0, [r7, #0x4]
    3430: 460b         	mov	r3, r1
    3432: 70fb         	strb	r3, [r7, #0x3]
    3434: 4613         	mov	r3, r2
    3436: 70bb         	strb	r3, [r7, #0x2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:197
;     if (GPIO->state.powered == 0)
    3438: 687b         	ldr	r3, [r7, #0x4]
    343a: 7a1b         	ldrb	r3, [r3, #0x8]
    343c: f003 0302    	and	r3, r3, #0x2
    3440: b2db         	uxtb	r3, r3
    3442: 2b00         	cmp	r3, #0x0
    3444: d102         	bne	0x344c <GPIO_SetValue+0x24> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:199
;         return ARM_DRIVER_ERROR;
    3446: f04f 33ff    	mov.w	r3, #0xffffffff
    344a: e02b         	b	0x34a4 <GPIO_SetValue+0x7c> @ imm = #0x56
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:201
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    344c: 78fb         	ldrb	r3, [r7, #0x3]
    344e: 2b07         	cmp	r3, #0x7
    3450: d902         	bls	0x3458 <GPIO_SetValue+0x30> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:203
;         return ARM_DRIVER_ERROR_PARAMETER;
    3452: f06f 0304    	mvn	r3, #0x4
    3456: e025         	b	0x34a4 <GPIO_SetValue+0x7c> @ imm = #0x4a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:206
;     switch (value)
    3458: 78bb         	ldrb	r3, [r7, #0x2]
    345a: 2b02         	cmp	r3, #0x2
    345c: d016         	beq	0x348c <GPIO_SetValue+0x64> @ imm = #0x2c
    345e: 2b02         	cmp	r3, #0x2
    3460: dc1c         	bgt	0x349c <GPIO_SetValue+0x74> @ imm = #0x38
    3462: 2b00         	cmp	r3, #0x0
    3464: d002         	beq	0x346c <GPIO_SetValue+0x44> @ imm = #0x4
    3466: 2b01         	cmp	r3, #0x1
    3468: d008         	beq	0x347c <GPIO_SetValue+0x54> @ imm = #0x10
    346a: e017         	b	0x349c <GPIO_SetValue+0x74> @ imm = #0x2e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:211
;             gpio_set_value_low (GPIO->reg_base, pin_no);
    346c: 687b         	ldr	r3, [r7, #0x4]
    346e: 681b         	ldr	r3, [r3]
    3470: 78fa         	ldrb	r2, [r7, #0x3]
    3472: 4611         	mov	r1, r2
    3474: 4618         	mov	r0, r3
    3476: f7ff fcd5    	bl	0x2e24 <gpio_set_value_low> @ imm = #-0x656
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:212
;             break;
    347a: e012         	b	0x34a2 <GPIO_SetValue+0x7a> @ imm = #0x24
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:217
;             gpio_set_value_high (GPIO->reg_base, pin_no);
    347c: 687b         	ldr	r3, [r7, #0x4]
    347e: 681b         	ldr	r3, [r3]
    3480: 78fa         	ldrb	r2, [r7, #0x3]
    3482: 4611         	mov	r1, r2
    3484: 4618         	mov	r0, r3
    3486: f7ff fce3    	bl	0x2e50 <gpio_set_value_high> @ imm = #-0x63a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:218
;             break;
    348a: e00a         	b	0x34a2 <GPIO_SetValue+0x7a> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:223
;             gpio_toggle_value (GPIO->reg_base, pin_no);
    348c: 687b         	ldr	r3, [r7, #0x4]
    348e: 681b         	ldr	r3, [r3]
    3490: 78fa         	ldrb	r2, [r7, #0x3]
    3492: 4611         	mov	r1, r2
    3494: 4618         	mov	r0, r3
    3496: f7ff fcf0    	bl	0x2e7a <gpio_toggle_value> @ imm = #-0x620
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:224
;             break;
    349a: e002         	b	0x34a2 <GPIO_SetValue+0x7a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:228
;             return ARM_DRIVER_ERROR_PARAMETER;
    349c: f06f 0304    	mvn	r3, #0x4
    34a0: e000         	b	0x34a4 <GPIO_SetValue+0x7c> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:231
;      return ARM_DRIVER_OK;
    34a2: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:232
; }
    34a4: 4618         	mov	r0, r3
    34a6: 3708         	adds	r7, #0x8
    34a8: 46bd         	mov	sp, r7
    34aa: bd80         	pop	{r7, pc}

000034ac <GPIO_GetValue>:
; GPIO_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:244
; {
    34ac: b580         	push	{r7, lr}
    34ae: b084         	sub	sp, #0x10
    34b0: af00         	add	r7, sp, #0x0
    34b2: 60f8         	str	r0, [r7, #0xc]
    34b4: 460b         	mov	r3, r1
    34b6: 607a         	str	r2, [r7, #0x4]
    34b8: 72fb         	strb	r3, [r7, #0xb]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:245
;     if (GPIO->state.powered == 0)
    34ba: 68fb         	ldr	r3, [r7, #0xc]
    34bc: 7a1b         	ldrb	r3, [r3, #0x8]
    34be: f003 0302    	and	r3, r3, #0x2
    34c2: b2db         	uxtb	r3, r3
    34c4: 2b00         	cmp	r3, #0x0
    34c6: d102         	bne	0x34ce <GPIO_GetValue+0x22> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:247
;         return ARM_DRIVER_ERROR;
    34c8: f04f 33ff    	mov.w	r3, #0xffffffff
    34cc: e017         	b	0x34fe <GPIO_GetValue+0x52> @ imm = #0x2e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:249
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    34ce: 7afb         	ldrb	r3, [r7, #0xb]
    34d0: 2b07         	cmp	r3, #0x7
    34d2: d902         	bls	0x34da <GPIO_GetValue+0x2e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:251
;         return ARM_DRIVER_ERROR_PARAMETER;
    34d4: f06f 0304    	mvn	r3, #0x4
    34d8: e011         	b	0x34fe <GPIO_GetValue+0x52> @ imm = #0x22
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:254
;     if (gpio_get_value (GPIO->reg_base, pin_no))
    34da: 68fb         	ldr	r3, [r7, #0xc]
    34dc: 681b         	ldr	r3, [r3]
    34de: 7afa         	ldrb	r2, [r7, #0xb]
    34e0: 4611         	mov	r1, r2
    34e2: 4618         	mov	r0, r3
    34e4: f7ff fcde    	bl	0x2ea4 <gpio_get_value> @ imm = #-0x644
    34e8: 4603         	mov	r3, r0
    34ea: 2b00         	cmp	r3, #0x0
    34ec: d003         	beq	0x34f6 <GPIO_GetValue+0x4a> @ imm = #0x6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:256
;         *value = GPIO_PIN_STATE_HIGH;
    34ee: 687b         	ldr	r3, [r7, #0x4]
    34f0: 2201         	movs	r2, #0x1
    34f2: 601a         	str	r2, [r3]
    34f4: e002         	b	0x34fc <GPIO_GetValue+0x50> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:260
;         *value = GPIO_PIN_STATE_LOW;
    34f6: 687b         	ldr	r3, [r7, #0x4]
    34f8: 2200         	movs	r2, #0x0
    34fa: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:263
;     return ARM_DRIVER_OK;
    34fc: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:264
; }
    34fe: 4618         	mov	r0, r3
    3500: 3710         	adds	r7, #0x10
    3502: 46bd         	mov	sp, r7
    3504: bd80         	pop	{r7, pc}

00003506 <GPIO_Control>:
; GPIO_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:277
; {
    3506: b580         	push	{r7, lr}
    3508: b084         	sub	sp, #0x10
    350a: af00         	add	r7, sp, #0x0
    350c: 60f8         	str	r0, [r7, #0xc]
    350e: 607b         	str	r3, [r7, #0x4]
    3510: 460b         	mov	r3, r1
    3512: 72fb         	strb	r3, [r7, #0xb]
    3514: 4613         	mov	r3, r2
    3516: 72bb         	strb	r3, [r7, #0xa]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:278
;     if (GPIO->state.powered == 0)
    3518: 68fb         	ldr	r3, [r7, #0xc]
    351a: 7a1b         	ldrb	r3, [r3, #0x8]
    351c: f003 0302    	and	r3, r3, #0x2
    3520: b2db         	uxtb	r3, r3
    3522: 2b00         	cmp	r3, #0x0
    3524: d102         	bne	0x352c <GPIO_Control+0x26> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:280
;         return ARM_DRIVER_ERROR;
    3526: f04f 33ff    	mov.w	r3, #0xffffffff
    352a: e175         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x2ea
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:282
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    352c: 7afb         	ldrb	r3, [r7, #0xb]
    352e: 2b07         	cmp	r3, #0x7
    3530: d902         	bls	0x3538 <GPIO_Control+0x32> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:284
;         return ARM_DRIVER_ERROR_PARAMETER;
    3532: f06f 0304    	mvn	r3, #0x4
    3536: e16f         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x2de
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:287
;     switch (control_code)
    3538: 7abb         	ldrb	r3, [r7, #0xa]
    353a: 2b06         	cmp	r3, #0x6
    353c: f200 8168    	bhi.w	0x3810 <GPIO_Control+0x30a> @ imm = #0x2d0
    3540: a201         	adr	r2, #4 <GPIO_Control+0x3f>
    3542: f852 f023    	ldr.w	pc, [r2, r3, lsl #2]
    3546: bf00         	nop
    3548: 65 35 00 00  	.word	0x00003565
    354c: cb 35 00 00  	.word	0x000035cb
    3550: c3 36 00 00  	.word	0x000036c3
    3554: 2d 37 00 00  	.word	0x0000372d
    3558: 4b 37 00 00  	.word	0x0000374b
    355c: 69 37 00 00  	.word	0x00003769
    3560: db 37 00 00  	.word	0x000037db
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:291
;             if (!arg)
    3564: 687b         	ldr	r3, [r7, #0x4]
    3566: 2b00         	cmp	r3, #0x0
    3568: d102         	bne	0x3570 <GPIO_Control+0x6a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:293
;                 return ARM_DRIVER_ERROR_PARAMETER;
    356a: f06f 0304    	mvn	r3, #0x4
    356e: e153         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x2a6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:295
;             if (GPIO->gpio_id == LPGPIO_INSTANCE)
    3570: 68fb         	ldr	r3, [r7, #0xc]
    3572: 7d1b         	ldrb	r3, [r3, #0x14]
    3574: 2b0f         	cmp	r3, #0xf
    3576: d102         	bne	0x357e <GPIO_Control+0x78> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:297
;                 return ARM_DRIVER_ERROR_UNSUPPORTED;
    3578: f06f 0303    	mvn	r3, #0x3
    357c: e14c         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x298
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:300
;             if(*arg)
    357e: 687b         	ldr	r3, [r7, #0x4]
    3580: 681b         	ldr	r3, [r3]
    3582: 2b00         	cmp	r3, #0x0
    3584: d014         	beq	0x35b0 <GPIO_Control+0xaa> @ imm = #0x28
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:303
;                 enable_gpio_debounce_clk (GPIO->gpio_id);
    3586: 68fb         	ldr	r3, [r7, #0xc]
    3588: 7d1b         	ldrb	r3, [r3, #0x14]
    358a: 4618         	mov	r0, r3
    358c: f7ff fe1c    	bl	0x31c8 <enable_gpio_debounce_clk> @ imm = #-0x3c8
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:306
;                 set_gpio_debounce_clkdiv (GPIO->db_clkdiv, GPIO->gpio_id);
    3590: 68fb         	ldr	r3, [r7, #0xc]
    3592: 88da         	ldrh	r2, [r3, #0x6]
    3594: 68fb         	ldr	r3, [r7, #0xc]
    3596: 7d1b         	ldrb	r3, [r3, #0x14]
    3598: 4619         	mov	r1, r3
    359a: 4610         	mov	r0, r2
    359c: f7ff fe44    	bl	0x3228 <set_gpio_debounce_clkdiv> @ imm = #-0x378
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:309
;                 gpio_enable_debounce (GPIO->reg_base, pin_no);
    35a0: 68fb         	ldr	r3, [r7, #0xc]
    35a2: 681b         	ldr	r3, [r3]
    35a4: 7afa         	ldrb	r2, [r7, #0xb]
    35a6: 4611         	mov	r1, r2
    35a8: 4618         	mov	r0, r3
    35aa: f7ff fd6c    	bl	0x3086 <gpio_enable_debounce> @ imm = #-0x528
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:320
;             break;
    35ae: e132         	b	0x3816 <GPIO_Control+0x310> @ imm = #0x264
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:314
;                 disable_gpio_debounce_clk (GPIO->gpio_id);
    35b0: 68fb         	ldr	r3, [r7, #0xc]
    35b2: 7d1b         	ldrb	r3, [r3, #0x14]
    35b4: 4618         	mov	r0, r3
    35b6: f7ff fe1f    	bl	0x31f8 <disable_gpio_debounce_clk> @ imm = #-0x3c2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:317
;                 gpio_disable_debounce (GPIO->reg_base, pin_no);
    35ba: 68fb         	ldr	r3, [r7, #0xc]
    35bc: 681b         	ldr	r3, [r3]
    35be: 7afa         	ldrb	r2, [r7, #0xb]
    35c0: 4611         	mov	r1, r2
    35c2: 4618         	mov	r0, r3
    35c4: f7ff fd74    	bl	0x30b0 <gpio_disable_debounce> @ imm = #-0x518
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:320
;             break;
    35c8: e125         	b	0x3816 <GPIO_Control+0x310> @ imm = #0x24a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:324
;             if (!arg)
    35ca: 687b         	ldr	r3, [r7, #0x4]
    35cc: 2b00         	cmp	r3, #0x0
    35ce: d102         	bne	0x35d6 <GPIO_Control+0xd0> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:326
;                 return ARM_DRIVER_ERROR_PARAMETER;
    35d0: f06f 0304    	mvn	r3, #0x4
    35d4: e120         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x240
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:330
;             gpio_enable_interrupt (GPIO->reg_base, pin_no);
    35d6: 68fb         	ldr	r3, [r7, #0xc]
    35d8: 681b         	ldr	r3, [r3]
    35da: 7afa         	ldrb	r2, [r7, #0xb]
    35dc: 4611         	mov	r1, r2
    35de: 4618         	mov	r0, r3
    35e0: f7ff fc90    	bl	0x2f04 <gpio_enable_interrupt> @ imm = #-0x6e0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:333
;             gpio_unmask_interrupt (GPIO->reg_base, pin_no);
    35e4: 68fb         	ldr	r3, [r7, #0xc]
    35e6: 681b         	ldr	r3, [r3]
    35e8: 7afa         	ldrb	r2, [r7, #0xb]
    35ea: 4611         	mov	r1, r2
    35ec: 4618         	mov	r0, r3
    35ee: f7ff fcc9    	bl	0x2f84 <gpio_unmask_interrupt> @ imm = #-0x66e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:335
;             if (ARM_GPIO_BIT_IRQ_BOTH_EDGE(*arg))
    35f2: 687b         	ldr	r3, [r7, #0x4]
    35f4: 681b         	ldr	r3, [r3]
    35f6: f003 0302    	and	r3, r3, #0x2
    35fa: 2b00         	cmp	r3, #0x0
    35fc: d007         	beq	0x360e <GPIO_Control+0x108> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:338
;                 gpio_interrupt_set_both_edge_trigger (GPIO->reg_base, pin_no);
    35fe: 68fb         	ldr	r3, [r7, #0xc]
    3600: 681b         	ldr	r3, [r3]
    3602: 7afa         	ldrb	r2, [r7, #0xb]
    3604: 4611         	mov	r1, r2
    3606: 4618         	mov	r0, r3
    3608: f7ff fcd2    	bl	0x2fb0 <gpio_interrupt_set_both_edge_trigger> @ imm = #-0x65c
    360c: e029         	b	0x3662 <GPIO_Control+0x15c> @ imm = #0x52
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:342
;                 if (ARM_GPIO_BIT_IRQ_SENSITIVE(*arg))
    360e: 687b         	ldr	r3, [r7, #0x4]
    3610: 681b         	ldr	r3, [r3]
    3612: f003 0304    	and	r3, r3, #0x4
    3616: 2b00         	cmp	r3, #0x0
    3618: d007         	beq	0x362a <GPIO_Control+0x124> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:345
;                     gpio_interrupt_set_edge_trigger (GPIO->reg_base, pin_no);
    361a: 68fb         	ldr	r3, [r7, #0xc]
    361c: 681b         	ldr	r3, [r3]
    361e: 7afa         	ldrb	r2, [r7, #0xb]
    3620: 4611         	mov	r1, r2
    3622: 4618         	mov	r0, r3
    3624: f7ff fcef    	bl	0x3006 <gpio_interrupt_set_edge_trigger> @ imm = #-0x622
    3628: e006         	b	0x3638 <GPIO_Control+0x132> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:350
;                     gpio_interrupt_set_level_trigger (GPIO->reg_base, pin_no);
    362a: 68fb         	ldr	r3, [r7, #0xc]
    362c: 681b         	ldr	r3, [r3]
    362e: 7afa         	ldrb	r2, [r7, #0xb]
    3630: 4611         	mov	r1, r2
    3632: 4618         	mov	r0, r3
    3634: f7ff fcd1    	bl	0x2fda <gpio_interrupt_set_level_trigger> @ imm = #-0x65e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:353
;                 if (ARM_GPIO_BIT_IRQ_POLARITY(*arg))
    3638: 687b         	ldr	r3, [r7, #0x4]
    363a: 681b         	ldr	r3, [r3]
    363c: f003 0301    	and	r3, r3, #0x1
    3640: 2b00         	cmp	r3, #0x0
    3642: d007         	beq	0x3654 <GPIO_Control+0x14e> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:356
;                     gpio_interrupt_set_polarity_high (GPIO->reg_base, pin_no);
    3644: 68fb         	ldr	r3, [r7, #0xc]
    3646: 681b         	ldr	r3, [r3]
    3648: 7afa         	ldrb	r2, [r7, #0xb]
    364a: 4611         	mov	r1, r2
    364c: 4618         	mov	r0, r3
    364e: f7ff fcef    	bl	0x3030 <gpio_interrupt_set_polarity_high> @ imm = #-0x622
    3652: e006         	b	0x3662 <GPIO_Control+0x15c> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:361
;                     gpio_interrupt_set_polarity_low (GPIO->reg_base, pin_no);
    3654: 68fb         	ldr	r3, [r7, #0xc]
    3656: 681b         	ldr	r3, [r3]
    3658: 7afa         	ldrb	r2, [r7, #0xb]
    365a: 4611         	mov	r1, r2
    365c: 4618         	mov	r0, r3
    365e: f7ff fcfc    	bl	0x305a <gpio_interrupt_set_polarity_low> @ imm = #-0x608
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:365
;             gpio_interrupt_eoi(GPIO->reg_base, pin_no);
    3662: 68fb         	ldr	r3, [r7, #0xc]
    3664: 681b         	ldr	r3, [r3]
    3666: 7afa         	ldrb	r2, [r7, #0xb]
    3668: 4611         	mov	r1, r2
    366a: 4618         	mov	r0, r3
    366c: f7ff fd36    	bl	0x30dc <gpio_interrupt_eoi> @ imm = #-0x594
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:367
;             NVIC_ClearPendingIRQ (GPIO->IRQ_base_num + pin_no);
    3670: 68fb         	ldr	r3, [r7, #0xc]
    3672: f9b3 3004    	ldrsh.w	r3, [r3, #0x4]
    3676: b29a         	uxth	r2, r3
    3678: 7afb         	ldrb	r3, [r7, #0xb]
    367a: b29b         	uxth	r3, r3
    367c: 4413         	add	r3, r2
    367e: b29b         	uxth	r3, r3
    3680: b21b         	sxth	r3, r3
    3682: 4618         	mov	r0, r3
    3684: f7ff fb42    	bl	0x2d0c <__NVIC_ClearPendingIRQ> @ imm = #-0x97c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:368
;             NVIC_SetPriority ((GPIO->IRQ_base_num + pin_no), GPIO->IRQ_priority[pin_no]);
    3688: 68fb         	ldr	r3, [r7, #0xc]
    368a: f9b3 3004    	ldrsh.w	r3, [r3, #0x4]
    368e: b29a         	uxth	r2, r3
    3690: 7afb         	ldrb	r3, [r7, #0xb]
    3692: b29b         	uxth	r3, r3
    3694: 4413         	add	r3, r2
    3696: b29b         	uxth	r3, r3
    3698: b218         	sxth	r0, r3
    369a: 7afb         	ldrb	r3, [r7, #0xb]
    369c: 68fa         	ldr	r2, [r7, #0xc]
    369e: 4413         	add	r3, r2
    36a0: 7b1b         	ldrb	r3, [r3, #0xc]
    36a2: 4619         	mov	r1, r3
    36a4: f7ff fb50    	bl	0x2d48 <__NVIC_SetPriority> @ imm = #-0x960
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:369
;             NVIC_EnableIRQ (GPIO->IRQ_base_num + pin_no);
    36a8: 68fb         	ldr	r3, [r7, #0xc]
    36aa: f9b3 3004    	ldrsh.w	r3, [r3, #0x4]
    36ae: b29a         	uxth	r2, r3
    36b0: 7afb         	ldrb	r3, [r7, #0xb]
    36b2: b29b         	uxth	r3, r3
    36b4: 4413         	add	r3, r2
    36b6: b29b         	uxth	r3, r3
    36b8: b21b         	sxth	r3, r3
    36ba: 4618         	mov	r0, r3
    36bc: f7ff fae4    	bl	0x2c88 <__NVIC_EnableIRQ> @ imm = #-0xa38
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:371
;             break;
    36c0: e0a9         	b	0x3816 <GPIO_Control+0x310> @ imm = #0x152
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:376
;             gpio_disable_interrupt (GPIO->reg_base, pin_no);
    36c2: 68fb         	ldr	r3, [r7, #0xc]
    36c4: 681b         	ldr	r3, [r3]
    36c6: 7afa         	ldrb	r2, [r7, #0xb]
    36c8: 4611         	mov	r1, r2
    36ca: 4618         	mov	r0, r3
    36cc: f7ff fc2f    	bl	0x2f2e <gpio_disable_interrupt> @ imm = #-0x7a2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:377
;             gpio_mask_interrupt (GPIO->reg_base, pin_no);
    36d0: 68fb         	ldr	r3, [r7, #0xc]
    36d2: 681b         	ldr	r3, [r3]
    36d4: 7afa         	ldrb	r2, [r7, #0xb]
    36d6: 4611         	mov	r1, r2
    36d8: 4618         	mov	r0, r3
    36da: f7ff fc3e    	bl	0x2f5a <gpio_mask_interrupt> @ imm = #-0x784
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:378
;             gpio_interrupt_set_polarity_low (GPIO->reg_base, pin_no);
    36de: 68fb         	ldr	r3, [r7, #0xc]
    36e0: 681b         	ldr	r3, [r3]
    36e2: 7afa         	ldrb	r2, [r7, #0xb]
    36e4: 4611         	mov	r1, r2
    36e6: 4618         	mov	r0, r3
    36e8: f7ff fcb7    	bl	0x305a <gpio_interrupt_set_polarity_low> @ imm = #-0x692
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:379
;             gpio_interrupt_set_level_trigger (GPIO->reg_base, pin_no);
    36ec: 68fb         	ldr	r3, [r7, #0xc]
    36ee: 681b         	ldr	r3, [r3]
    36f0: 7afa         	ldrb	r2, [r7, #0xb]
    36f2: 4611         	mov	r1, r2
    36f4: 4618         	mov	r0, r3
    36f6: f7ff fc70    	bl	0x2fda <gpio_interrupt_set_level_trigger> @ imm = #-0x720
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:381
;             NVIC_ClearPendingIRQ (GPIO->IRQ_base_num + pin_no);
    36fa: 68fb         	ldr	r3, [r7, #0xc]
    36fc: f9b3 3004    	ldrsh.w	r3, [r3, #0x4]
    3700: b29a         	uxth	r2, r3
    3702: 7afb         	ldrb	r3, [r7, #0xb]
    3704: b29b         	uxth	r3, r3
    3706: 4413         	add	r3, r2
    3708: b29b         	uxth	r3, r3
    370a: b21b         	sxth	r3, r3
    370c: 4618         	mov	r0, r3
    370e: f7ff fafd    	bl	0x2d0c <__NVIC_ClearPendingIRQ> @ imm = #-0xa06
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:382
;             NVIC_DisableIRQ (GPIO->IRQ_base_num + pin_no);
    3712: 68fb         	ldr	r3, [r7, #0xc]
    3714: f9b3 3004    	ldrsh.w	r3, [r3, #0x4]
    3718: b29a         	uxth	r2, r3
    371a: 7afb         	ldrb	r3, [r7, #0xb]
    371c: b29b         	uxth	r3, r3
    371e: 4413         	add	r3, r2
    3720: b29b         	uxth	r3, r3
    3722: b21b         	sxth	r3, r3
    3724: 4618         	mov	r0, r3
    3726: f7ff facd    	bl	0x2cc4 <__NVIC_DisableIRQ> @ imm = #-0xa66
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:383
;             break;
    372a: e074         	b	0x3816 <GPIO_Control+0x310> @ imm = #0xe8
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:387
;             if (!arg)
    372c: 687b         	ldr	r3, [r7, #0x4]
    372e: 2b00         	cmp	r3, #0x0
    3730: d102         	bne	0x3738 <GPIO_Control+0x232> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:389
;                 return ARM_DRIVER_ERROR_PARAMETER;
    3732: f06f 0304    	mvn	r3, #0x4
    3736: e06f         	b	0x3818 <GPIO_Control+0x312> @ imm = #0xde
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:392
;             *arg = gpio_read_config1 (GPIO->reg_base);
    3738: 68fb         	ldr	r3, [r7, #0xc]
    373a: 681b         	ldr	r3, [r3]
    373c: 4618         	mov	r0, r3
    373e: f7ff fbc9    	bl	0x2ed4 <gpio_read_config1> @ imm = #-0x86e
    3742: 4602         	mov	r2, r0
    3744: 687b         	ldr	r3, [r7, #0x4]
    3746: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:393
;             break;
    3748: e065         	b	0x3816 <GPIO_Control+0x310> @ imm = #0xca
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:397
;             if (!arg)
    374a: 687b         	ldr	r3, [r7, #0x4]
    374c: 2b00         	cmp	r3, #0x0
    374e: d102         	bne	0x3756 <GPIO_Control+0x250> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:399
;                 return ARM_DRIVER_ERROR_PARAMETER;
    3750: f06f 0304    	mvn	r3, #0x4
    3754: e060         	b	0x3818 <GPIO_Control+0x312> @ imm = #0xc0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:402
;             *arg = gpio_read_config2 (GPIO->reg_base);
    3756: 68fb         	ldr	r3, [r7, #0xc]
    3758: 681b         	ldr	r3, [r3]
    375a: 4618         	mov	r0, r3
    375c: f7ff fbc6    	bl	0x2eec <gpio_read_config2> @ imm = #-0x874
    3760: 4602         	mov	r2, r0
    3762: 687b         	ldr	r3, [r7, #0x4]
    3764: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:403
;             break;
    3766: e056         	b	0x3816 <GPIO_Control+0x310> @ imm = #0xac
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:407
;             if (!((GPIO->gpio_id == GPIO7_INSTANCE) || (GPIO->gpio_id == LPGPIO_INSTANCE)))
    3768: 68fb         	ldr	r3, [r7, #0xc]
    376a: 7d1b         	ldrb	r3, [r3, #0x14]
    376c: 2b07         	cmp	r3, #0x7
    376e: d006         	beq	0x377e <GPIO_Control+0x278> @ imm = #0xc
    3770: 68fb         	ldr	r3, [r7, #0xc]
    3772: 7d1b         	ldrb	r3, [r3, #0x14]
    3774: 2b0f         	cmp	r3, #0xf
    3776: d002         	beq	0x377e <GPIO_Control+0x278> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:409
;                 return ARM_DRIVER_ERROR_UNSUPPORTED;
    3778: f06f 0303    	mvn	r3, #0x3
    377c: e04c         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x98
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:412
;             if (GPIO->gpio_id == LPGPIO_INSTANCE)
    377e: 68fb         	ldr	r3, [r7, #0xc]
    3780: 7d1b         	ldrb	r3, [r3, #0x14]
    3782: 2b0f         	cmp	r3, #0xf
    3784: d10c         	bne	0x37a0 <GPIO_Control+0x29a> @ imm = #0x18
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:414
;                 if (!(lpgpio_is_flexio (pin_no)))
    3786: 7afb         	ldrb	r3, [r7, #0xb]
    3788: 4618         	mov	r0, r3
    378a: f7ff fcd8    	bl	0x313e <lpgpio_is_flexio> @ imm = #-0x650
    378e: 4603         	mov	r3, r0
    3790: f083 0301    	eor	r3, r3, #0x1
    3794: b2db         	uxtb	r3, r3
    3796: 2b00         	cmp	r3, #0x0
    3798: d00f         	beq	0x37ba <GPIO_Control+0x2b4> @ imm = #0x1e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:416
;                     return ARM_DRIVER_ERROR_UNSUPPORTED;
    379a: f06f 0303    	mvn	r3, #0x3
    379e: e03b         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x76
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:421
;                 if (!(gpio_is_flexio (pin_no)))
    37a0: 7afb         	ldrb	r3, [r7, #0xb]
    37a2: 4618         	mov	r0, r3
    37a4: f7ff fcb1    	bl	0x310a <gpio_is_flexio> @ imm = #-0x69e
    37a8: 4603         	mov	r3, r0
    37aa: f083 0301    	eor	r3, r3, #0x1
    37ae: b2db         	uxtb	r3, r3
    37b0: 2b00         	cmp	r3, #0x0
    37b2: d002         	beq	0x37ba <GPIO_Control+0x2b4> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:423
;                     return ARM_DRIVER_ERROR_UNSUPPORTED;
    37b4: f06f 0303    	mvn	r3, #0x3
    37b8: e02e         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x5c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:427
;             if (!arg)
    37ba: 687b         	ldr	r3, [r7, #0x4]
    37bc: 2b00         	cmp	r3, #0x0
    37be: d102         	bne	0x37c6 <GPIO_Control+0x2c0> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:429
;                 return ARM_DRIVER_ERROR_PARAMETER;
    37c0: f06f 0304    	mvn	r3, #0x4
    37c4: e028         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x50
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:432
;             if (*arg)
    37c6: 687b         	ldr	r3, [r7, #0x4]
    37c8: 681b         	ldr	r3, [r3]
    37ca: 2b00         	cmp	r3, #0x0
    37cc: d002         	beq	0x37d4 <GPIO_Control+0x2ce> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:434
;                 set_flexio_gpio_voltage_1v8();
    37ce: f7ff fd47    	bl	0x3260 <set_flexio_gpio_voltage_1v8> @ imm = #-0x572
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:440
;             break;
    37d2: e020         	b	0x3816 <GPIO_Control+0x310> @ imm = #0x40
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:438
;                 set_flexio_gpio_voltage_3v3();
    37d4: f7ff fd50    	bl	0x3278 <set_flexio_gpio_voltage_3v3> @ imm = #-0x560
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:440
;             break;
    37d8: e01d         	b	0x3816 <GPIO_Control+0x310> @ imm = #0x3a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:444
;             if (GPIO->gpio_id != LPGPIO_INSTANCE)
    37da: 68fb         	ldr	r3, [r7, #0xc]
    37dc: 7d1b         	ldrb	r3, [r3, #0x14]
    37de: 2b0f         	cmp	r3, #0xf
    37e0: d002         	beq	0x37e8 <GPIO_Control+0x2e2> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:446
;                 return ARM_DRIVER_ERROR_UNSUPPORTED;
    37e2: f06f 0303    	mvn	r3, #0x3
    37e6: e017         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x2e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:449
;             if (*arg)
    37e8: 687b         	ldr	r3, [r7, #0x4]
    37ea: 681b         	ldr	r3, [r3]
    37ec: 2b00         	cmp	r3, #0x0
    37ee: d007         	beq	0x3800 <GPIO_Control+0x2fa> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:451
;                 gpio_set_hardware_mode(GPIO->reg_base, pin_no);
    37f0: 68fb         	ldr	r3, [r7, #0xc]
    37f2: 681b         	ldr	r3, [r3]
    37f4: 7afa         	ldrb	r2, [r7, #0xb]
    37f6: 4611         	mov	r1, r2
    37f8: 4618         	mov	r0, r3
    37fa: f7ff fcba    	bl	0x3172 <gpio_set_hardware_mode> @ imm = #-0x68c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:457
;             break;
    37fe: e00a         	b	0x3816 <GPIO_Control+0x310> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:455
;                 gpio_set_software_mode(GPIO->reg_base, pin_no);
    3800: 68fb         	ldr	r3, [r7, #0xc]
    3802: 681b         	ldr	r3, [r3]
    3804: 7afa         	ldrb	r2, [r7, #0xb]
    3806: 4611         	mov	r1, r2
    3808: 4618         	mov	r0, r3
    380a: f7ff fcc7    	bl	0x319c <gpio_set_software_mode> @ imm = #-0x672
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:457
;             break;
    380e: e002         	b	0x3816 <GPIO_Control+0x310> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:461
;             return ARM_DRIVER_ERROR;
    3810: f04f 33ff    	mov.w	r3, #0xffffffff
    3814: e000         	b	0x3818 <GPIO_Control+0x312> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:465
;     return ARM_DRIVER_OK;
    3816: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:466
; }
    3818: 4618         	mov	r0, r3
    381a: 3710         	adds	r7, #0x10
    381c: 46bd         	mov	sp, r7
    381e: bd80         	pop	{r7, pc}

00003820 <GPIO_Uninitialize>:
; GPIO_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:477
; {
    3820: b480         	push	{r7}
    3822: b083         	sub	sp, #0xc
    3824: af00         	add	r7, sp, #0x0
    3826: 6078         	str	r0, [r7, #0x4]
    3828: 460b         	mov	r3, r1
    382a: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:478
;     if (GPIO->state.initialized == 0)
    382c: 687b         	ldr	r3, [r7, #0x4]
    382e: 7a1b         	ldrb	r3, [r3, #0x8]
    3830: f003 0301    	and	r3, r3, #0x1
    3834: b2db         	uxtb	r3, r3
    3836: 2b00         	cmp	r3, #0x0
    3838: d101         	bne	0x383e <GPIO_Uninitialize+0x1e> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:480
;         return ARM_DRIVER_OK;
    383a: 2300         	movs	r3, #0x0
    383c: e011         	b	0x3862 <GPIO_Uninitialize+0x42> @ imm = #0x22
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:482
;     if (pin_no >= GPIO_PORT_MAX_PIN_NUMBER)
    383e: 78fb         	ldrb	r3, [r7, #0x3]
    3840: 2b07         	cmp	r3, #0x7
    3842: d902         	bls	0x384a <GPIO_Uninitialize+0x2a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:484
;         return ARM_DRIVER_ERROR_PARAMETER;
    3844: f06f 0304    	mvn	r3, #0x4
    3848: e00b         	b	0x3862 <GPIO_Uninitialize+0x42> @ imm = #0x16
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:487
;     GPIO->cb_event[pin_no] = NULL;
    384a: 78fa         	ldrb	r2, [r7, #0x3]
    384c: 687b         	ldr	r3, [r7, #0x4]
    384e: 3206         	adds	r2, #0x6
    3850: 2100         	movs	r1, #0x0
    3852: f843 1022    	str.w	r1, [r3, r2, lsl #2]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:489
;     GPIO->state.initialized = 0;
    3856: 687a         	ldr	r2, [r7, #0x4]
    3858: 7a13         	ldrb	r3, [r2, #0x8]
    385a: f023 0301    	bic	r3, r3, #0x1
    385e: 7213         	strb	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:491
;     return ARM_DRIVER_OK;
    3860: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:492
; }
    3862: 4618         	mov	r0, r3
    3864: 370c         	adds	r7, #0xc
    3866: 46bd         	mov	sp, r7
    3868: f85d 7b04    	ldr	r7, [sp], #4
    386c: 4770         	bx	lr

0000386e <GPIO_IRQ_Handler>:
; GPIO_IRQ_Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:503
; {
    386e: b580         	push	{r7, lr}
    3870: b082         	sub	sp, #0x8
    3872: af00         	add	r7, sp, #0x0
    3874: 6078         	str	r0, [r7, #0x4]
    3876: 460b         	mov	r3, r1
    3878: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:505
;     gpio_interrupt_eoi(GPIO->reg_base, pin_no);
    387a: 687b         	ldr	r3, [r7, #0x4]
    387c: 681b         	ldr	r3, [r3]
    387e: 78fa         	ldrb	r2, [r7, #0x3]
    3880: 4611         	mov	r1, r2
    3882: 4618         	mov	r0, r3
    3884: f7ff fc2a    	bl	0x30dc <gpio_interrupt_eoi> @ imm = #-0x7ac
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:507
;     if (GPIO->cb_event[pin_no] != NULL)
    3888: 78fa         	ldrb	r2, [r7, #0x3]
    388a: 687b         	ldr	r3, [r7, #0x4]
    388c: 3206         	adds	r2, #0x6
    388e: f853 3022    	ldr.w	r3, [r3, r2, lsl #2]
    3892: 2b00         	cmp	r3, #0x0
    3894: d006         	beq	0x38a4 <GPIO_IRQ_Handler+0x36> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:509
;         GPIO->cb_event[pin_no](ARM_GPIO_IRQ_EVENT_EXTERNAL);
    3896: 78fa         	ldrb	r2, [r7, #0x3]
    3898: 687b         	ldr	r3, [r7, #0x4]
    389a: 3206         	adds	r2, #0x6
    389c: f853 3022    	ldr.w	r3, [r3, r2, lsl #2]
    38a0: 2001         	movs	r0, #0x1
    38a2: 4798         	blx	r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:511
; }
    38a4: bf00         	nop
    38a6: 3708         	adds	r7, #0x8
    38a8: 46bd         	mov	sp, r7
    38aa: bd80         	pop	{r7, pc}

000038ac <GPIO0_IRQ0Handler>:
; GPIO0_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:532
; void GPIO0_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 0);    }
    38ac: b580         	push	{r7, lr}
    38ae: af00         	add	r7, sp, #0x0
    38b0: 2100         	movs	r1, #0x0
    38b2: 4802         	ldr	r0, [pc, #0x8]          @ 0x38bc <GPIO0_IRQ0Handler+0x10>
    38b4: f7ff ffdb    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x4a
    38b8: bf00         	nop
    38ba: bd80         	pop	{r7, pc}
    38bc: 00 00 00 20  	.word	0x20000000

000038c0 <GPIO0_IRQ1Handler>:
; GPIO0_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:534
; void GPIO0_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 1);    }
    38c0: b580         	push	{r7, lr}
    38c2: af00         	add	r7, sp, #0x0
    38c4: 2101         	movs	r1, #0x1
    38c6: 4802         	ldr	r0, [pc, #0x8]          @ 0x38d0 <GPIO0_IRQ1Handler+0x10>
    38c8: f7ff ffd1    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x5e
    38cc: bf00         	nop
    38ce: bd80         	pop	{r7, pc}
    38d0: 00 00 00 20  	.word	0x20000000

000038d4 <GPIO0_IRQ2Handler>:
; GPIO0_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:536
; void GPIO0_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 2);    }
    38d4: b580         	push	{r7, lr}
    38d6: af00         	add	r7, sp, #0x0
    38d8: 2102         	movs	r1, #0x2
    38da: 4802         	ldr	r0, [pc, #0x8]          @ 0x38e4 <GPIO0_IRQ2Handler+0x10>
    38dc: f7ff ffc7    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x72
    38e0: bf00         	nop
    38e2: bd80         	pop	{r7, pc}
    38e4: 00 00 00 20  	.word	0x20000000

000038e8 <GPIO0_IRQ3Handler>:
; GPIO0_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:538
; void GPIO0_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 3);    }
    38e8: b580         	push	{r7, lr}
    38ea: af00         	add	r7, sp, #0x0
    38ec: 2103         	movs	r1, #0x3
    38ee: 4802         	ldr	r0, [pc, #0x8]          @ 0x38f8 <GPIO0_IRQ3Handler+0x10>
    38f0: f7ff ffbd    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x86
    38f4: bf00         	nop
    38f6: bd80         	pop	{r7, pc}
    38f8: 00 00 00 20  	.word	0x20000000

000038fc <GPIO0_IRQ4Handler>:
; GPIO0_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:540
; void GPIO0_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 4);    }
    38fc: b580         	push	{r7, lr}
    38fe: af00         	add	r7, sp, #0x0
    3900: 2104         	movs	r1, #0x4
    3902: 4802         	ldr	r0, [pc, #0x8]          @ 0x390c <GPIO0_IRQ4Handler+0x10>
    3904: f7ff ffb3    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x9a
    3908: bf00         	nop
    390a: bd80         	pop	{r7, pc}
    390c: 00 00 00 20  	.word	0x20000000

00003910 <GPIO0_IRQ5Handler>:
; GPIO0_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:542
; void GPIO0_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 5);    }
    3910: b580         	push	{r7, lr}
    3912: af00         	add	r7, sp, #0x0
    3914: 2105         	movs	r1, #0x5
    3916: 4802         	ldr	r0, [pc, #0x8]          @ 0x3920 <GPIO0_IRQ5Handler+0x10>
    3918: f7ff ffa9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xae
    391c: bf00         	nop
    391e: bd80         	pop	{r7, pc}
    3920: 00 00 00 20  	.word	0x20000000

00003924 <GPIO0_IRQ6Handler>:
; GPIO0_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:544
; void GPIO0_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 6);    }
    3924: b580         	push	{r7, lr}
    3926: af00         	add	r7, sp, #0x0
    3928: 2106         	movs	r1, #0x6
    392a: 4802         	ldr	r0, [pc, #0x8]          @ 0x3934 <GPIO0_IRQ6Handler+0x10>
    392c: f7ff ff9f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xc2
    3930: bf00         	nop
    3932: bd80         	pop	{r7, pc}
    3934: 00 00 00 20  	.word	0x20000000

00003938 <GPIO0_IRQ7Handler>:
; GPIO0_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:546
; void GPIO0_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO0_RES, 7);    }
    3938: b580         	push	{r7, lr}
    393a: af00         	add	r7, sp, #0x0
    393c: 2107         	movs	r1, #0x7
    393e: 4802         	ldr	r0, [pc, #0x8]          @ 0x3948 <GPIO0_IRQ7Handler+0x10>
    3940: f7ff ff95    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xd6
    3944: bf00         	nop
    3946: bd80         	pop	{r7, pc}
    3948: 00 00 00 20  	.word	0x20000000

0000394c <ARM_GPIO0_Initialize>:
; ARM_GPIO0_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:550
; {
    394c: b580         	push	{r7, lr}
    394e: b082         	sub	sp, #0x8
    3950: af00         	add	r7, sp, #0x0
    3952: 4603         	mov	r3, r0
    3954: 6039         	str	r1, [r7]
    3956: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:551
;     return GPIO_Initialize (&GPIO0_RES, cb_event, pin_no);
    3958: 79fb         	ldrb	r3, [r7, #0x7]
    395a: 461a         	mov	r2, r3
    395c: 6839         	ldr	r1, [r7]
    395e: 4804         	ldr	r0, [pc, #0x10]         @ 0x3970 <ARM_GPIO0_Initialize+0x24>
    3960: f7ff fc98    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x6d0
    3964: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:552
; }
    3966: 4618         	mov	r0, r3
    3968: 3708         	adds	r7, #0x8
    396a: 46bd         	mov	sp, r7
    396c: bd80         	pop	{r7, pc}
    396e: bf00         	nop
    3970: 00 00 00 20  	.word	0x20000000

00003974 <ARM_GPIO0_PowerControl>:
; ARM_GPIO0_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:555
; {
    3974: b580         	push	{r7, lr}
    3976: b082         	sub	sp, #0x8
    3978: af00         	add	r7, sp, #0x0
    397a: 4603         	mov	r3, r0
    397c: 460a         	mov	r2, r1
    397e: 71fb         	strb	r3, [r7, #0x7]
    3980: 4613         	mov	r3, r2
    3982: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:556
;     return GPIO_PowerControl (&GPIO0_RES, pin_no, state);
    3984: 79ba         	ldrb	r2, [r7, #0x6]
    3986: 79fb         	ldrb	r3, [r7, #0x7]
    3988: 4619         	mov	r1, r3
    398a: 4804         	ldr	r0, [pc, #0x10]         @ 0x399c <ARM_GPIO0_PowerControl+0x28>
    398c: f7ff fca6    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x6b4
    3990: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:557
; }
    3992: 4618         	mov	r0, r3
    3994: 3708         	adds	r7, #0x8
    3996: 46bd         	mov	sp, r7
    3998: bd80         	pop	{r7, pc}
    399a: bf00         	nop
    399c: 00 00 00 20  	.word	0x20000000

000039a0 <ARM_GPIO0_SetDirection>:
; ARM_GPIO0_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:560
; {
    39a0: b580         	push	{r7, lr}
    39a2: b082         	sub	sp, #0x8
    39a4: af00         	add	r7, sp, #0x0
    39a6: 4603         	mov	r3, r0
    39a8: 460a         	mov	r2, r1
    39aa: 71fb         	strb	r3, [r7, #0x7]
    39ac: 4613         	mov	r3, r2
    39ae: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:561
;     return GPIO_SetDirection (&GPIO0_RES, pin_no, dir);
    39b0: 79ba         	ldrb	r2, [r7, #0x6]
    39b2: 79fb         	ldrb	r3, [r7, #0x7]
    39b4: 4619         	mov	r1, r3
    39b6: 4804         	ldr	r0, [pc, #0x10]         @ 0x39c8 <ARM_GPIO0_SetDirection+0x28>
    39b8: f7ff fccd    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x666
    39bc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:562
; }
    39be: 4618         	mov	r0, r3
    39c0: 3708         	adds	r7, #0x8
    39c2: 46bd         	mov	sp, r7
    39c4: bd80         	pop	{r7, pc}
    39c6: bf00         	nop
    39c8: 00 00 00 20  	.word	0x20000000

000039cc <ARM_GPIO0_GetDirection>:
; ARM_GPIO0_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:565
; {
    39cc: b580         	push	{r7, lr}
    39ce: b082         	sub	sp, #0x8
    39d0: af00         	add	r7, sp, #0x0
    39d2: 4603         	mov	r3, r0
    39d4: 6039         	str	r1, [r7]
    39d6: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:566
;     return GPIO_GetDirection (&GPIO0_RES, pin_no, dir);
    39d8: 79fb         	ldrb	r3, [r7, #0x7]
    39da: 683a         	ldr	r2, [r7]
    39dc: 4619         	mov	r1, r3
    39de: 4804         	ldr	r0, [pc, #0x10]         @ 0x39f0 <ARM_GPIO0_GetDirection+0x24>
    39e0: f7ff fcef    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x622
    39e4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:567
; }
    39e6: 4618         	mov	r0, r3
    39e8: 3708         	adds	r7, #0x8
    39ea: 46bd         	mov	sp, r7
    39ec: bd80         	pop	{r7, pc}
    39ee: bf00         	nop
    39f0: 00 00 00 20  	.word	0x20000000

000039f4 <ARM_GPIO0_SetValue>:
; ARM_GPIO0_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:570
; {
    39f4: b580         	push	{r7, lr}
    39f6: b082         	sub	sp, #0x8
    39f8: af00         	add	r7, sp, #0x0
    39fa: 4603         	mov	r3, r0
    39fc: 460a         	mov	r2, r1
    39fe: 71fb         	strb	r3, [r7, #0x7]
    3a00: 4613         	mov	r3, r2
    3a02: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:571
;     return GPIO_SetValue (&GPIO0_RES, pin_no, value);
    3a04: 79ba         	ldrb	r2, [r7, #0x6]
    3a06: 79fb         	ldrb	r3, [r7, #0x7]
    3a08: 4619         	mov	r1, r3
    3a0a: 4804         	ldr	r0, [pc, #0x10]         @ 0x3a1c <ARM_GPIO0_SetValue+0x28>
    3a0c: f7ff fd0c    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x5e8
    3a10: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:572
; }
    3a12: 4618         	mov	r0, r3
    3a14: 3708         	adds	r7, #0x8
    3a16: 46bd         	mov	sp, r7
    3a18: bd80         	pop	{r7, pc}
    3a1a: bf00         	nop
    3a1c: 00 00 00 20  	.word	0x20000000

00003a20 <ARM_GPIO0_GetValue>:
; ARM_GPIO0_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:575
; {
    3a20: b580         	push	{r7, lr}
    3a22: b082         	sub	sp, #0x8
    3a24: af00         	add	r7, sp, #0x0
    3a26: 4603         	mov	r3, r0
    3a28: 6039         	str	r1, [r7]
    3a2a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:576
;     return GPIO_GetValue (&GPIO0_RES, pin_no, value);
    3a2c: 79fb         	ldrb	r3, [r7, #0x7]
    3a2e: 683a         	ldr	r2, [r7]
    3a30: 4619         	mov	r1, r3
    3a32: 4804         	ldr	r0, [pc, #0x10]         @ 0x3a44 <ARM_GPIO0_GetValue+0x24>
    3a34: f7ff fd3a    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x58c
    3a38: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:577
; }
    3a3a: 4618         	mov	r0, r3
    3a3c: 3708         	adds	r7, #0x8
    3a3e: 46bd         	mov	sp, r7
    3a40: bd80         	pop	{r7, pc}
    3a42: bf00         	nop
    3a44: 00 00 00 20  	.word	0x20000000

00003a48 <ARM_GPIO0_Control>:
; ARM_GPIO0_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:580
; {
    3a48: b580         	push	{r7, lr}
    3a4a: b082         	sub	sp, #0x8
    3a4c: af00         	add	r7, sp, #0x0
    3a4e: 4603         	mov	r3, r0
    3a50: 603a         	str	r2, [r7]
    3a52: 71fb         	strb	r3, [r7, #0x7]
    3a54: 460b         	mov	r3, r1
    3a56: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:581
;     return GPIO_Control (&GPIO0_RES, pin_no, control_code, arg);
    3a58: 79ba         	ldrb	r2, [r7, #0x6]
    3a5a: 79f9         	ldrb	r1, [r7, #0x7]
    3a5c: 683b         	ldr	r3, [r7]
    3a5e: 4804         	ldr	r0, [pc, #0x10]         @ 0x3a70 <ARM_GPIO0_Control+0x28>
    3a60: f7ff fd51    	bl	0x3506 <GPIO_Control>   @ imm = #-0x55e
    3a64: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:582
; }
    3a66: 4618         	mov	r0, r3
    3a68: 3708         	adds	r7, #0x8
    3a6a: 46bd         	mov	sp, r7
    3a6c: bd80         	pop	{r7, pc}
    3a6e: bf00         	nop
    3a70: 00 00 00 20  	.word	0x20000000

00003a74 <ARM_GPIO0_Uninitialize>:
; ARM_GPIO0_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:584
; static int32_t ARM_GPIO0_Uninitialize (uint8_t pin_no) {
    3a74: b580         	push	{r7, lr}
    3a76: b082         	sub	sp, #0x8
    3a78: af00         	add	r7, sp, #0x0
    3a7a: 4603         	mov	r3, r0
    3a7c: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:586
;     return GPIO_Uninitialize (&GPIO0_RES, pin_no);
    3a7e: 79fb         	ldrb	r3, [r7, #0x7]
    3a80: 4619         	mov	r1, r3
    3a82: 4804         	ldr	r0, [pc, #0x10]         @ 0x3a94 <ARM_GPIO0_Uninitialize+0x20>
    3a84: f7ff fecc    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x268
    3a88: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:587
; }
    3a8a: 4618         	mov	r0, r3
    3a8c: 3708         	adds	r7, #0x8
    3a8e: 46bd         	mov	sp, r7
    3a90: bd80         	pop	{r7, pc}
    3a92: bf00         	nop
    3a94: 00 00 00 20  	.word	0x20000000

00003a98 <GPIO1_IRQ0Handler>:
; GPIO1_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:622
; void GPIO1_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 0);    }
    3a98: b580         	push	{r7, lr}
    3a9a: af00         	add	r7, sp, #0x0
    3a9c: 2100         	movs	r1, #0x0
    3a9e: 4802         	ldr	r0, [pc, #0x8]          @ 0x3aa8 <GPIO1_IRQ0Handler+0x10>
    3aa0: f7ff fee5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x236
    3aa4: bf00         	nop
    3aa6: bd80         	pop	{r7, pc}
    3aa8: 38 00 00 20  	.word	0x20000038

00003aac <GPIO1_IRQ1Handler>:
; GPIO1_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:624
; void GPIO1_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 1);    }
    3aac: b580         	push	{r7, lr}
    3aae: af00         	add	r7, sp, #0x0
    3ab0: 2101         	movs	r1, #0x1
    3ab2: 4802         	ldr	r0, [pc, #0x8]          @ 0x3abc <GPIO1_IRQ1Handler+0x10>
    3ab4: f7ff fedb    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x24a
    3ab8: bf00         	nop
    3aba: bd80         	pop	{r7, pc}
    3abc: 38 00 00 20  	.word	0x20000038

00003ac0 <GPIO1_IRQ2Handler>:
; GPIO1_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:626
; void GPIO1_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 2);    }
    3ac0: b580         	push	{r7, lr}
    3ac2: af00         	add	r7, sp, #0x0
    3ac4: 2102         	movs	r1, #0x2
    3ac6: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ad0 <GPIO1_IRQ2Handler+0x10>
    3ac8: f7ff fed1    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x25e
    3acc: bf00         	nop
    3ace: bd80         	pop	{r7, pc}
    3ad0: 38 00 00 20  	.word	0x20000038

00003ad4 <GPIO1_IRQ3Handler>:
; GPIO1_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:628
; void GPIO1_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 3);    }
    3ad4: b580         	push	{r7, lr}
    3ad6: af00         	add	r7, sp, #0x0
    3ad8: 2103         	movs	r1, #0x3
    3ada: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ae4 <GPIO1_IRQ3Handler+0x10>
    3adc: f7ff fec7    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x272
    3ae0: bf00         	nop
    3ae2: bd80         	pop	{r7, pc}
    3ae4: 38 00 00 20  	.word	0x20000038

00003ae8 <GPIO1_IRQ4Handler>:
; GPIO1_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:630
; void GPIO1_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 4);    }
    3ae8: b580         	push	{r7, lr}
    3aea: af00         	add	r7, sp, #0x0
    3aec: 2104         	movs	r1, #0x4
    3aee: 4802         	ldr	r0, [pc, #0x8]          @ 0x3af8 <GPIO1_IRQ4Handler+0x10>
    3af0: f7ff febd    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x286
    3af4: bf00         	nop
    3af6: bd80         	pop	{r7, pc}
    3af8: 38 00 00 20  	.word	0x20000038

00003afc <GPIO1_IRQ5Handler>:
; GPIO1_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:632
; void GPIO1_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 5);    }
    3afc: b580         	push	{r7, lr}
    3afe: af00         	add	r7, sp, #0x0
    3b00: 2105         	movs	r1, #0x5
    3b02: 4802         	ldr	r0, [pc, #0x8]          @ 0x3b0c <GPIO1_IRQ5Handler+0x10>
    3b04: f7ff feb3    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x29a
    3b08: bf00         	nop
    3b0a: bd80         	pop	{r7, pc}
    3b0c: 38 00 00 20  	.word	0x20000038

00003b10 <GPIO1_IRQ6Handler>:
; GPIO1_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:634
; void GPIO1_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 6);    }
    3b10: b580         	push	{r7, lr}
    3b12: af00         	add	r7, sp, #0x0
    3b14: 2106         	movs	r1, #0x6
    3b16: 4802         	ldr	r0, [pc, #0x8]          @ 0x3b20 <GPIO1_IRQ6Handler+0x10>
    3b18: f7ff fea9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x2ae
    3b1c: bf00         	nop
    3b1e: bd80         	pop	{r7, pc}
    3b20: 38 00 00 20  	.word	0x20000038

00003b24 <GPIO1_IRQ7Handler>:
; GPIO1_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:636
; void GPIO1_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO1_RES, 7);    }
    3b24: b580         	push	{r7, lr}
    3b26: af00         	add	r7, sp, #0x0
    3b28: 2107         	movs	r1, #0x7
    3b2a: 4802         	ldr	r0, [pc, #0x8]          @ 0x3b34 <GPIO1_IRQ7Handler+0x10>
    3b2c: f7ff fe9f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x2c2
    3b30: bf00         	nop
    3b32: bd80         	pop	{r7, pc}
    3b34: 38 00 00 20  	.word	0x20000038

00003b38 <ARM_GPIO1_Initialize>:
; ARM_GPIO1_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:639
; {
    3b38: b580         	push	{r7, lr}
    3b3a: b082         	sub	sp, #0x8
    3b3c: af00         	add	r7, sp, #0x0
    3b3e: 4603         	mov	r3, r0
    3b40: 6039         	str	r1, [r7]
    3b42: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:640
;     return GPIO_Initialize (&GPIO1_RES, cb_event, pin_no);
    3b44: 79fb         	ldrb	r3, [r7, #0x7]
    3b46: 461a         	mov	r2, r3
    3b48: 6839         	ldr	r1, [r7]
    3b4a: 4804         	ldr	r0, [pc, #0x10]         @ 0x3b5c <ARM_GPIO1_Initialize+0x24>
    3b4c: f7ff fba2    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x8bc
    3b50: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:641
; }
    3b52: 4618         	mov	r0, r3
    3b54: 3708         	adds	r7, #0x8
    3b56: 46bd         	mov	sp, r7
    3b58: bd80         	pop	{r7, pc}
    3b5a: bf00         	nop
    3b5c: 38 00 00 20  	.word	0x20000038

00003b60 <ARM_GPIO1_PowerControl>:
; ARM_GPIO1_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:644
; {
    3b60: b580         	push	{r7, lr}
    3b62: b082         	sub	sp, #0x8
    3b64: af00         	add	r7, sp, #0x0
    3b66: 4603         	mov	r3, r0
    3b68: 460a         	mov	r2, r1
    3b6a: 71fb         	strb	r3, [r7, #0x7]
    3b6c: 4613         	mov	r3, r2
    3b6e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:645
;     return GPIO_PowerControl (&GPIO1_RES, pin_no, state);
    3b70: 79ba         	ldrb	r2, [r7, #0x6]
    3b72: 79fb         	ldrb	r3, [r7, #0x7]
    3b74: 4619         	mov	r1, r3
    3b76: 4804         	ldr	r0, [pc, #0x10]         @ 0x3b88 <ARM_GPIO1_PowerControl+0x28>
    3b78: f7ff fbb0    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x8a0
    3b7c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:646
; }
    3b7e: 4618         	mov	r0, r3
    3b80: 3708         	adds	r7, #0x8
    3b82: 46bd         	mov	sp, r7
    3b84: bd80         	pop	{r7, pc}
    3b86: bf00         	nop
    3b88: 38 00 00 20  	.word	0x20000038

00003b8c <ARM_GPIO1_SetDirection>:
; ARM_GPIO1_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:649
; {
    3b8c: b580         	push	{r7, lr}
    3b8e: b082         	sub	sp, #0x8
    3b90: af00         	add	r7, sp, #0x0
    3b92: 4603         	mov	r3, r0
    3b94: 460a         	mov	r2, r1
    3b96: 71fb         	strb	r3, [r7, #0x7]
    3b98: 4613         	mov	r3, r2
    3b9a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:650
;     return GPIO_SetDirection (&GPIO1_RES, pin_no, dir);
    3b9c: 79ba         	ldrb	r2, [r7, #0x6]
    3b9e: 79fb         	ldrb	r3, [r7, #0x7]
    3ba0: 4619         	mov	r1, r3
    3ba2: 4804         	ldr	r0, [pc, #0x10]         @ 0x3bb4 <ARM_GPIO1_SetDirection+0x28>
    3ba4: f7ff fbd7    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x852
    3ba8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:651
; }
    3baa: 4618         	mov	r0, r3
    3bac: 3708         	adds	r7, #0x8
    3bae: 46bd         	mov	sp, r7
    3bb0: bd80         	pop	{r7, pc}
    3bb2: bf00         	nop
    3bb4: 38 00 00 20  	.word	0x20000038

00003bb8 <ARM_GPIO1_GetDirection>:
; ARM_GPIO1_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:654
; {
    3bb8: b580         	push	{r7, lr}
    3bba: b082         	sub	sp, #0x8
    3bbc: af00         	add	r7, sp, #0x0
    3bbe: 4603         	mov	r3, r0
    3bc0: 6039         	str	r1, [r7]
    3bc2: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:655
;     return GPIO_GetDirection (&GPIO1_RES, pin_no, dir);
    3bc4: 79fb         	ldrb	r3, [r7, #0x7]
    3bc6: 683a         	ldr	r2, [r7]
    3bc8: 4619         	mov	r1, r3
    3bca: 4804         	ldr	r0, [pc, #0x10]         @ 0x3bdc <ARM_GPIO1_GetDirection+0x24>
    3bcc: f7ff fbf9    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x80e
    3bd0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:656
; }
    3bd2: 4618         	mov	r0, r3
    3bd4: 3708         	adds	r7, #0x8
    3bd6: 46bd         	mov	sp, r7
    3bd8: bd80         	pop	{r7, pc}
    3bda: bf00         	nop
    3bdc: 38 00 00 20  	.word	0x20000038

00003be0 <ARM_GPIO1_SetValue>:
; ARM_GPIO1_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:659
; {
    3be0: b580         	push	{r7, lr}
    3be2: b082         	sub	sp, #0x8
    3be4: af00         	add	r7, sp, #0x0
    3be6: 4603         	mov	r3, r0
    3be8: 460a         	mov	r2, r1
    3bea: 71fb         	strb	r3, [r7, #0x7]
    3bec: 4613         	mov	r3, r2
    3bee: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:660
;     return GPIO_SetValue (&GPIO1_RES, pin_no, value);
    3bf0: 79ba         	ldrb	r2, [r7, #0x6]
    3bf2: 79fb         	ldrb	r3, [r7, #0x7]
    3bf4: 4619         	mov	r1, r3
    3bf6: 4804         	ldr	r0, [pc, #0x10]         @ 0x3c08 <ARM_GPIO1_SetValue+0x28>
    3bf8: f7ff fc16    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x7d4
    3bfc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:661
; }
    3bfe: 4618         	mov	r0, r3
    3c00: 3708         	adds	r7, #0x8
    3c02: 46bd         	mov	sp, r7
    3c04: bd80         	pop	{r7, pc}
    3c06: bf00         	nop
    3c08: 38 00 00 20  	.word	0x20000038

00003c0c <ARM_GPIO1_GetValue>:
; ARM_GPIO1_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:664
; {
    3c0c: b580         	push	{r7, lr}
    3c0e: b082         	sub	sp, #0x8
    3c10: af00         	add	r7, sp, #0x0
    3c12: 4603         	mov	r3, r0
    3c14: 6039         	str	r1, [r7]
    3c16: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:665
;     return GPIO_GetValue (&GPIO1_RES, pin_no, value);
    3c18: 79fb         	ldrb	r3, [r7, #0x7]
    3c1a: 683a         	ldr	r2, [r7]
    3c1c: 4619         	mov	r1, r3
    3c1e: 4804         	ldr	r0, [pc, #0x10]         @ 0x3c30 <ARM_GPIO1_GetValue+0x24>
    3c20: f7ff fc44    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x778
    3c24: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:666
; }
    3c26: 4618         	mov	r0, r3
    3c28: 3708         	adds	r7, #0x8
    3c2a: 46bd         	mov	sp, r7
    3c2c: bd80         	pop	{r7, pc}
    3c2e: bf00         	nop
    3c30: 38 00 00 20  	.word	0x20000038

00003c34 <ARM_GPIO1_Control>:
; ARM_GPIO1_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:669
; {
    3c34: b580         	push	{r7, lr}
    3c36: b082         	sub	sp, #0x8
    3c38: af00         	add	r7, sp, #0x0
    3c3a: 4603         	mov	r3, r0
    3c3c: 603a         	str	r2, [r7]
    3c3e: 71fb         	strb	r3, [r7, #0x7]
    3c40: 460b         	mov	r3, r1
    3c42: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:670
;     return GPIO_Control (&GPIO1_RES, pin_no, control_code, arg);
    3c44: 79ba         	ldrb	r2, [r7, #0x6]
    3c46: 79f9         	ldrb	r1, [r7, #0x7]
    3c48: 683b         	ldr	r3, [r7]
    3c4a: 4804         	ldr	r0, [pc, #0x10]         @ 0x3c5c <ARM_GPIO1_Control+0x28>
    3c4c: f7ff fc5b    	bl	0x3506 <GPIO_Control>   @ imm = #-0x74a
    3c50: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:671
; }
    3c52: 4618         	mov	r0, r3
    3c54: 3708         	adds	r7, #0x8
    3c56: 46bd         	mov	sp, r7
    3c58: bd80         	pop	{r7, pc}
    3c5a: bf00         	nop
    3c5c: 38 00 00 20  	.word	0x20000038

00003c60 <ARM_GPIO1_Uninitialize>:
; ARM_GPIO1_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:673
; static int32_t ARM_GPIO1_Uninitialize (uint8_t pin_no) {
    3c60: b580         	push	{r7, lr}
    3c62: b082         	sub	sp, #0x8
    3c64: af00         	add	r7, sp, #0x0
    3c66: 4603         	mov	r3, r0
    3c68: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:675
;     return GPIO_Uninitialize (&GPIO1_RES, pin_no);
    3c6a: 79fb         	ldrb	r3, [r7, #0x7]
    3c6c: 4619         	mov	r1, r3
    3c6e: 4804         	ldr	r0, [pc, #0x10]         @ 0x3c80 <ARM_GPIO1_Uninitialize+0x20>
    3c70: f7ff fdd6    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x454
    3c74: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:676
; }
    3c76: 4618         	mov	r0, r3
    3c78: 3708         	adds	r7, #0x8
    3c7a: 46bd         	mov	sp, r7
    3c7c: bd80         	pop	{r7, pc}
    3c7e: bf00         	nop
    3c80: 38 00 00 20  	.word	0x20000038

00003c84 <GPIO2_IRQ0Handler>:
; GPIO2_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:711
; void GPIO2_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 0);    }
    3c84: b580         	push	{r7, lr}
    3c86: af00         	add	r7, sp, #0x0
    3c88: 2100         	movs	r1, #0x0
    3c8a: 4802         	ldr	r0, [pc, #0x8]          @ 0x3c94 <GPIO2_IRQ0Handler+0x10>
    3c8c: f7ff fdef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x422
    3c90: bf00         	nop
    3c92: bd80         	pop	{r7, pc}
    3c94: 70 00 00 20  	.word	0x20000070

00003c98 <GPIO2_IRQ1Handler>:
; GPIO2_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:713
; void GPIO2_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 1);    }
    3c98: b580         	push	{r7, lr}
    3c9a: af00         	add	r7, sp, #0x0
    3c9c: 2101         	movs	r1, #0x1
    3c9e: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ca8 <GPIO2_IRQ1Handler+0x10>
    3ca0: f7ff fde5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x436
    3ca4: bf00         	nop
    3ca6: bd80         	pop	{r7, pc}
    3ca8: 70 00 00 20  	.word	0x20000070

00003cac <GPIO2_IRQ2Handler>:
; GPIO2_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:715
; void GPIO2_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 2);    }
    3cac: b580         	push	{r7, lr}
    3cae: af00         	add	r7, sp, #0x0
    3cb0: 2102         	movs	r1, #0x2
    3cb2: 4802         	ldr	r0, [pc, #0x8]          @ 0x3cbc <GPIO2_IRQ2Handler+0x10>
    3cb4: f7ff fddb    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x44a
    3cb8: bf00         	nop
    3cba: bd80         	pop	{r7, pc}
    3cbc: 70 00 00 20  	.word	0x20000070

00003cc0 <GPIO2_IRQ3Handler>:
; GPIO2_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:717
; void GPIO2_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 3);    }
    3cc0: b580         	push	{r7, lr}
    3cc2: af00         	add	r7, sp, #0x0
    3cc4: 2103         	movs	r1, #0x3
    3cc6: 4802         	ldr	r0, [pc, #0x8]          @ 0x3cd0 <GPIO2_IRQ3Handler+0x10>
    3cc8: f7ff fdd1    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x45e
    3ccc: bf00         	nop
    3cce: bd80         	pop	{r7, pc}
    3cd0: 70 00 00 20  	.word	0x20000070

00003cd4 <GPIO2_IRQ4Handler>:
; GPIO2_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:719
; void GPIO2_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 4);    }
    3cd4: b580         	push	{r7, lr}
    3cd6: af00         	add	r7, sp, #0x0
    3cd8: 2104         	movs	r1, #0x4
    3cda: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ce4 <GPIO2_IRQ4Handler+0x10>
    3cdc: f7ff fdc7    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x472
    3ce0: bf00         	nop
    3ce2: bd80         	pop	{r7, pc}
    3ce4: 70 00 00 20  	.word	0x20000070

00003ce8 <GPIO2_IRQ5Handler>:
; GPIO2_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:721
; void GPIO2_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 5);    }
    3ce8: b580         	push	{r7, lr}
    3cea: af00         	add	r7, sp, #0x0
    3cec: 2105         	movs	r1, #0x5
    3cee: 4802         	ldr	r0, [pc, #0x8]          @ 0x3cf8 <GPIO2_IRQ5Handler+0x10>
    3cf0: f7ff fdbd    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x486
    3cf4: bf00         	nop
    3cf6: bd80         	pop	{r7, pc}
    3cf8: 70 00 00 20  	.word	0x20000070

00003cfc <GPIO2_IRQ6Handler>:
; GPIO2_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:723
; void GPIO2_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 6);    }
    3cfc: b580         	push	{r7, lr}
    3cfe: af00         	add	r7, sp, #0x0
    3d00: 2106         	movs	r1, #0x6
    3d02: 4802         	ldr	r0, [pc, #0x8]          @ 0x3d0c <GPIO2_IRQ6Handler+0x10>
    3d04: f7ff fdb3    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x49a
    3d08: bf00         	nop
    3d0a: bd80         	pop	{r7, pc}
    3d0c: 70 00 00 20  	.word	0x20000070

00003d10 <GPIO2_IRQ7Handler>:
; GPIO2_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:725
; void GPIO2_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO2_RES, 7);    }
    3d10: b580         	push	{r7, lr}
    3d12: af00         	add	r7, sp, #0x0
    3d14: 2107         	movs	r1, #0x7
    3d16: 4802         	ldr	r0, [pc, #0x8]          @ 0x3d20 <GPIO2_IRQ7Handler+0x10>
    3d18: f7ff fda9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x4ae
    3d1c: bf00         	nop
    3d1e: bd80         	pop	{r7, pc}
    3d20: 70 00 00 20  	.word	0x20000070

00003d24 <ARM_GPIO2_Initialize>:
; ARM_GPIO2_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:728
; {
    3d24: b580         	push	{r7, lr}
    3d26: b082         	sub	sp, #0x8
    3d28: af00         	add	r7, sp, #0x0
    3d2a: 4603         	mov	r3, r0
    3d2c: 6039         	str	r1, [r7]
    3d2e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:729
;     return GPIO_Initialize (&GPIO2_RES, cb_event, pin_no);
    3d30: 79fb         	ldrb	r3, [r7, #0x7]
    3d32: 461a         	mov	r2, r3
    3d34: 6839         	ldr	r1, [r7]
    3d36: 4804         	ldr	r0, [pc, #0x10]         @ 0x3d48 <ARM_GPIO2_Initialize+0x24>
    3d38: f7ff faac    	bl	0x3294 <GPIO_Initialize> @ imm = #-0xaa8
    3d3c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:730
; }
    3d3e: 4618         	mov	r0, r3
    3d40: 3708         	adds	r7, #0x8
    3d42: 46bd         	mov	sp, r7
    3d44: bd80         	pop	{r7, pc}
    3d46: bf00         	nop
    3d48: 70 00 00 20  	.word	0x20000070

00003d4c <ARM_GPIO2_PowerControl>:
; ARM_GPIO2_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:733
; {
    3d4c: b580         	push	{r7, lr}
    3d4e: b082         	sub	sp, #0x8
    3d50: af00         	add	r7, sp, #0x0
    3d52: 4603         	mov	r3, r0
    3d54: 460a         	mov	r2, r1
    3d56: 71fb         	strb	r3, [r7, #0x7]
    3d58: 4613         	mov	r3, r2
    3d5a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:734
;     return GPIO_PowerControl (&GPIO2_RES, pin_no, state);
    3d5c: 79ba         	ldrb	r2, [r7, #0x6]
    3d5e: 79fb         	ldrb	r3, [r7, #0x7]
    3d60: 4619         	mov	r1, r3
    3d62: 4804         	ldr	r0, [pc, #0x10]         @ 0x3d74 <ARM_GPIO2_PowerControl+0x28>
    3d64: f7ff faba    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0xa8c
    3d68: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:735
; }
    3d6a: 4618         	mov	r0, r3
    3d6c: 3708         	adds	r7, #0x8
    3d6e: 46bd         	mov	sp, r7
    3d70: bd80         	pop	{r7, pc}
    3d72: bf00         	nop
    3d74: 70 00 00 20  	.word	0x20000070

00003d78 <ARM_GPIO2_SetDirection>:
; ARM_GPIO2_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:738
; {
    3d78: b580         	push	{r7, lr}
    3d7a: b082         	sub	sp, #0x8
    3d7c: af00         	add	r7, sp, #0x0
    3d7e: 4603         	mov	r3, r0
    3d80: 460a         	mov	r2, r1
    3d82: 71fb         	strb	r3, [r7, #0x7]
    3d84: 4613         	mov	r3, r2
    3d86: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:739
;     return GPIO_SetDirection (&GPIO2_RES, pin_no, dir);
    3d88: 79ba         	ldrb	r2, [r7, #0x6]
    3d8a: 79fb         	ldrb	r3, [r7, #0x7]
    3d8c: 4619         	mov	r1, r3
    3d8e: 4804         	ldr	r0, [pc, #0x10]         @ 0x3da0 <ARM_GPIO2_SetDirection+0x28>
    3d90: f7ff fae1    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0xa3e
    3d94: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:740
; }
    3d96: 4618         	mov	r0, r3
    3d98: 3708         	adds	r7, #0x8
    3d9a: 46bd         	mov	sp, r7
    3d9c: bd80         	pop	{r7, pc}
    3d9e: bf00         	nop
    3da0: 70 00 00 20  	.word	0x20000070

00003da4 <ARM_GPIO2_GetDirection>:
; ARM_GPIO2_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:743
; {
    3da4: b580         	push	{r7, lr}
    3da6: b082         	sub	sp, #0x8
    3da8: af00         	add	r7, sp, #0x0
    3daa: 4603         	mov	r3, r0
    3dac: 6039         	str	r1, [r7]
    3dae: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:744
;     return GPIO_GetDirection (&GPIO2_RES, pin_no, dir);
    3db0: 79fb         	ldrb	r3, [r7, #0x7]
    3db2: 683a         	ldr	r2, [r7]
    3db4: 4619         	mov	r1, r3
    3db6: 4804         	ldr	r0, [pc, #0x10]         @ 0x3dc8 <ARM_GPIO2_GetDirection+0x24>
    3db8: f7ff fb03    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x9fa
    3dbc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:745
; }
    3dbe: 4618         	mov	r0, r3
    3dc0: 3708         	adds	r7, #0x8
    3dc2: 46bd         	mov	sp, r7
    3dc4: bd80         	pop	{r7, pc}
    3dc6: bf00         	nop
    3dc8: 70 00 00 20  	.word	0x20000070

00003dcc <ARM_GPIO2_SetValue>:
; ARM_GPIO2_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:748
; {
    3dcc: b580         	push	{r7, lr}
    3dce: b082         	sub	sp, #0x8
    3dd0: af00         	add	r7, sp, #0x0
    3dd2: 4603         	mov	r3, r0
    3dd4: 460a         	mov	r2, r1
    3dd6: 71fb         	strb	r3, [r7, #0x7]
    3dd8: 4613         	mov	r3, r2
    3dda: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:749
;     return GPIO_SetValue (&GPIO2_RES, pin_no, value);
    3ddc: 79ba         	ldrb	r2, [r7, #0x6]
    3dde: 79fb         	ldrb	r3, [r7, #0x7]
    3de0: 4619         	mov	r1, r3
    3de2: 4804         	ldr	r0, [pc, #0x10]         @ 0x3df4 <ARM_GPIO2_SetValue+0x28>
    3de4: f7ff fb20    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x9c0
    3de8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:750
; }
    3dea: 4618         	mov	r0, r3
    3dec: 3708         	adds	r7, #0x8
    3dee: 46bd         	mov	sp, r7
    3df0: bd80         	pop	{r7, pc}
    3df2: bf00         	nop
    3df4: 70 00 00 20  	.word	0x20000070

00003df8 <ARM_GPIO2_GetValue>:
; ARM_GPIO2_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:753
; {
    3df8: b580         	push	{r7, lr}
    3dfa: b082         	sub	sp, #0x8
    3dfc: af00         	add	r7, sp, #0x0
    3dfe: 4603         	mov	r3, r0
    3e00: 6039         	str	r1, [r7]
    3e02: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:754
;     return GPIO_GetValue (&GPIO2_RES, pin_no, value);
    3e04: 79fb         	ldrb	r3, [r7, #0x7]
    3e06: 683a         	ldr	r2, [r7]
    3e08: 4619         	mov	r1, r3
    3e0a: 4804         	ldr	r0, [pc, #0x10]         @ 0x3e1c <ARM_GPIO2_GetValue+0x24>
    3e0c: f7ff fb4e    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x964
    3e10: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:755
; }
    3e12: 4618         	mov	r0, r3
    3e14: 3708         	adds	r7, #0x8
    3e16: 46bd         	mov	sp, r7
    3e18: bd80         	pop	{r7, pc}
    3e1a: bf00         	nop
    3e1c: 70 00 00 20  	.word	0x20000070

00003e20 <ARM_GPIO2_Control>:
; ARM_GPIO2_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:758
; {
    3e20: b580         	push	{r7, lr}
    3e22: b082         	sub	sp, #0x8
    3e24: af00         	add	r7, sp, #0x0
    3e26: 4603         	mov	r3, r0
    3e28: 603a         	str	r2, [r7]
    3e2a: 71fb         	strb	r3, [r7, #0x7]
    3e2c: 460b         	mov	r3, r1
    3e2e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:759
;     return GPIO_Control (&GPIO2_RES, pin_no, control_code, arg);
    3e30: 79ba         	ldrb	r2, [r7, #0x6]
    3e32: 79f9         	ldrb	r1, [r7, #0x7]
    3e34: 683b         	ldr	r3, [r7]
    3e36: 4804         	ldr	r0, [pc, #0x10]         @ 0x3e48 <ARM_GPIO2_Control+0x28>
    3e38: f7ff fb65    	bl	0x3506 <GPIO_Control>   @ imm = #-0x936
    3e3c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:760
; }
    3e3e: 4618         	mov	r0, r3
    3e40: 3708         	adds	r7, #0x8
    3e42: 46bd         	mov	sp, r7
    3e44: bd80         	pop	{r7, pc}
    3e46: bf00         	nop
    3e48: 70 00 00 20  	.word	0x20000070

00003e4c <ARM_GPIO2_Uninitialize>:
; ARM_GPIO2_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:763
; {
    3e4c: b580         	push	{r7, lr}
    3e4e: b082         	sub	sp, #0x8
    3e50: af00         	add	r7, sp, #0x0
    3e52: 4603         	mov	r3, r0
    3e54: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:764
;     return GPIO_Uninitialize (&GPIO2_RES, pin_no);
    3e56: 79fb         	ldrb	r3, [r7, #0x7]
    3e58: 4619         	mov	r1, r3
    3e5a: 4804         	ldr	r0, [pc, #0x10]         @ 0x3e6c <ARM_GPIO2_Uninitialize+0x20>
    3e5c: f7ff fce0    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x640
    3e60: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:765
; }
    3e62: 4618         	mov	r0, r3
    3e64: 3708         	adds	r7, #0x8
    3e66: 46bd         	mov	sp, r7
    3e68: bd80         	pop	{r7, pc}
    3e6a: bf00         	nop
    3e6c: 70 00 00 20  	.word	0x20000070

00003e70 <GPIO3_IRQ0Handler>:
; GPIO3_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:800
; void GPIO3_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 0);    }
    3e70: b580         	push	{r7, lr}
    3e72: af00         	add	r7, sp, #0x0
    3e74: 2100         	movs	r1, #0x0
    3e76: 4802         	ldr	r0, [pc, #0x8]          @ 0x3e80 <GPIO3_IRQ0Handler+0x10>
    3e78: f7ff fcf9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x60e
    3e7c: bf00         	nop
    3e7e: bd80         	pop	{r7, pc}
    3e80: a8 00 00 20  	.word	0x200000a8

00003e84 <GPIO3_IRQ1Handler>:
; GPIO3_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:802
; void GPIO3_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 1);    }
    3e84: b580         	push	{r7, lr}
    3e86: af00         	add	r7, sp, #0x0
    3e88: 2101         	movs	r1, #0x1
    3e8a: 4802         	ldr	r0, [pc, #0x8]          @ 0x3e94 <GPIO3_IRQ1Handler+0x10>
    3e8c: f7ff fcef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x622
    3e90: bf00         	nop
    3e92: bd80         	pop	{r7, pc}
    3e94: a8 00 00 20  	.word	0x200000a8

00003e98 <GPIO3_IRQ2Handler>:
; GPIO3_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:804
; void GPIO3_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 2);    }
    3e98: b580         	push	{r7, lr}
    3e9a: af00         	add	r7, sp, #0x0
    3e9c: 2102         	movs	r1, #0x2
    3e9e: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ea8 <GPIO3_IRQ2Handler+0x10>
    3ea0: f7ff fce5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x636
    3ea4: bf00         	nop
    3ea6: bd80         	pop	{r7, pc}
    3ea8: a8 00 00 20  	.word	0x200000a8

00003eac <GPIO3_IRQ3Handler>:
; GPIO3_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:806
; void GPIO3_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 3);    }
    3eac: b580         	push	{r7, lr}
    3eae: af00         	add	r7, sp, #0x0
    3eb0: 2103         	movs	r1, #0x3
    3eb2: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ebc <GPIO3_IRQ3Handler+0x10>
    3eb4: f7ff fcdb    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x64a
    3eb8: bf00         	nop
    3eba: bd80         	pop	{r7, pc}
    3ebc: a8 00 00 20  	.word	0x200000a8

00003ec0 <GPIO3_IRQ4Handler>:
; GPIO3_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:808
; void GPIO3_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 4);    }
    3ec0: b580         	push	{r7, lr}
    3ec2: af00         	add	r7, sp, #0x0
    3ec4: 2104         	movs	r1, #0x4
    3ec6: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ed0 <GPIO3_IRQ4Handler+0x10>
    3ec8: f7ff fcd1    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x65e
    3ecc: bf00         	nop
    3ece: bd80         	pop	{r7, pc}
    3ed0: a8 00 00 20  	.word	0x200000a8

00003ed4 <GPIO3_IRQ5Handler>:
; GPIO3_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:810
; void GPIO3_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 5);    }
    3ed4: b580         	push	{r7, lr}
    3ed6: af00         	add	r7, sp, #0x0
    3ed8: 2105         	movs	r1, #0x5
    3eda: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ee4 <GPIO3_IRQ5Handler+0x10>
    3edc: f7ff fcc7    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x672
    3ee0: bf00         	nop
    3ee2: bd80         	pop	{r7, pc}
    3ee4: a8 00 00 20  	.word	0x200000a8

00003ee8 <GPIO3_IRQ6Handler>:
; GPIO3_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:812
; void GPIO3_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 6);    }
    3ee8: b580         	push	{r7, lr}
    3eea: af00         	add	r7, sp, #0x0
    3eec: 2106         	movs	r1, #0x6
    3eee: 4802         	ldr	r0, [pc, #0x8]          @ 0x3ef8 <GPIO3_IRQ6Handler+0x10>
    3ef0: f7ff fcbd    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x686
    3ef4: bf00         	nop
    3ef6: bd80         	pop	{r7, pc}
    3ef8: a8 00 00 20  	.word	0x200000a8

00003efc <GPIO3_IRQ7Handler>:
; GPIO3_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:814
; void GPIO3_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO3_RES, 7);    }
    3efc: b580         	push	{r7, lr}
    3efe: af00         	add	r7, sp, #0x0
    3f00: 2107         	movs	r1, #0x7
    3f02: 4802         	ldr	r0, [pc, #0x8]          @ 0x3f0c <GPIO3_IRQ7Handler+0x10>
    3f04: f7ff fcb3    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x69a
    3f08: bf00         	nop
    3f0a: bd80         	pop	{r7, pc}
    3f0c: a8 00 00 20  	.word	0x200000a8

00003f10 <ARM_GPIO3_Initialize>:
; ARM_GPIO3_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:817
; {
    3f10: b580         	push	{r7, lr}
    3f12: b082         	sub	sp, #0x8
    3f14: af00         	add	r7, sp, #0x0
    3f16: 4603         	mov	r3, r0
    3f18: 6039         	str	r1, [r7]
    3f1a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:818
;     return GPIO_Initialize (&GPIO3_RES, cb_event, pin_no);
    3f1c: 79fb         	ldrb	r3, [r7, #0x7]
    3f1e: 461a         	mov	r2, r3
    3f20: 6839         	ldr	r1, [r7]
    3f22: 4804         	ldr	r0, [pc, #0x10]         @ 0x3f34 <ARM_GPIO3_Initialize+0x24>
    3f24: f7ff f9b6    	bl	0x3294 <GPIO_Initialize> @ imm = #-0xc94
    3f28: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:819
; }
    3f2a: 4618         	mov	r0, r3
    3f2c: 3708         	adds	r7, #0x8
    3f2e: 46bd         	mov	sp, r7
    3f30: bd80         	pop	{r7, pc}
    3f32: bf00         	nop
    3f34: a8 00 00 20  	.word	0x200000a8

00003f38 <ARM_GPIO3_PowerControl>:
; ARM_GPIO3_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:822
; {
    3f38: b580         	push	{r7, lr}
    3f3a: b082         	sub	sp, #0x8
    3f3c: af00         	add	r7, sp, #0x0
    3f3e: 4603         	mov	r3, r0
    3f40: 460a         	mov	r2, r1
    3f42: 71fb         	strb	r3, [r7, #0x7]
    3f44: 4613         	mov	r3, r2
    3f46: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:823
;     return GPIO_PowerControl (&GPIO3_RES, pin_no, state);
    3f48: 79ba         	ldrb	r2, [r7, #0x6]
    3f4a: 79fb         	ldrb	r3, [r7, #0x7]
    3f4c: 4619         	mov	r1, r3
    3f4e: 4804         	ldr	r0, [pc, #0x10]         @ 0x3f60 <ARM_GPIO3_PowerControl+0x28>
    3f50: f7ff f9c4    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0xc78
    3f54: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:824
; }
    3f56: 4618         	mov	r0, r3
    3f58: 3708         	adds	r7, #0x8
    3f5a: 46bd         	mov	sp, r7
    3f5c: bd80         	pop	{r7, pc}
    3f5e: bf00         	nop
    3f60: a8 00 00 20  	.word	0x200000a8

00003f64 <ARM_GPIO3_SetDirection>:
; ARM_GPIO3_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:827
; {
    3f64: b580         	push	{r7, lr}
    3f66: b082         	sub	sp, #0x8
    3f68: af00         	add	r7, sp, #0x0
    3f6a: 4603         	mov	r3, r0
    3f6c: 460a         	mov	r2, r1
    3f6e: 71fb         	strb	r3, [r7, #0x7]
    3f70: 4613         	mov	r3, r2
    3f72: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:828
;     return GPIO_SetDirection (&GPIO3_RES, pin_no, dir);
    3f74: 79ba         	ldrb	r2, [r7, #0x6]
    3f76: 79fb         	ldrb	r3, [r7, #0x7]
    3f78: 4619         	mov	r1, r3
    3f7a: 4804         	ldr	r0, [pc, #0x10]         @ 0x3f8c <ARM_GPIO3_SetDirection+0x28>
    3f7c: f7ff f9eb    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0xc2a
    3f80: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:829
; }
    3f82: 4618         	mov	r0, r3
    3f84: 3708         	adds	r7, #0x8
    3f86: 46bd         	mov	sp, r7
    3f88: bd80         	pop	{r7, pc}
    3f8a: bf00         	nop
    3f8c: a8 00 00 20  	.word	0x200000a8

00003f90 <ARM_GPIO3_GetDirection>:
; ARM_GPIO3_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:832
; {
    3f90: b580         	push	{r7, lr}
    3f92: b082         	sub	sp, #0x8
    3f94: af00         	add	r7, sp, #0x0
    3f96: 4603         	mov	r3, r0
    3f98: 6039         	str	r1, [r7]
    3f9a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:833
;     return GPIO_GetDirection (&GPIO3_RES, pin_no, dir);
    3f9c: 79fb         	ldrb	r3, [r7, #0x7]
    3f9e: 683a         	ldr	r2, [r7]
    3fa0: 4619         	mov	r1, r3
    3fa2: 4804         	ldr	r0, [pc, #0x10]         @ 0x3fb4 <ARM_GPIO3_GetDirection+0x24>
    3fa4: f7ff fa0d    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0xbe6
    3fa8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:834
; }
    3faa: 4618         	mov	r0, r3
    3fac: 3708         	adds	r7, #0x8
    3fae: 46bd         	mov	sp, r7
    3fb0: bd80         	pop	{r7, pc}
    3fb2: bf00         	nop
    3fb4: a8 00 00 20  	.word	0x200000a8

00003fb8 <ARM_GPIO3_SetValue>:
; ARM_GPIO3_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:837
; {
    3fb8: b580         	push	{r7, lr}
    3fba: b082         	sub	sp, #0x8
    3fbc: af00         	add	r7, sp, #0x0
    3fbe: 4603         	mov	r3, r0
    3fc0: 460a         	mov	r2, r1
    3fc2: 71fb         	strb	r3, [r7, #0x7]
    3fc4: 4613         	mov	r3, r2
    3fc6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:838
;     return GPIO_SetValue (&GPIO3_RES, pin_no, value);
    3fc8: 79ba         	ldrb	r2, [r7, #0x6]
    3fca: 79fb         	ldrb	r3, [r7, #0x7]
    3fcc: 4619         	mov	r1, r3
    3fce: 4804         	ldr	r0, [pc, #0x10]         @ 0x3fe0 <ARM_GPIO3_SetValue+0x28>
    3fd0: f7ff fa2a    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0xbac
    3fd4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:839
; }
    3fd6: 4618         	mov	r0, r3
    3fd8: 3708         	adds	r7, #0x8
    3fda: 46bd         	mov	sp, r7
    3fdc: bd80         	pop	{r7, pc}
    3fde: bf00         	nop
    3fe0: a8 00 00 20  	.word	0x200000a8

00003fe4 <ARM_GPIO3_GetValue>:
; ARM_GPIO3_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:842
; {
    3fe4: b580         	push	{r7, lr}
    3fe6: b082         	sub	sp, #0x8
    3fe8: af00         	add	r7, sp, #0x0
    3fea: 4603         	mov	r3, r0
    3fec: 6039         	str	r1, [r7]
    3fee: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:843
;     return GPIO_GetValue (&GPIO3_RES, pin_no, value);
    3ff0: 79fb         	ldrb	r3, [r7, #0x7]
    3ff2: 683a         	ldr	r2, [r7]
    3ff4: 4619         	mov	r1, r3
    3ff6: 4804         	ldr	r0, [pc, #0x10]         @ 0x4008 <ARM_GPIO3_GetValue+0x24>
    3ff8: f7ff fa58    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0xb50
    3ffc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:844
; }
    3ffe: 4618         	mov	r0, r3
    4000: 3708         	adds	r7, #0x8
    4002: 46bd         	mov	sp, r7
    4004: bd80         	pop	{r7, pc}
    4006: bf00         	nop
    4008: a8 00 00 20  	.word	0x200000a8

0000400c <ARM_GPIO3_Control>:
; ARM_GPIO3_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:847
; {
    400c: b580         	push	{r7, lr}
    400e: b082         	sub	sp, #0x8
    4010: af00         	add	r7, sp, #0x0
    4012: 4603         	mov	r3, r0
    4014: 603a         	str	r2, [r7]
    4016: 71fb         	strb	r3, [r7, #0x7]
    4018: 460b         	mov	r3, r1
    401a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:848
;     return GPIO_Control (&GPIO3_RES, pin_no, control_code, arg);
    401c: 79ba         	ldrb	r2, [r7, #0x6]
    401e: 79f9         	ldrb	r1, [r7, #0x7]
    4020: 683b         	ldr	r3, [r7]
    4022: 4804         	ldr	r0, [pc, #0x10]         @ 0x4034 <ARM_GPIO3_Control+0x28>
    4024: f7ff fa6f    	bl	0x3506 <GPIO_Control>   @ imm = #-0xb22
    4028: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:849
; }
    402a: 4618         	mov	r0, r3
    402c: 3708         	adds	r7, #0x8
    402e: 46bd         	mov	sp, r7
    4030: bd80         	pop	{r7, pc}
    4032: bf00         	nop
    4034: a8 00 00 20  	.word	0x200000a8

00004038 <ARM_GPIO3_Uninitialize>:
; ARM_GPIO3_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:852
; {
    4038: b580         	push	{r7, lr}
    403a: b082         	sub	sp, #0x8
    403c: af00         	add	r7, sp, #0x0
    403e: 4603         	mov	r3, r0
    4040: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:853
;     return GPIO_Uninitialize (&GPIO3_RES, pin_no);
    4042: 79fb         	ldrb	r3, [r7, #0x7]
    4044: 4619         	mov	r1, r3
    4046: 4804         	ldr	r0, [pc, #0x10]         @ 0x4058 <ARM_GPIO3_Uninitialize+0x20>
    4048: f7ff fbea    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x82c
    404c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:854
; }
    404e: 4618         	mov	r0, r3
    4050: 3708         	adds	r7, #0x8
    4052: 46bd         	mov	sp, r7
    4054: bd80         	pop	{r7, pc}
    4056: bf00         	nop
    4058: a8 00 00 20  	.word	0x200000a8

0000405c <GPIO4_IRQ0Handler>:
; GPIO4_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:889
; void GPIO4_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 0);    }
    405c: b580         	push	{r7, lr}
    405e: af00         	add	r7, sp, #0x0
    4060: 2100         	movs	r1, #0x0
    4062: 4802         	ldr	r0, [pc, #0x8]          @ 0x406c <GPIO4_IRQ0Handler+0x10>
    4064: f7ff fc03    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x7fa
    4068: bf00         	nop
    406a: bd80         	pop	{r7, pc}
    406c: e0 00 00 20  	.word	0x200000e0

00004070 <GPIO4_IRQ1Handler>:
; GPIO4_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:891
; void GPIO4_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 1);    }
    4070: b580         	push	{r7, lr}
    4072: af00         	add	r7, sp, #0x0
    4074: 2101         	movs	r1, #0x1
    4076: 4802         	ldr	r0, [pc, #0x8]          @ 0x4080 <GPIO4_IRQ1Handler+0x10>
    4078: f7ff fbf9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x80e
    407c: bf00         	nop
    407e: bd80         	pop	{r7, pc}
    4080: e0 00 00 20  	.word	0x200000e0

00004084 <GPIO4_IRQ2Handler>:
; GPIO4_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:893
; void GPIO4_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 2);    }
    4084: b580         	push	{r7, lr}
    4086: af00         	add	r7, sp, #0x0
    4088: 2102         	movs	r1, #0x2
    408a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4094 <GPIO4_IRQ2Handler+0x10>
    408c: f7ff fbef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x822
    4090: bf00         	nop
    4092: bd80         	pop	{r7, pc}
    4094: e0 00 00 20  	.word	0x200000e0

00004098 <GPIO4_IRQ3Handler>:
; GPIO4_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:895
; void GPIO4_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 3);    }
    4098: b580         	push	{r7, lr}
    409a: af00         	add	r7, sp, #0x0
    409c: 2103         	movs	r1, #0x3
    409e: 4802         	ldr	r0, [pc, #0x8]          @ 0x40a8 <GPIO4_IRQ3Handler+0x10>
    40a0: f7ff fbe5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x836
    40a4: bf00         	nop
    40a6: bd80         	pop	{r7, pc}
    40a8: e0 00 00 20  	.word	0x200000e0

000040ac <GPIO4_IRQ4Handler>:
; GPIO4_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:897
; void GPIO4_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 4);    }
    40ac: b580         	push	{r7, lr}
    40ae: af00         	add	r7, sp, #0x0
    40b0: 2104         	movs	r1, #0x4
    40b2: 4802         	ldr	r0, [pc, #0x8]          @ 0x40bc <GPIO4_IRQ4Handler+0x10>
    40b4: f7ff fbdb    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x84a
    40b8: bf00         	nop
    40ba: bd80         	pop	{r7, pc}
    40bc: e0 00 00 20  	.word	0x200000e0

000040c0 <GPIO4_IRQ5Handler>:
; GPIO4_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:899
; void GPIO4_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 5);    }
    40c0: b580         	push	{r7, lr}
    40c2: af00         	add	r7, sp, #0x0
    40c4: 2105         	movs	r1, #0x5
    40c6: 4802         	ldr	r0, [pc, #0x8]          @ 0x40d0 <GPIO4_IRQ5Handler+0x10>
    40c8: f7ff fbd1    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x85e
    40cc: bf00         	nop
    40ce: bd80         	pop	{r7, pc}
    40d0: e0 00 00 20  	.word	0x200000e0

000040d4 <GPIO4_IRQ6Handler>:
; GPIO4_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:901
; void GPIO4_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 6);    }
    40d4: b580         	push	{r7, lr}
    40d6: af00         	add	r7, sp, #0x0
    40d8: 2106         	movs	r1, #0x6
    40da: 4802         	ldr	r0, [pc, #0x8]          @ 0x40e4 <GPIO4_IRQ6Handler+0x10>
    40dc: f7ff fbc7    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x872
    40e0: bf00         	nop
    40e2: bd80         	pop	{r7, pc}
    40e4: e0 00 00 20  	.word	0x200000e0

000040e8 <GPIO4_IRQ7Handler>:
; GPIO4_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:903
; void GPIO4_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO4_RES, 7);    }
    40e8: b580         	push	{r7, lr}
    40ea: af00         	add	r7, sp, #0x0
    40ec: 2107         	movs	r1, #0x7
    40ee: 4802         	ldr	r0, [pc, #0x8]          @ 0x40f8 <GPIO4_IRQ7Handler+0x10>
    40f0: f7ff fbbd    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x886
    40f4: bf00         	nop
    40f6: bd80         	pop	{r7, pc}
    40f8: e0 00 00 20  	.word	0x200000e0

000040fc <ARM_GPIO4_Initialize>:
; ARM_GPIO4_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:906
; {
    40fc: b580         	push	{r7, lr}
    40fe: b082         	sub	sp, #0x8
    4100: af00         	add	r7, sp, #0x0
    4102: 4603         	mov	r3, r0
    4104: 6039         	str	r1, [r7]
    4106: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:907
;     return GPIO_Initialize (&GPIO4_RES, cb_event, pin_no);
    4108: 79fb         	ldrb	r3, [r7, #0x7]
    410a: 461a         	mov	r2, r3
    410c: 6839         	ldr	r1, [r7]
    410e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4120 <ARM_GPIO4_Initialize+0x24>
    4110: f7ff f8c0    	bl	0x3294 <GPIO_Initialize> @ imm = #-0xe80
    4114: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:908
; }
    4116: 4618         	mov	r0, r3
    4118: 3708         	adds	r7, #0x8
    411a: 46bd         	mov	sp, r7
    411c: bd80         	pop	{r7, pc}
    411e: bf00         	nop
    4120: e0 00 00 20  	.word	0x200000e0

00004124 <ARM_GPIO4_PowerControl>:
; ARM_GPIO4_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:911
; {
    4124: b580         	push	{r7, lr}
    4126: b082         	sub	sp, #0x8
    4128: af00         	add	r7, sp, #0x0
    412a: 4603         	mov	r3, r0
    412c: 460a         	mov	r2, r1
    412e: 71fb         	strb	r3, [r7, #0x7]
    4130: 4613         	mov	r3, r2
    4132: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:912
;     return GPIO_PowerControl (&GPIO4_RES, pin_no, state);
    4134: 79ba         	ldrb	r2, [r7, #0x6]
    4136: 79fb         	ldrb	r3, [r7, #0x7]
    4138: 4619         	mov	r1, r3
    413a: 4804         	ldr	r0, [pc, #0x10]         @ 0x414c <ARM_GPIO4_PowerControl+0x28>
    413c: f7ff f8ce    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0xe64
    4140: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:913
; }
    4142: 4618         	mov	r0, r3
    4144: 3708         	adds	r7, #0x8
    4146: 46bd         	mov	sp, r7
    4148: bd80         	pop	{r7, pc}
    414a: bf00         	nop
    414c: e0 00 00 20  	.word	0x200000e0

00004150 <ARM_GPIO4_SetDirection>:
; ARM_GPIO4_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:916
; {
    4150: b580         	push	{r7, lr}
    4152: b082         	sub	sp, #0x8
    4154: af00         	add	r7, sp, #0x0
    4156: 4603         	mov	r3, r0
    4158: 460a         	mov	r2, r1
    415a: 71fb         	strb	r3, [r7, #0x7]
    415c: 4613         	mov	r3, r2
    415e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:917
;     return GPIO_SetDirection (&GPIO4_RES, pin_no, dir);
    4160: 79ba         	ldrb	r2, [r7, #0x6]
    4162: 79fb         	ldrb	r3, [r7, #0x7]
    4164: 4619         	mov	r1, r3
    4166: 4804         	ldr	r0, [pc, #0x10]         @ 0x4178 <ARM_GPIO4_SetDirection+0x28>
    4168: f7ff f8f5    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0xe16
    416c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:918
; }
    416e: 4618         	mov	r0, r3
    4170: 3708         	adds	r7, #0x8
    4172: 46bd         	mov	sp, r7
    4174: bd80         	pop	{r7, pc}
    4176: bf00         	nop
    4178: e0 00 00 20  	.word	0x200000e0

0000417c <ARM_GPIO4_GetDirection>:
; ARM_GPIO4_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:921
; {
    417c: b580         	push	{r7, lr}
    417e: b084         	sub	sp, #0x10
    4180: af00         	add	r7, sp, #0x0
    4182: 4603         	mov	r3, r0
    4184: 6039         	str	r1, [r7]
    4186: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:922
;     int32_t ret =  GPIO_GetDirection (&GPIO4_RES, pin_no, dir);
    4188: 79fb         	ldrb	r3, [r7, #0x7]
    418a: 683a         	ldr	r2, [r7]
    418c: 4619         	mov	r1, r3
    418e: 4804         	ldr	r0, [pc, #0x10]         @ 0x41a0 <ARM_GPIO4_GetDirection+0x24>
    4190: f7ff f917    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0xdd2
    4194: 60f8         	str	r0, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:923
;     return ret;
    4196: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:924
; }
    4198: 4618         	mov	r0, r3
    419a: 3710         	adds	r7, #0x10
    419c: 46bd         	mov	sp, r7
    419e: bd80         	pop	{r7, pc}
    41a0: e0 00 00 20  	.word	0x200000e0

000041a4 <ARM_GPIO4_SetValue>:
; ARM_GPIO4_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:927
; {
    41a4: b580         	push	{r7, lr}
    41a6: b082         	sub	sp, #0x8
    41a8: af00         	add	r7, sp, #0x0
    41aa: 4603         	mov	r3, r0
    41ac: 460a         	mov	r2, r1
    41ae: 71fb         	strb	r3, [r7, #0x7]
    41b0: 4613         	mov	r3, r2
    41b2: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:928
;     return GPIO_SetValue (&GPIO4_RES, pin_no, value);
    41b4: 79ba         	ldrb	r2, [r7, #0x6]
    41b6: 79fb         	ldrb	r3, [r7, #0x7]
    41b8: 4619         	mov	r1, r3
    41ba: 4804         	ldr	r0, [pc, #0x10]         @ 0x41cc <ARM_GPIO4_SetValue+0x28>
    41bc: f7ff f934    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0xd98
    41c0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:929
; }
    41c2: 4618         	mov	r0, r3
    41c4: 3708         	adds	r7, #0x8
    41c6: 46bd         	mov	sp, r7
    41c8: bd80         	pop	{r7, pc}
    41ca: bf00         	nop
    41cc: e0 00 00 20  	.word	0x200000e0

000041d0 <ARM_GPIO4_GetValue>:
; ARM_GPIO4_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:932
; {
    41d0: b580         	push	{r7, lr}
    41d2: b082         	sub	sp, #0x8
    41d4: af00         	add	r7, sp, #0x0
    41d6: 4603         	mov	r3, r0
    41d8: 6039         	str	r1, [r7]
    41da: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:933
;     return GPIO_GetValue (&GPIO4_RES, pin_no, value);
    41dc: 79fb         	ldrb	r3, [r7, #0x7]
    41de: 683a         	ldr	r2, [r7]
    41e0: 4619         	mov	r1, r3
    41e2: 4804         	ldr	r0, [pc, #0x10]         @ 0x41f4 <ARM_GPIO4_GetValue+0x24>
    41e4: f7ff f962    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0xd3c
    41e8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:934
; }
    41ea: 4618         	mov	r0, r3
    41ec: 3708         	adds	r7, #0x8
    41ee: 46bd         	mov	sp, r7
    41f0: bd80         	pop	{r7, pc}
    41f2: bf00         	nop
    41f4: e0 00 00 20  	.word	0x200000e0

000041f8 <ARM_GPIO4_Control>:
; ARM_GPIO4_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:937
; {
    41f8: b580         	push	{r7, lr}
    41fa: b082         	sub	sp, #0x8
    41fc: af00         	add	r7, sp, #0x0
    41fe: 4603         	mov	r3, r0
    4200: 603a         	str	r2, [r7]
    4202: 71fb         	strb	r3, [r7, #0x7]
    4204: 460b         	mov	r3, r1
    4206: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:938
;     return GPIO_Control (&GPIO4_RES, pin_no, control_code, arg);
    4208: 79ba         	ldrb	r2, [r7, #0x6]
    420a: 79f9         	ldrb	r1, [r7, #0x7]
    420c: 683b         	ldr	r3, [r7]
    420e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4220 <ARM_GPIO4_Control+0x28>
    4210: f7ff f979    	bl	0x3506 <GPIO_Control>   @ imm = #-0xd0e
    4214: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:939
; }
    4216: 4618         	mov	r0, r3
    4218: 3708         	adds	r7, #0x8
    421a: 46bd         	mov	sp, r7
    421c: bd80         	pop	{r7, pc}
    421e: bf00         	nop
    4220: e0 00 00 20  	.word	0x200000e0

00004224 <ARM_GPIO4_Uninitialize>:
; ARM_GPIO4_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:942
; {
    4224: b580         	push	{r7, lr}
    4226: b082         	sub	sp, #0x8
    4228: af00         	add	r7, sp, #0x0
    422a: 4603         	mov	r3, r0
    422c: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:943
;     return GPIO_Uninitialize (&GPIO4_RES, pin_no);
    422e: 79fb         	ldrb	r3, [r7, #0x7]
    4230: 4619         	mov	r1, r3
    4232: 4804         	ldr	r0, [pc, #0x10]         @ 0x4244 <ARM_GPIO4_Uninitialize+0x20>
    4234: f7ff faf4    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0xa18
    4238: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:944
; }
    423a: 4618         	mov	r0, r3
    423c: 3708         	adds	r7, #0x8
    423e: 46bd         	mov	sp, r7
    4240: bd80         	pop	{r7, pc}
    4242: bf00         	nop
    4244: e0 00 00 20  	.word	0x200000e0

00004248 <GPIO5_IRQ0Handler>:
; GPIO5_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:979
; void GPIO5_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 0);    }
    4248: b580         	push	{r7, lr}
    424a: af00         	add	r7, sp, #0x0
    424c: 2100         	movs	r1, #0x0
    424e: 4802         	ldr	r0, [pc, #0x8]          @ 0x4258 <GPIO5_IRQ0Handler+0x10>
    4250: f7ff fb0d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x9e6
    4254: bf00         	nop
    4256: bd80         	pop	{r7, pc}
    4258: 18 01 00 20  	.word	0x20000118

0000425c <GPIO5_IRQ1Handler>:
; GPIO5_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:981
; void GPIO5_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 1);    }
    425c: b580         	push	{r7, lr}
    425e: af00         	add	r7, sp, #0x0
    4260: 2101         	movs	r1, #0x1
    4262: 4802         	ldr	r0, [pc, #0x8]          @ 0x426c <GPIO5_IRQ1Handler+0x10>
    4264: f7ff fb03    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x9fa
    4268: bf00         	nop
    426a: bd80         	pop	{r7, pc}
    426c: 18 01 00 20  	.word	0x20000118

00004270 <GPIO5_IRQ2Handler>:
; GPIO5_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:983
; void GPIO5_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 2);    }
    4270: b580         	push	{r7, lr}
    4272: af00         	add	r7, sp, #0x0
    4274: 2102         	movs	r1, #0x2
    4276: 4802         	ldr	r0, [pc, #0x8]          @ 0x4280 <GPIO5_IRQ2Handler+0x10>
    4278: f7ff faf9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xa0e
    427c: bf00         	nop
    427e: bd80         	pop	{r7, pc}
    4280: 18 01 00 20  	.word	0x20000118

00004284 <GPIO5_IRQ3Handler>:
; GPIO5_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:985
; void GPIO5_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 3);    }
    4284: b580         	push	{r7, lr}
    4286: af00         	add	r7, sp, #0x0
    4288: 2103         	movs	r1, #0x3
    428a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4294 <GPIO5_IRQ3Handler+0x10>
    428c: f7ff faef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xa22
    4290: bf00         	nop
    4292: bd80         	pop	{r7, pc}
    4294: 18 01 00 20  	.word	0x20000118

00004298 <GPIO5_IRQ4Handler>:
; GPIO5_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:987
; void GPIO5_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 4);    }
    4298: b580         	push	{r7, lr}
    429a: af00         	add	r7, sp, #0x0
    429c: 2104         	movs	r1, #0x4
    429e: 4802         	ldr	r0, [pc, #0x8]          @ 0x42a8 <GPIO5_IRQ4Handler+0x10>
    42a0: f7ff fae5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xa36
    42a4: bf00         	nop
    42a6: bd80         	pop	{r7, pc}
    42a8: 18 01 00 20  	.word	0x20000118

000042ac <GPIO5_IRQ5Handler>:
; GPIO5_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:989
; void GPIO5_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 5);    }
    42ac: b580         	push	{r7, lr}
    42ae: af00         	add	r7, sp, #0x0
    42b0: 2105         	movs	r1, #0x5
    42b2: 4802         	ldr	r0, [pc, #0x8]          @ 0x42bc <GPIO5_IRQ5Handler+0x10>
    42b4: f7ff fadb    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xa4a
    42b8: bf00         	nop
    42ba: bd80         	pop	{r7, pc}
    42bc: 18 01 00 20  	.word	0x20000118

000042c0 <GPIO5_IRQ6Handler>:
; GPIO5_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:991
; void GPIO5_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 6);    }
    42c0: b580         	push	{r7, lr}
    42c2: af00         	add	r7, sp, #0x0
    42c4: 2106         	movs	r1, #0x6
    42c6: 4802         	ldr	r0, [pc, #0x8]          @ 0x42d0 <GPIO5_IRQ6Handler+0x10>
    42c8: f7ff fad1    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xa5e
    42cc: bf00         	nop
    42ce: bd80         	pop	{r7, pc}
    42d0: 18 01 00 20  	.word	0x20000118

000042d4 <GPIO5_IRQ7Handler>:
; GPIO5_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:993
; void GPIO5_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO5_RES, 7);    }
    42d4: b580         	push	{r7, lr}
    42d6: af00         	add	r7, sp, #0x0
    42d8: 2107         	movs	r1, #0x7
    42da: 4802         	ldr	r0, [pc, #0x8]          @ 0x42e4 <GPIO5_IRQ7Handler+0x10>
    42dc: f7ff fac7    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xa72
    42e0: bf00         	nop
    42e2: bd80         	pop	{r7, pc}
    42e4: 18 01 00 20  	.word	0x20000118

000042e8 <ARM_GPIO5_Initialize>:
; ARM_GPIO5_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:996
; {
    42e8: b580         	push	{r7, lr}
    42ea: b082         	sub	sp, #0x8
    42ec: af00         	add	r7, sp, #0x0
    42ee: 4603         	mov	r3, r0
    42f0: 6039         	str	r1, [r7]
    42f2: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:997
;     return GPIO_Initialize (&GPIO5_RES, cb_event, pin_no);
    42f4: 79fb         	ldrb	r3, [r7, #0x7]
    42f6: 461a         	mov	r2, r3
    42f8: 6839         	ldr	r1, [r7]
    42fa: 4804         	ldr	r0, [pc, #0x10]         @ 0x430c <ARM_GPIO5_Initialize+0x24>
    42fc: f7fe ffca    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x106c
    4300: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:998
; }
    4302: 4618         	mov	r0, r3
    4304: 3708         	adds	r7, #0x8
    4306: 46bd         	mov	sp, r7
    4308: bd80         	pop	{r7, pc}
    430a: bf00         	nop
    430c: 18 01 00 20  	.word	0x20000118

00004310 <ARM_GPIO5_PowerControl>:
; ARM_GPIO5_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1001
; {
    4310: b580         	push	{r7, lr}
    4312: b082         	sub	sp, #0x8
    4314: af00         	add	r7, sp, #0x0
    4316: 4603         	mov	r3, r0
    4318: 460a         	mov	r2, r1
    431a: 71fb         	strb	r3, [r7, #0x7]
    431c: 4613         	mov	r3, r2
    431e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1002
;     return GPIO_PowerControl (&GPIO5_RES, pin_no, state);
    4320: 79ba         	ldrb	r2, [r7, #0x6]
    4322: 79fb         	ldrb	r3, [r7, #0x7]
    4324: 4619         	mov	r1, r3
    4326: 4804         	ldr	r0, [pc, #0x10]         @ 0x4338 <ARM_GPIO5_PowerControl+0x28>
    4328: f7fe ffd8    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x1050
    432c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1003
; }
    432e: 4618         	mov	r0, r3
    4330: 3708         	adds	r7, #0x8
    4332: 46bd         	mov	sp, r7
    4334: bd80         	pop	{r7, pc}
    4336: bf00         	nop
    4338: 18 01 00 20  	.word	0x20000118

0000433c <ARM_GPIO5_SetDirection>:
; ARM_GPIO5_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1006
; {
    433c: b580         	push	{r7, lr}
    433e: b082         	sub	sp, #0x8
    4340: af00         	add	r7, sp, #0x0
    4342: 4603         	mov	r3, r0
    4344: 460a         	mov	r2, r1
    4346: 71fb         	strb	r3, [r7, #0x7]
    4348: 4613         	mov	r3, r2
    434a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1007
;     return GPIO_SetDirection (&GPIO5_RES, pin_no, dir);
    434c: 79ba         	ldrb	r2, [r7, #0x6]
    434e: 79fb         	ldrb	r3, [r7, #0x7]
    4350: 4619         	mov	r1, r3
    4352: 4804         	ldr	r0, [pc, #0x10]         @ 0x4364 <ARM_GPIO5_SetDirection+0x28>
    4354: f7fe ffff    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x1002
    4358: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1008
; }
    435a: 4618         	mov	r0, r3
    435c: 3708         	adds	r7, #0x8
    435e: 46bd         	mov	sp, r7
    4360: bd80         	pop	{r7, pc}
    4362: bf00         	nop
    4364: 18 01 00 20  	.word	0x20000118

00004368 <ARM_GPIO5_GetDirection>:
; ARM_GPIO5_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1011
; {
    4368: b580         	push	{r7, lr}
    436a: b084         	sub	sp, #0x10
    436c: af00         	add	r7, sp, #0x0
    436e: 4603         	mov	r3, r0
    4370: 6039         	str	r1, [r7]
    4372: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1012
;     int32_t ret =  GPIO_GetDirection (&GPIO5_RES, pin_no, dir);
    4374: 79fb         	ldrb	r3, [r7, #0x7]
    4376: 683a         	ldr	r2, [r7]
    4378: 4619         	mov	r1, r3
    437a: 4804         	ldr	r0, [pc, #0x10]         @ 0x438c <ARM_GPIO5_GetDirection+0x24>
    437c: f7ff f821    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0xfbe
    4380: 60f8         	str	r0, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1013
;     return ret;
    4382: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1014
; }
    4384: 4618         	mov	r0, r3
    4386: 3710         	adds	r7, #0x10
    4388: 46bd         	mov	sp, r7
    438a: bd80         	pop	{r7, pc}
    438c: 18 01 00 20  	.word	0x20000118

00004390 <ARM_GPIO5_SetValue>:
; ARM_GPIO5_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1017
; {
    4390: b580         	push	{r7, lr}
    4392: b082         	sub	sp, #0x8
    4394: af00         	add	r7, sp, #0x0
    4396: 4603         	mov	r3, r0
    4398: 460a         	mov	r2, r1
    439a: 71fb         	strb	r3, [r7, #0x7]
    439c: 4613         	mov	r3, r2
    439e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1018
;     return GPIO_SetValue (&GPIO5_RES, pin_no, value);
    43a0: 79ba         	ldrb	r2, [r7, #0x6]
    43a2: 79fb         	ldrb	r3, [r7, #0x7]
    43a4: 4619         	mov	r1, r3
    43a6: 4804         	ldr	r0, [pc, #0x10]         @ 0x43b8 <ARM_GPIO5_SetValue+0x28>
    43a8: f7ff f83e    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0xf84
    43ac: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1019
; }
    43ae: 4618         	mov	r0, r3
    43b0: 3708         	adds	r7, #0x8
    43b2: 46bd         	mov	sp, r7
    43b4: bd80         	pop	{r7, pc}
    43b6: bf00         	nop
    43b8: 18 01 00 20  	.word	0x20000118

000043bc <ARM_GPIO5_GetValue>:
; ARM_GPIO5_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1022
; {
    43bc: b580         	push	{r7, lr}
    43be: b082         	sub	sp, #0x8
    43c0: af00         	add	r7, sp, #0x0
    43c2: 4603         	mov	r3, r0
    43c4: 6039         	str	r1, [r7]
    43c6: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1023
;     return GPIO_GetValue (&GPIO5_RES, pin_no, value);
    43c8: 79fb         	ldrb	r3, [r7, #0x7]
    43ca: 683a         	ldr	r2, [r7]
    43cc: 4619         	mov	r1, r3
    43ce: 4804         	ldr	r0, [pc, #0x10]         @ 0x43e0 <ARM_GPIO5_GetValue+0x24>
    43d0: f7ff f86c    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0xf28
    43d4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1024
; }
    43d6: 4618         	mov	r0, r3
    43d8: 3708         	adds	r7, #0x8
    43da: 46bd         	mov	sp, r7
    43dc: bd80         	pop	{r7, pc}
    43de: bf00         	nop
    43e0: 18 01 00 20  	.word	0x20000118

000043e4 <ARM_GPIO5_Control>:
; ARM_GPIO5_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1027
; {
    43e4: b580         	push	{r7, lr}
    43e6: b082         	sub	sp, #0x8
    43e8: af00         	add	r7, sp, #0x0
    43ea: 4603         	mov	r3, r0
    43ec: 603a         	str	r2, [r7]
    43ee: 71fb         	strb	r3, [r7, #0x7]
    43f0: 460b         	mov	r3, r1
    43f2: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1028
;     return GPIO_Control (&GPIO5_RES, pin_no, control_code, arg);
    43f4: 79ba         	ldrb	r2, [r7, #0x6]
    43f6: 79f9         	ldrb	r1, [r7, #0x7]
    43f8: 683b         	ldr	r3, [r7]
    43fa: 4804         	ldr	r0, [pc, #0x10]         @ 0x440c <ARM_GPIO5_Control+0x28>
    43fc: f7ff f883    	bl	0x3506 <GPIO_Control>   @ imm = #-0xefa
    4400: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1029
; }
    4402: 4618         	mov	r0, r3
    4404: 3708         	adds	r7, #0x8
    4406: 46bd         	mov	sp, r7
    4408: bd80         	pop	{r7, pc}
    440a: bf00         	nop
    440c: 18 01 00 20  	.word	0x20000118

00004410 <ARM_GPIO5_Uninitialize>:
; ARM_GPIO5_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1032
; {
    4410: b580         	push	{r7, lr}
    4412: b082         	sub	sp, #0x8
    4414: af00         	add	r7, sp, #0x0
    4416: 4603         	mov	r3, r0
    4418: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1033
;     return GPIO_Uninitialize (&GPIO5_RES, pin_no);
    441a: 79fb         	ldrb	r3, [r7, #0x7]
    441c: 4619         	mov	r1, r3
    441e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4430 <ARM_GPIO5_Uninitialize+0x20>
    4420: f7ff f9fe    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0xc04
    4424: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1034
; }
    4426: 4618         	mov	r0, r3
    4428: 3708         	adds	r7, #0x8
    442a: 46bd         	mov	sp, r7
    442c: bd80         	pop	{r7, pc}
    442e: bf00         	nop
    4430: 18 01 00 20  	.word	0x20000118

00004434 <GPIO6_IRQ0Handler>:
; GPIO6_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1069
; void GPIO6_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 0);    }
    4434: b580         	push	{r7, lr}
    4436: af00         	add	r7, sp, #0x0
    4438: 2100         	movs	r1, #0x0
    443a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4444 <GPIO6_IRQ0Handler+0x10>
    443c: f7ff fa17    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xbd2
    4440: bf00         	nop
    4442: bd80         	pop	{r7, pc}
    4444: 50 01 00 20  	.word	0x20000150

00004448 <GPIO6_IRQ1Handler>:
; GPIO6_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1071
; void GPIO6_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 1);    }
    4448: b580         	push	{r7, lr}
    444a: af00         	add	r7, sp, #0x0
    444c: 2101         	movs	r1, #0x1
    444e: 4802         	ldr	r0, [pc, #0x8]          @ 0x4458 <GPIO6_IRQ1Handler+0x10>
    4450: f7ff fa0d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xbe6
    4454: bf00         	nop
    4456: bd80         	pop	{r7, pc}
    4458: 50 01 00 20  	.word	0x20000150

0000445c <GPIO6_IRQ2Handler>:
; GPIO6_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1073
; void GPIO6_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 2);    }
    445c: b580         	push	{r7, lr}
    445e: af00         	add	r7, sp, #0x0
    4460: 2102         	movs	r1, #0x2
    4462: 4802         	ldr	r0, [pc, #0x8]          @ 0x446c <GPIO6_IRQ2Handler+0x10>
    4464: f7ff fa03    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xbfa
    4468: bf00         	nop
    446a: bd80         	pop	{r7, pc}
    446c: 50 01 00 20  	.word	0x20000150

00004470 <GPIO6_IRQ3Handler>:
; GPIO6_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1075
; void GPIO6_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 3);    }
    4470: b580         	push	{r7, lr}
    4472: af00         	add	r7, sp, #0x0
    4474: 2103         	movs	r1, #0x3
    4476: 4802         	ldr	r0, [pc, #0x8]          @ 0x4480 <GPIO6_IRQ3Handler+0x10>
    4478: f7ff f9f9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xc0e
    447c: bf00         	nop
    447e: bd80         	pop	{r7, pc}
    4480: 50 01 00 20  	.word	0x20000150

00004484 <GPIO6_IRQ4Handler>:
; GPIO6_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1077
; void GPIO6_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 4);    }
    4484: b580         	push	{r7, lr}
    4486: af00         	add	r7, sp, #0x0
    4488: 2104         	movs	r1, #0x4
    448a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4494 <GPIO6_IRQ4Handler+0x10>
    448c: f7ff f9ef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xc22
    4490: bf00         	nop
    4492: bd80         	pop	{r7, pc}
    4494: 50 01 00 20  	.word	0x20000150

00004498 <GPIO6_IRQ5Handler>:
; GPIO6_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1079
; void GPIO6_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 5);    }
    4498: b580         	push	{r7, lr}
    449a: af00         	add	r7, sp, #0x0
    449c: 2105         	movs	r1, #0x5
    449e: 4802         	ldr	r0, [pc, #0x8]          @ 0x44a8 <GPIO6_IRQ5Handler+0x10>
    44a0: f7ff f9e5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xc36
    44a4: bf00         	nop
    44a6: bd80         	pop	{r7, pc}
    44a8: 50 01 00 20  	.word	0x20000150

000044ac <GPIO6_IRQ6Handler>:
; GPIO6_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1081
; void GPIO6_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 6);    }
    44ac: b580         	push	{r7, lr}
    44ae: af00         	add	r7, sp, #0x0
    44b0: 2106         	movs	r1, #0x6
    44b2: 4802         	ldr	r0, [pc, #0x8]          @ 0x44bc <GPIO6_IRQ6Handler+0x10>
    44b4: f7ff f9db    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xc4a
    44b8: bf00         	nop
    44ba: bd80         	pop	{r7, pc}
    44bc: 50 01 00 20  	.word	0x20000150

000044c0 <GPIO6_IRQ7Handler>:
; GPIO6_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1083
; void GPIO6_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO6_RES, 7);    }
    44c0: b580         	push	{r7, lr}
    44c2: af00         	add	r7, sp, #0x0
    44c4: 2107         	movs	r1, #0x7
    44c6: 4802         	ldr	r0, [pc, #0x8]          @ 0x44d0 <GPIO6_IRQ7Handler+0x10>
    44c8: f7ff f9d1    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xc5e
    44cc: bf00         	nop
    44ce: bd80         	pop	{r7, pc}
    44d0: 50 01 00 20  	.word	0x20000150

000044d4 <ARM_GPIO6_Initialize>:
; ARM_GPIO6_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1086
; {
    44d4: b580         	push	{r7, lr}
    44d6: b082         	sub	sp, #0x8
    44d8: af00         	add	r7, sp, #0x0
    44da: 4603         	mov	r3, r0
    44dc: 6039         	str	r1, [r7]
    44de: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1087
;     return GPIO_Initialize (&GPIO6_RES, cb_event, pin_no);
    44e0: 79fb         	ldrb	r3, [r7, #0x7]
    44e2: 461a         	mov	r2, r3
    44e4: 6839         	ldr	r1, [r7]
    44e6: 4804         	ldr	r0, [pc, #0x10]         @ 0x44f8 <ARM_GPIO6_Initialize+0x24>
    44e8: f7fe fed4    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x1258
    44ec: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1088
; }
    44ee: 4618         	mov	r0, r3
    44f0: 3708         	adds	r7, #0x8
    44f2: 46bd         	mov	sp, r7
    44f4: bd80         	pop	{r7, pc}
    44f6: bf00         	nop
    44f8: 50 01 00 20  	.word	0x20000150

000044fc <ARM_GPIO6_PowerControl>:
; ARM_GPIO6_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1091
; {
    44fc: b580         	push	{r7, lr}
    44fe: b082         	sub	sp, #0x8
    4500: af00         	add	r7, sp, #0x0
    4502: 4603         	mov	r3, r0
    4504: 460a         	mov	r2, r1
    4506: 71fb         	strb	r3, [r7, #0x7]
    4508: 4613         	mov	r3, r2
    450a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1092
;     return GPIO_PowerControl (&GPIO6_RES, pin_no, state);
    450c: 79ba         	ldrb	r2, [r7, #0x6]
    450e: 79fb         	ldrb	r3, [r7, #0x7]
    4510: 4619         	mov	r1, r3
    4512: 4804         	ldr	r0, [pc, #0x10]         @ 0x4524 <ARM_GPIO6_PowerControl+0x28>
    4514: f7fe fee2    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x123c
    4518: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1093
; }
    451a: 4618         	mov	r0, r3
    451c: 3708         	adds	r7, #0x8
    451e: 46bd         	mov	sp, r7
    4520: bd80         	pop	{r7, pc}
    4522: bf00         	nop
    4524: 50 01 00 20  	.word	0x20000150

00004528 <ARM_GPIO6_SetDirection>:
; ARM_GPIO6_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1096
; {
    4528: b580         	push	{r7, lr}
    452a: b082         	sub	sp, #0x8
    452c: af00         	add	r7, sp, #0x0
    452e: 4603         	mov	r3, r0
    4530: 460a         	mov	r2, r1
    4532: 71fb         	strb	r3, [r7, #0x7]
    4534: 4613         	mov	r3, r2
    4536: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1097
;     return GPIO_SetDirection (&GPIO6_RES, pin_no, dir);
    4538: 79ba         	ldrb	r2, [r7, #0x6]
    453a: 79fb         	ldrb	r3, [r7, #0x7]
    453c: 4619         	mov	r1, r3
    453e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4550 <ARM_GPIO6_SetDirection+0x28>
    4540: f7fe ff09    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x11ee
    4544: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1098
; }
    4546: 4618         	mov	r0, r3
    4548: 3708         	adds	r7, #0x8
    454a: 46bd         	mov	sp, r7
    454c: bd80         	pop	{r7, pc}
    454e: bf00         	nop
    4550: 50 01 00 20  	.word	0x20000150

00004554 <ARM_GPIO6_GetDirection>:
; ARM_GPIO6_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1101
; {
    4554: b580         	push	{r7, lr}
    4556: b082         	sub	sp, #0x8
    4558: af00         	add	r7, sp, #0x0
    455a: 4603         	mov	r3, r0
    455c: 6039         	str	r1, [r7]
    455e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1102
;     return GPIO_GetDirection (&GPIO6_RES, pin_no, dir);
    4560: 79fb         	ldrb	r3, [r7, #0x7]
    4562: 683a         	ldr	r2, [r7]
    4564: 4619         	mov	r1, r3
    4566: 4804         	ldr	r0, [pc, #0x10]         @ 0x4578 <ARM_GPIO6_GetDirection+0x24>
    4568: f7fe ff2b    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x11aa
    456c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1104
; }
    456e: 4618         	mov	r0, r3
    4570: 3708         	adds	r7, #0x8
    4572: 46bd         	mov	sp, r7
    4574: bd80         	pop	{r7, pc}
    4576: bf00         	nop
    4578: 50 01 00 20  	.word	0x20000150

0000457c <ARM_GPIO6_SetValue>:
; ARM_GPIO6_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1107
; {
    457c: b580         	push	{r7, lr}
    457e: b082         	sub	sp, #0x8
    4580: af00         	add	r7, sp, #0x0
    4582: 4603         	mov	r3, r0
    4584: 460a         	mov	r2, r1
    4586: 71fb         	strb	r3, [r7, #0x7]
    4588: 4613         	mov	r3, r2
    458a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1108
;     return GPIO_SetValue (&GPIO6_RES, pin_no, value);
    458c: 79ba         	ldrb	r2, [r7, #0x6]
    458e: 79fb         	ldrb	r3, [r7, #0x7]
    4590: 4619         	mov	r1, r3
    4592: 4804         	ldr	r0, [pc, #0x10]         @ 0x45a4 <ARM_GPIO6_SetValue+0x28>
    4594: f7fe ff48    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x1170
    4598: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1109
; }
    459a: 4618         	mov	r0, r3
    459c: 3708         	adds	r7, #0x8
    459e: 46bd         	mov	sp, r7
    45a0: bd80         	pop	{r7, pc}
    45a2: bf00         	nop
    45a4: 50 01 00 20  	.word	0x20000150

000045a8 <ARM_GPIO6_GetValue>:
; ARM_GPIO6_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1112
; {
    45a8: b580         	push	{r7, lr}
    45aa: b082         	sub	sp, #0x8
    45ac: af00         	add	r7, sp, #0x0
    45ae: 4603         	mov	r3, r0
    45b0: 6039         	str	r1, [r7]
    45b2: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1113
;     return GPIO_GetValue (&GPIO6_RES, pin_no, value);
    45b4: 79fb         	ldrb	r3, [r7, #0x7]
    45b6: 683a         	ldr	r2, [r7]
    45b8: 4619         	mov	r1, r3
    45ba: 4804         	ldr	r0, [pc, #0x10]         @ 0x45cc <ARM_GPIO6_GetValue+0x24>
    45bc: f7fe ff76    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x1114
    45c0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1114
; }
    45c2: 4618         	mov	r0, r3
    45c4: 3708         	adds	r7, #0x8
    45c6: 46bd         	mov	sp, r7
    45c8: bd80         	pop	{r7, pc}
    45ca: bf00         	nop
    45cc: 50 01 00 20  	.word	0x20000150

000045d0 <ARM_GPIO6_Control>:
; ARM_GPIO6_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1117
; {
    45d0: b580         	push	{r7, lr}
    45d2: b082         	sub	sp, #0x8
    45d4: af00         	add	r7, sp, #0x0
    45d6: 4603         	mov	r3, r0
    45d8: 603a         	str	r2, [r7]
    45da: 71fb         	strb	r3, [r7, #0x7]
    45dc: 460b         	mov	r3, r1
    45de: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1118
;     return GPIO_Control (&GPIO6_RES, pin_no, control_code, arg);
    45e0: 79ba         	ldrb	r2, [r7, #0x6]
    45e2: 79f9         	ldrb	r1, [r7, #0x7]
    45e4: 683b         	ldr	r3, [r7]
    45e6: 4804         	ldr	r0, [pc, #0x10]         @ 0x45f8 <ARM_GPIO6_Control+0x28>
    45e8: f7fe ff8d    	bl	0x3506 <GPIO_Control>   @ imm = #-0x10e6
    45ec: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1119
; }
    45ee: 4618         	mov	r0, r3
    45f0: 3708         	adds	r7, #0x8
    45f2: 46bd         	mov	sp, r7
    45f4: bd80         	pop	{r7, pc}
    45f6: bf00         	nop
    45f8: 50 01 00 20  	.word	0x20000150

000045fc <ARM_GPIO6_Uninitialize>:
; ARM_GPIO6_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1122
; {
    45fc: b580         	push	{r7, lr}
    45fe: b082         	sub	sp, #0x8
    4600: af00         	add	r7, sp, #0x0
    4602: 4603         	mov	r3, r0
    4604: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1123
;     return GPIO_Uninitialize (&GPIO6_RES, pin_no);
    4606: 79fb         	ldrb	r3, [r7, #0x7]
    4608: 4619         	mov	r1, r3
    460a: 4804         	ldr	r0, [pc, #0x10]         @ 0x461c <ARM_GPIO6_Uninitialize+0x20>
    460c: f7ff f908    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0xdf0
    4610: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1124
; }
    4612: 4618         	mov	r0, r3
    4614: 3708         	adds	r7, #0x8
    4616: 46bd         	mov	sp, r7
    4618: bd80         	pop	{r7, pc}
    461a: bf00         	nop
    461c: 50 01 00 20  	.word	0x20000150

00004620 <GPIO7_IRQ0Handler>:
; GPIO7_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1159
; void GPIO7_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 0);    }
    4620: b580         	push	{r7, lr}
    4622: af00         	add	r7, sp, #0x0
    4624: 2100         	movs	r1, #0x0
    4626: 4802         	ldr	r0, [pc, #0x8]          @ 0x4630 <GPIO7_IRQ0Handler+0x10>
    4628: f7ff f921    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xdbe
    462c: bf00         	nop
    462e: bd80         	pop	{r7, pc}
    4630: 88 01 00 20  	.word	0x20000188

00004634 <GPIO7_IRQ1Handler>:
; GPIO7_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1161
; void GPIO7_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 1);    }
    4634: b580         	push	{r7, lr}
    4636: af00         	add	r7, sp, #0x0
    4638: 2101         	movs	r1, #0x1
    463a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4644 <GPIO7_IRQ1Handler+0x10>
    463c: f7ff f917    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xdd2
    4640: bf00         	nop
    4642: bd80         	pop	{r7, pc}
    4644: 88 01 00 20  	.word	0x20000188

00004648 <GPIO7_IRQ2Handler>:
; GPIO7_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1163
; void GPIO7_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 2);    }
    4648: b580         	push	{r7, lr}
    464a: af00         	add	r7, sp, #0x0
    464c: 2102         	movs	r1, #0x2
    464e: 4802         	ldr	r0, [pc, #0x8]          @ 0x4658 <GPIO7_IRQ2Handler+0x10>
    4650: f7ff f90d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xde6
    4654: bf00         	nop
    4656: bd80         	pop	{r7, pc}
    4658: 88 01 00 20  	.word	0x20000188

0000465c <GPIO7_IRQ3Handler>:
; GPIO7_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1165
; void GPIO7_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 3);    }
    465c: b580         	push	{r7, lr}
    465e: af00         	add	r7, sp, #0x0
    4660: 2103         	movs	r1, #0x3
    4662: 4802         	ldr	r0, [pc, #0x8]          @ 0x466c <GPIO7_IRQ3Handler+0x10>
    4664: f7ff f903    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xdfa
    4668: bf00         	nop
    466a: bd80         	pop	{r7, pc}
    466c: 88 01 00 20  	.word	0x20000188

00004670 <GPIO7_IRQ4Handler>:
; GPIO7_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1167
; void GPIO7_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 4);    }
    4670: b580         	push	{r7, lr}
    4672: af00         	add	r7, sp, #0x0
    4674: 2104         	movs	r1, #0x4
    4676: 4802         	ldr	r0, [pc, #0x8]          @ 0x4680 <GPIO7_IRQ4Handler+0x10>
    4678: f7ff f8f9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xe0e
    467c: bf00         	nop
    467e: bd80         	pop	{r7, pc}
    4680: 88 01 00 20  	.word	0x20000188

00004684 <GPIO7_IRQ5Handler>:
; GPIO7_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1169
; void GPIO7_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 5);    }
    4684: b580         	push	{r7, lr}
    4686: af00         	add	r7, sp, #0x0
    4688: 2105         	movs	r1, #0x5
    468a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4694 <GPIO7_IRQ5Handler+0x10>
    468c: f7ff f8ef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xe22
    4690: bf00         	nop
    4692: bd80         	pop	{r7, pc}
    4694: 88 01 00 20  	.word	0x20000188

00004698 <GPIO7_IRQ6Handler>:
; GPIO7_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1171
; void GPIO7_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 6);    }
    4698: b580         	push	{r7, lr}
    469a: af00         	add	r7, sp, #0x0
    469c: 2106         	movs	r1, #0x6
    469e: 4802         	ldr	r0, [pc, #0x8]          @ 0x46a8 <GPIO7_IRQ6Handler+0x10>
    46a0: f7ff f8e5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xe36
    46a4: bf00         	nop
    46a6: bd80         	pop	{r7, pc}
    46a8: 88 01 00 20  	.word	0x20000188

000046ac <GPIO7_IRQ7Handler>:
; GPIO7_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1173
; void GPIO7_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO7_RES, 7);    }
    46ac: b580         	push	{r7, lr}
    46ae: af00         	add	r7, sp, #0x0
    46b0: 2107         	movs	r1, #0x7
    46b2: 4802         	ldr	r0, [pc, #0x8]          @ 0x46bc <GPIO7_IRQ7Handler+0x10>
    46b4: f7ff f8db    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xe4a
    46b8: bf00         	nop
    46ba: bd80         	pop	{r7, pc}
    46bc: 88 01 00 20  	.word	0x20000188

000046c0 <ARM_GPIO7_Initialize>:
; ARM_GPIO7_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1176
; {
    46c0: b580         	push	{r7, lr}
    46c2: b082         	sub	sp, #0x8
    46c4: af00         	add	r7, sp, #0x0
    46c6: 4603         	mov	r3, r0
    46c8: 6039         	str	r1, [r7]
    46ca: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1177
;     return GPIO_Initialize (&GPIO7_RES, cb_event, pin_no);
    46cc: 79fb         	ldrb	r3, [r7, #0x7]
    46ce: 461a         	mov	r2, r3
    46d0: 6839         	ldr	r1, [r7]
    46d2: 4804         	ldr	r0, [pc, #0x10]         @ 0x46e4 <ARM_GPIO7_Initialize+0x24>
    46d4: f7fe fdde    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x1444
    46d8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1178
; }
    46da: 4618         	mov	r0, r3
    46dc: 3708         	adds	r7, #0x8
    46de: 46bd         	mov	sp, r7
    46e0: bd80         	pop	{r7, pc}
    46e2: bf00         	nop
    46e4: 88 01 00 20  	.word	0x20000188

000046e8 <ARM_GPIO7_PowerControl>:
; ARM_GPIO7_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1181
; {
    46e8: b580         	push	{r7, lr}
    46ea: b082         	sub	sp, #0x8
    46ec: af00         	add	r7, sp, #0x0
    46ee: 4603         	mov	r3, r0
    46f0: 460a         	mov	r2, r1
    46f2: 71fb         	strb	r3, [r7, #0x7]
    46f4: 4613         	mov	r3, r2
    46f6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1182
;     return GPIO_PowerControl (&GPIO7_RES, pin_no, state);
    46f8: 79ba         	ldrb	r2, [r7, #0x6]
    46fa: 79fb         	ldrb	r3, [r7, #0x7]
    46fc: 4619         	mov	r1, r3
    46fe: 4804         	ldr	r0, [pc, #0x10]         @ 0x4710 <ARM_GPIO7_PowerControl+0x28>
    4700: f7fe fdec    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x1428
    4704: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1183
; }
    4706: 4618         	mov	r0, r3
    4708: 3708         	adds	r7, #0x8
    470a: 46bd         	mov	sp, r7
    470c: bd80         	pop	{r7, pc}
    470e: bf00         	nop
    4710: 88 01 00 20  	.word	0x20000188

00004714 <ARM_GPIO7_SetDirection>:
; ARM_GPIO7_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1186
; {
    4714: b580         	push	{r7, lr}
    4716: b082         	sub	sp, #0x8
    4718: af00         	add	r7, sp, #0x0
    471a: 4603         	mov	r3, r0
    471c: 460a         	mov	r2, r1
    471e: 71fb         	strb	r3, [r7, #0x7]
    4720: 4613         	mov	r3, r2
    4722: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1187
;     return GPIO_SetDirection (&GPIO7_RES, pin_no, dir);
    4724: 79ba         	ldrb	r2, [r7, #0x6]
    4726: 79fb         	ldrb	r3, [r7, #0x7]
    4728: 4619         	mov	r1, r3
    472a: 4804         	ldr	r0, [pc, #0x10]         @ 0x473c <ARM_GPIO7_SetDirection+0x28>
    472c: f7fe fe13    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x13da
    4730: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1188
; }
    4732: 4618         	mov	r0, r3
    4734: 3708         	adds	r7, #0x8
    4736: 46bd         	mov	sp, r7
    4738: bd80         	pop	{r7, pc}
    473a: bf00         	nop
    473c: 88 01 00 20  	.word	0x20000188

00004740 <ARM_GPIO7_GetDirection>:
; ARM_GPIO7_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1191
; {
    4740: b580         	push	{r7, lr}
    4742: b082         	sub	sp, #0x8
    4744: af00         	add	r7, sp, #0x0
    4746: 4603         	mov	r3, r0
    4748: 6039         	str	r1, [r7]
    474a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1192
;     return GPIO_GetDirection (&GPIO7_RES, pin_no, dir);
    474c: 79fb         	ldrb	r3, [r7, #0x7]
    474e: 683a         	ldr	r2, [r7]
    4750: 4619         	mov	r1, r3
    4752: 4804         	ldr	r0, [pc, #0x10]         @ 0x4764 <ARM_GPIO7_GetDirection+0x24>
    4754: f7fe fe35    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x1396
    4758: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1193
; }
    475a: 4618         	mov	r0, r3
    475c: 3708         	adds	r7, #0x8
    475e: 46bd         	mov	sp, r7
    4760: bd80         	pop	{r7, pc}
    4762: bf00         	nop
    4764: 88 01 00 20  	.word	0x20000188

00004768 <ARM_GPIO7_SetValue>:
; ARM_GPIO7_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1196
; {
    4768: b580         	push	{r7, lr}
    476a: b082         	sub	sp, #0x8
    476c: af00         	add	r7, sp, #0x0
    476e: 4603         	mov	r3, r0
    4770: 460a         	mov	r2, r1
    4772: 71fb         	strb	r3, [r7, #0x7]
    4774: 4613         	mov	r3, r2
    4776: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1197
;     return GPIO_SetValue (&GPIO7_RES, pin_no, value);
    4778: 79ba         	ldrb	r2, [r7, #0x6]
    477a: 79fb         	ldrb	r3, [r7, #0x7]
    477c: 4619         	mov	r1, r3
    477e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4790 <ARM_GPIO7_SetValue+0x28>
    4780: f7fe fe52    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x135c
    4784: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1198
; }
    4786: 4618         	mov	r0, r3
    4788: 3708         	adds	r7, #0x8
    478a: 46bd         	mov	sp, r7
    478c: bd80         	pop	{r7, pc}
    478e: bf00         	nop
    4790: 88 01 00 20  	.word	0x20000188

00004794 <ARM_GPIO7_GetValue>:
; ARM_GPIO7_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1201
; {
    4794: b580         	push	{r7, lr}
    4796: b082         	sub	sp, #0x8
    4798: af00         	add	r7, sp, #0x0
    479a: 4603         	mov	r3, r0
    479c: 6039         	str	r1, [r7]
    479e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1202
;     return GPIO_GetValue (&GPIO7_RES, pin_no, value);
    47a0: 79fb         	ldrb	r3, [r7, #0x7]
    47a2: 683a         	ldr	r2, [r7]
    47a4: 4619         	mov	r1, r3
    47a6: 4804         	ldr	r0, [pc, #0x10]         @ 0x47b8 <ARM_GPIO7_GetValue+0x24>
    47a8: f7fe fe80    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x1300
    47ac: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1203
; }
    47ae: 4618         	mov	r0, r3
    47b0: 3708         	adds	r7, #0x8
    47b2: 46bd         	mov	sp, r7
    47b4: bd80         	pop	{r7, pc}
    47b6: bf00         	nop
    47b8: 88 01 00 20  	.word	0x20000188

000047bc <ARM_GPIO7_Control>:
; ARM_GPIO7_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1206
; {
    47bc: b580         	push	{r7, lr}
    47be: b082         	sub	sp, #0x8
    47c0: af00         	add	r7, sp, #0x0
    47c2: 4603         	mov	r3, r0
    47c4: 603a         	str	r2, [r7]
    47c6: 71fb         	strb	r3, [r7, #0x7]
    47c8: 460b         	mov	r3, r1
    47ca: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1207
;     return GPIO_Control (&GPIO7_RES, pin_no, control_code, arg);
    47cc: 79ba         	ldrb	r2, [r7, #0x6]
    47ce: 79f9         	ldrb	r1, [r7, #0x7]
    47d0: 683b         	ldr	r3, [r7]
    47d2: 4804         	ldr	r0, [pc, #0x10]         @ 0x47e4 <ARM_GPIO7_Control+0x28>
    47d4: f7fe fe97    	bl	0x3506 <GPIO_Control>   @ imm = #-0x12d2
    47d8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1208
; }
    47da: 4618         	mov	r0, r3
    47dc: 3708         	adds	r7, #0x8
    47de: 46bd         	mov	sp, r7
    47e0: bd80         	pop	{r7, pc}
    47e2: bf00         	nop
    47e4: 88 01 00 20  	.word	0x20000188

000047e8 <ARM_GPIO7_Uninitialize>:
; ARM_GPIO7_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1211
; {
    47e8: b580         	push	{r7, lr}
    47ea: b082         	sub	sp, #0x8
    47ec: af00         	add	r7, sp, #0x0
    47ee: 4603         	mov	r3, r0
    47f0: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1212
;     return GPIO_Uninitialize (&GPIO7_RES, pin_no);
    47f2: 79fb         	ldrb	r3, [r7, #0x7]
    47f4: 4619         	mov	r1, r3
    47f6: 4804         	ldr	r0, [pc, #0x10]         @ 0x4808 <ARM_GPIO7_Uninitialize+0x20>
    47f8: f7ff f812    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0xfdc
    47fc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1213
; }
    47fe: 4618         	mov	r0, r3
    4800: 3708         	adds	r7, #0x8
    4802: 46bd         	mov	sp, r7
    4804: bd80         	pop	{r7, pc}
    4806: bf00         	nop
    4808: 88 01 00 20  	.word	0x20000188

0000480c <GPIO8_IRQ0Handler>:
; GPIO8_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1248
; void GPIO8_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 0);    }
    480c: b580         	push	{r7, lr}
    480e: af00         	add	r7, sp, #0x0
    4810: 2100         	movs	r1, #0x0
    4812: 4802         	ldr	r0, [pc, #0x8]          @ 0x481c <GPIO8_IRQ0Handler+0x10>
    4814: f7ff f82b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xfaa
    4818: bf00         	nop
    481a: bd80         	pop	{r7, pc}
    481c: c0 01 00 20  	.word	0x200001c0

00004820 <GPIO8_IRQ1Handler>:
; GPIO8_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1250
; void GPIO8_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 1);    }
    4820: b580         	push	{r7, lr}
    4822: af00         	add	r7, sp, #0x0
    4824: 2101         	movs	r1, #0x1
    4826: 4802         	ldr	r0, [pc, #0x8]          @ 0x4830 <GPIO8_IRQ1Handler+0x10>
    4828: f7ff f821    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xfbe
    482c: bf00         	nop
    482e: bd80         	pop	{r7, pc}
    4830: c0 01 00 20  	.word	0x200001c0

00004834 <GPIO8_IRQ2Handler>:
; GPIO8_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1252
; void GPIO8_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 2);    }
    4834: b580         	push	{r7, lr}
    4836: af00         	add	r7, sp, #0x0
    4838: 2102         	movs	r1, #0x2
    483a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4844 <GPIO8_IRQ2Handler+0x10>
    483c: f7ff f817    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xfd2
    4840: bf00         	nop
    4842: bd80         	pop	{r7, pc}
    4844: c0 01 00 20  	.word	0x200001c0

00004848 <GPIO8_IRQ3Handler>:
; GPIO8_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1254
; void GPIO8_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 3);    }
    4848: b580         	push	{r7, lr}
    484a: af00         	add	r7, sp, #0x0
    484c: 2103         	movs	r1, #0x3
    484e: 4802         	ldr	r0, [pc, #0x8]          @ 0x4858 <GPIO8_IRQ3Handler+0x10>
    4850: f7ff f80d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xfe6
    4854: bf00         	nop
    4856: bd80         	pop	{r7, pc}
    4858: c0 01 00 20  	.word	0x200001c0

0000485c <GPIO8_IRQ4Handler>:
; GPIO8_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1256
; void GPIO8_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 4);    }
    485c: b580         	push	{r7, lr}
    485e: af00         	add	r7, sp, #0x0
    4860: 2104         	movs	r1, #0x4
    4862: 4802         	ldr	r0, [pc, #0x8]          @ 0x486c <GPIO8_IRQ4Handler+0x10>
    4864: f7ff f803    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0xffa
    4868: bf00         	nop
    486a: bd80         	pop	{r7, pc}
    486c: c0 01 00 20  	.word	0x200001c0

00004870 <GPIO8_IRQ5Handler>:
; GPIO8_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1258
; void GPIO8_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 5);    }
    4870: b580         	push	{r7, lr}
    4872: af00         	add	r7, sp, #0x0
    4874: 2105         	movs	r1, #0x5
    4876: 4802         	ldr	r0, [pc, #0x8]          @ 0x4880 <GPIO8_IRQ5Handler+0x10>
    4878: f7fe fff9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x100e
    487c: bf00         	nop
    487e: bd80         	pop	{r7, pc}
    4880: c0 01 00 20  	.word	0x200001c0

00004884 <GPIO8_IRQ6Handler>:
; GPIO8_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1260
; void GPIO8_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 6);    }
    4884: b580         	push	{r7, lr}
    4886: af00         	add	r7, sp, #0x0
    4888: 2106         	movs	r1, #0x6
    488a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4894 <GPIO8_IRQ6Handler+0x10>
    488c: f7fe ffef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1022
    4890: bf00         	nop
    4892: bd80         	pop	{r7, pc}
    4894: c0 01 00 20  	.word	0x200001c0

00004898 <GPIO8_IRQ7Handler>:
; GPIO8_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1262
; void GPIO8_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO8_RES, 7);    }
    4898: b580         	push	{r7, lr}
    489a: af00         	add	r7, sp, #0x0
    489c: 2107         	movs	r1, #0x7
    489e: 4802         	ldr	r0, [pc, #0x8]          @ 0x48a8 <GPIO8_IRQ7Handler+0x10>
    48a0: f7fe ffe5    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1036
    48a4: bf00         	nop
    48a6: bd80         	pop	{r7, pc}
    48a8: c0 01 00 20  	.word	0x200001c0

000048ac <ARM_GPIO8_Initialize>:
; ARM_GPIO8_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1265
; {
    48ac: b580         	push	{r7, lr}
    48ae: b082         	sub	sp, #0x8
    48b0: af00         	add	r7, sp, #0x0
    48b2: 4603         	mov	r3, r0
    48b4: 6039         	str	r1, [r7]
    48b6: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1266
;     return GPIO_Initialize (&GPIO8_RES, cb_event, pin_no);
    48b8: 79fb         	ldrb	r3, [r7, #0x7]
    48ba: 461a         	mov	r2, r3
    48bc: 6839         	ldr	r1, [r7]
    48be: 4804         	ldr	r0, [pc, #0x10]         @ 0x48d0 <ARM_GPIO8_Initialize+0x24>
    48c0: f7fe fce8    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x1630
    48c4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1267
; }
    48c6: 4618         	mov	r0, r3
    48c8: 3708         	adds	r7, #0x8
    48ca: 46bd         	mov	sp, r7
    48cc: bd80         	pop	{r7, pc}
    48ce: bf00         	nop
    48d0: c0 01 00 20  	.word	0x200001c0

000048d4 <ARM_GPIO8_PowerControl>:
; ARM_GPIO8_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1270
; {
    48d4: b580         	push	{r7, lr}
    48d6: b082         	sub	sp, #0x8
    48d8: af00         	add	r7, sp, #0x0
    48da: 4603         	mov	r3, r0
    48dc: 460a         	mov	r2, r1
    48de: 71fb         	strb	r3, [r7, #0x7]
    48e0: 4613         	mov	r3, r2
    48e2: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1271
;     return GPIO_PowerControl (&GPIO8_RES, pin_no, state);
    48e4: 79ba         	ldrb	r2, [r7, #0x6]
    48e6: 79fb         	ldrb	r3, [r7, #0x7]
    48e8: 4619         	mov	r1, r3
    48ea: 4804         	ldr	r0, [pc, #0x10]         @ 0x48fc <ARM_GPIO8_PowerControl+0x28>
    48ec: f7fe fcf6    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x1614
    48f0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1272
; }
    48f2: 4618         	mov	r0, r3
    48f4: 3708         	adds	r7, #0x8
    48f6: 46bd         	mov	sp, r7
    48f8: bd80         	pop	{r7, pc}
    48fa: bf00         	nop
    48fc: c0 01 00 20  	.word	0x200001c0

00004900 <ARM_GPIO8_SetDirection>:
; ARM_GPIO8_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1275
; {
    4900: b580         	push	{r7, lr}
    4902: b082         	sub	sp, #0x8
    4904: af00         	add	r7, sp, #0x0
    4906: 4603         	mov	r3, r0
    4908: 460a         	mov	r2, r1
    490a: 71fb         	strb	r3, [r7, #0x7]
    490c: 4613         	mov	r3, r2
    490e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1276
;     return GPIO_SetDirection (&GPIO8_RES, pin_no, dir);
    4910: 79ba         	ldrb	r2, [r7, #0x6]
    4912: 79fb         	ldrb	r3, [r7, #0x7]
    4914: 4619         	mov	r1, r3
    4916: 4804         	ldr	r0, [pc, #0x10]         @ 0x4928 <ARM_GPIO8_SetDirection+0x28>
    4918: f7fe fd1d    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x15c6
    491c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1277
; }
    491e: 4618         	mov	r0, r3
    4920: 3708         	adds	r7, #0x8
    4922: 46bd         	mov	sp, r7
    4924: bd80         	pop	{r7, pc}
    4926: bf00         	nop
    4928: c0 01 00 20  	.word	0x200001c0

0000492c <ARM_GPIO8_GetDirection>:
; ARM_GPIO8_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1280
; {
    492c: b580         	push	{r7, lr}
    492e: b082         	sub	sp, #0x8
    4930: af00         	add	r7, sp, #0x0
    4932: 4603         	mov	r3, r0
    4934: 6039         	str	r1, [r7]
    4936: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1281
;     return GPIO_GetDirection (&GPIO8_RES, pin_no, dir);
    4938: 79fb         	ldrb	r3, [r7, #0x7]
    493a: 683a         	ldr	r2, [r7]
    493c: 4619         	mov	r1, r3
    493e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4950 <ARM_GPIO8_GetDirection+0x24>
    4940: f7fe fd3f    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x1582
    4944: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1282
; }
    4946: 4618         	mov	r0, r3
    4948: 3708         	adds	r7, #0x8
    494a: 46bd         	mov	sp, r7
    494c: bd80         	pop	{r7, pc}
    494e: bf00         	nop
    4950: c0 01 00 20  	.word	0x200001c0

00004954 <ARM_GPIO8_SetValue>:
; ARM_GPIO8_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1285
; {
    4954: b580         	push	{r7, lr}
    4956: b082         	sub	sp, #0x8
    4958: af00         	add	r7, sp, #0x0
    495a: 4603         	mov	r3, r0
    495c: 460a         	mov	r2, r1
    495e: 71fb         	strb	r3, [r7, #0x7]
    4960: 4613         	mov	r3, r2
    4962: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1286
;     return GPIO_SetValue (&GPIO8_RES, pin_no, value);
    4964: 79ba         	ldrb	r2, [r7, #0x6]
    4966: 79fb         	ldrb	r3, [r7, #0x7]
    4968: 4619         	mov	r1, r3
    496a: 4804         	ldr	r0, [pc, #0x10]         @ 0x497c <ARM_GPIO8_SetValue+0x28>
    496c: f7fe fd5c    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x1548
    4970: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1287
; }
    4972: 4618         	mov	r0, r3
    4974: 3708         	adds	r7, #0x8
    4976: 46bd         	mov	sp, r7
    4978: bd80         	pop	{r7, pc}
    497a: bf00         	nop
    497c: c0 01 00 20  	.word	0x200001c0

00004980 <ARM_GPIO8_GetValue>:
; ARM_GPIO8_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1290
; {
    4980: b580         	push	{r7, lr}
    4982: b082         	sub	sp, #0x8
    4984: af00         	add	r7, sp, #0x0
    4986: 4603         	mov	r3, r0
    4988: 6039         	str	r1, [r7]
    498a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1291
;     return GPIO_GetValue (&GPIO8_RES, pin_no, value);
    498c: 79fb         	ldrb	r3, [r7, #0x7]
    498e: 683a         	ldr	r2, [r7]
    4990: 4619         	mov	r1, r3
    4992: 4804         	ldr	r0, [pc, #0x10]         @ 0x49a4 <ARM_GPIO8_GetValue+0x24>
    4994: f7fe fd8a    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x14ec
    4998: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1292
; }
    499a: 4618         	mov	r0, r3
    499c: 3708         	adds	r7, #0x8
    499e: 46bd         	mov	sp, r7
    49a0: bd80         	pop	{r7, pc}
    49a2: bf00         	nop
    49a4: c0 01 00 20  	.word	0x200001c0

000049a8 <ARM_GPIO8_Control>:
; ARM_GPIO8_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1295
; {
    49a8: b580         	push	{r7, lr}
    49aa: b082         	sub	sp, #0x8
    49ac: af00         	add	r7, sp, #0x0
    49ae: 4603         	mov	r3, r0
    49b0: 603a         	str	r2, [r7]
    49b2: 71fb         	strb	r3, [r7, #0x7]
    49b4: 460b         	mov	r3, r1
    49b6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1296
;     return GPIO_Control (&GPIO8_RES, pin_no, control_code, arg);
    49b8: 79ba         	ldrb	r2, [r7, #0x6]
    49ba: 79f9         	ldrb	r1, [r7, #0x7]
    49bc: 683b         	ldr	r3, [r7]
    49be: 4804         	ldr	r0, [pc, #0x10]         @ 0x49d0 <ARM_GPIO8_Control+0x28>
    49c0: f7fe fda1    	bl	0x3506 <GPIO_Control>   @ imm = #-0x14be
    49c4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1297
; }
    49c6: 4618         	mov	r0, r3
    49c8: 3708         	adds	r7, #0x8
    49ca: 46bd         	mov	sp, r7
    49cc: bd80         	pop	{r7, pc}
    49ce: bf00         	nop
    49d0: c0 01 00 20  	.word	0x200001c0

000049d4 <ARM_GPIO8_Uninitialize>:
; ARM_GPIO8_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1300
; {
    49d4: b580         	push	{r7, lr}
    49d6: b082         	sub	sp, #0x8
    49d8: af00         	add	r7, sp, #0x0
    49da: 4603         	mov	r3, r0
    49dc: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1301
;     return GPIO_Uninitialize (&GPIO8_RES, pin_no);
    49de: 79fb         	ldrb	r3, [r7, #0x7]
    49e0: 4619         	mov	r1, r3
    49e2: 4804         	ldr	r0, [pc, #0x10]         @ 0x49f4 <ARM_GPIO8_Uninitialize+0x20>
    49e4: f7fe ff1c    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x11c8
    49e8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1302
; }
    49ea: 4618         	mov	r0, r3
    49ec: 3708         	adds	r7, #0x8
    49ee: 46bd         	mov	sp, r7
    49f0: bd80         	pop	{r7, pc}
    49f2: bf00         	nop
    49f4: c0 01 00 20  	.word	0x200001c0

000049f8 <GPIO9_IRQ0Handler>:
; GPIO9_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1337
; void GPIO9_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 0);    }
    49f8: b580         	push	{r7, lr}
    49fa: af00         	add	r7, sp, #0x0
    49fc: 2100         	movs	r1, #0x0
    49fe: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a08 <GPIO9_IRQ0Handler+0x10>
    4a00: f7fe ff35    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1196
    4a04: bf00         	nop
    4a06: bd80         	pop	{r7, pc}
    4a08: f8 01 00 20  	.word	0x200001f8

00004a0c <GPIO9_IRQ1Handler>:
; GPIO9_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1339
; void GPIO9_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 1);    }
    4a0c: b580         	push	{r7, lr}
    4a0e: af00         	add	r7, sp, #0x0
    4a10: 2101         	movs	r1, #0x1
    4a12: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a1c <GPIO9_IRQ1Handler+0x10>
    4a14: f7fe ff2b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x11aa
    4a18: bf00         	nop
    4a1a: bd80         	pop	{r7, pc}
    4a1c: f8 01 00 20  	.word	0x200001f8

00004a20 <GPIO9_IRQ2Handler>:
; GPIO9_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1341
; void GPIO9_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 2);    }
    4a20: b580         	push	{r7, lr}
    4a22: af00         	add	r7, sp, #0x0
    4a24: 2102         	movs	r1, #0x2
    4a26: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a30 <GPIO9_IRQ2Handler+0x10>
    4a28: f7fe ff21    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x11be
    4a2c: bf00         	nop
    4a2e: bd80         	pop	{r7, pc}
    4a30: f8 01 00 20  	.word	0x200001f8

00004a34 <GPIO9_IRQ3Handler>:
; GPIO9_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1343
; void GPIO9_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 3);    }
    4a34: b580         	push	{r7, lr}
    4a36: af00         	add	r7, sp, #0x0
    4a38: 2103         	movs	r1, #0x3
    4a3a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a44 <GPIO9_IRQ3Handler+0x10>
    4a3c: f7fe ff17    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x11d2
    4a40: bf00         	nop
    4a42: bd80         	pop	{r7, pc}
    4a44: f8 01 00 20  	.word	0x200001f8

00004a48 <GPIO9_IRQ4Handler>:
; GPIO9_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1345
; void GPIO9_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 4);    }
    4a48: b580         	push	{r7, lr}
    4a4a: af00         	add	r7, sp, #0x0
    4a4c: 2104         	movs	r1, #0x4
    4a4e: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a58 <GPIO9_IRQ4Handler+0x10>
    4a50: f7fe ff0d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x11e6
    4a54: bf00         	nop
    4a56: bd80         	pop	{r7, pc}
    4a58: f8 01 00 20  	.word	0x200001f8

00004a5c <GPIO9_IRQ5Handler>:
; GPIO9_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1347
; void GPIO9_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 5);    }
    4a5c: b580         	push	{r7, lr}
    4a5e: af00         	add	r7, sp, #0x0
    4a60: 2105         	movs	r1, #0x5
    4a62: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a6c <GPIO9_IRQ5Handler+0x10>
    4a64: f7fe ff03    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x11fa
    4a68: bf00         	nop
    4a6a: bd80         	pop	{r7, pc}
    4a6c: f8 01 00 20  	.word	0x200001f8

00004a70 <GPIO9_IRQ6Handler>:
; GPIO9_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1349
; void GPIO9_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 6);    }
    4a70: b580         	push	{r7, lr}
    4a72: af00         	add	r7, sp, #0x0
    4a74: 2106         	movs	r1, #0x6
    4a76: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a80 <GPIO9_IRQ6Handler+0x10>
    4a78: f7fe fef9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x120e
    4a7c: bf00         	nop
    4a7e: bd80         	pop	{r7, pc}
    4a80: f8 01 00 20  	.word	0x200001f8

00004a84 <GPIO9_IRQ7Handler>:
; GPIO9_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1351
; void GPIO9_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO9_RES, 7);    }
    4a84: b580         	push	{r7, lr}
    4a86: af00         	add	r7, sp, #0x0
    4a88: 2107         	movs	r1, #0x7
    4a8a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4a94 <GPIO9_IRQ7Handler+0x10>
    4a8c: f7fe feef    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1222
    4a90: bf00         	nop
    4a92: bd80         	pop	{r7, pc}
    4a94: f8 01 00 20  	.word	0x200001f8

00004a98 <ARM_GPIO9_Initialize>:
; ARM_GPIO9_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1354
; {
    4a98: b580         	push	{r7, lr}
    4a9a: b082         	sub	sp, #0x8
    4a9c: af00         	add	r7, sp, #0x0
    4a9e: 4603         	mov	r3, r0
    4aa0: 6039         	str	r1, [r7]
    4aa2: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1355
;     return GPIO_Initialize (&GPIO9_RES, cb_event, pin_no);
    4aa4: 79fb         	ldrb	r3, [r7, #0x7]
    4aa6: 461a         	mov	r2, r3
    4aa8: 6839         	ldr	r1, [r7]
    4aaa: 4804         	ldr	r0, [pc, #0x10]         @ 0x4abc <ARM_GPIO9_Initialize+0x24>
    4aac: f7fe fbf2    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x181c
    4ab0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1356
; }
    4ab2: 4618         	mov	r0, r3
    4ab4: 3708         	adds	r7, #0x8
    4ab6: 46bd         	mov	sp, r7
    4ab8: bd80         	pop	{r7, pc}
    4aba: bf00         	nop
    4abc: f8 01 00 20  	.word	0x200001f8

00004ac0 <ARM_GPIO9_PowerControl>:
; ARM_GPIO9_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1359
; {
    4ac0: b580         	push	{r7, lr}
    4ac2: b082         	sub	sp, #0x8
    4ac4: af00         	add	r7, sp, #0x0
    4ac6: 4603         	mov	r3, r0
    4ac8: 460a         	mov	r2, r1
    4aca: 71fb         	strb	r3, [r7, #0x7]
    4acc: 4613         	mov	r3, r2
    4ace: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1360
;     return GPIO_PowerControl (&GPIO9_RES, pin_no, state);
    4ad0: 79ba         	ldrb	r2, [r7, #0x6]
    4ad2: 79fb         	ldrb	r3, [r7, #0x7]
    4ad4: 4619         	mov	r1, r3
    4ad6: 4804         	ldr	r0, [pc, #0x10]         @ 0x4ae8 <ARM_GPIO9_PowerControl+0x28>
    4ad8: f7fe fc00    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x1800
    4adc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1361
; }
    4ade: 4618         	mov	r0, r3
    4ae0: 3708         	adds	r7, #0x8
    4ae2: 46bd         	mov	sp, r7
    4ae4: bd80         	pop	{r7, pc}
    4ae6: bf00         	nop
    4ae8: f8 01 00 20  	.word	0x200001f8

00004aec <ARM_GPIO9_SetDirection>:
; ARM_GPIO9_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1364
; {
    4aec: b580         	push	{r7, lr}
    4aee: b082         	sub	sp, #0x8
    4af0: af00         	add	r7, sp, #0x0
    4af2: 4603         	mov	r3, r0
    4af4: 460a         	mov	r2, r1
    4af6: 71fb         	strb	r3, [r7, #0x7]
    4af8: 4613         	mov	r3, r2
    4afa: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1365
;     return GPIO_SetDirection (&GPIO9_RES, pin_no, dir);
    4afc: 79ba         	ldrb	r2, [r7, #0x6]
    4afe: 79fb         	ldrb	r3, [r7, #0x7]
    4b00: 4619         	mov	r1, r3
    4b02: 4804         	ldr	r0, [pc, #0x10]         @ 0x4b14 <ARM_GPIO9_SetDirection+0x28>
    4b04: f7fe fc27    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x17b2
    4b08: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1366
; }
    4b0a: 4618         	mov	r0, r3
    4b0c: 3708         	adds	r7, #0x8
    4b0e: 46bd         	mov	sp, r7
    4b10: bd80         	pop	{r7, pc}
    4b12: bf00         	nop
    4b14: f8 01 00 20  	.word	0x200001f8

00004b18 <ARM_GPIO9_GetDirection>:
; ARM_GPIO9_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1369
; {
    4b18: b580         	push	{r7, lr}
    4b1a: b082         	sub	sp, #0x8
    4b1c: af00         	add	r7, sp, #0x0
    4b1e: 4603         	mov	r3, r0
    4b20: 6039         	str	r1, [r7]
    4b22: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1370
;     return GPIO_GetDirection (&GPIO9_RES, pin_no, dir);
    4b24: 79fb         	ldrb	r3, [r7, #0x7]
    4b26: 683a         	ldr	r2, [r7]
    4b28: 4619         	mov	r1, r3
    4b2a: 4804         	ldr	r0, [pc, #0x10]         @ 0x4b3c <ARM_GPIO9_GetDirection+0x24>
    4b2c: f7fe fc49    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x176e
    4b30: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1371
; }
    4b32: 4618         	mov	r0, r3
    4b34: 3708         	adds	r7, #0x8
    4b36: 46bd         	mov	sp, r7
    4b38: bd80         	pop	{r7, pc}
    4b3a: bf00         	nop
    4b3c: f8 01 00 20  	.word	0x200001f8

00004b40 <ARM_GPIO9_SetValue>:
; ARM_GPIO9_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1374
; {
    4b40: b580         	push	{r7, lr}
    4b42: b082         	sub	sp, #0x8
    4b44: af00         	add	r7, sp, #0x0
    4b46: 4603         	mov	r3, r0
    4b48: 460a         	mov	r2, r1
    4b4a: 71fb         	strb	r3, [r7, #0x7]
    4b4c: 4613         	mov	r3, r2
    4b4e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1375
;     return GPIO_SetValue (&GPIO9_RES, pin_no, value);
    4b50: 79ba         	ldrb	r2, [r7, #0x6]
    4b52: 79fb         	ldrb	r3, [r7, #0x7]
    4b54: 4619         	mov	r1, r3
    4b56: 4804         	ldr	r0, [pc, #0x10]         @ 0x4b68 <ARM_GPIO9_SetValue+0x28>
    4b58: f7fe fc66    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x1734
    4b5c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1376
; }
    4b5e: 4618         	mov	r0, r3
    4b60: 3708         	adds	r7, #0x8
    4b62: 46bd         	mov	sp, r7
    4b64: bd80         	pop	{r7, pc}
    4b66: bf00         	nop
    4b68: f8 01 00 20  	.word	0x200001f8

00004b6c <ARM_GPIO9_GetValue>:
; ARM_GPIO9_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1379
; {
    4b6c: b580         	push	{r7, lr}
    4b6e: b082         	sub	sp, #0x8
    4b70: af00         	add	r7, sp, #0x0
    4b72: 4603         	mov	r3, r0
    4b74: 6039         	str	r1, [r7]
    4b76: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1380
;     return GPIO_GetValue (&GPIO9_RES, pin_no, value);
    4b78: 79fb         	ldrb	r3, [r7, #0x7]
    4b7a: 683a         	ldr	r2, [r7]
    4b7c: 4619         	mov	r1, r3
    4b7e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4b90 <ARM_GPIO9_GetValue+0x24>
    4b80: f7fe fc94    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x16d8
    4b84: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1381
; }
    4b86: 4618         	mov	r0, r3
    4b88: 3708         	adds	r7, #0x8
    4b8a: 46bd         	mov	sp, r7
    4b8c: bd80         	pop	{r7, pc}
    4b8e: bf00         	nop
    4b90: f8 01 00 20  	.word	0x200001f8

00004b94 <ARM_GPIO9_Control>:
; ARM_GPIO9_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1384
; {
    4b94: b580         	push	{r7, lr}
    4b96: b082         	sub	sp, #0x8
    4b98: af00         	add	r7, sp, #0x0
    4b9a: 4603         	mov	r3, r0
    4b9c: 603a         	str	r2, [r7]
    4b9e: 71fb         	strb	r3, [r7, #0x7]
    4ba0: 460b         	mov	r3, r1
    4ba2: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1385
;     return GPIO_Control (&GPIO9_RES, pin_no, control_code, arg);
    4ba4: 79ba         	ldrb	r2, [r7, #0x6]
    4ba6: 79f9         	ldrb	r1, [r7, #0x7]
    4ba8: 683b         	ldr	r3, [r7]
    4baa: 4804         	ldr	r0, [pc, #0x10]         @ 0x4bbc <ARM_GPIO9_Control+0x28>
    4bac: f7fe fcab    	bl	0x3506 <GPIO_Control>   @ imm = #-0x16aa
    4bb0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1386
; }
    4bb2: 4618         	mov	r0, r3
    4bb4: 3708         	adds	r7, #0x8
    4bb6: 46bd         	mov	sp, r7
    4bb8: bd80         	pop	{r7, pc}
    4bba: bf00         	nop
    4bbc: f8 01 00 20  	.word	0x200001f8

00004bc0 <ARM_GPIO9_Uninitialize>:
; ARM_GPIO9_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1389
; {
    4bc0: b580         	push	{r7, lr}
    4bc2: b082         	sub	sp, #0x8
    4bc4: af00         	add	r7, sp, #0x0
    4bc6: 4603         	mov	r3, r0
    4bc8: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1390
;     return GPIO_Uninitialize (&GPIO9_RES, pin_no);
    4bca: 79fb         	ldrb	r3, [r7, #0x7]
    4bcc: 4619         	mov	r1, r3
    4bce: 4804         	ldr	r0, [pc, #0x10]         @ 0x4be0 <ARM_GPIO9_Uninitialize+0x20>
    4bd0: f7fe fe26    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x13b4
    4bd4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1391
; }
    4bd6: 4618         	mov	r0, r3
    4bd8: 3708         	adds	r7, #0x8
    4bda: 46bd         	mov	sp, r7
    4bdc: bd80         	pop	{r7, pc}
    4bde: bf00         	nop
    4be0: f8 01 00 20  	.word	0x200001f8

00004be4 <GPIO10_IRQ0Handler>:
; GPIO10_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1426
; void GPIO10_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 0);    }
    4be4: b580         	push	{r7, lr}
    4be6: af00         	add	r7, sp, #0x0
    4be8: 2100         	movs	r1, #0x0
    4bea: 4802         	ldr	r0, [pc, #0x8]          @ 0x4bf4 <GPIO10_IRQ0Handler+0x10>
    4bec: f7fe fe3f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1382
    4bf0: bf00         	nop
    4bf2: bd80         	pop	{r7, pc}
    4bf4: 30 02 00 20  	.word	0x20000230

00004bf8 <GPIO10_IRQ1Handler>:
; GPIO10_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1428
; void GPIO10_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 1);    }
    4bf8: b580         	push	{r7, lr}
    4bfa: af00         	add	r7, sp, #0x0
    4bfc: 2101         	movs	r1, #0x1
    4bfe: 4802         	ldr	r0, [pc, #0x8]          @ 0x4c08 <GPIO10_IRQ1Handler+0x10>
    4c00: f7fe fe35    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1396
    4c04: bf00         	nop
    4c06: bd80         	pop	{r7, pc}
    4c08: 30 02 00 20  	.word	0x20000230

00004c0c <GPIO10_IRQ2Handler>:
; GPIO10_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1430
; void GPIO10_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 2);    }
    4c0c: b580         	push	{r7, lr}
    4c0e: af00         	add	r7, sp, #0x0
    4c10: 2102         	movs	r1, #0x2
    4c12: 4802         	ldr	r0, [pc, #0x8]          @ 0x4c1c <GPIO10_IRQ2Handler+0x10>
    4c14: f7fe fe2b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x13aa
    4c18: bf00         	nop
    4c1a: bd80         	pop	{r7, pc}
    4c1c: 30 02 00 20  	.word	0x20000230

00004c20 <GPIO10_IRQ3Handler>:
; GPIO10_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1432
; void GPIO10_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 3);    }
    4c20: b580         	push	{r7, lr}
    4c22: af00         	add	r7, sp, #0x0
    4c24: 2103         	movs	r1, #0x3
    4c26: 4802         	ldr	r0, [pc, #0x8]          @ 0x4c30 <GPIO10_IRQ3Handler+0x10>
    4c28: f7fe fe21    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x13be
    4c2c: bf00         	nop
    4c2e: bd80         	pop	{r7, pc}
    4c30: 30 02 00 20  	.word	0x20000230

00004c34 <GPIO10_IRQ4Handler>:
; GPIO10_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1434
; void GPIO10_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 4);    }
    4c34: b580         	push	{r7, lr}
    4c36: af00         	add	r7, sp, #0x0
    4c38: 2104         	movs	r1, #0x4
    4c3a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4c44 <GPIO10_IRQ4Handler+0x10>
    4c3c: f7fe fe17    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x13d2
    4c40: bf00         	nop
    4c42: bd80         	pop	{r7, pc}
    4c44: 30 02 00 20  	.word	0x20000230

00004c48 <GPIO10_IRQ5Handler>:
; GPIO10_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1436
; void GPIO10_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 5);    }
    4c48: b580         	push	{r7, lr}
    4c4a: af00         	add	r7, sp, #0x0
    4c4c: 2105         	movs	r1, #0x5
    4c4e: 4802         	ldr	r0, [pc, #0x8]          @ 0x4c58 <GPIO10_IRQ5Handler+0x10>
    4c50: f7fe fe0d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x13e6
    4c54: bf00         	nop
    4c56: bd80         	pop	{r7, pc}
    4c58: 30 02 00 20  	.word	0x20000230

00004c5c <GPIO10_IRQ6Handler>:
; GPIO10_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1438
; void GPIO10_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 6);    }
    4c5c: b580         	push	{r7, lr}
    4c5e: af00         	add	r7, sp, #0x0
    4c60: 2106         	movs	r1, #0x6
    4c62: 4802         	ldr	r0, [pc, #0x8]          @ 0x4c6c <GPIO10_IRQ6Handler+0x10>
    4c64: f7fe fe03    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x13fa
    4c68: bf00         	nop
    4c6a: bd80         	pop	{r7, pc}
    4c6c: 30 02 00 20  	.word	0x20000230

00004c70 <GPIO10_IRQ7Handler>:
; GPIO10_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1440
; void GPIO10_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO10_RES, 7);    }
    4c70: b580         	push	{r7, lr}
    4c72: af00         	add	r7, sp, #0x0
    4c74: 2107         	movs	r1, #0x7
    4c76: 4802         	ldr	r0, [pc, #0x8]          @ 0x4c80 <GPIO10_IRQ7Handler+0x10>
    4c78: f7fe fdf9    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x140e
    4c7c: bf00         	nop
    4c7e: bd80         	pop	{r7, pc}
    4c80: 30 02 00 20  	.word	0x20000230

00004c84 <ARM_GPIO10_Initialize>:
; ARM_GPIO10_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1443
; {
    4c84: b580         	push	{r7, lr}
    4c86: b082         	sub	sp, #0x8
    4c88: af00         	add	r7, sp, #0x0
    4c8a: 4603         	mov	r3, r0
    4c8c: 6039         	str	r1, [r7]
    4c8e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1444
;     return GPIO_Initialize (&GPIO10_RES, cb_event, pin_no);
    4c90: 79fb         	ldrb	r3, [r7, #0x7]
    4c92: 461a         	mov	r2, r3
    4c94: 6839         	ldr	r1, [r7]
    4c96: 4804         	ldr	r0, [pc, #0x10]         @ 0x4ca8 <ARM_GPIO10_Initialize+0x24>
    4c98: f7fe fafc    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x1a08
    4c9c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1445
; }
    4c9e: 4618         	mov	r0, r3
    4ca0: 3708         	adds	r7, #0x8
    4ca2: 46bd         	mov	sp, r7
    4ca4: bd80         	pop	{r7, pc}
    4ca6: bf00         	nop
    4ca8: 30 02 00 20  	.word	0x20000230

00004cac <ARM_GPIO10_PowerControl>:
; ARM_GPIO10_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1448
; {
    4cac: b580         	push	{r7, lr}
    4cae: b082         	sub	sp, #0x8
    4cb0: af00         	add	r7, sp, #0x0
    4cb2: 4603         	mov	r3, r0
    4cb4: 460a         	mov	r2, r1
    4cb6: 71fb         	strb	r3, [r7, #0x7]
    4cb8: 4613         	mov	r3, r2
    4cba: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1449
;     return GPIO_PowerControl (&GPIO10_RES, pin_no, state);
    4cbc: 79ba         	ldrb	r2, [r7, #0x6]
    4cbe: 79fb         	ldrb	r3, [r7, #0x7]
    4cc0: 4619         	mov	r1, r3
    4cc2: 4804         	ldr	r0, [pc, #0x10]         @ 0x4cd4 <ARM_GPIO10_PowerControl+0x28>
    4cc4: f7fe fb0a    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x19ec
    4cc8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1450
; }
    4cca: 4618         	mov	r0, r3
    4ccc: 3708         	adds	r7, #0x8
    4cce: 46bd         	mov	sp, r7
    4cd0: bd80         	pop	{r7, pc}
    4cd2: bf00         	nop
    4cd4: 30 02 00 20  	.word	0x20000230

00004cd8 <ARM_GPIO10_SetDirection>:
; ARM_GPIO10_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1453
; {
    4cd8: b580         	push	{r7, lr}
    4cda: b082         	sub	sp, #0x8
    4cdc: af00         	add	r7, sp, #0x0
    4cde: 4603         	mov	r3, r0
    4ce0: 460a         	mov	r2, r1
    4ce2: 71fb         	strb	r3, [r7, #0x7]
    4ce4: 4613         	mov	r3, r2
    4ce6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1454
;     return GPIO_SetDirection (&GPIO10_RES, pin_no, dir);
    4ce8: 79ba         	ldrb	r2, [r7, #0x6]
    4cea: 79fb         	ldrb	r3, [r7, #0x7]
    4cec: 4619         	mov	r1, r3
    4cee: 4804         	ldr	r0, [pc, #0x10]         @ 0x4d00 <ARM_GPIO10_SetDirection+0x28>
    4cf0: f7fe fb31    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x199e
    4cf4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1455
; }
    4cf6: 4618         	mov	r0, r3
    4cf8: 3708         	adds	r7, #0x8
    4cfa: 46bd         	mov	sp, r7
    4cfc: bd80         	pop	{r7, pc}
    4cfe: bf00         	nop
    4d00: 30 02 00 20  	.word	0x20000230

00004d04 <ARM_GPIO10_GetDirection>:
; ARM_GPIO10_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1458
; {
    4d04: b580         	push	{r7, lr}
    4d06: b082         	sub	sp, #0x8
    4d08: af00         	add	r7, sp, #0x0
    4d0a: 4603         	mov	r3, r0
    4d0c: 6039         	str	r1, [r7]
    4d0e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1459
;     return GPIO_GetDirection (&GPIO10_RES, pin_no, dir);
    4d10: 79fb         	ldrb	r3, [r7, #0x7]
    4d12: 683a         	ldr	r2, [r7]
    4d14: 4619         	mov	r1, r3
    4d16: 4804         	ldr	r0, [pc, #0x10]         @ 0x4d28 <ARM_GPIO10_GetDirection+0x24>
    4d18: f7fe fb53    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x195a
    4d1c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1460
; }
    4d1e: 4618         	mov	r0, r3
    4d20: 3708         	adds	r7, #0x8
    4d22: 46bd         	mov	sp, r7
    4d24: bd80         	pop	{r7, pc}
    4d26: bf00         	nop
    4d28: 30 02 00 20  	.word	0x20000230

00004d2c <ARM_GPIO10_SetValue>:
; ARM_GPIO10_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1463
; {
    4d2c: b580         	push	{r7, lr}
    4d2e: b082         	sub	sp, #0x8
    4d30: af00         	add	r7, sp, #0x0
    4d32: 4603         	mov	r3, r0
    4d34: 460a         	mov	r2, r1
    4d36: 71fb         	strb	r3, [r7, #0x7]
    4d38: 4613         	mov	r3, r2
    4d3a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1464
;     return GPIO_SetValue (&GPIO10_RES, pin_no, value);
    4d3c: 79ba         	ldrb	r2, [r7, #0x6]
    4d3e: 79fb         	ldrb	r3, [r7, #0x7]
    4d40: 4619         	mov	r1, r3
    4d42: 4804         	ldr	r0, [pc, #0x10]         @ 0x4d54 <ARM_GPIO10_SetValue+0x28>
    4d44: f7fe fb70    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x1920
    4d48: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1465
; }
    4d4a: 4618         	mov	r0, r3
    4d4c: 3708         	adds	r7, #0x8
    4d4e: 46bd         	mov	sp, r7
    4d50: bd80         	pop	{r7, pc}
    4d52: bf00         	nop
    4d54: 30 02 00 20  	.word	0x20000230

00004d58 <ARM_GPIO10_GetValue>:
; ARM_GPIO10_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1468
; {
    4d58: b580         	push	{r7, lr}
    4d5a: b082         	sub	sp, #0x8
    4d5c: af00         	add	r7, sp, #0x0
    4d5e: 4603         	mov	r3, r0
    4d60: 6039         	str	r1, [r7]
    4d62: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1469
;     return GPIO_GetValue (&GPIO10_RES, pin_no, value);
    4d64: 79fb         	ldrb	r3, [r7, #0x7]
    4d66: 683a         	ldr	r2, [r7]
    4d68: 4619         	mov	r1, r3
    4d6a: 4804         	ldr	r0, [pc, #0x10]         @ 0x4d7c <ARM_GPIO10_GetValue+0x24>
    4d6c: f7fe fb9e    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x18c4
    4d70: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1470
; }
    4d72: 4618         	mov	r0, r3
    4d74: 3708         	adds	r7, #0x8
    4d76: 46bd         	mov	sp, r7
    4d78: bd80         	pop	{r7, pc}
    4d7a: bf00         	nop
    4d7c: 30 02 00 20  	.word	0x20000230

00004d80 <ARM_GPIO10_Control>:
; ARM_GPIO10_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1473
; {
    4d80: b580         	push	{r7, lr}
    4d82: b082         	sub	sp, #0x8
    4d84: af00         	add	r7, sp, #0x0
    4d86: 4603         	mov	r3, r0
    4d88: 603a         	str	r2, [r7]
    4d8a: 71fb         	strb	r3, [r7, #0x7]
    4d8c: 460b         	mov	r3, r1
    4d8e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1474
;     return GPIO_Control (&GPIO10_RES, pin_no, control_code, arg);
    4d90: 79ba         	ldrb	r2, [r7, #0x6]
    4d92: 79f9         	ldrb	r1, [r7, #0x7]
    4d94: 683b         	ldr	r3, [r7]
    4d96: 4804         	ldr	r0, [pc, #0x10]         @ 0x4da8 <ARM_GPIO10_Control+0x28>
    4d98: f7fe fbb5    	bl	0x3506 <GPIO_Control>   @ imm = #-0x1896
    4d9c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1475
; }
    4d9e: 4618         	mov	r0, r3
    4da0: 3708         	adds	r7, #0x8
    4da2: 46bd         	mov	sp, r7
    4da4: bd80         	pop	{r7, pc}
    4da6: bf00         	nop
    4da8: 30 02 00 20  	.word	0x20000230

00004dac <ARM_GPIO10_Uninitialize>:
; ARM_GPIO10_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1478
; {
    4dac: b580         	push	{r7, lr}
    4dae: b082         	sub	sp, #0x8
    4db0: af00         	add	r7, sp, #0x0
    4db2: 4603         	mov	r3, r0
    4db4: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1479
;     return GPIO_Uninitialize (&GPIO10_RES, pin_no);
    4db6: 79fb         	ldrb	r3, [r7, #0x7]
    4db8: 4619         	mov	r1, r3
    4dba: 4804         	ldr	r0, [pc, #0x10]         @ 0x4dcc <ARM_GPIO10_Uninitialize+0x20>
    4dbc: f7fe fd30    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x15a0
    4dc0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1480
; }
    4dc2: 4618         	mov	r0, r3
    4dc4: 3708         	adds	r7, #0x8
    4dc6: 46bd         	mov	sp, r7
    4dc8: bd80         	pop	{r7, pc}
    4dca: bf00         	nop
    4dcc: 30 02 00 20  	.word	0x20000230

00004dd0 <GPIO11_IRQ0Handler>:
; GPIO11_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1515
; void GPIO11_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 0);    }
    4dd0: b580         	push	{r7, lr}
    4dd2: af00         	add	r7, sp, #0x0
    4dd4: 2100         	movs	r1, #0x0
    4dd6: 4802         	ldr	r0, [pc, #0x8]          @ 0x4de0 <GPIO11_IRQ0Handler+0x10>
    4dd8: f7fe fd49    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x156e
    4ddc: bf00         	nop
    4dde: bd80         	pop	{r7, pc}
    4de0: 68 02 00 20  	.word	0x20000268

00004de4 <GPIO11_IRQ1Handler>:
; GPIO11_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1517
; void GPIO11_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 1);    }
    4de4: b580         	push	{r7, lr}
    4de6: af00         	add	r7, sp, #0x0
    4de8: 2101         	movs	r1, #0x1
    4dea: 4802         	ldr	r0, [pc, #0x8]          @ 0x4df4 <GPIO11_IRQ1Handler+0x10>
    4dec: f7fe fd3f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1582
    4df0: bf00         	nop
    4df2: bd80         	pop	{r7, pc}
    4df4: 68 02 00 20  	.word	0x20000268

00004df8 <GPIO11_IRQ2Handler>:
; GPIO11_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1519
; void GPIO11_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 2);    }
    4df8: b580         	push	{r7, lr}
    4dfa: af00         	add	r7, sp, #0x0
    4dfc: 2102         	movs	r1, #0x2
    4dfe: 4802         	ldr	r0, [pc, #0x8]          @ 0x4e08 <GPIO11_IRQ2Handler+0x10>
    4e00: f7fe fd35    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1596
    4e04: bf00         	nop
    4e06: bd80         	pop	{r7, pc}
    4e08: 68 02 00 20  	.word	0x20000268

00004e0c <GPIO11_IRQ3Handler>:
; GPIO11_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1521
; void GPIO11_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 3);    }
    4e0c: b580         	push	{r7, lr}
    4e0e: af00         	add	r7, sp, #0x0
    4e10: 2103         	movs	r1, #0x3
    4e12: 4802         	ldr	r0, [pc, #0x8]          @ 0x4e1c <GPIO11_IRQ3Handler+0x10>
    4e14: f7fe fd2b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x15aa
    4e18: bf00         	nop
    4e1a: bd80         	pop	{r7, pc}
    4e1c: 68 02 00 20  	.word	0x20000268

00004e20 <GPIO11_IRQ4Handler>:
; GPIO11_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1523
; void GPIO11_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 4);    }
    4e20: b580         	push	{r7, lr}
    4e22: af00         	add	r7, sp, #0x0
    4e24: 2104         	movs	r1, #0x4
    4e26: 4802         	ldr	r0, [pc, #0x8]          @ 0x4e30 <GPIO11_IRQ4Handler+0x10>
    4e28: f7fe fd21    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x15be
    4e2c: bf00         	nop
    4e2e: bd80         	pop	{r7, pc}
    4e30: 68 02 00 20  	.word	0x20000268

00004e34 <GPIO11_IRQ5Handler>:
; GPIO11_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1525
; void GPIO11_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 5);    }
    4e34: b580         	push	{r7, lr}
    4e36: af00         	add	r7, sp, #0x0
    4e38: 2105         	movs	r1, #0x5
    4e3a: 4802         	ldr	r0, [pc, #0x8]          @ 0x4e44 <GPIO11_IRQ5Handler+0x10>
    4e3c: f7fe fd17    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x15d2
    4e40: bf00         	nop
    4e42: bd80         	pop	{r7, pc}
    4e44: 68 02 00 20  	.word	0x20000268

00004e48 <GPIO11_IRQ6Handler>:
; GPIO11_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1527
; void GPIO11_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 6);    }
    4e48: b580         	push	{r7, lr}
    4e4a: af00         	add	r7, sp, #0x0
    4e4c: 2106         	movs	r1, #0x6
    4e4e: 4802         	ldr	r0, [pc, #0x8]          @ 0x4e58 <GPIO11_IRQ6Handler+0x10>
    4e50: f7fe fd0d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x15e6
    4e54: bf00         	nop
    4e56: bd80         	pop	{r7, pc}
    4e58: 68 02 00 20  	.word	0x20000268

00004e5c <GPIO11_IRQ7Handler>:
; GPIO11_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1529
; void GPIO11_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO11_RES, 7);    }
    4e5c: b580         	push	{r7, lr}
    4e5e: af00         	add	r7, sp, #0x0
    4e60: 2107         	movs	r1, #0x7
    4e62: 4802         	ldr	r0, [pc, #0x8]          @ 0x4e6c <GPIO11_IRQ7Handler+0x10>
    4e64: f7fe fd03    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x15fa
    4e68: bf00         	nop
    4e6a: bd80         	pop	{r7, pc}
    4e6c: 68 02 00 20  	.word	0x20000268

00004e70 <ARM_GPIO11_Initialize>:
; ARM_GPIO11_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1532
; {
    4e70: b580         	push	{r7, lr}
    4e72: b082         	sub	sp, #0x8
    4e74: af00         	add	r7, sp, #0x0
    4e76: 4603         	mov	r3, r0
    4e78: 6039         	str	r1, [r7]
    4e7a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1533
;     return GPIO_Initialize (&GPIO11_RES, cb_event, pin_no);
    4e7c: 79fb         	ldrb	r3, [r7, #0x7]
    4e7e: 461a         	mov	r2, r3
    4e80: 6839         	ldr	r1, [r7]
    4e82: 4804         	ldr	r0, [pc, #0x10]         @ 0x4e94 <ARM_GPIO11_Initialize+0x24>
    4e84: f7fe fa06    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x1bf4
    4e88: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1534
; }
    4e8a: 4618         	mov	r0, r3
    4e8c: 3708         	adds	r7, #0x8
    4e8e: 46bd         	mov	sp, r7
    4e90: bd80         	pop	{r7, pc}
    4e92: bf00         	nop
    4e94: 68 02 00 20  	.word	0x20000268

00004e98 <ARM_GPIO11_PowerControl>:
; ARM_GPIO11_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1537
; {
    4e98: b580         	push	{r7, lr}
    4e9a: b082         	sub	sp, #0x8
    4e9c: af00         	add	r7, sp, #0x0
    4e9e: 4603         	mov	r3, r0
    4ea0: 460a         	mov	r2, r1
    4ea2: 71fb         	strb	r3, [r7, #0x7]
    4ea4: 4613         	mov	r3, r2
    4ea6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1538
;     return GPIO_PowerControl (&GPIO11_RES, pin_no, state);
    4ea8: 79ba         	ldrb	r2, [r7, #0x6]
    4eaa: 79fb         	ldrb	r3, [r7, #0x7]
    4eac: 4619         	mov	r1, r3
    4eae: 4804         	ldr	r0, [pc, #0x10]         @ 0x4ec0 <ARM_GPIO11_PowerControl+0x28>
    4eb0: f7fe fa14    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x1bd8
    4eb4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1539
; }
    4eb6: 4618         	mov	r0, r3
    4eb8: 3708         	adds	r7, #0x8
    4eba: 46bd         	mov	sp, r7
    4ebc: bd80         	pop	{r7, pc}
    4ebe: bf00         	nop
    4ec0: 68 02 00 20  	.word	0x20000268

00004ec4 <ARM_GPIO11_SetDirection>:
; ARM_GPIO11_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1542
; {
    4ec4: b580         	push	{r7, lr}
    4ec6: b082         	sub	sp, #0x8
    4ec8: af00         	add	r7, sp, #0x0
    4eca: 4603         	mov	r3, r0
    4ecc: 460a         	mov	r2, r1
    4ece: 71fb         	strb	r3, [r7, #0x7]
    4ed0: 4613         	mov	r3, r2
    4ed2: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1543
;     return GPIO_SetDirection (&GPIO11_RES, pin_no, dir);
    4ed4: 79ba         	ldrb	r2, [r7, #0x6]
    4ed6: 79fb         	ldrb	r3, [r7, #0x7]
    4ed8: 4619         	mov	r1, r3
    4eda: 4804         	ldr	r0, [pc, #0x10]         @ 0x4eec <ARM_GPIO11_SetDirection+0x28>
    4edc: f7fe fa3b    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x1b8a
    4ee0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1544
; }
    4ee2: 4618         	mov	r0, r3
    4ee4: 3708         	adds	r7, #0x8
    4ee6: 46bd         	mov	sp, r7
    4ee8: bd80         	pop	{r7, pc}
    4eea: bf00         	nop
    4eec: 68 02 00 20  	.word	0x20000268

00004ef0 <ARM_GPIO11_GetDirection>:
; ARM_GPIO11_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1547
; {
    4ef0: b580         	push	{r7, lr}
    4ef2: b082         	sub	sp, #0x8
    4ef4: af00         	add	r7, sp, #0x0
    4ef6: 4603         	mov	r3, r0
    4ef8: 6039         	str	r1, [r7]
    4efa: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1548
;     return GPIO_GetDirection (&GPIO11_RES, pin_no, dir);
    4efc: 79fb         	ldrb	r3, [r7, #0x7]
    4efe: 683a         	ldr	r2, [r7]
    4f00: 4619         	mov	r1, r3
    4f02: 4804         	ldr	r0, [pc, #0x10]         @ 0x4f14 <ARM_GPIO11_GetDirection+0x24>
    4f04: f7fe fa5d    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x1b46
    4f08: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1549
; }
    4f0a: 4618         	mov	r0, r3
    4f0c: 3708         	adds	r7, #0x8
    4f0e: 46bd         	mov	sp, r7
    4f10: bd80         	pop	{r7, pc}
    4f12: bf00         	nop
    4f14: 68 02 00 20  	.word	0x20000268

00004f18 <ARM_GPIO11_SetValue>:
; ARM_GPIO11_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1552
; {
    4f18: b580         	push	{r7, lr}
    4f1a: b082         	sub	sp, #0x8
    4f1c: af00         	add	r7, sp, #0x0
    4f1e: 4603         	mov	r3, r0
    4f20: 460a         	mov	r2, r1
    4f22: 71fb         	strb	r3, [r7, #0x7]
    4f24: 4613         	mov	r3, r2
    4f26: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1553
;     return GPIO_SetValue (&GPIO11_RES, pin_no, value);
    4f28: 79ba         	ldrb	r2, [r7, #0x6]
    4f2a: 79fb         	ldrb	r3, [r7, #0x7]
    4f2c: 4619         	mov	r1, r3
    4f2e: 4804         	ldr	r0, [pc, #0x10]         @ 0x4f40 <ARM_GPIO11_SetValue+0x28>
    4f30: f7fe fa7a    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x1b0c
    4f34: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1554
; }
    4f36: 4618         	mov	r0, r3
    4f38: 3708         	adds	r7, #0x8
    4f3a: 46bd         	mov	sp, r7
    4f3c: bd80         	pop	{r7, pc}
    4f3e: bf00         	nop
    4f40: 68 02 00 20  	.word	0x20000268

00004f44 <ARM_GPIO11_GetValue>:
; ARM_GPIO11_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1557
; {
    4f44: b580         	push	{r7, lr}
    4f46: b082         	sub	sp, #0x8
    4f48: af00         	add	r7, sp, #0x0
    4f4a: 4603         	mov	r3, r0
    4f4c: 6039         	str	r1, [r7]
    4f4e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1558
;     return GPIO_GetValue (&GPIO11_RES, pin_no, value);
    4f50: 79fb         	ldrb	r3, [r7, #0x7]
    4f52: 683a         	ldr	r2, [r7]
    4f54: 4619         	mov	r1, r3
    4f56: 4804         	ldr	r0, [pc, #0x10]         @ 0x4f68 <ARM_GPIO11_GetValue+0x24>
    4f58: f7fe faa8    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x1ab0
    4f5c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1559
; }
    4f5e: 4618         	mov	r0, r3
    4f60: 3708         	adds	r7, #0x8
    4f62: 46bd         	mov	sp, r7
    4f64: bd80         	pop	{r7, pc}
    4f66: bf00         	nop
    4f68: 68 02 00 20  	.word	0x20000268

00004f6c <ARM_GPIO11_Control>:
; ARM_GPIO11_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1562
; {
    4f6c: b580         	push	{r7, lr}
    4f6e: b082         	sub	sp, #0x8
    4f70: af00         	add	r7, sp, #0x0
    4f72: 4603         	mov	r3, r0
    4f74: 603a         	str	r2, [r7]
    4f76: 71fb         	strb	r3, [r7, #0x7]
    4f78: 460b         	mov	r3, r1
    4f7a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1563
;     return GPIO_Control (&GPIO11_RES, pin_no, control_code, arg);
    4f7c: 79ba         	ldrb	r2, [r7, #0x6]
    4f7e: 79f9         	ldrb	r1, [r7, #0x7]
    4f80: 683b         	ldr	r3, [r7]
    4f82: 4804         	ldr	r0, [pc, #0x10]         @ 0x4f94 <ARM_GPIO11_Control+0x28>
    4f84: f7fe fabf    	bl	0x3506 <GPIO_Control>   @ imm = #-0x1a82
    4f88: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1564
; }
    4f8a: 4618         	mov	r0, r3
    4f8c: 3708         	adds	r7, #0x8
    4f8e: 46bd         	mov	sp, r7
    4f90: bd80         	pop	{r7, pc}
    4f92: bf00         	nop
    4f94: 68 02 00 20  	.word	0x20000268

00004f98 <ARM_GPIO11_Uninitialize>:
; ARM_GPIO11_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1567
; {
    4f98: b580         	push	{r7, lr}
    4f9a: b082         	sub	sp, #0x8
    4f9c: af00         	add	r7, sp, #0x0
    4f9e: 4603         	mov	r3, r0
    4fa0: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1568
;     return GPIO_Uninitialize (&GPIO11_RES, pin_no);
    4fa2: 79fb         	ldrb	r3, [r7, #0x7]
    4fa4: 4619         	mov	r1, r3
    4fa6: 4804         	ldr	r0, [pc, #0x10]         @ 0x4fb8 <ARM_GPIO11_Uninitialize+0x20>
    4fa8: f7fe fc3a    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x178c
    4fac: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1569
; }
    4fae: 4618         	mov	r0, r3
    4fb0: 3708         	adds	r7, #0x8
    4fb2: 46bd         	mov	sp, r7
    4fb4: bd80         	pop	{r7, pc}
    4fb6: bf00         	nop
    4fb8: 68 02 00 20  	.word	0x20000268

00004fbc <GPIO12_IRQ0Handler>:
; GPIO12_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1604
; void GPIO12_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 0);    }
    4fbc: b580         	push	{r7, lr}
    4fbe: af00         	add	r7, sp, #0x0
    4fc0: 2100         	movs	r1, #0x0
    4fc2: 4802         	ldr	r0, [pc, #0x8]          @ 0x4fcc <GPIO12_IRQ0Handler+0x10>
    4fc4: f7fe fc53    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x175a
    4fc8: bf00         	nop
    4fca: bd80         	pop	{r7, pc}
    4fcc: a0 02 00 20  	.word	0x200002a0

00004fd0 <GPIO12_IRQ1Handler>:
; GPIO12_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1606
; void GPIO12_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 1);    }
    4fd0: b580         	push	{r7, lr}
    4fd2: af00         	add	r7, sp, #0x0
    4fd4: 2101         	movs	r1, #0x1
    4fd6: 4802         	ldr	r0, [pc, #0x8]          @ 0x4fe0 <GPIO12_IRQ1Handler+0x10>
    4fd8: f7fe fc49    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x176e
    4fdc: bf00         	nop
    4fde: bd80         	pop	{r7, pc}
    4fe0: a0 02 00 20  	.word	0x200002a0

00004fe4 <GPIO12_IRQ2Handler>:
; GPIO12_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1608
; void GPIO12_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 2);    }
    4fe4: b580         	push	{r7, lr}
    4fe6: af00         	add	r7, sp, #0x0
    4fe8: 2102         	movs	r1, #0x2
    4fea: 4802         	ldr	r0, [pc, #0x8]          @ 0x4ff4 <GPIO12_IRQ2Handler+0x10>
    4fec: f7fe fc3f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1782
    4ff0: bf00         	nop
    4ff2: bd80         	pop	{r7, pc}
    4ff4: a0 02 00 20  	.word	0x200002a0

00004ff8 <GPIO12_IRQ3Handler>:
; GPIO12_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1610
; void GPIO12_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 3);    }
    4ff8: b580         	push	{r7, lr}
    4ffa: af00         	add	r7, sp, #0x0
    4ffc: 2103         	movs	r1, #0x3
    4ffe: 4802         	ldr	r0, [pc, #0x8]          @ 0x5008 <GPIO12_IRQ3Handler+0x10>
    5000: f7fe fc35    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1796
    5004: bf00         	nop
    5006: bd80         	pop	{r7, pc}
    5008: a0 02 00 20  	.word	0x200002a0

0000500c <GPIO12_IRQ4Handler>:
; GPIO12_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1612
; void GPIO12_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 4);    }
    500c: b580         	push	{r7, lr}
    500e: af00         	add	r7, sp, #0x0
    5010: 2104         	movs	r1, #0x4
    5012: 4802         	ldr	r0, [pc, #0x8]          @ 0x501c <GPIO12_IRQ4Handler+0x10>
    5014: f7fe fc2b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x17aa
    5018: bf00         	nop
    501a: bd80         	pop	{r7, pc}
    501c: a0 02 00 20  	.word	0x200002a0

00005020 <GPIO12_IRQ5Handler>:
; GPIO12_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1614
; void GPIO12_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 5);    }
    5020: b580         	push	{r7, lr}
    5022: af00         	add	r7, sp, #0x0
    5024: 2105         	movs	r1, #0x5
    5026: 4802         	ldr	r0, [pc, #0x8]          @ 0x5030 <GPIO12_IRQ5Handler+0x10>
    5028: f7fe fc21    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x17be
    502c: bf00         	nop
    502e: bd80         	pop	{r7, pc}
    5030: a0 02 00 20  	.word	0x200002a0

00005034 <GPIO12_IRQ6Handler>:
; GPIO12_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1616
; void GPIO12_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 6);    }
    5034: b580         	push	{r7, lr}
    5036: af00         	add	r7, sp, #0x0
    5038: 2106         	movs	r1, #0x6
    503a: 4802         	ldr	r0, [pc, #0x8]          @ 0x5044 <GPIO12_IRQ6Handler+0x10>
    503c: f7fe fc17    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x17d2
    5040: bf00         	nop
    5042: bd80         	pop	{r7, pc}
    5044: a0 02 00 20  	.word	0x200002a0

00005048 <GPIO12_IRQ7Handler>:
; GPIO12_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1618
; void GPIO12_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO12_RES, 7);    }
    5048: b580         	push	{r7, lr}
    504a: af00         	add	r7, sp, #0x0
    504c: 2107         	movs	r1, #0x7
    504e: 4802         	ldr	r0, [pc, #0x8]          @ 0x5058 <GPIO12_IRQ7Handler+0x10>
    5050: f7fe fc0d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x17e6
    5054: bf00         	nop
    5056: bd80         	pop	{r7, pc}
    5058: a0 02 00 20  	.word	0x200002a0

0000505c <ARM_GPIO12_Initialize>:
; ARM_GPIO12_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1621
; {
    505c: b580         	push	{r7, lr}
    505e: b082         	sub	sp, #0x8
    5060: af00         	add	r7, sp, #0x0
    5062: 4603         	mov	r3, r0
    5064: 6039         	str	r1, [r7]
    5066: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1622
;     return GPIO_Initialize (&GPIO12_RES, cb_event, pin_no);
    5068: 79fb         	ldrb	r3, [r7, #0x7]
    506a: 461a         	mov	r2, r3
    506c: 6839         	ldr	r1, [r7]
    506e: 4804         	ldr	r0, [pc, #0x10]         @ 0x5080 <ARM_GPIO12_Initialize+0x24>
    5070: f7fe f910    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x1de0
    5074: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1623
; }
    5076: 4618         	mov	r0, r3
    5078: 3708         	adds	r7, #0x8
    507a: 46bd         	mov	sp, r7
    507c: bd80         	pop	{r7, pc}
    507e: bf00         	nop
    5080: a0 02 00 20  	.word	0x200002a0

00005084 <ARM_GPIO12_PowerControl>:
; ARM_GPIO12_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1626
; {
    5084: b580         	push	{r7, lr}
    5086: b082         	sub	sp, #0x8
    5088: af00         	add	r7, sp, #0x0
    508a: 4603         	mov	r3, r0
    508c: 460a         	mov	r2, r1
    508e: 71fb         	strb	r3, [r7, #0x7]
    5090: 4613         	mov	r3, r2
    5092: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1627
;     return GPIO_PowerControl (&GPIO12_RES, pin_no, state);
    5094: 79ba         	ldrb	r2, [r7, #0x6]
    5096: 79fb         	ldrb	r3, [r7, #0x7]
    5098: 4619         	mov	r1, r3
    509a: 4804         	ldr	r0, [pc, #0x10]         @ 0x50ac <ARM_GPIO12_PowerControl+0x28>
    509c: f7fe f91e    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x1dc4
    50a0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1628
; }
    50a2: 4618         	mov	r0, r3
    50a4: 3708         	adds	r7, #0x8
    50a6: 46bd         	mov	sp, r7
    50a8: bd80         	pop	{r7, pc}
    50aa: bf00         	nop
    50ac: a0 02 00 20  	.word	0x200002a0

000050b0 <ARM_GPIO12_SetDirection>:
; ARM_GPIO12_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1631
; {
    50b0: b580         	push	{r7, lr}
    50b2: b082         	sub	sp, #0x8
    50b4: af00         	add	r7, sp, #0x0
    50b6: 4603         	mov	r3, r0
    50b8: 460a         	mov	r2, r1
    50ba: 71fb         	strb	r3, [r7, #0x7]
    50bc: 4613         	mov	r3, r2
    50be: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1632
;     return GPIO_SetDirection (&GPIO12_RES, pin_no, dir);
    50c0: 79ba         	ldrb	r2, [r7, #0x6]
    50c2: 79fb         	ldrb	r3, [r7, #0x7]
    50c4: 4619         	mov	r1, r3
    50c6: 4804         	ldr	r0, [pc, #0x10]         @ 0x50d8 <ARM_GPIO12_SetDirection+0x28>
    50c8: f7fe f945    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x1d76
    50cc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1633
; }
    50ce: 4618         	mov	r0, r3
    50d0: 3708         	adds	r7, #0x8
    50d2: 46bd         	mov	sp, r7
    50d4: bd80         	pop	{r7, pc}
    50d6: bf00         	nop
    50d8: a0 02 00 20  	.word	0x200002a0

000050dc <ARM_GPIO12_GetDirection>:
; ARM_GPIO12_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1636
; {
    50dc: b580         	push	{r7, lr}
    50de: b082         	sub	sp, #0x8
    50e0: af00         	add	r7, sp, #0x0
    50e2: 4603         	mov	r3, r0
    50e4: 6039         	str	r1, [r7]
    50e6: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1637
;     return GPIO_GetDirection (&GPIO12_RES, pin_no, dir);
    50e8: 79fb         	ldrb	r3, [r7, #0x7]
    50ea: 683a         	ldr	r2, [r7]
    50ec: 4619         	mov	r1, r3
    50ee: 4804         	ldr	r0, [pc, #0x10]         @ 0x5100 <ARM_GPIO12_GetDirection+0x24>
    50f0: f7fe f967    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x1d32
    50f4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1638
; }
    50f6: 4618         	mov	r0, r3
    50f8: 3708         	adds	r7, #0x8
    50fa: 46bd         	mov	sp, r7
    50fc: bd80         	pop	{r7, pc}
    50fe: bf00         	nop
    5100: a0 02 00 20  	.word	0x200002a0

00005104 <ARM_GPIO12_SetValue>:
; ARM_GPIO12_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1641
; {
    5104: b580         	push	{r7, lr}
    5106: b082         	sub	sp, #0x8
    5108: af00         	add	r7, sp, #0x0
    510a: 4603         	mov	r3, r0
    510c: 460a         	mov	r2, r1
    510e: 71fb         	strb	r3, [r7, #0x7]
    5110: 4613         	mov	r3, r2
    5112: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1642
;     return GPIO_SetValue (&GPIO12_RES, pin_no, value);
    5114: 79ba         	ldrb	r2, [r7, #0x6]
    5116: 79fb         	ldrb	r3, [r7, #0x7]
    5118: 4619         	mov	r1, r3
    511a: 4804         	ldr	r0, [pc, #0x10]         @ 0x512c <ARM_GPIO12_SetValue+0x28>
    511c: f7fe f984    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x1cf8
    5120: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1643
; }
    5122: 4618         	mov	r0, r3
    5124: 3708         	adds	r7, #0x8
    5126: 46bd         	mov	sp, r7
    5128: bd80         	pop	{r7, pc}
    512a: bf00         	nop
    512c: a0 02 00 20  	.word	0x200002a0

00005130 <ARM_GPIO12_GetValue>:
; ARM_GPIO12_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1646
; {
    5130: b580         	push	{r7, lr}
    5132: b082         	sub	sp, #0x8
    5134: af00         	add	r7, sp, #0x0
    5136: 4603         	mov	r3, r0
    5138: 6039         	str	r1, [r7]
    513a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1647
;     return GPIO_GetValue (&GPIO12_RES, pin_no, value);
    513c: 79fb         	ldrb	r3, [r7, #0x7]
    513e: 683a         	ldr	r2, [r7]
    5140: 4619         	mov	r1, r3
    5142: 4804         	ldr	r0, [pc, #0x10]         @ 0x5154 <ARM_GPIO12_GetValue+0x24>
    5144: f7fe f9b2    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x1c9c
    5148: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1648
; }
    514a: 4618         	mov	r0, r3
    514c: 3708         	adds	r7, #0x8
    514e: 46bd         	mov	sp, r7
    5150: bd80         	pop	{r7, pc}
    5152: bf00         	nop
    5154: a0 02 00 20  	.word	0x200002a0

00005158 <ARM_GPIO12_Control>:
; ARM_GPIO12_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1651
; {
    5158: b580         	push	{r7, lr}
    515a: b082         	sub	sp, #0x8
    515c: af00         	add	r7, sp, #0x0
    515e: 4603         	mov	r3, r0
    5160: 603a         	str	r2, [r7]
    5162: 71fb         	strb	r3, [r7, #0x7]
    5164: 460b         	mov	r3, r1
    5166: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1652
;     return GPIO_Control (&GPIO12_RES, pin_no, control_code, arg);
    5168: 79ba         	ldrb	r2, [r7, #0x6]
    516a: 79f9         	ldrb	r1, [r7, #0x7]
    516c: 683b         	ldr	r3, [r7]
    516e: 4804         	ldr	r0, [pc, #0x10]         @ 0x5180 <ARM_GPIO12_Control+0x28>
    5170: f7fe f9c9    	bl	0x3506 <GPIO_Control>   @ imm = #-0x1c6e
    5174: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1653
; }
    5176: 4618         	mov	r0, r3
    5178: 3708         	adds	r7, #0x8
    517a: 46bd         	mov	sp, r7
    517c: bd80         	pop	{r7, pc}
    517e: bf00         	nop
    5180: a0 02 00 20  	.word	0x200002a0

00005184 <ARM_GPIO12_Uninitialize>:
; ARM_GPIO12_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1656
; {
    5184: b580         	push	{r7, lr}
    5186: b082         	sub	sp, #0x8
    5188: af00         	add	r7, sp, #0x0
    518a: 4603         	mov	r3, r0
    518c: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1657
;     return GPIO_Uninitialize (&GPIO12_RES, pin_no);
    518e: 79fb         	ldrb	r3, [r7, #0x7]
    5190: 4619         	mov	r1, r3
    5192: 4804         	ldr	r0, [pc, #0x10]         @ 0x51a4 <ARM_GPIO12_Uninitialize+0x20>
    5194: f7fe fb44    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x1978
    5198: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1658
; }
    519a: 4618         	mov	r0, r3
    519c: 3708         	adds	r7, #0x8
    519e: 46bd         	mov	sp, r7
    51a0: bd80         	pop	{r7, pc}
    51a2: bf00         	nop
    51a4: a0 02 00 20  	.word	0x200002a0

000051a8 <GPIO13_IRQ0Handler>:
; GPIO13_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1693
; void GPIO13_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 0);    }
    51a8: b580         	push	{r7, lr}
    51aa: af00         	add	r7, sp, #0x0
    51ac: 2100         	movs	r1, #0x0
    51ae: 4802         	ldr	r0, [pc, #0x8]          @ 0x51b8 <GPIO13_IRQ0Handler+0x10>
    51b0: f7fe fb5d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1946
    51b4: bf00         	nop
    51b6: bd80         	pop	{r7, pc}
    51b8: d8 02 00 20  	.word	0x200002d8

000051bc <GPIO13_IRQ1Handler>:
; GPIO13_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1695
; void GPIO13_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 1);    }
    51bc: b580         	push	{r7, lr}
    51be: af00         	add	r7, sp, #0x0
    51c0: 2101         	movs	r1, #0x1
    51c2: 4802         	ldr	r0, [pc, #0x8]          @ 0x51cc <GPIO13_IRQ1Handler+0x10>
    51c4: f7fe fb53    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x195a
    51c8: bf00         	nop
    51ca: bd80         	pop	{r7, pc}
    51cc: d8 02 00 20  	.word	0x200002d8

000051d0 <GPIO13_IRQ2Handler>:
; GPIO13_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1697
; void GPIO13_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 2);    }
    51d0: b580         	push	{r7, lr}
    51d2: af00         	add	r7, sp, #0x0
    51d4: 2102         	movs	r1, #0x2
    51d6: 4802         	ldr	r0, [pc, #0x8]          @ 0x51e0 <GPIO13_IRQ2Handler+0x10>
    51d8: f7fe fb49    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x196e
    51dc: bf00         	nop
    51de: bd80         	pop	{r7, pc}
    51e0: d8 02 00 20  	.word	0x200002d8

000051e4 <GPIO13_IRQ3Handler>:
; GPIO13_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1699
; void GPIO13_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 3);    }
    51e4: b580         	push	{r7, lr}
    51e6: af00         	add	r7, sp, #0x0
    51e8: 2103         	movs	r1, #0x3
    51ea: 4802         	ldr	r0, [pc, #0x8]          @ 0x51f4 <GPIO13_IRQ3Handler+0x10>
    51ec: f7fe fb3f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1982
    51f0: bf00         	nop
    51f2: bd80         	pop	{r7, pc}
    51f4: d8 02 00 20  	.word	0x200002d8

000051f8 <GPIO13_IRQ4Handler>:
; GPIO13_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1701
; void GPIO13_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 4);    }
    51f8: b580         	push	{r7, lr}
    51fa: af00         	add	r7, sp, #0x0
    51fc: 2104         	movs	r1, #0x4
    51fe: 4802         	ldr	r0, [pc, #0x8]          @ 0x5208 <GPIO13_IRQ4Handler+0x10>
    5200: f7fe fb35    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1996
    5204: bf00         	nop
    5206: bd80         	pop	{r7, pc}
    5208: d8 02 00 20  	.word	0x200002d8

0000520c <GPIO13_IRQ5Handler>:
; GPIO13_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1703
; void GPIO13_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 5);    }
    520c: b580         	push	{r7, lr}
    520e: af00         	add	r7, sp, #0x0
    5210: 2105         	movs	r1, #0x5
    5212: 4802         	ldr	r0, [pc, #0x8]          @ 0x521c <GPIO13_IRQ5Handler+0x10>
    5214: f7fe fb2b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x19aa
    5218: bf00         	nop
    521a: bd80         	pop	{r7, pc}
    521c: d8 02 00 20  	.word	0x200002d8

00005220 <GPIO13_IRQ6Handler>:
; GPIO13_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1705
; void GPIO13_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 6);    }
    5220: b580         	push	{r7, lr}
    5222: af00         	add	r7, sp, #0x0
    5224: 2106         	movs	r1, #0x6
    5226: 4802         	ldr	r0, [pc, #0x8]          @ 0x5230 <GPIO13_IRQ6Handler+0x10>
    5228: f7fe fb21    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x19be
    522c: bf00         	nop
    522e: bd80         	pop	{r7, pc}
    5230: d8 02 00 20  	.word	0x200002d8

00005234 <GPIO13_IRQ7Handler>:
; GPIO13_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1707
; void GPIO13_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO13_RES, 7);    }
    5234: b580         	push	{r7, lr}
    5236: af00         	add	r7, sp, #0x0
    5238: 2107         	movs	r1, #0x7
    523a: 4802         	ldr	r0, [pc, #0x8]          @ 0x5244 <GPIO13_IRQ7Handler+0x10>
    523c: f7fe fb17    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x19d2
    5240: bf00         	nop
    5242: bd80         	pop	{r7, pc}
    5244: d8 02 00 20  	.word	0x200002d8

00005248 <ARM_GPIO13_Initialize>:
; ARM_GPIO13_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1710
; {
    5248: b580         	push	{r7, lr}
    524a: b082         	sub	sp, #0x8
    524c: af00         	add	r7, sp, #0x0
    524e: 4603         	mov	r3, r0
    5250: 6039         	str	r1, [r7]
    5252: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1711
;     return GPIO_Initialize (&GPIO13_RES, cb_event, pin_no);
    5254: 79fb         	ldrb	r3, [r7, #0x7]
    5256: 461a         	mov	r2, r3
    5258: 6839         	ldr	r1, [r7]
    525a: 4804         	ldr	r0, [pc, #0x10]         @ 0x526c <ARM_GPIO13_Initialize+0x24>
    525c: f7fe f81a    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x1fcc
    5260: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1712
; }
    5262: 4618         	mov	r0, r3
    5264: 3708         	adds	r7, #0x8
    5266: 46bd         	mov	sp, r7
    5268: bd80         	pop	{r7, pc}
    526a: bf00         	nop
    526c: d8 02 00 20  	.word	0x200002d8

00005270 <ARM_GPIO13_PowerControl>:
; ARM_GPIO13_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1715
; {
    5270: b580         	push	{r7, lr}
    5272: b082         	sub	sp, #0x8
    5274: af00         	add	r7, sp, #0x0
    5276: 4603         	mov	r3, r0
    5278: 460a         	mov	r2, r1
    527a: 71fb         	strb	r3, [r7, #0x7]
    527c: 4613         	mov	r3, r2
    527e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1716
;     return GPIO_PowerControl (&GPIO13_RES, pin_no, state);
    5280: 79ba         	ldrb	r2, [r7, #0x6]
    5282: 79fb         	ldrb	r3, [r7, #0x7]
    5284: 4619         	mov	r1, r3
    5286: 4804         	ldr	r0, [pc, #0x10]         @ 0x5298 <ARM_GPIO13_PowerControl+0x28>
    5288: f7fe f828    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x1fb0
    528c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1717
; }
    528e: 4618         	mov	r0, r3
    5290: 3708         	adds	r7, #0x8
    5292: 46bd         	mov	sp, r7
    5294: bd80         	pop	{r7, pc}
    5296: bf00         	nop
    5298: d8 02 00 20  	.word	0x200002d8

0000529c <ARM_GPIO13_SetDirection>:
; ARM_GPIO13_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1720
; {
    529c: b580         	push	{r7, lr}
    529e: b082         	sub	sp, #0x8
    52a0: af00         	add	r7, sp, #0x0
    52a2: 4603         	mov	r3, r0
    52a4: 460a         	mov	r2, r1
    52a6: 71fb         	strb	r3, [r7, #0x7]
    52a8: 4613         	mov	r3, r2
    52aa: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1721
;     return GPIO_SetDirection (&GPIO13_RES, pin_no, dir);
    52ac: 79ba         	ldrb	r2, [r7, #0x6]
    52ae: 79fb         	ldrb	r3, [r7, #0x7]
    52b0: 4619         	mov	r1, r3
    52b2: 4804         	ldr	r0, [pc, #0x10]         @ 0x52c4 <ARM_GPIO13_SetDirection+0x28>
    52b4: f7fe f84f    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x1f62
    52b8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1722
; }
    52ba: 4618         	mov	r0, r3
    52bc: 3708         	adds	r7, #0x8
    52be: 46bd         	mov	sp, r7
    52c0: bd80         	pop	{r7, pc}
    52c2: bf00         	nop
    52c4: d8 02 00 20  	.word	0x200002d8

000052c8 <ARM_GPIO13_GetDirection>:
; ARM_GPIO13_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1725
; {
    52c8: b580         	push	{r7, lr}
    52ca: b082         	sub	sp, #0x8
    52cc: af00         	add	r7, sp, #0x0
    52ce: 4603         	mov	r3, r0
    52d0: 6039         	str	r1, [r7]
    52d2: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1726
;     return GPIO_GetDirection (&GPIO13_RES, pin_no, dir);
    52d4: 79fb         	ldrb	r3, [r7, #0x7]
    52d6: 683a         	ldr	r2, [r7]
    52d8: 4619         	mov	r1, r3
    52da: 4804         	ldr	r0, [pc, #0x10]         @ 0x52ec <ARM_GPIO13_GetDirection+0x24>
    52dc: f7fe f871    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x1f1e
    52e0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1727
; }
    52e2: 4618         	mov	r0, r3
    52e4: 3708         	adds	r7, #0x8
    52e6: 46bd         	mov	sp, r7
    52e8: bd80         	pop	{r7, pc}
    52ea: bf00         	nop
    52ec: d8 02 00 20  	.word	0x200002d8

000052f0 <ARM_GPIO13_SetValue>:
; ARM_GPIO13_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1730
; {
    52f0: b580         	push	{r7, lr}
    52f2: b082         	sub	sp, #0x8
    52f4: af00         	add	r7, sp, #0x0
    52f6: 4603         	mov	r3, r0
    52f8: 460a         	mov	r2, r1
    52fa: 71fb         	strb	r3, [r7, #0x7]
    52fc: 4613         	mov	r3, r2
    52fe: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1731
;     return GPIO_SetValue (&GPIO13_RES, pin_no, value);
    5300: 79ba         	ldrb	r2, [r7, #0x6]
    5302: 79fb         	ldrb	r3, [r7, #0x7]
    5304: 4619         	mov	r1, r3
    5306: 4804         	ldr	r0, [pc, #0x10]         @ 0x5318 <ARM_GPIO13_SetValue+0x28>
    5308: f7fe f88e    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x1ee4
    530c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1732
; }
    530e: 4618         	mov	r0, r3
    5310: 3708         	adds	r7, #0x8
    5312: 46bd         	mov	sp, r7
    5314: bd80         	pop	{r7, pc}
    5316: bf00         	nop
    5318: d8 02 00 20  	.word	0x200002d8

0000531c <ARM_GPIO13_GetValue>:
; ARM_GPIO13_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1735
; {
    531c: b580         	push	{r7, lr}
    531e: b082         	sub	sp, #0x8
    5320: af00         	add	r7, sp, #0x0
    5322: 4603         	mov	r3, r0
    5324: 6039         	str	r1, [r7]
    5326: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1736
;     return GPIO_GetValue (&GPIO13_RES, pin_no, value);
    5328: 79fb         	ldrb	r3, [r7, #0x7]
    532a: 683a         	ldr	r2, [r7]
    532c: 4619         	mov	r1, r3
    532e: 4804         	ldr	r0, [pc, #0x10]         @ 0x5340 <ARM_GPIO13_GetValue+0x24>
    5330: f7fe f8bc    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x1e88
    5334: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1737
; }
    5336: 4618         	mov	r0, r3
    5338: 3708         	adds	r7, #0x8
    533a: 46bd         	mov	sp, r7
    533c: bd80         	pop	{r7, pc}
    533e: bf00         	nop
    5340: d8 02 00 20  	.word	0x200002d8

00005344 <ARM_GPIO13_Control>:
; ARM_GPIO13_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1740
; {
    5344: b580         	push	{r7, lr}
    5346: b082         	sub	sp, #0x8
    5348: af00         	add	r7, sp, #0x0
    534a: 4603         	mov	r3, r0
    534c: 603a         	str	r2, [r7]
    534e: 71fb         	strb	r3, [r7, #0x7]
    5350: 460b         	mov	r3, r1
    5352: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1741
;     return GPIO_Control (&GPIO13_RES, pin_no, control_code, arg);
    5354: 79ba         	ldrb	r2, [r7, #0x6]
    5356: 79f9         	ldrb	r1, [r7, #0x7]
    5358: 683b         	ldr	r3, [r7]
    535a: 4804         	ldr	r0, [pc, #0x10]         @ 0x536c <ARM_GPIO13_Control+0x28>
    535c: f7fe f8d3    	bl	0x3506 <GPIO_Control>   @ imm = #-0x1e5a
    5360: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1742
; }
    5362: 4618         	mov	r0, r3
    5364: 3708         	adds	r7, #0x8
    5366: 46bd         	mov	sp, r7
    5368: bd80         	pop	{r7, pc}
    536a: bf00         	nop
    536c: d8 02 00 20  	.word	0x200002d8

00005370 <ARM_GPIO13_Uninitialize>:
; ARM_GPIO13_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1745
; {
    5370: b580         	push	{r7, lr}
    5372: b082         	sub	sp, #0x8
    5374: af00         	add	r7, sp, #0x0
    5376: 4603         	mov	r3, r0
    5378: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1746
;     return GPIO_Uninitialize (&GPIO13_RES, pin_no);
    537a: 79fb         	ldrb	r3, [r7, #0x7]
    537c: 4619         	mov	r1, r3
    537e: 4804         	ldr	r0, [pc, #0x10]         @ 0x5390 <ARM_GPIO13_Uninitialize+0x20>
    5380: f7fe fa4e    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x1b64
    5384: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1747
; }
    5386: 4618         	mov	r0, r3
    5388: 3708         	adds	r7, #0x8
    538a: 46bd         	mov	sp, r7
    538c: bd80         	pop	{r7, pc}
    538e: bf00         	nop
    5390: d8 02 00 20  	.word	0x200002d8

00005394 <GPIO14_IRQ0Handler>:
; GPIO14_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1782
; void GPIO14_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 0);    }
    5394: b580         	push	{r7, lr}
    5396: af00         	add	r7, sp, #0x0
    5398: 2100         	movs	r1, #0x0
    539a: 4802         	ldr	r0, [pc, #0x8]          @ 0x53a4 <GPIO14_IRQ0Handler+0x10>
    539c: f7fe fa67    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1b32
    53a0: bf00         	nop
    53a2: bd80         	pop	{r7, pc}
    53a4: 10 03 00 20  	.word	0x20000310

000053a8 <GPIO14_IRQ1Handler>:
; GPIO14_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1784
; void GPIO14_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 1);    }
    53a8: b580         	push	{r7, lr}
    53aa: af00         	add	r7, sp, #0x0
    53ac: 2101         	movs	r1, #0x1
    53ae: 4802         	ldr	r0, [pc, #0x8]          @ 0x53b8 <GPIO14_IRQ1Handler+0x10>
    53b0: f7fe fa5d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1b46
    53b4: bf00         	nop
    53b6: bd80         	pop	{r7, pc}
    53b8: 10 03 00 20  	.word	0x20000310

000053bc <GPIO14_IRQ2Handler>:
; GPIO14_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1786
; void GPIO14_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 2);    }
    53bc: b580         	push	{r7, lr}
    53be: af00         	add	r7, sp, #0x0
    53c0: 2102         	movs	r1, #0x2
    53c2: 4802         	ldr	r0, [pc, #0x8]          @ 0x53cc <GPIO14_IRQ2Handler+0x10>
    53c4: f7fe fa53    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1b5a
    53c8: bf00         	nop
    53ca: bd80         	pop	{r7, pc}
    53cc: 10 03 00 20  	.word	0x20000310

000053d0 <GPIO14_IRQ3Handler>:
; GPIO14_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1788
; void GPIO14_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 3);    }
    53d0: b580         	push	{r7, lr}
    53d2: af00         	add	r7, sp, #0x0
    53d4: 2103         	movs	r1, #0x3
    53d6: 4802         	ldr	r0, [pc, #0x8]          @ 0x53e0 <GPIO14_IRQ3Handler+0x10>
    53d8: f7fe fa49    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1b6e
    53dc: bf00         	nop
    53de: bd80         	pop	{r7, pc}
    53e0: 10 03 00 20  	.word	0x20000310

000053e4 <GPIO14_IRQ4Handler>:
; GPIO14_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1790
; void GPIO14_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 4);    }
    53e4: b580         	push	{r7, lr}
    53e6: af00         	add	r7, sp, #0x0
    53e8: 2104         	movs	r1, #0x4
    53ea: 4802         	ldr	r0, [pc, #0x8]          @ 0x53f4 <GPIO14_IRQ4Handler+0x10>
    53ec: f7fe fa3f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1b82
    53f0: bf00         	nop
    53f2: bd80         	pop	{r7, pc}
    53f4: 10 03 00 20  	.word	0x20000310

000053f8 <GPIO14_IRQ5Handler>:
; GPIO14_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1792
; void GPIO14_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 5);    }
    53f8: b580         	push	{r7, lr}
    53fa: af00         	add	r7, sp, #0x0
    53fc: 2105         	movs	r1, #0x5
    53fe: 4802         	ldr	r0, [pc, #0x8]          @ 0x5408 <GPIO14_IRQ5Handler+0x10>
    5400: f7fe fa35    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1b96
    5404: bf00         	nop
    5406: bd80         	pop	{r7, pc}
    5408: 10 03 00 20  	.word	0x20000310

0000540c <GPIO14_IRQ6Handler>:
; GPIO14_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1794
; void GPIO14_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 6);    }
    540c: b580         	push	{r7, lr}
    540e: af00         	add	r7, sp, #0x0
    5410: 2106         	movs	r1, #0x6
    5412: 4802         	ldr	r0, [pc, #0x8]          @ 0x541c <GPIO14_IRQ6Handler+0x10>
    5414: f7fe fa2b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1baa
    5418: bf00         	nop
    541a: bd80         	pop	{r7, pc}
    541c: 10 03 00 20  	.word	0x20000310

00005420 <GPIO14_IRQ7Handler>:
; GPIO14_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1796
; void GPIO14_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&GPIO14_RES, 7);    }
    5420: b580         	push	{r7, lr}
    5422: af00         	add	r7, sp, #0x0
    5424: 2107         	movs	r1, #0x7
    5426: 4802         	ldr	r0, [pc, #0x8]          @ 0x5430 <GPIO14_IRQ7Handler+0x10>
    5428: f7fe fa21    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1bbe
    542c: bf00         	nop
    542e: bd80         	pop	{r7, pc}
    5430: 10 03 00 20  	.word	0x20000310

00005434 <ARM_GPIO14_Initialize>:
; ARM_GPIO14_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1799
; {
    5434: b580         	push	{r7, lr}
    5436: b082         	sub	sp, #0x8
    5438: af00         	add	r7, sp, #0x0
    543a: 4603         	mov	r3, r0
    543c: 6039         	str	r1, [r7]
    543e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1800
;     return GPIO_Initialize (&GPIO14_RES, cb_event, pin_no);
    5440: 79fb         	ldrb	r3, [r7, #0x7]
    5442: 461a         	mov	r2, r3
    5444: 6839         	ldr	r1, [r7]
    5446: 4804         	ldr	r0, [pc, #0x10]         @ 0x5458 <ARM_GPIO14_Initialize+0x24>
    5448: f7fd ff24    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x21b8
    544c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1801
; }
    544e: 4618         	mov	r0, r3
    5450: 3708         	adds	r7, #0x8
    5452: 46bd         	mov	sp, r7
    5454: bd80         	pop	{r7, pc}
    5456: bf00         	nop
    5458: 10 03 00 20  	.word	0x20000310

0000545c <ARM_GPIO14_PowerControl>:
; ARM_GPIO14_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1804
; {
    545c: b580         	push	{r7, lr}
    545e: b082         	sub	sp, #0x8
    5460: af00         	add	r7, sp, #0x0
    5462: 4603         	mov	r3, r0
    5464: 460a         	mov	r2, r1
    5466: 71fb         	strb	r3, [r7, #0x7]
    5468: 4613         	mov	r3, r2
    546a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1805
;     return GPIO_PowerControl (&GPIO14_RES, pin_no, state);
    546c: 79ba         	ldrb	r2, [r7, #0x6]
    546e: 79fb         	ldrb	r3, [r7, #0x7]
    5470: 4619         	mov	r1, r3
    5472: 4804         	ldr	r0, [pc, #0x10]         @ 0x5484 <ARM_GPIO14_PowerControl+0x28>
    5474: f7fd ff32    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x219c
    5478: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1806
; }
    547a: 4618         	mov	r0, r3
    547c: 3708         	adds	r7, #0x8
    547e: 46bd         	mov	sp, r7
    5480: bd80         	pop	{r7, pc}
    5482: bf00         	nop
    5484: 10 03 00 20  	.word	0x20000310

00005488 <ARM_GPIO14_SetDirection>:
; ARM_GPIO14_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1809
; {
    5488: b580         	push	{r7, lr}
    548a: b082         	sub	sp, #0x8
    548c: af00         	add	r7, sp, #0x0
    548e: 4603         	mov	r3, r0
    5490: 460a         	mov	r2, r1
    5492: 71fb         	strb	r3, [r7, #0x7]
    5494: 4613         	mov	r3, r2
    5496: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1810
;     return GPIO_SetDirection (&GPIO14_RES, pin_no, dir);
    5498: 79ba         	ldrb	r2, [r7, #0x6]
    549a: 79fb         	ldrb	r3, [r7, #0x7]
    549c: 4619         	mov	r1, r3
    549e: 4804         	ldr	r0, [pc, #0x10]         @ 0x54b0 <ARM_GPIO14_SetDirection+0x28>
    54a0: f7fd ff59    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x214e
    54a4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1811
; }
    54a6: 4618         	mov	r0, r3
    54a8: 3708         	adds	r7, #0x8
    54aa: 46bd         	mov	sp, r7
    54ac: bd80         	pop	{r7, pc}
    54ae: bf00         	nop
    54b0: 10 03 00 20  	.word	0x20000310

000054b4 <ARM_GPIO14_GetDirection>:
; ARM_GPIO14_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1814
; {
    54b4: b580         	push	{r7, lr}
    54b6: b082         	sub	sp, #0x8
    54b8: af00         	add	r7, sp, #0x0
    54ba: 4603         	mov	r3, r0
    54bc: 6039         	str	r1, [r7]
    54be: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1815
;     return GPIO_GetDirection (&GPIO14_RES, pin_no, dir);
    54c0: 79fb         	ldrb	r3, [r7, #0x7]
    54c2: 683a         	ldr	r2, [r7]
    54c4: 4619         	mov	r1, r3
    54c6: 4804         	ldr	r0, [pc, #0x10]         @ 0x54d8 <ARM_GPIO14_GetDirection+0x24>
    54c8: f7fd ff7b    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x210a
    54cc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1816
; }
    54ce: 4618         	mov	r0, r3
    54d0: 3708         	adds	r7, #0x8
    54d2: 46bd         	mov	sp, r7
    54d4: bd80         	pop	{r7, pc}
    54d6: bf00         	nop
    54d8: 10 03 00 20  	.word	0x20000310

000054dc <ARM_GPIO14_SetValue>:
; ARM_GPIO14_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1819
; {
    54dc: b580         	push	{r7, lr}
    54de: b082         	sub	sp, #0x8
    54e0: af00         	add	r7, sp, #0x0
    54e2: 4603         	mov	r3, r0
    54e4: 460a         	mov	r2, r1
    54e6: 71fb         	strb	r3, [r7, #0x7]
    54e8: 4613         	mov	r3, r2
    54ea: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1820
;     return GPIO_SetValue (&GPIO14_RES, pin_no, value);
    54ec: 79ba         	ldrb	r2, [r7, #0x6]
    54ee: 79fb         	ldrb	r3, [r7, #0x7]
    54f0: 4619         	mov	r1, r3
    54f2: 4804         	ldr	r0, [pc, #0x10]         @ 0x5504 <ARM_GPIO14_SetValue+0x28>
    54f4: f7fd ff98    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x20d0
    54f8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1821
; }
    54fa: 4618         	mov	r0, r3
    54fc: 3708         	adds	r7, #0x8
    54fe: 46bd         	mov	sp, r7
    5500: bd80         	pop	{r7, pc}
    5502: bf00         	nop
    5504: 10 03 00 20  	.word	0x20000310

00005508 <ARM_GPIO14_GetValue>:
; ARM_GPIO14_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1824
; {
    5508: b580         	push	{r7, lr}
    550a: b082         	sub	sp, #0x8
    550c: af00         	add	r7, sp, #0x0
    550e: 4603         	mov	r3, r0
    5510: 6039         	str	r1, [r7]
    5512: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1825
;     return GPIO_GetValue (&GPIO14_RES, pin_no, value);
    5514: 79fb         	ldrb	r3, [r7, #0x7]
    5516: 683a         	ldr	r2, [r7]
    5518: 4619         	mov	r1, r3
    551a: 4804         	ldr	r0, [pc, #0x10]         @ 0x552c <ARM_GPIO14_GetValue+0x24>
    551c: f7fd ffc6    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x2074
    5520: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1826
; }
    5522: 4618         	mov	r0, r3
    5524: 3708         	adds	r7, #0x8
    5526: 46bd         	mov	sp, r7
    5528: bd80         	pop	{r7, pc}
    552a: bf00         	nop
    552c: 10 03 00 20  	.word	0x20000310

00005530 <ARM_GPIO14_Control>:
; ARM_GPIO14_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1829
; {
    5530: b580         	push	{r7, lr}
    5532: b082         	sub	sp, #0x8
    5534: af00         	add	r7, sp, #0x0
    5536: 4603         	mov	r3, r0
    5538: 603a         	str	r2, [r7]
    553a: 71fb         	strb	r3, [r7, #0x7]
    553c: 460b         	mov	r3, r1
    553e: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1830
;     return GPIO_Control (&GPIO14_RES, pin_no, control_code, arg);
    5540: 79ba         	ldrb	r2, [r7, #0x6]
    5542: 79f9         	ldrb	r1, [r7, #0x7]
    5544: 683b         	ldr	r3, [r7]
    5546: 4804         	ldr	r0, [pc, #0x10]         @ 0x5558 <ARM_GPIO14_Control+0x28>
    5548: f7fd ffdd    	bl	0x3506 <GPIO_Control>   @ imm = #-0x2046
    554c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1831
; }
    554e: 4618         	mov	r0, r3
    5550: 3708         	adds	r7, #0x8
    5552: 46bd         	mov	sp, r7
    5554: bd80         	pop	{r7, pc}
    5556: bf00         	nop
    5558: 10 03 00 20  	.word	0x20000310

0000555c <ARM_GPIO14_Uninitialize>:
; ARM_GPIO14_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1834
; {
    555c: b580         	push	{r7, lr}
    555e: b082         	sub	sp, #0x8
    5560: af00         	add	r7, sp, #0x0
    5562: 4603         	mov	r3, r0
    5564: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1835
;     return GPIO_Uninitialize (&GPIO14_RES, pin_no);
    5566: 79fb         	ldrb	r3, [r7, #0x7]
    5568: 4619         	mov	r1, r3
    556a: 4804         	ldr	r0, [pc, #0x10]         @ 0x557c <ARM_GPIO14_Uninitialize+0x20>
    556c: f7fe f958    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x1d50
    5570: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1836
; }
    5572: 4618         	mov	r0, r3
    5574: 3708         	adds	r7, #0x8
    5576: 46bd         	mov	sp, r7
    5578: bd80         	pop	{r7, pc}
    557a: bf00         	nop
    557c: 10 03 00 20  	.word	0x20000310

00005580 <LPGPIO_IRQ0Handler>:
; LPGPIO_IRQ0Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1869
; void LPGPIO_IRQ0Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 0);    }
    5580: b580         	push	{r7, lr}
    5582: af00         	add	r7, sp, #0x0
    5584: 2100         	movs	r1, #0x0
    5586: 4802         	ldr	r0, [pc, #0x8]          @ 0x5590 <LPGPIO_IRQ0Handler+0x10>
    5588: f7fe f971    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1d1e
    558c: bf00         	nop
    558e: bd80         	pop	{r7, pc}
    5590: 48 03 00 20  	.word	0x20000348

00005594 <LPGPIO_IRQ1Handler>:
; LPGPIO_IRQ1Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1871
; void LPGPIO_IRQ1Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 1);    }
    5594: b580         	push	{r7, lr}
    5596: af00         	add	r7, sp, #0x0
    5598: 2101         	movs	r1, #0x1
    559a: 4802         	ldr	r0, [pc, #0x8]          @ 0x55a4 <LPGPIO_IRQ1Handler+0x10>
    559c: f7fe f967    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1d32
    55a0: bf00         	nop
    55a2: bd80         	pop	{r7, pc}
    55a4: 48 03 00 20  	.word	0x20000348

000055a8 <LPGPIO_IRQ2Handler>:
; LPGPIO_IRQ2Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1873
; void LPGPIO_IRQ2Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 2);    }
    55a8: b580         	push	{r7, lr}
    55aa: af00         	add	r7, sp, #0x0
    55ac: 2102         	movs	r1, #0x2
    55ae: 4802         	ldr	r0, [pc, #0x8]          @ 0x55b8 <LPGPIO_IRQ2Handler+0x10>
    55b0: f7fe f95d    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1d46
    55b4: bf00         	nop
    55b6: bd80         	pop	{r7, pc}
    55b8: 48 03 00 20  	.word	0x20000348

000055bc <LPGPIO_IRQ3Handler>:
; LPGPIO_IRQ3Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1875
; void LPGPIO_IRQ3Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 3);    }
    55bc: b580         	push	{r7, lr}
    55be: af00         	add	r7, sp, #0x0
    55c0: 2103         	movs	r1, #0x3
    55c2: 4802         	ldr	r0, [pc, #0x8]          @ 0x55cc <LPGPIO_IRQ3Handler+0x10>
    55c4: f7fe f953    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1d5a
    55c8: bf00         	nop
    55ca: bd80         	pop	{r7, pc}
    55cc: 48 03 00 20  	.word	0x20000348

000055d0 <LPGPIO_IRQ4Handler>:
; LPGPIO_IRQ4Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1877
; void LPGPIO_IRQ4Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 4);    }
    55d0: b580         	push	{r7, lr}
    55d2: af00         	add	r7, sp, #0x0
    55d4: 2104         	movs	r1, #0x4
    55d6: 4802         	ldr	r0, [pc, #0x8]          @ 0x55e0 <LPGPIO_IRQ4Handler+0x10>
    55d8: f7fe f949    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1d6e
    55dc: bf00         	nop
    55de: bd80         	pop	{r7, pc}
    55e0: 48 03 00 20  	.word	0x20000348

000055e4 <LPGPIO_IRQ5Handler>:
; LPGPIO_IRQ5Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1879
; void LPGPIO_IRQ5Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 5);    }
    55e4: b580         	push	{r7, lr}
    55e6: af00         	add	r7, sp, #0x0
    55e8: 2105         	movs	r1, #0x5
    55ea: 4802         	ldr	r0, [pc, #0x8]          @ 0x55f4 <LPGPIO_IRQ5Handler+0x10>
    55ec: f7fe f93f    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1d82
    55f0: bf00         	nop
    55f2: bd80         	pop	{r7, pc}
    55f4: 48 03 00 20  	.word	0x20000348

000055f8 <LPGPIO_IRQ6Handler>:
; LPGPIO_IRQ6Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1881
; void LPGPIO_IRQ6Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 6);    }
    55f8: b580         	push	{r7, lr}
    55fa: af00         	add	r7, sp, #0x0
    55fc: 2106         	movs	r1, #0x6
    55fe: 4802         	ldr	r0, [pc, #0x8]          @ 0x5608 <LPGPIO_IRQ6Handler+0x10>
    5600: f7fe f935    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1d96
    5604: bf00         	nop
    5606: bd80         	pop	{r7, pc}
    5608: 48 03 00 20  	.word	0x20000348

0000560c <LPGPIO_IRQ7Handler>:
; LPGPIO_IRQ7Handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1883
; void LPGPIO_IRQ7Handler  (void) {   GPIO_IRQ_Handler (&LPGPIO_RES, 7);    }
    560c: b580         	push	{r7, lr}
    560e: af00         	add	r7, sp, #0x0
    5610: 2107         	movs	r1, #0x7
    5612: 4802         	ldr	r0, [pc, #0x8]          @ 0x561c <LPGPIO_IRQ7Handler+0x10>
    5614: f7fe f92b    	bl	0x386e <GPIO_IRQ_Handler> @ imm = #-0x1daa
    5618: bf00         	nop
    561a: bd80         	pop	{r7, pc}
    561c: 48 03 00 20  	.word	0x20000348

00005620 <ARM_LPGPIO_Initialize>:
; ARM_LPGPIO_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1886
; {
    5620: b580         	push	{r7, lr}
    5622: b082         	sub	sp, #0x8
    5624: af00         	add	r7, sp, #0x0
    5626: 4603         	mov	r3, r0
    5628: 6039         	str	r1, [r7]
    562a: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1887
;     return GPIO_Initialize (&LPGPIO_RES, cb_event, pin_no);
    562c: 79fb         	ldrb	r3, [r7, #0x7]
    562e: 461a         	mov	r2, r3
    5630: 6839         	ldr	r1, [r7]
    5632: 4804         	ldr	r0, [pc, #0x10]         @ 0x5644 <ARM_LPGPIO_Initialize+0x24>
    5634: f7fd fe2e    	bl	0x3294 <GPIO_Initialize> @ imm = #-0x23a4
    5638: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1888
; }
    563a: 4618         	mov	r0, r3
    563c: 3708         	adds	r7, #0x8
    563e: 46bd         	mov	sp, r7
    5640: bd80         	pop	{r7, pc}
    5642: bf00         	nop
    5644: 48 03 00 20  	.word	0x20000348

00005648 <ARM_LPGPIO_PowerControl>:
; ARM_LPGPIO_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1891
; {
    5648: b580         	push	{r7, lr}
    564a: b082         	sub	sp, #0x8
    564c: af00         	add	r7, sp, #0x0
    564e: 4603         	mov	r3, r0
    5650: 460a         	mov	r2, r1
    5652: 71fb         	strb	r3, [r7, #0x7]
    5654: 4613         	mov	r3, r2
    5656: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1892
;     return GPIO_PowerControl (&LPGPIO_RES, pin_no, state);
    5658: 79ba         	ldrb	r2, [r7, #0x6]
    565a: 79fb         	ldrb	r3, [r7, #0x7]
    565c: 4619         	mov	r1, r3
    565e: 4804         	ldr	r0, [pc, #0x10]         @ 0x5670 <ARM_LPGPIO_PowerControl+0x28>
    5660: f7fd fe3c    	bl	0x32dc <GPIO_PowerControl> @ imm = #-0x2388
    5664: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1893
; }
    5666: 4618         	mov	r0, r3
    5668: 3708         	adds	r7, #0x8
    566a: 46bd         	mov	sp, r7
    566c: bd80         	pop	{r7, pc}
    566e: bf00         	nop
    5670: 48 03 00 20  	.word	0x20000348

00005674 <ARM_LPGPIO_SetDirection>:
; ARM_LPGPIO_SetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1896
; {
    5674: b580         	push	{r7, lr}
    5676: b082         	sub	sp, #0x8
    5678: af00         	add	r7, sp, #0x0
    567a: 4603         	mov	r3, r0
    567c: 460a         	mov	r2, r1
    567e: 71fb         	strb	r3, [r7, #0x7]
    5680: 4613         	mov	r3, r2
    5682: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1897
;     return GPIO_SetDirection (&LPGPIO_RES, pin_no, dir);
    5684: 79ba         	ldrb	r2, [r7, #0x6]
    5686: 79fb         	ldrb	r3, [r7, #0x7]
    5688: 4619         	mov	r1, r3
    568a: 4804         	ldr	r0, [pc, #0x10]         @ 0x569c <ARM_LPGPIO_SetDirection+0x28>
    568c: f7fd fe63    	bl	0x3356 <GPIO_SetDirection> @ imm = #-0x233a
    5690: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1898
; }
    5692: 4618         	mov	r0, r3
    5694: 3708         	adds	r7, #0x8
    5696: 46bd         	mov	sp, r7
    5698: bd80         	pop	{r7, pc}
    569a: bf00         	nop
    569c: 48 03 00 20  	.word	0x20000348

000056a0 <ARM_LPGPIO_GetDirection>:
; ARM_LPGPIO_GetDirection():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1901
; {
    56a0: b580         	push	{r7, lr}
    56a2: b082         	sub	sp, #0x8
    56a4: af00         	add	r7, sp, #0x0
    56a6: 4603         	mov	r3, r0
    56a8: 6039         	str	r1, [r7]
    56aa: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1902
;     return GPIO_GetDirection (&LPGPIO_RES, pin_no, dir);
    56ac: 79fb         	ldrb	r3, [r7, #0x7]
    56ae: 683a         	ldr	r2, [r7]
    56b0: 4619         	mov	r1, r3
    56b2: 4804         	ldr	r0, [pc, #0x10]         @ 0x56c4 <ARM_LPGPIO_GetDirection+0x24>
    56b4: f7fd fe85    	bl	0x33c2 <GPIO_GetDirection> @ imm = #-0x22f6
    56b8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1903
; }
    56ba: 4618         	mov	r0, r3
    56bc: 3708         	adds	r7, #0x8
    56be: 46bd         	mov	sp, r7
    56c0: bd80         	pop	{r7, pc}
    56c2: bf00         	nop
    56c4: 48 03 00 20  	.word	0x20000348

000056c8 <ARM_LPGPIO_SetValue>:
; ARM_LPGPIO_SetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1906
; {
    56c8: b580         	push	{r7, lr}
    56ca: b082         	sub	sp, #0x8
    56cc: af00         	add	r7, sp, #0x0
    56ce: 4603         	mov	r3, r0
    56d0: 460a         	mov	r2, r1
    56d2: 71fb         	strb	r3, [r7, #0x7]
    56d4: 4613         	mov	r3, r2
    56d6: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1907
;     return GPIO_SetValue (&LPGPIO_RES, pin_no, value);
    56d8: 79ba         	ldrb	r2, [r7, #0x6]
    56da: 79fb         	ldrb	r3, [r7, #0x7]
    56dc: 4619         	mov	r1, r3
    56de: 4804         	ldr	r0, [pc, #0x10]         @ 0x56f0 <ARM_LPGPIO_SetValue+0x28>
    56e0: f7fd fea2    	bl	0x3428 <GPIO_SetValue>  @ imm = #-0x22bc
    56e4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1908
; }
    56e6: 4618         	mov	r0, r3
    56e8: 3708         	adds	r7, #0x8
    56ea: 46bd         	mov	sp, r7
    56ec: bd80         	pop	{r7, pc}
    56ee: bf00         	nop
    56f0: 48 03 00 20  	.word	0x20000348

000056f4 <ARM_LPGPIO_GetValue>:
; ARM_LPGPIO_GetValue():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1911
; {
    56f4: b580         	push	{r7, lr}
    56f6: b082         	sub	sp, #0x8
    56f8: af00         	add	r7, sp, #0x0
    56fa: 4603         	mov	r3, r0
    56fc: 6039         	str	r1, [r7]
    56fe: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1912
;     return GPIO_GetValue (&LPGPIO_RES, pin_no, value);
    5700: 79fb         	ldrb	r3, [r7, #0x7]
    5702: 683a         	ldr	r2, [r7]
    5704: 4619         	mov	r1, r3
    5706: 4804         	ldr	r0, [pc, #0x10]         @ 0x5718 <ARM_LPGPIO_GetValue+0x24>
    5708: f7fd fed0    	bl	0x34ac <GPIO_GetValue>  @ imm = #-0x2260
    570c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1913
; }
    570e: 4618         	mov	r0, r3
    5710: 3708         	adds	r7, #0x8
    5712: 46bd         	mov	sp, r7
    5714: bd80         	pop	{r7, pc}
    5716: bf00         	nop
    5718: 48 03 00 20  	.word	0x20000348

0000571c <ARM_LPGPIO_Control>:
; ARM_LPGPIO_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1916
; {
    571c: b580         	push	{r7, lr}
    571e: b082         	sub	sp, #0x8
    5720: af00         	add	r7, sp, #0x0
    5722: 4603         	mov	r3, r0
    5724: 603a         	str	r2, [r7]
    5726: 71fb         	strb	r3, [r7, #0x7]
    5728: 460b         	mov	r3, r1
    572a: 71bb         	strb	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1917
;     return GPIO_Control (&LPGPIO_RES, pin_no, control_code, arg);
    572c: 79ba         	ldrb	r2, [r7, #0x6]
    572e: 79f9         	ldrb	r1, [r7, #0x7]
    5730: 683b         	ldr	r3, [r7]
    5732: 4804         	ldr	r0, [pc, #0x10]         @ 0x5744 <ARM_LPGPIO_Control+0x28>
    5734: f7fd fee7    	bl	0x3506 <GPIO_Control>   @ imm = #-0x2232
    5738: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1918
; }
    573a: 4618         	mov	r0, r3
    573c: 3708         	adds	r7, #0x8
    573e: 46bd         	mov	sp, r7
    5740: bd80         	pop	{r7, pc}
    5742: bf00         	nop
    5744: 48 03 00 20  	.word	0x20000348

00005748 <ARM_LPGPIO_Uninitialize>:
; ARM_LPGPIO_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1921
; {
    5748: b580         	push	{r7, lr}
    574a: b082         	sub	sp, #0x8
    574c: af00         	add	r7, sp, #0x0
    574e: 4603         	mov	r3, r0
    5750: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1922
;     return GPIO_Uninitialize (&LPGPIO_RES, pin_no);
    5752: 79fb         	ldrb	r3, [r7, #0x7]
    5754: 4619         	mov	r1, r3
    5756: 4804         	ldr	r0, [pc, #0x10]         @ 0x5768 <ARM_LPGPIO_Uninitialize+0x20>
    5758: f7fe f862    	bl	0x3820 <GPIO_Uninitialize> @ imm = #-0x1f3c
    575c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_GPIO.c:1923
; }
    575e: 4618         	mov	r0, r3
    5760: 3708         	adds	r7, #0x8
    5762: 46bd         	mov	sp, r7
    5764: bd80         	pop	{r7, pc}
    5766: bf00         	nop
    5768: 48 03 00 20  	.word	0x20000348

0000576c <__NVIC_EnableIRQ>:
; __NVIC_EnableIRQ():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3735
; {
    576c: b480         	push	{r7}
    576e: b083         	sub	sp, #0xc
    5770: af00         	add	r7, sp, #0x0
    5772: 4603         	mov	r3, r0
    5774: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3736
;   if ((int32_t)(IRQn) >= 0)
    5776: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    577a: 2b00         	cmp	r3, #0x0
    577c: db0b         	blt	0x5796 <__NVIC_EnableIRQ+0x2a> @ imm = #0x16
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3739
;     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    577e: 88fb         	ldrh	r3, [r7, #0x6]
    5780: f003 021f    	and	r2, r3, #0x1f
    5784: 4907         	ldr	r1, [pc, #0x1c]         @ 0x57a4 <__NVIC_EnableIRQ+0x38>
    5786: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    578a: 095b         	lsrs	r3, r3, #0x5
    578c: 2001         	movs	r0, #0x1
    578e: fa00 f202    	lsl.w	r2, r0, r2
    5792: f841 2023    	str.w	r2, [r1, r3, lsl #2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3742
; }
    5796: bf00         	nop
    5798: 370c         	adds	r7, #0xc
    579a: 46bd         	mov	sp, r7
    579c: f85d 7b04    	ldr	r7, [sp], #4
    57a0: 4770         	bx	lr
    57a2: bf00         	nop
    57a4: 00 e1 00 e0  	.word	0xe000e100

000057a8 <__NVIC_DisableIRQ>:
; __NVIC_DisableIRQ():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3773
; {
    57a8: b480         	push	{r7}
    57aa: b083         	sub	sp, #0xc
    57ac: af00         	add	r7, sp, #0x0
    57ae: 4603         	mov	r3, r0
    57b0: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3774
;   if ((int32_t)(IRQn) >= 0)
    57b2: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    57b6: 2b00         	cmp	r3, #0x0
    57b8: db12         	blt	0x57e0 <__NVIC_DisableIRQ+0x38> @ imm = #0x24
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3776
;     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57ba: 88fb         	ldrh	r3, [r7, #0x6]
    57bc: f003 021f    	and	r2, r3, #0x1f
    57c0: 490a         	ldr	r1, [pc, #0x28]         @ 0x57ec <__NVIC_DisableIRQ+0x44>
    57c2: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    57c6: 095b         	lsrs	r3, r3, #0x5
    57c8: 2001         	movs	r0, #0x1
    57ca: fa00 f202    	lsl.w	r2, r0, r2
    57ce: 3320         	adds	r3, #0x20
    57d0: f841 2023    	str.w	r2, [r1, r3, lsl #2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:269
;   __ASM volatile ("dsb 0xF":::"memory");
    57d4: f3bf 8f4f    	dsb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:270
; }
    57d8: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:258
;   __ASM volatile ("isb 0xF":::"memory");
    57da: f3bf 8f6f    	isb	sy
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/m-profile/cmsis_gcc_m.h:259
; }
    57de: bf00         	nop
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3780
; }
    57e0: bf00         	nop
    57e2: 370c         	adds	r7, #0xc
    57e4: 46bd         	mov	sp, r7
    57e6: f85d 7b04    	ldr	r7, [sp], #4
    57ea: 4770         	bx	lr
    57ec: 00 e1 00 e0  	.word	0xe000e100

000057f0 <__NVIC_ClearPendingIRQ>:
; __NVIC_ClearPendingIRQ():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3826
; {
    57f0: b480         	push	{r7}
    57f2: b083         	sub	sp, #0xc
    57f4: af00         	add	r7, sp, #0x0
    57f6: 4603         	mov	r3, r0
    57f8: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3827
;   if ((int32_t)(IRQn) >= 0)
    57fa: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    57fe: 2b00         	cmp	r3, #0x0
    5800: db0c         	blt	0x581c <__NVIC_ClearPendingIRQ+0x2c> @ imm = #0x18
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3829
;     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5802: 88fb         	ldrh	r3, [r7, #0x6]
    5804: f003 021f    	and	r2, r3, #0x1f
    5808: 4907         	ldr	r1, [pc, #0x1c]         @ 0x5828 <__NVIC_ClearPendingIRQ+0x38>
    580a: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    580e: 095b         	lsrs	r3, r3, #0x5
    5810: 2001         	movs	r0, #0x1
    5812: fa00 f202    	lsl.w	r2, r0, r2
    5816: 3360         	adds	r3, #0x60
    5818: f841 2023    	str.w	r2, [r1, r3, lsl #2]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3831
; }
    581c: bf00         	nop
    581e: 370c         	adds	r7, #0xc
    5820: 46bd         	mov	sp, r7
    5822: f85d 7b04    	ldr	r7, [sp], #4
    5826: 4770         	bx	lr
    5828: 00 e1 00 e0  	.word	0xe000e100

0000582c <__NVIC_SetPriority>:
; __NVIC_SetPriority():
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3932
; {
    582c: b480         	push	{r7}
    582e: b083         	sub	sp, #0xc
    5830: af00         	add	r7, sp, #0x0
    5832: 4603         	mov	r3, r0
    5834: 6039         	str	r1, [r7]
    5836: 80fb         	strh	r3, [r7, #0x6]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3933
;   if ((int32_t)(IRQn) >= 0)
    5838: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    583c: 2b00         	cmp	r3, #0x0
    583e: db09         	blt	0x5854 <__NVIC_SetPriority+0x28> @ imm = #0x12
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3935
;     NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5840: 4a0c         	ldr	r2, [pc, #0x30]         @ 0x5874 <__NVIC_SetPriority+0x48>
    5842: f9b7 3006    	ldrsh.w	r3, [r7, #0x6]
    5846: 6839         	ldr	r1, [r7]
    5848: b2c9         	uxtb	r1, r1
    584a: 4413         	add	r3, r2
    584c: 460a         	mov	r2, r1
    584e: f883 2300    	strb.w	r2, [r3, #0x300]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3941
; }
    5852: e009         	b	0x5868 <__NVIC_SetPriority+0x3c> @ imm = #0x12
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3939
;     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5854: 4a08         	ldr	r2, [pc, #0x20]         @ 0x5878 <__NVIC_SetPriority+0x4c>
    5856: 88fb         	ldrh	r3, [r7, #0x6]
    5858: f003 030f    	and	r3, r3, #0xf
    585c: 3b04         	subs	r3, #0x4
    585e: 6839         	ldr	r1, [r7]
    5860: b2c9         	uxtb	r1, r1
    5862: 4413         	add	r3, r2
    5864: 460a         	mov	r2, r1
    5866: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/ARM/CMSIS/6.0.0/CMSIS/Core/Include/core_cm55.h:3941
; }
    5868: bf00         	nop
    586a: 370c         	adds	r7, #0xc
    586c: 46bd         	mov	sp, r7
    586e: f85d 7b04    	ldr	r7, [sp], #4
    5872: 4770         	bx	lr
    5874: 00 e1 00 e0  	.word	0xe000e100
    5878: 00 ed 00 e0  	.word	0xe000ed00

0000587c <uart_software_reset>:
; uart_software_reset():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:372
; {
    587c: b480         	push	{r7}
    587e: b083         	sub	sp, #0xc
    5880: af00         	add	r7, sp, #0x0
    5882: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:374
;     uart->UART_SRR = UART_SRR_UART_RESET|UART_SRR_RCVR_FIFO_RESET|UART_SRR_TRANSMIT_FIFO_RESET;
    5884: 687b         	ldr	r3, [r7, #0x4]
    5886: 2207         	movs	r2, #0x7
    5888: f8c3 2088    	str.w	r2, [r3, #0x88]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:375
; }
    588c: bf00         	nop
    588e: 370c         	adds	r7, #0xc
    5890: 46bd         	mov	sp, r7
    5892: f85d 7b04    	ldr	r7, [sp], #4
    5896: 4770         	bx	lr

00005898 <uart_set_tx_trigger>:
; uart_set_tx_trigger():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:412
; {
    5898: b480         	push	{r7}
    589a: b083         	sub	sp, #0xc
    589c: af00         	add	r7, sp, #0x0
    589e: 6078         	str	r0, [r7, #0x4]
    58a0: 460b         	mov	r3, r1
    58a2: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:414
;     uart->UART_STET = tx_trigger;
    58a4: 78fa         	ldrb	r2, [r7, #0x3]
    58a6: 687b         	ldr	r3, [r7, #0x4]
    58a8: f8c3 20a0    	str.w	r2, [r3, #0xa0]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:415
; }
    58ac: bf00         	nop
    58ae: 370c         	adds	r7, #0xc
    58b0: 46bd         	mov	sp, r7
    58b2: f85d 7b04    	ldr	r7, [sp], #4
    58b6: 4770         	bx	lr

000058b8 <uart_set_rx_trigger>:
; uart_set_rx_trigger():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:466
; {
    58b8: b480         	push	{r7}
    58ba: b083         	sub	sp, #0xc
    58bc: af00         	add	r7, sp, #0x0
    58be: 6078         	str	r0, [r7, #0x4]
    58c0: 460b         	mov	r3, r1
    58c2: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:468
;     uart->UART_SRT = rx_trigger;
    58c4: 78fa         	ldrb	r2, [r7, #0x3]
    58c6: 687b         	ldr	r3, [r7, #0x4]
    58c8: f8c3 209c    	str.w	r2, [r3, #0x9c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:469
; }
    58cc: bf00         	nop
    58ce: 370c         	adds	r7, #0xc
    58d0: 46bd         	mov	sp, r7
    58d2: f85d 7b04    	ldr	r7, [sp], #4
    58d6: 4770         	bx	lr

000058d8 <uart_set_break_control>:
; uart_set_break_control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:515
; {
    58d8: b480         	push	{r7}
    58da: b083         	sub	sp, #0xc
    58dc: af00         	add	r7, sp, #0x0
    58de: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:517
;     uart->UART_LCR |= UART_LCR_BREAK;
    58e0: 687b         	ldr	r3, [r7, #0x4]
    58e2: 68db         	ldr	r3, [r3, #0xc]
    58e4: f043 0240    	orr	r2, r3, #0x40
    58e8: 687b         	ldr	r3, [r7, #0x4]
    58ea: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:518
; }
    58ec: bf00         	nop
    58ee: 370c         	adds	r7, #0xc
    58f0: 46bd         	mov	sp, r7
    58f2: f85d 7b04    	ldr	r7, [sp], #4
    58f6: 4770         	bx	lr

000058f8 <uart_clear_break_control>:
; uart_clear_break_control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:528
; {
    58f8: b480         	push	{r7}
    58fa: b083         	sub	sp, #0xc
    58fc: af00         	add	r7, sp, #0x0
    58fe: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:530
;     uart->UART_LCR &= ~UART_LCR_BREAK;
    5900: 687b         	ldr	r3, [r7, #0x4]
    5902: 68db         	ldr	r3, [r3, #0xc]
    5904: f023 0240    	bic	r2, r3, #0x40
    5908: 687b         	ldr	r3, [r7, #0x4]
    590a: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:531
; }
    590c: bf00         	nop
    590e: 370c         	adds	r7, #0xc
    5910: 46bd         	mov	sp, r7
    5912: f85d 7b04    	ldr	r7, [sp], #4
    5916: 4770         	bx	lr

00005918 <uart_enable_fifo>:
; uart_enable_fifo():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:541
; {
    5918: b480         	push	{r7}
    591a: b083         	sub	sp, #0xc
    591c: af00         	add	r7, sp, #0x0
    591e: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:543
;     uart->UART_FCR = UART_FCR_FIFO_ENABLE;
    5920: 687b         	ldr	r3, [r7, #0x4]
    5922: 2201         	movs	r2, #0x1
    5924: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:544
; }
    5926: bf00         	nop
    5928: 370c         	adds	r7, #0xc
    592a: 46bd         	mov	sp, r7
    592c: f85d 7b04    	ldr	r7, [sp], #4
    5930: 4770         	bx	lr

00005932 <uart_reset_txfifo>:
; uart_reset_txfifo():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:566
; {
    5932: b480         	push	{r7}
    5934: b083         	sub	sp, #0xc
    5936: af00         	add	r7, sp, #0x0
    5938: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:569
;     uart->UART_SRR = UART_SRR_TRANSMIT_FIFO_RESET;
    593a: 687b         	ldr	r3, [r7, #0x4]
    593c: 2204         	movs	r2, #0x4
    593e: f8c3 2088    	str.w	r2, [r3, #0x88]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:570
; }
    5942: bf00         	nop
    5944: 370c         	adds	r7, #0xc
    5946: 46bd         	mov	sp, r7
    5948: f85d 7b04    	ldr	r7, [sp], #4
    594c: 4770         	bx	lr

0000594e <uart_reset_rxfifo>:
; uart_reset_rxfifo():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:580
; {
    594e: b480         	push	{r7}
    5950: b083         	sub	sp, #0xc
    5952: af00         	add	r7, sp, #0x0
    5954: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:583
;     uart->UART_SRR = UART_SRR_RCVR_FIFO_RESET;
    5956: 687b         	ldr	r3, [r7, #0x4]
    5958: 2202         	movs	r2, #0x2
    595a: f8c3 2088    	str.w	r2, [r3, #0x88]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:584
; }
    595e: bf00         	nop
    5960: 370c         	adds	r7, #0xc
    5962: 46bd         	mov	sp, r7
    5964: f85d 7b04    	ldr	r7, [sp], #4
    5968: 4770         	bx	lr

0000596a <uart_enable_tx_irq>:
; uart_enable_tx_irq():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:594
; {
    596a: b480         	push	{r7}
    596c: b083         	sub	sp, #0xc
    596e: af00         	add	r7, sp, #0x0
    5970: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:597
;     uart->UART_IER |= UART_IER_ENABLE_TRANSMIT_HOLD_REG_EMPTY;
    5972: 687b         	ldr	r3, [r7, #0x4]
    5974: 685b         	ldr	r3, [r3, #0x4]
    5976: f043 0202    	orr	r2, r3, #0x2
    597a: 687b         	ldr	r3, [r7, #0x4]
    597c: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:598
; }
    597e: bf00         	nop
    5980: 370c         	adds	r7, #0xc
    5982: 46bd         	mov	sp, r7
    5984: f85d 7b04    	ldr	r7, [sp], #4
    5988: 4770         	bx	lr

0000598a <uart_disable_tx_irq>:
; uart_disable_tx_irq():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:608
; {
    598a: b480         	push	{r7}
    598c: b083         	sub	sp, #0xc
    598e: af00         	add	r7, sp, #0x0
    5990: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:611
;     uart->UART_IER &= ~UART_IER_ENABLE_TRANSMIT_HOLD_REG_EMPTY;
    5992: 687b         	ldr	r3, [r7, #0x4]
    5994: 685b         	ldr	r3, [r3, #0x4]
    5996: f023 0202    	bic	r2, r3, #0x2
    599a: 687b         	ldr	r3, [r7, #0x4]
    599c: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:612
; }
    599e: bf00         	nop
    59a0: 370c         	adds	r7, #0xc
    59a2: 46bd         	mov	sp, r7
    59a4: f85d 7b04    	ldr	r7, [sp], #4
    59a8: 4770         	bx	lr

000059aa <uart_enable_rx_irq>:
; uart_enable_rx_irq():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:622
; {
    59aa: b480         	push	{r7}
    59ac: b083         	sub	sp, #0xc
    59ae: af00         	add	r7, sp, #0x0
    59b0: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:626
;     uart->UART_IER |= UART_IER_ENABLE_RECEIVED_DATA_AVAILABLE;
    59b2: 687b         	ldr	r3, [r7, #0x4]
    59b4: 685b         	ldr	r3, [r3, #0x4]
    59b6: f043 0201    	orr	r2, r3, #0x1
    59ba: 687b         	ldr	r3, [r7, #0x4]
    59bc: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:629
;     uart->UART_IER |= UART_IER_ENABLE_RECEIVER_LINE_STATUS;
    59be: 687b         	ldr	r3, [r7, #0x4]
    59c0: 685b         	ldr	r3, [r3, #0x4]
    59c2: f043 0204    	orr	r2, r3, #0x4
    59c6: 687b         	ldr	r3, [r7, #0x4]
    59c8: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:630
; }
    59ca: bf00         	nop
    59cc: 370c         	adds	r7, #0xc
    59ce: 46bd         	mov	sp, r7
    59d0: f85d 7b04    	ldr	r7, [sp], #4
    59d4: 4770         	bx	lr

000059d6 <uart_disable_rx_irq>:
; uart_disable_rx_irq():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:640
; {
    59d6: b480         	push	{r7}
    59d8: b083         	sub	sp, #0xc
    59da: af00         	add	r7, sp, #0x0
    59dc: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:644
;     uart->UART_IER &= ~UART_IER_ENABLE_RECEIVED_DATA_AVAILABLE;
    59de: 687b         	ldr	r3, [r7, #0x4]
    59e0: 685b         	ldr	r3, [r3, #0x4]
    59e2: f023 0201    	bic	r2, r3, #0x1
    59e6: 687b         	ldr	r3, [r7, #0x4]
    59e8: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:647
;     uart->UART_IER &= ~UART_IER_ENABLE_RECEIVER_LINE_STATUS;
    59ea: 687b         	ldr	r3, [r7, #0x4]
    59ec: 685b         	ldr	r3, [r3, #0x4]
    59ee: f023 0204    	bic	r2, r3, #0x4
    59f2: 687b         	ldr	r3, [r7, #0x4]
    59f4: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:648
; }
    59f6: bf00         	nop
    59f8: 370c         	adds	r7, #0xc
    59fa: 46bd         	mov	sp, r7
    59fc: f85d 7b04    	ldr	r7, [sp], #4
    5a00: 4770         	bx	lr

00005a02 <enable_lpuart_clock>:
; enable_lpuart_clock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:19
; {
    5a02: b480         	push	{r7}
    5a04: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:20
; 	AON->RTSS_HE_LPUART_CKEN = (1 << 0);
    5a06: 4b04         	ldr	r3, [pc, #0x10]         @ 0x5a18 <enable_lpuart_clock+0x16>
    5a08: 2201         	movs	r2, #0x1
    5a0a: 61da         	str	r2, [r3, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:21
; }
    5a0c: bf00         	nop
    5a0e: 46bd         	mov	sp, r7
    5a10: f85d 7b04    	ldr	r7, [sp], #4
    5a14: 4770         	bx	lr
    5a16: bf00         	nop
    5a18: 00 40 60 1a  	.word	0x1a604000

00005a1c <disable_lpuart_clock>:
; disable_lpuart_clock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:24
; {
    5a1c: b480         	push	{r7}
    5a1e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:25
; 	AON->RTSS_HE_LPUART_CKEN &= ( ~ (1 << 0) );
    5a20: 4b05         	ldr	r3, [pc, #0x14]         @ 0x5a38 <disable_lpuart_clock+0x1c>
    5a22: 69db         	ldr	r3, [r3, #0x1c]
    5a24: 4a04         	ldr	r2, [pc, #0x10]         @ 0x5a38 <disable_lpuart_clock+0x1c>
    5a26: f023 0301    	bic	r3, r3, #0x1
    5a2a: 61d3         	str	r3, [r2, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:26
; }
    5a2c: bf00         	nop
    5a2e: 46bd         	mov	sp, r7
    5a30: f85d 7b04    	ldr	r7, [sp], #4
    5a34: 4770         	bx	lr
    5a36: bf00         	nop
    5a38: 00 40 60 1a  	.word	0x1a604000

00005a3c <enable_uart_clock>:
; enable_uart_clock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:42
; {
    5a3c: b480         	push	{r7}
    5a3e: b083         	sub	sp, #0xc
    5a40: af00         	add	r7, sp, #0x0
    5a42: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:45
; 	CLKCTL_PER_SLV->UART_CTRL |= (1 << instance);
    5a44: 4b07         	ldr	r3, [pc, #0x1c]         @ 0x5a64 <enable_uart_clock+0x28>
    5a46: 689b         	ldr	r3, [r3, #0x8]
    5a48: 2101         	movs	r1, #0x1
    5a4a: 687a         	ldr	r2, [r7, #0x4]
    5a4c: fa01 f202    	lsl.w	r2, r1, r2
    5a50: 4611         	mov	r1, r2
    5a52: 4a04         	ldr	r2, [pc, #0x10]         @ 0x5a64 <enable_uart_clock+0x28>
    5a54: 430b         	orrs	r3, r1
    5a56: 6093         	str	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:46
; }
    5a58: bf00         	nop
    5a5a: 370c         	adds	r7, #0xc
    5a5c: 46bd         	mov	sp, r7
    5a5e: f85d 7b04    	ldr	r7, [sp], #4
    5a62: 4770         	bx	lr
    5a64: 00 f0 02 49  	.word	0x4902f000

00005a68 <disable_uart_clock>:
; disable_uart_clock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:49
; {
    5a68: b480         	push	{r7}
    5a6a: b083         	sub	sp, #0xc
    5a6c: af00         	add	r7, sp, #0x0
    5a6e: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:52
; 	CLKCTL_PER_SLV->UART_CTRL &= ( ~ (1 << instance) );
    5a70: 4b08         	ldr	r3, [pc, #0x20]         @ 0x5a94 <disable_uart_clock+0x2c>
    5a72: 689b         	ldr	r3, [r3, #0x8]
    5a74: 2101         	movs	r1, #0x1
    5a76: 687a         	ldr	r2, [r7, #0x4]
    5a78: fa01 f202    	lsl.w	r2, r1, r2
    5a7c: 43d2         	mvns	r2, r2
    5a7e: 4611         	mov	r1, r2
    5a80: 4a04         	ldr	r2, [pc, #0x10]         @ 0x5a94 <disable_uart_clock+0x2c>
    5a82: 400b         	ands	r3, r1
    5a84: 6093         	str	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:53
; }
    5a86: bf00         	nop
    5a88: 370c         	adds	r7, #0xc
    5a8a: 46bd         	mov	sp, r7
    5a8c: f85d 7b04    	ldr	r7, [sp], #4
    5a90: 4770         	bx	lr
    5a92: bf00         	nop
    5a94: 00 f0 02 49  	.word	0x4902f000

00005a98 <select_uart_clock_hfosc_clk>:
; select_uart_clock_hfosc_clk():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:56
; {
    5a98: b480         	push	{r7}
    5a9a: b083         	sub	sp, #0xc
    5a9c: af00         	add	r7, sp, #0x0
    5a9e: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:60
; 	CLKCTL_PER_SLV->UART_CTRL &= ( ~ ( (1 << instance) << 8 ) );
    5aa0: 4b08         	ldr	r3, [pc, #0x20]         @ 0x5ac4 <select_uart_clock_hfosc_clk+0x2c>
    5aa2: 689b         	ldr	r3, [r3, #0x8]
    5aa4: 2101         	movs	r1, #0x1
    5aa6: 687a         	ldr	r2, [r7, #0x4]
    5aa8: fa01 f202    	lsl.w	r2, r1, r2
    5aac: 0212         	lsls	r2, r2, #0x8
    5aae: 43d2         	mvns	r2, r2
    5ab0: 4611         	mov	r1, r2
    5ab2: 4a04         	ldr	r2, [pc, #0x10]         @ 0x5ac4 <select_uart_clock_hfosc_clk+0x2c>
    5ab4: 400b         	ands	r3, r1
    5ab6: 6093         	str	r3, [r2, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:61
; }
    5ab8: bf00         	nop
    5aba: 370c         	adds	r7, #0xc
    5abc: 46bd         	mov	sp, r7
    5abe: f85d 7b04    	ldr	r7, [sp], #4
    5ac2: 4770         	bx	lr
    5ac4: 00 f0 02 49  	.word	0x4902f000

00005ac8 <select_uart_clock_syst_pclk>:
; select_uart_clock_syst_pclk():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:64
; {
    5ac8: b480         	push	{r7}
    5aca: b083         	sub	sp, #0xc
    5acc: af00         	add	r7, sp, #0x0
    5ace: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:68
; 	CLKCTL_PER_SLV->UART_CTRL |= ( (1 << instance) << 8 );
    5ad0: 4b07         	ldr	r3, [pc, #0x1c]         @ 0x5af0 <select_uart_clock_syst_pclk+0x28>
    5ad2: 689a         	ldr	r2, [r3, #0x8]
    5ad4: 2101         	movs	r1, #0x1
    5ad6: 687b         	ldr	r3, [r7, #0x4]
    5ad8: fa01 f303    	lsl.w	r3, r1, r3
    5adc: 021b         	lsls	r3, r3, #0x8
    5ade: 4904         	ldr	r1, [pc, #0x10]         @ 0x5af0 <select_uart_clock_syst_pclk+0x28>
    5ae0: 4313         	orrs	r3, r2
    5ae2: 608b         	str	r3, [r1, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/sys_ctrl_uart.h:69
; }
    5ae4: bf00         	nop
    5ae6: 370c         	adds	r7, #0xc
    5ae8: 46bd         	mov	sp, r7
    5aea: f85d 7b04    	ldr	r7, [sp], #4
    5aee: 4770         	bx	lr
    5af0: 00 f0 02 49  	.word	0x4902f000

00005af4 <ARM_USART_GetVersion>:
; ARM_USART_GetVersion():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:136
; {
    5af4: b480         	push	{r7}
    5af6: b083         	sub	sp, #0xc
    5af8: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:137
;   return DriverVersion;
    5afa: 4b08         	ldr	r3, [pc, #0x20]         @ 0x5b1c <ARM_USART_GetVersion+0x28>
    5afc: 681b         	ldr	r3, [r3]
    5afe: 607b         	str	r3, [r7, #0x4]
    5b00: 2300         	movs	r3, #0x0
    5b02: 88ba         	ldrh	r2, [r7, #0x4]
    5b04: f362 030f    	bfi	r3, r2, #0, #16
    5b08: 88fa         	ldrh	r2, [r7, #0x6]
    5b0a: f362 431f    	bfi	r3, r2, #16, #16
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:138
; }
    5b0e: 4618         	mov	r0, r3
    5b10: 370c         	adds	r7, #0xc
    5b12: 46bd         	mov	sp, r7
    5b14: f85d 7b04    	ldr	r7, [sp], #4
    5b18: 4770         	bx	lr
    5b1a: bf00         	nop
    5b1c: 24 1d 21 80  	.word	0x80211d24

00005b20 <ARM_USART_GetCapabilities>:
; ARM_USART_GetCapabilities():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:148
; {
    5b20: b480         	push	{r7}
    5b22: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:149
;   return DriverCapabilities;
    5b24: 4b03         	ldr	r3, [pc, #0xc]          @ 0x5b34 <ARM_USART_GetCapabilities+0x14>
    5b26: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:150
; }
    5b28: 4618         	mov	r0, r3
    5b2a: 46bd         	mov	sp, r7
    5b2c: f85d 7b04    	ldr	r7, [sp], #4
    5b30: 4770         	bx	lr
    5b32: bf00         	nop
    5b34: 28 1d 21 80  	.word	0x80211d28

00005b38 <ARM_USART_GetCapabilities_WO_RTS_CTS>:
; ARM_USART_GetCapabilities_WO_RTS_CTS():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:162
; {
    5b38: b480         	push	{r7}
    5b3a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:163
;   return DriverCapabilities_WO_RTS_CTS;
    5b3c: 2300         	movs	r3, #0x0
    5b3e: f043 0301    	orr	r3, r3, #0x1
    5b42: f443 7300    	orr	r3, r3, #0x200
    5b46: f443 6380    	orr	r3, r3, #0x400
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:164
; }
    5b4a: 4618         	mov	r0, r3
    5b4c: 46bd         	mov	sp, r7
    5b4e: f85d 7b04    	ldr	r7, [sp], #4
    5b52: 4770         	bx	lr

00005b54 <ARM_USART_PowerControl>:
; ARM_USART_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:362
; {
    5b54: b580         	push	{r7, lr}
    5b56: b082         	sub	sp, #0x8
    5b58: af00         	add	r7, sp, #0x0
    5b5a: 4603         	mov	r3, r0
    5b5c: 6039         	str	r1, [r7]
    5b5e: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:363
;     switch (state)
    5b60: 79fb         	ldrb	r3, [r7, #0x7]
    5b62: 2b00         	cmp	r3, #0x0
    5b64: d002         	beq	0x5b6c <ARM_USART_PowerControl+0x18> @ imm = #0x4
    5b66: 2b02         	cmp	r3, #0x2
    5b68: d028         	beq	0x5bbc <ARM_USART_PowerControl+0x68> @ imm = #0x50
    5b6a: e09f         	b	0x5cac <ARM_USART_PowerControl+0x158> @ imm = #0x13e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:367
;             NVIC_DisableIRQ (uart->irq_num);
    5b6c: 683b         	ldr	r3, [r7]
    5b6e: f9b3 3038    	ldrsh.w	r3, [r3, #0x38]
    5b72: 4618         	mov	r0, r3
    5b74: f7ff fe18    	bl	0x57a8 <__NVIC_DisableIRQ> @ imm = #-0x3d0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:370
;             NVIC_ClearPendingIRQ (uart->irq_num);
    5b78: 683b         	ldr	r3, [r7]
    5b7a: f9b3 3038    	ldrsh.w	r3, [r3, #0x38]
    5b7e: 4618         	mov	r0, r3
    5b80: f7ff fe36    	bl	0x57f0 <__NVIC_ClearPendingIRQ> @ imm = #-0x394
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:373
;             while(READ_BIT(uart->regs->UART_LSR, BIT(6)) != UART_LSR_TRANSMITTER_EMPTY);
    5b84: bf00         	nop
    5b86: 683b         	ldr	r3, [r7]
    5b88: 681b         	ldr	r3, [r3]
    5b8a: 695b         	ldr	r3, [r3, #0x14]
    5b8c: f003 0340    	and	r3, r3, #0x40
    5b90: 2b40         	cmp	r3, #0x40
    5b92: d1f8         	bne	0x5b86 <ARM_USART_PowerControl+0x32> @ imm = #-0x10
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:377
;             if (uart->instance == UART_INSTANCE_LP) /* LPUART */
    5b94: 683b         	ldr	r3, [r7]
    5b96: f893 3040    	ldrb.w	r3, [r3, #0x40]
    5b9a: 2b08         	cmp	r3, #0x8
    5b9c: d102         	bne	0x5ba4 <ARM_USART_PowerControl+0x50> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:379
;                 disable_lpuart_clock();
    5b9e: f7ff ff3d    	bl	0x5a1c <disable_lpuart_clock> @ imm = #-0x186
    5ba2: e005         	b	0x5bb0 <ARM_USART_PowerControl+0x5c> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:383
;                 disable_uart_clock(uart->instance);
    5ba4: 683b         	ldr	r3, [r7]
    5ba6: f893 3040    	ldrb.w	r3, [r3, #0x40]
    5baa: 4618         	mov	r0, r3
    5bac: f7ff ff5c    	bl	0x5a68 <disable_uart_clock> @ imm = #-0x148
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:387
;             uart->state.powered = 0;
    5bb0: 683a         	ldr	r2, [r7]
    5bb2: 6a93         	ldr	r3, [r2, #0x28]
    5bb4: f023 0302    	bic	r3, r3, #0x2
    5bb8: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:388
;             break;
    5bba: e07a         	b	0x5cb2 <ARM_USART_PowerControl+0x15e> @ imm = #0xf4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:391
;             if (uart->state.initialized == 0U)
    5bbc: 683b         	ldr	r3, [r7]
    5bbe: 6a9b         	ldr	r3, [r3, #0x28]
    5bc0: f3c3 0300    	ubfx	r3, r3, #0x0, #0x1
    5bc4: b2db         	uxtb	r3, r3
    5bc6: 2b00         	cmp	r3, #0x0
    5bc8: d102         	bne	0x5bd0 <ARM_USART_PowerControl+0x7c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:395
;                 return ARM_DRIVER_ERROR;
    5bca: f04f 33ff    	mov.w	r3, #0xffffffff
    5bce: e071         	b	0x5cb4 <ARM_USART_PowerControl+0x160> @ imm = #0xe2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:398
;             if (uart->state.powered)
    5bd0: 683b         	ldr	r3, [r7]
    5bd2: 6a9b         	ldr	r3, [r3, #0x28]
    5bd4: f3c3 0340    	ubfx	r3, r3, #0x1, #0x1
    5bd8: b2db         	uxtb	r3, r3
    5bda: 2b00         	cmp	r3, #0x0
    5bdc: d001         	beq	0x5be2 <ARM_USART_PowerControl+0x8e> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:400
;                 return ARM_DRIVER_OK;
    5bde: 2300         	movs	r3, #0x0
    5be0: e068         	b	0x5cb4 <ARM_USART_PowerControl+0x160> @ imm = #0xd0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:406
;             if (uart->instance == UART_INSTANCE_LP) /* LPUART */
    5be2: 683b         	ldr	r3, [r7]
    5be4: f893 3040    	ldrb.w	r3, [r3, #0x40]
    5be8: 2b08         	cmp	r3, #0x8
    5bea: d107         	bne	0x5bfc <ARM_USART_PowerControl+0xa8> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:409
;                 uart->clk = GetSystemCoreClock();
    5bec: f009 fe04    	bl	0xf7f8 <__GetSystemCoreClock_veneer> @ imm = #0x9c08
    5bf0: 4602         	mov	r2, r0
    5bf2: 683b         	ldr	r3, [r7]
    5bf4: 631a         	str	r2, [r3, #0x30]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:412
;                 enable_lpuart_clock();
    5bf6: f7ff ff04    	bl	0x5a02 <enable_lpuart_clock> @ imm = #-0x1f8
    5bfa: e025         	b	0x5c48 <ARM_USART_PowerControl+0xf4> @ imm = #0x4a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:416
;                 if (uart->clk_source == UART_CLK_SOURCE_HFOSC_CLK)
    5bfc: 683b         	ldr	r3, [r7]
    5bfe: f893 3034    	ldrb.w	r3, [r3, #0x34]
    5c02: 2b00         	cmp	r3, #0x0
    5c04: d10a         	bne	0x5c1c <ARM_USART_PowerControl+0xc8> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:418
;                     select_uart_clock_hfosc_clk(uart->instance);
    5c06: 683b         	ldr	r3, [r7]
    5c08: f893 3040    	ldrb.w	r3, [r3, #0x40]
    5c0c: 4618         	mov	r0, r3
    5c0e: f7ff ff43    	bl	0x5a98 <select_uart_clock_hfosc_clk> @ imm = #-0x17a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:421
;                     uart->clk = GetSystemHFOSClock();
    5c12: f001 fddd    	bl	0x77d0 <GetSystemHFOSClock> @ imm = #0x1bba
    5c16: 4602         	mov	r2, r0
    5c18: 683b         	ldr	r3, [r7]
    5c1a: 631a         	str	r2, [r3, #0x30]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:424
;                 if (uart->clk_source == UART_CLK_SOURCE_SYST_PCLK)
    5c1c: 683b         	ldr	r3, [r7]
    5c1e: f893 3034    	ldrb.w	r3, [r3, #0x34]
    5c22: 2b01         	cmp	r3, #0x1
    5c24: d10a         	bne	0x5c3c <ARM_USART_PowerControl+0xe8> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:426
;                     select_uart_clock_syst_pclk(uart->instance);
    5c26: 683b         	ldr	r3, [r7]
    5c28: f893 3040    	ldrb.w	r3, [r3, #0x40]
    5c2c: 4618         	mov	r0, r3
    5c2e: f7ff ff4b    	bl	0x5ac8 <select_uart_clock_syst_pclk> @ imm = #-0x16a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:429
;                     uart->clk = GetSystemAPBClock();
    5c32: f001 fdb5    	bl	0x77a0 <GetSystemAPBClock> @ imm = #0x1b6a
    5c36: 4602         	mov	r2, r0
    5c38: 683b         	ldr	r3, [r7]
    5c3a: 631a         	str	r2, [r3, #0x30]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:433
;                 enable_uart_clock(uart->instance);
    5c3c: 683b         	ldr	r3, [r7]
    5c3e: f893 3040    	ldrb.w	r3, [r3, #0x40]
    5c42: 4618         	mov	r0, r3
    5c44: f7ff fefa    	bl	0x5a3c <enable_uart_clock> @ imm = #-0x20c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:468
;             uart_software_reset(uart->regs);
    5c48: 683b         	ldr	r3, [r7]
    5c4a: 681b         	ldr	r3, [r3]
    5c4c: 4618         	mov	r0, r3
    5c4e: f7ff fe15    	bl	0x587c <uart_software_reset> @ imm = #-0x3d6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:476
;             sys_busy_loop_us(5);
    5c52: 2005         	movs	r0, #0x5
    5c54: f009 fdd4    	bl	0xf800 <__sys_busy_loop_us_veneer> @ imm = #0x9ba8
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:516
;             uart_enable_fifo(uart->regs);
    5c58: 683b         	ldr	r3, [r7]
    5c5a: 681b         	ldr	r3, [r3]
    5c5c: 4618         	mov	r0, r3
    5c5e: f7ff fe5b    	bl	0x5918 <uart_enable_fifo> @ imm = #-0x34a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:519
;             uart_disable_tx_irq(uart->regs);
    5c62: 683b         	ldr	r3, [r7]
    5c64: 681b         	ldr	r3, [r3]
    5c66: 4618         	mov	r0, r3
    5c68: f7ff fe8f    	bl	0x598a <uart_disable_tx_irq> @ imm = #-0x2e2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:522
;             uart_disable_rx_irq(uart->regs);
    5c6c: 683b         	ldr	r3, [r7]
    5c6e: 681b         	ldr	r3, [r3]
    5c70: 4618         	mov	r0, r3
    5c72: f7ff feb0    	bl	0x59d6 <uart_disable_rx_irq> @ imm = #-0x2a0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:525
;             NVIC_ClearPendingIRQ (uart->irq_num);
    5c76: 683b         	ldr	r3, [r7]
    5c78: f9b3 3038    	ldrsh.w	r3, [r3, #0x38]
    5c7c: 4618         	mov	r0, r3
    5c7e: f7ff fdb7    	bl	0x57f0 <__NVIC_ClearPendingIRQ> @ imm = #-0x492
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:526
;             NVIC_SetPriority(uart->irq_num, uart->irq_priority);
    5c82: 683b         	ldr	r3, [r7]
    5c84: f9b3 2038    	ldrsh.w	r2, [r3, #0x38]
    5c88: 683b         	ldr	r3, [r7]
    5c8a: 6bdb         	ldr	r3, [r3, #0x3c]
    5c8c: 4619         	mov	r1, r3
    5c8e: 4610         	mov	r0, r2
    5c90: f7ff fdcc    	bl	0x582c <__NVIC_SetPriority> @ imm = #-0x468
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:527
;             NVIC_EnableIRQ (uart->irq_num);
    5c94: 683b         	ldr	r3, [r7]
    5c96: f9b3 3038    	ldrsh.w	r3, [r3, #0x38]
    5c9a: 4618         	mov	r0, r3
    5c9c: f7ff fd66    	bl	0x576c <__NVIC_EnableIRQ> @ imm = #-0x534
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:530
;             uart->state.powered = 1;
    5ca0: 683a         	ldr	r2, [r7]
    5ca2: 6a93         	ldr	r3, [r2, #0x28]
    5ca4: f043 0302    	orr	r3, r3, #0x2
    5ca8: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:531
;             break;
    5caa: e002         	b	0x5cb2 <ARM_USART_PowerControl+0x15e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:535
;             return ARM_DRIVER_ERROR_UNSUPPORTED;
    5cac: f06f 0303    	mvn	r3, #0x3
    5cb0: e000         	b	0x5cb4 <ARM_USART_PowerControl+0x160> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:552
;     return ARM_DRIVER_OK;
    5cb2: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:553
; }
    5cb4: 4618         	mov	r0, r3
    5cb6: 3708         	adds	r7, #0x8
    5cb8: 46bd         	mov	sp, r7
    5cba: bd80         	pop	{r7, pc}

00005cbc <ARM_USART_Initialize>:
; ARM_USART_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:571
; {
    5cbc: b480         	push	{r7}
    5cbe: b083         	sub	sp, #0xc
    5cc0: af00         	add	r7, sp, #0x0
    5cc2: 6078         	str	r0, [r7, #0x4]
    5cc4: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:572
;     if (uart->state.initialized == 1)
    5cc6: 683b         	ldr	r3, [r7]
    5cc8: 6a9b         	ldr	r3, [r3, #0x28]
    5cca: f3c3 0300    	ubfx	r3, r3, #0x0, #0x1
    5cce: b2db         	uxtb	r3, r3
    5cd0: 2b01         	cmp	r3, #0x1
    5cd2: d101         	bne	0x5cd8 <ARM_USART_Initialize+0x1c> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:575
;         return ARM_DRIVER_OK;
    5cd4: 2300         	movs	r3, #0x0
    5cd6: e044         	b	0x5d62 <ARM_USART_Initialize+0xa6> @ imm = #0x88
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:579
;     uart->cb_event = cb_event;
    5cd8: 683b         	ldr	r3, [r7]
    5cda: 687a         	ldr	r2, [r7, #0x4]
    5cdc: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:582
;     uart->transfer.tx_buf              = NULL;
    5cde: 683b         	ldr	r3, [r7]
    5ce0: 2200         	movs	r2, #0x0
    5ce2: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:583
;     uart->transfer.tx_total_num        = 0U;
    5ce4: 683b         	ldr	r3, [r7]
    5ce6: 2200         	movs	r2, #0x0
    5ce8: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:584
;     uart->transfer.tx_curr_cnt         = 0U;
    5cea: 683b         	ldr	r3, [r7]
    5cec: 2200         	movs	r2, #0x0
    5cee: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:587
;     uart->status.tx_busy               = UART_STATUS_FREE;
    5cf0: 683a         	ldr	r2, [r7]
    5cf2: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5cf6: f023 0301    	bic	r3, r3, #0x1
    5cfa: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:590
;     uart->transfer.rx_buf              = NULL;
    5cfe: 683b         	ldr	r3, [r7]
    5d00: 2200         	movs	r2, #0x0
    5d02: 615a         	str	r2, [r3, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:591
;     uart->transfer.rx_total_num        = 0U;
    5d04: 683b         	ldr	r3, [r7]
    5d06: 2200         	movs	r2, #0x0
    5d08: 619a         	str	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:592
;     uart->transfer.rx_curr_cnt         = 0U;
    5d0a: 683b         	ldr	r3, [r7]
    5d0c: 2200         	movs	r2, #0x0
    5d0e: 61da         	str	r2, [r3, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:595
;     uart->status.rx_busy               = UART_STATUS_FREE;
    5d10: 683a         	ldr	r2, [r7]
    5d12: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5d16: f023 0302    	bic	r3, r3, #0x2
    5d1a: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:598
;     uart->status.rx_break              = 0U;
    5d1e: 683a         	ldr	r2, [r7]
    5d20: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5d24: f023 0310    	bic	r3, r3, #0x10
    5d28: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:599
;     uart->status.rx_framing_error      = 0U;
    5d2c: 683a         	ldr	r2, [r7]
    5d2e: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5d32: f023 0320    	bic	r3, r3, #0x20
    5d36: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:600
;     uart->status.rx_overflow           = 0U;
    5d3a: 683a         	ldr	r2, [r7]
    5d3c: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5d40: f023 0308    	bic	r3, r3, #0x8
    5d44: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:601
;     uart->status.rx_parity_error       = 0U;
    5d48: 683a         	ldr	r2, [r7]
    5d4a: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5d4e: f023 0340    	bic	r3, r3, #0x40
    5d52: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:621
;     uart->state.initialized = 1;
    5d56: 683a         	ldr	r2, [r7]
    5d58: 6a93         	ldr	r3, [r2, #0x28]
    5d5a: f043 0301    	orr	r3, r3, #0x1
    5d5e: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:623
;     return ARM_DRIVER_OK;
    5d60: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:624
; }
    5d62: 4618         	mov	r0, r3
    5d64: 370c         	adds	r7, #0xc
    5d66: 46bd         	mov	sp, r7
    5d68: f85d 7b04    	ldr	r7, [sp], #4
    5d6c: 4770         	bx	lr

00005d6e <ARM_USART_Uninitialize>:
; ARM_USART_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:640
; {
    5d6e: b580         	push	{r7, lr}
    5d70: b082         	sub	sp, #0x8
    5d72: af00         	add	r7, sp, #0x0
    5d74: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:641
;     if (uart->state.initialized == 0)
    5d76: 687b         	ldr	r3, [r7, #0x4]
    5d78: 6a9b         	ldr	r3, [r3, #0x28]
    5d7a: f3c3 0300    	ubfx	r3, r3, #0x0, #0x1
    5d7e: b2db         	uxtb	r3, r3
    5d80: 2b00         	cmp	r3, #0x0
    5d82: d101         	bne	0x5d88 <ARM_USART_Uninitialize+0x1a> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:644
;         return ARM_DRIVER_OK;
    5d84: 2300         	movs	r3, #0x0
    5d86: e063         	b	0x5e50 <ARM_USART_Uninitialize+0xe2> @ imm = #0xc6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:648
;     uart->cb_event = NULL;
    5d88: 687b         	ldr	r3, [r7, #0x4]
    5d8a: 2200         	movs	r2, #0x0
    5d8c: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:651
;     uart_disable_tx_irq(uart->regs);
    5d8e: 687b         	ldr	r3, [r7, #0x4]
    5d90: 681b         	ldr	r3, [r3]
    5d92: 4618         	mov	r0, r3
    5d94: f7ff fdf9    	bl	0x598a <uart_disable_tx_irq> @ imm = #-0x40e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:654
;     uart_disable_rx_irq(uart->regs);
    5d98: 687b         	ldr	r3, [r7, #0x4]
    5d9a: 681b         	ldr	r3, [r3]
    5d9c: 4618         	mov	r0, r3
    5d9e: f7ff fe1a    	bl	0x59d6 <uart_disable_rx_irq> @ imm = #-0x3cc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:657
;     uart_reset_txfifo(uart->regs);
    5da2: 687b         	ldr	r3, [r7, #0x4]
    5da4: 681b         	ldr	r3, [r3]
    5da6: 4618         	mov	r0, r3
    5da8: f7ff fdc3    	bl	0x5932 <uart_reset_txfifo> @ imm = #-0x47a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:660
;     uart_reset_rxfifo(uart->regs);
    5dac: 687b         	ldr	r3, [r7, #0x4]
    5dae: 681b         	ldr	r3, [r3]
    5db0: 4618         	mov	r0, r3
    5db2: f7ff fdcc    	bl	0x594e <uart_reset_rxfifo> @ imm = #-0x468
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:663
;     uart_set_baudrate(uart->regs, uart->clk, 0);
    5db6: 687b         	ldr	r3, [r7, #0x4]
    5db8: 6818         	ldr	r0, [r3]
    5dba: 687b         	ldr	r3, [r7, #0x4]
    5dbc: 6b1b         	ldr	r3, [r3, #0x30]
    5dbe: 2200         	movs	r2, #0x0
    5dc0: 4619         	mov	r1, r3
    5dc2: f001 fac6    	bl	0x7352 <uart_set_baudrate> @ imm = #0x158c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:666
;     uart->baudrate = 0;
    5dc6: 687b         	ldr	r3, [r7, #0x4]
    5dc8: 2200         	movs	r2, #0x0
    5dca: 62da         	str	r2, [r3, #0x2c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:679
;     uart->transfer.tx_buf              = NULL;
    5dcc: 687b         	ldr	r3, [r7, #0x4]
    5dce: 2200         	movs	r2, #0x0
    5dd0: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:680
;     uart->transfer.tx_total_num        = 0U;
    5dd2: 687b         	ldr	r3, [r7, #0x4]
    5dd4: 2200         	movs	r2, #0x0
    5dd6: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:681
;     uart->transfer.tx_curr_cnt         = 0U;
    5dd8: 687b         	ldr	r3, [r7, #0x4]
    5dda: 2200         	movs	r2, #0x0
    5ddc: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:684
;     uart->status.tx_busy               = UART_STATUS_FREE;
    5dde: 687a         	ldr	r2, [r7, #0x4]
    5de0: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5de4: f023 0301    	bic	r3, r3, #0x1
    5de8: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:687
;     uart->transfer.rx_buf              = NULL;
    5dec: 687b         	ldr	r3, [r7, #0x4]
    5dee: 2200         	movs	r2, #0x0
    5df0: 615a         	str	r2, [r3, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:688
;     uart->transfer.rx_total_num        = 0U;
    5df2: 687b         	ldr	r3, [r7, #0x4]
    5df4: 2200         	movs	r2, #0x0
    5df6: 619a         	str	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:689
;     uart->transfer.rx_curr_cnt         = 0U;
    5df8: 687b         	ldr	r3, [r7, #0x4]
    5dfa: 2200         	movs	r2, #0x0
    5dfc: 61da         	str	r2, [r3, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:692
;     uart->status.rx_busy               = UART_STATUS_FREE;
    5dfe: 687a         	ldr	r2, [r7, #0x4]
    5e00: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5e04: f023 0302    	bic	r3, r3, #0x2
    5e08: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:695
;     uart->status.rx_break              = 0U;
    5e0c: 687a         	ldr	r2, [r7, #0x4]
    5e0e: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5e12: f023 0310    	bic	r3, r3, #0x10
    5e16: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:696
;     uart->status.rx_framing_error      = 0U;
    5e1a: 687a         	ldr	r2, [r7, #0x4]
    5e1c: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5e20: f023 0320    	bic	r3, r3, #0x20
    5e24: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:697
;     uart->status.rx_overflow           = 0U;
    5e28: 687a         	ldr	r2, [r7, #0x4]
    5e2a: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5e2e: f023 0308    	bic	r3, r3, #0x8
    5e32: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:698
;     uart->status.rx_parity_error       = 0U;
    5e36: 687a         	ldr	r2, [r7, #0x4]
    5e38: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5e3c: f023 0340    	bic	r3, r3, #0x40
    5e40: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:709
;     uart->state.initialized = 0;
    5e44: 687a         	ldr	r2, [r7, #0x4]
    5e46: 6a93         	ldr	r3, [r2, #0x28]
    5e48: f023 0301    	bic	r3, r3, #0x1
    5e4c: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:710
;     return ARM_DRIVER_OK;
    5e4e: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:711
; }
    5e50: 4618         	mov	r0, r3
    5e52: 3708         	adds	r7, #0x8
    5e54: 46bd         	mov	sp, r7
    5e56: bd80         	pop	{r7, pc}

00005e58 <ARM_USART_Send>:
; ARM_USART_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:729
; {
    5e58: b580         	push	{r7, lr}
    5e5a: b084         	sub	sp, #0x10
    5e5c: af00         	add	r7, sp, #0x0
    5e5e: 60f8         	str	r0, [r7, #0xc]
    5e60: 60b9         	str	r1, [r7, #0x8]
    5e62: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:730
;     if ((data == NULL) || (num == 0U))
    5e64: 68fb         	ldr	r3, [r7, #0xc]
    5e66: 2b00         	cmp	r3, #0x0
    5e68: d002         	beq	0x5e70 <ARM_USART_Send+0x18> @ imm = #0x4
    5e6a: 68bb         	ldr	r3, [r7, #0x8]
    5e6c: 2b00         	cmp	r3, #0x0
    5e6e: d102         	bne	0x5e76 <ARM_USART_Send+0x1e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:733
;         return ARM_DRIVER_ERROR_PARAMETER;
    5e70: f06f 0304    	mvn	r3, #0x4
    5e74: e034         	b	0x5ee0 <ARM_USART_Send+0x88> @ imm = #0x68
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:736
;     if (uart->state.powered == 0)
    5e76: 687b         	ldr	r3, [r7, #0x4]
    5e78: 6a9b         	ldr	r3, [r3, #0x28]
    5e7a: f3c3 0340    	ubfx	r3, r3, #0x1, #0x1
    5e7e: b2db         	uxtb	r3, r3
    5e80: 2b00         	cmp	r3, #0x0
    5e82: d102         	bne	0x5e8a <ARM_USART_Send+0x32> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:737
;         return ARM_DRIVER_ERROR;
    5e84: f04f 33ff    	mov.w	r3, #0xffffffff
    5e88: e02a         	b	0x5ee0 <ARM_USART_Send+0x88> @ imm = #0x54
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:739
;     if (uart->state.tx_enabled == 0U)
    5e8a: 687b         	ldr	r3, [r7, #0x4]
    5e8c: 6a9b         	ldr	r3, [r3, #0x28]
    5e8e: f3c3 0380    	ubfx	r3, r3, #0x2, #0x1
    5e92: b2db         	uxtb	r3, r3
    5e94: 2b00         	cmp	r3, #0x0
    5e96: d102         	bne	0x5e9e <ARM_USART_Send+0x46> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:745
;         return ARM_DRIVER_ERROR;
    5e98: f04f 33ff    	mov.w	r3, #0xffffffff
    5e9c: e020         	b	0x5ee0 <ARM_USART_Send+0x88> @ imm = #0x40
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:753
;     if (uart->status.tx_busy != UART_STATUS_FREE)
    5e9e: 687b         	ldr	r3, [r7, #0x4]
    5ea0: f893 3024    	ldrb.w	r3, [r3, #0x24]
    5ea4: f003 0301    	and	r3, r3, #0x1
    5ea8: b2db         	uxtb	r3, r3
    5eaa: 2b00         	cmp	r3, #0x0
    5eac: d002         	beq	0x5eb4 <ARM_USART_Send+0x5c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:756
;         return ARM_DRIVER_ERROR_BUSY;
    5eae: f06f 0301    	mvn	r3, #0x1
    5eb2: e015         	b	0x5ee0 <ARM_USART_Send+0x88> @ imm = #0x2a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:760
;     uart->status.tx_busy        = UART_STATUS_BUSY;
    5eb4: 687a         	ldr	r2, [r7, #0x4]
    5eb6: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5eba: f043 0301    	orr	r3, r3, #0x1
    5ebe: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:763
;     uart->transfer.tx_buf       = (uint8_t *)data;
    5ec2: 687b         	ldr	r3, [r7, #0x4]
    5ec4: 68fa         	ldr	r2, [r7, #0xc]
    5ec6: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:764
;     uart->transfer.tx_total_num = num;
    5ec8: 687b         	ldr	r3, [r7, #0x4]
    5eca: 68ba         	ldr	r2, [r7, #0x8]
    5ecc: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:765
;     uart->transfer.tx_curr_cnt  = 0U;
    5ece: 687b         	ldr	r3, [r7, #0x4]
    5ed0: 2200         	movs	r2, #0x0
    5ed2: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:816
;             uart_enable_tx_irq(uart->regs);
    5ed4: 687b         	ldr	r3, [r7, #0x4]
    5ed6: 681b         	ldr	r3, [r3]
    5ed8: 4618         	mov	r0, r3
    5eda: f7ff fd46    	bl	0x596a <uart_enable_tx_irq> @ imm = #-0x574
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:820
;     return ARM_DRIVER_OK;
    5ede: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:821
; }
    5ee0: 4618         	mov	r0, r3
    5ee2: 3710         	adds	r7, #0x10
    5ee4: 46bd         	mov	sp, r7
    5ee6: bd80         	pop	{r7, pc}

00005ee8 <ARM_USART_Receive>:
; ARM_USART_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:838
; {
    5ee8: b580         	push	{r7, lr}
    5eea: b084         	sub	sp, #0x10
    5eec: af00         	add	r7, sp, #0x0
    5eee: 60f8         	str	r0, [r7, #0xc]
    5ef0: 60b9         	str	r1, [r7, #0x8]
    5ef2: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:839
;     if ((data == NULL) || (num == 0U))
    5ef4: 68fb         	ldr	r3, [r7, #0xc]
    5ef6: 2b00         	cmp	r3, #0x0
    5ef8: d002         	beq	0x5f00 <ARM_USART_Receive+0x18> @ imm = #0x4
    5efa: 68bb         	ldr	r3, [r7, #0x8]
    5efc: 2b00         	cmp	r3, #0x0
    5efe: d102         	bne	0x5f06 <ARM_USART_Receive+0x1e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:842
;         return ARM_DRIVER_ERROR_PARAMETER;
    5f00: f06f 0304    	mvn	r3, #0x4
    5f04: e050         	b	0x5fa8 <ARM_USART_Receive+0xc0> @ imm = #0xa0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:845
;     if (uart->state.powered == 0)
    5f06: 687b         	ldr	r3, [r7, #0x4]
    5f08: 6a9b         	ldr	r3, [r3, #0x28]
    5f0a: f3c3 0340    	ubfx	r3, r3, #0x1, #0x1
    5f0e: b2db         	uxtb	r3, r3
    5f10: 2b00         	cmp	r3, #0x0
    5f12: d102         	bne	0x5f1a <ARM_USART_Receive+0x32> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:846
;         return ARM_DRIVER_ERROR;
    5f14: f04f 33ff    	mov.w	r3, #0xffffffff
    5f18: e046         	b	0x5fa8 <ARM_USART_Receive+0xc0> @ imm = #0x8c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:848
;     if (uart->state.rx_enabled == 0U)
    5f1a: 687b         	ldr	r3, [r7, #0x4]
    5f1c: 6a9b         	ldr	r3, [r3, #0x28]
    5f1e: f3c3 03c0    	ubfx	r3, r3, #0x3, #0x1
    5f22: b2db         	uxtb	r3, r3
    5f24: 2b00         	cmp	r3, #0x0
    5f26: d102         	bne	0x5f2e <ARM_USART_Receive+0x46> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:851
;         return ARM_DRIVER_ERROR;
    5f28: f04f 33ff    	mov.w	r3, #0xffffffff
    5f2c: e03c         	b	0x5fa8 <ARM_USART_Receive+0xc0> @ imm = #0x78
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:859
;     if (uart->status.rx_busy == UART_STATUS_BUSY)
    5f2e: 687b         	ldr	r3, [r7, #0x4]
    5f30: f893 3024    	ldrb.w	r3, [r3, #0x24]
    5f34: f003 0302    	and	r3, r3, #0x2
    5f38: b2db         	uxtb	r3, r3
    5f3a: 2b00         	cmp	r3, #0x0
    5f3c: d002         	beq	0x5f44 <ARM_USART_Receive+0x5c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:862
;         return ARM_DRIVER_ERROR_BUSY;
    5f3e: f06f 0301    	mvn	r3, #0x1
    5f42: e031         	b	0x5fa8 <ARM_USART_Receive+0xc0> @ imm = #0x62
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:866
;     uart->status.rx_busy           = UART_STATUS_BUSY;
    5f44: 687a         	ldr	r2, [r7, #0x4]
    5f46: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5f4a: f043 0302    	orr	r3, r3, #0x2
    5f4e: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:869
;     uart->status.rx_break          = 0U;
    5f52: 687a         	ldr	r2, [r7, #0x4]
    5f54: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5f58: f023 0310    	bic	r3, r3, #0x10
    5f5c: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:870
;     uart->status.rx_framing_error  = 0U;
    5f60: 687a         	ldr	r2, [r7, #0x4]
    5f62: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5f66: f023 0320    	bic	r3, r3, #0x20
    5f6a: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:871
;     uart->status.rx_overflow       = 0U;
    5f6e: 687a         	ldr	r2, [r7, #0x4]
    5f70: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5f74: f023 0308    	bic	r3, r3, #0x8
    5f78: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:872
;     uart->status.rx_parity_error   = 0U;
    5f7c: 687a         	ldr	r2, [r7, #0x4]
    5f7e: f892 3024    	ldrb.w	r3, [r2, #0x24]
    5f82: f023 0340    	bic	r3, r3, #0x40
    5f86: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:875
;     uart->transfer.rx_buf          = (uint8_t *)data;
    5f8a: 687b         	ldr	r3, [r7, #0x4]
    5f8c: 68fa         	ldr	r2, [r7, #0xc]
    5f8e: 615a         	str	r2, [r3, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:876
;     uart->transfer.rx_total_num    = num;
    5f90: 687b         	ldr	r3, [r7, #0x4]
    5f92: 68ba         	ldr	r2, [r7, #0x8]
    5f94: 619a         	str	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:877
;     uart->transfer.rx_curr_cnt     = 0U;
    5f96: 687b         	ldr	r3, [r7, #0x4]
    5f98: 2200         	movs	r2, #0x0
    5f9a: 61da         	str	r2, [r3, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:962
;             uart_enable_rx_irq(uart->regs);
    5f9c: 687b         	ldr	r3, [r7, #0x4]
    5f9e: 681b         	ldr	r3, [r3]
    5fa0: 4618         	mov	r0, r3
    5fa2: f7ff fd02    	bl	0x59aa <uart_enable_rx_irq> @ imm = #-0x5fc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:966
;     return ARM_DRIVER_OK;
    5fa6: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:967
; }
    5fa8: 4618         	mov	r0, r3
    5faa: 3710         	adds	r7, #0x10
    5fac: 46bd         	mov	sp, r7
    5fae: bd80         	pop	{r7, pc}

00005fb0 <ARM_USART_Transfer>:
; ARM_USART_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:987
; {
    5fb0: b480         	push	{r7}
    5fb2: b085         	sub	sp, #0x14
    5fb4: af00         	add	r7, sp, #0x0
    5fb6: 60f8         	str	r0, [r7, #0xc]
    5fb8: 60b9         	str	r1, [r7, #0x8]
    5fba: 607a         	str	r2, [r7, #0x4]
    5fbc: 603b         	str	r3, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:996
;     return ARM_DRIVER_ERROR_UNSUPPORTED;
    5fbe: f06f 0303    	mvn	r3, #0x3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:997
; }
    5fc2: 4618         	mov	r0, r3
    5fc4: 3714         	adds	r7, #0x14
    5fc6: 46bd         	mov	sp, r7
    5fc8: f85d 7b04    	ldr	r7, [sp], #4
    5fcc: 4770         	bx	lr

00005fce <ARM_USART_GetTxCount>:
; ARM_USART_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1007
; {
    5fce: b480         	push	{r7}
    5fd0: b083         	sub	sp, #0xc
    5fd2: af00         	add	r7, sp, #0x0
    5fd4: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1022
;     return uart->transfer.tx_curr_cnt;
    5fd6: 687b         	ldr	r3, [r7, #0x4]
    5fd8: 691b         	ldr	r3, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1023
; }
    5fda: 4618         	mov	r0, r3
    5fdc: 370c         	adds	r7, #0xc
    5fde: 46bd         	mov	sp, r7
    5fe0: f85d 7b04    	ldr	r7, [sp], #4
    5fe4: 4770         	bx	lr

00005fe6 <ARM_USART_GetRxCount>:
; ARM_USART_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1033
; {
    5fe6: b480         	push	{r7}
    5fe8: b083         	sub	sp, #0xc
    5fea: af00         	add	r7, sp, #0x0
    5fec: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1048
;     return uart->transfer.rx_curr_cnt;
    5fee: 687b         	ldr	r3, [r7, #0x4]
    5ff0: 69db         	ldr	r3, [r3, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1049
; }
    5ff2: 4618         	mov	r0, r3
    5ff4: 370c         	adds	r7, #0xc
    5ff6: 46bd         	mov	sp, r7
    5ff8: f85d 7b04    	ldr	r7, [sp], #4
    5ffc: 4770         	bx	lr

00005ffe <UartAsynchronousModeCtrl>:
; UartAsynchronousModeCtrl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1066
; {
    5ffe: b580         	push	{r7, lr}
    6000: b086         	sub	sp, #0x18
    6002: af00         	add	r7, sp, #0x0
    6004: 60f8         	str	r0, [r7, #0xc]
    6006: 60b9         	str	r1, [r7, #0x8]
    6008: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1067
;     UART_DATA_BITS    data_bits    = 0;
    600a: 2300         	movs	r3, #0x0
    600c: 75fb         	strb	r3, [r7, #0x17]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1068
;     UART_PARITY       parity       = 0;
    600e: 2300         	movs	r3, #0x0
    6010: 75bb         	strb	r3, [r7, #0x16]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1069
;     UART_STOP_BITS    stop_bits    = 0;
    6012: 2300         	movs	r3, #0x0
    6014: 757b         	strb	r3, [r7, #0x15]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1070
;     UART_FLOW_CONTROL flow_control = 0;
    6016: 2300         	movs	r3, #0x0
    6018: 753b         	strb	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1071
;     uint32_t            baudrate     = arg;
    601a: 687b         	ldr	r3, [r7, #0x4]
    601c: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1074
;     uart_set_baudrate(uart->regs, uart->clk, baudrate);
    601e: 68fb         	ldr	r3, [r7, #0xc]
    6020: 6818         	ldr	r0, [r3]
    6022: 68fb         	ldr	r3, [r7, #0xc]
    6024: 6b1b         	ldr	r3, [r3, #0x30]
    6026: 693a         	ldr	r2, [r7, #0x10]
    6028: 4619         	mov	r1, r3
    602a: f001 f992    	bl	0x7352 <uart_set_baudrate> @ imm = #0x1324
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1077
;     uart->baudrate = baudrate;
    602e: 68fb         	ldr	r3, [r7, #0xc]
    6030: 693a         	ldr	r2, [r7, #0x10]
    6032: 62da         	str	r2, [r3, #0x2c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1080
;     switch (control & ARM_USART_DATA_BITS_Msk)
    6034: 68bb         	ldr	r3, [r7, #0x8]
    6036: f403 63e0    	and	r3, r3, #0x700
    603a: f5b3 6fe0    	cmp.w	r3, #0x700
    603e: d013         	beq	0x6068 <UartAsynchronousModeCtrl+0x6a> @ imm = #0x26
    6040: f5b3 6fe0    	cmp.w	r3, #0x700
    6044: d816         	bhi	0x6074 <UartAsynchronousModeCtrl+0x76> @ imm = #0x2c
    6046: f5b3 6fc0    	cmp.w	r3, #0x600
    604a: d00a         	beq	0x6062 <UartAsynchronousModeCtrl+0x64> @ imm = #0x14
    604c: f5b3 6fc0    	cmp.w	r3, #0x600
    6050: d810         	bhi	0x6074 <UartAsynchronousModeCtrl+0x76> @ imm = #0x20
    6052: 2b00         	cmp	r3, #0x0
    6054: d00b         	beq	0x606e <UartAsynchronousModeCtrl+0x70> @ imm = #0x16
    6056: f5b3 6fa0    	cmp.w	r3, #0x500
    605a: d10b         	bne	0x6074 <UartAsynchronousModeCtrl+0x76> @ imm = #0x16
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1082
;         case ARM_USART_DATA_BITS_5: data_bits = UART_DATA_BITS_5; break;
    605c: 2300         	movs	r3, #0x0
    605e: 75fb         	strb	r3, [r7, #0x17]
    6060: e00b         	b	0x607a <UartAsynchronousModeCtrl+0x7c> @ imm = #0x16
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1083
;         case ARM_USART_DATA_BITS_6: data_bits = UART_DATA_BITS_6; break;
    6062: 2301         	movs	r3, #0x1
    6064: 75fb         	strb	r3, [r7, #0x17]
    6066: e008         	b	0x607a <UartAsynchronousModeCtrl+0x7c> @ imm = #0x10
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1084
;         case ARM_USART_DATA_BITS_7: data_bits = UART_DATA_BITS_7; break;
    6068: 2302         	movs	r3, #0x2
    606a: 75fb         	strb	r3, [r7, #0x17]
    606c: e005         	b	0x607a <UartAsynchronousModeCtrl+0x7c> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1085
;         case ARM_USART_DATA_BITS_8: data_bits = UART_DATA_BITS_8; break;
    606e: 2303         	movs	r3, #0x3
    6070: 75fb         	strb	r3, [r7, #0x17]
    6072: e002         	b	0x607a <UartAsynchronousModeCtrl+0x7c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1086
;         default: return ARM_USART_ERROR_DATA_BITS;
    6074: f06f 0308    	mvn	r3, #0x8
    6078: e086         	b	0x6188 <UartAsynchronousModeCtrl+0x18a> @ imm = #0x10c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1090
;     switch (control & ARM_USART_PARITY_Msk)
    607a: 68bb         	ldr	r3, [r7, #0x8]
    607c: f403 5340    	and	r3, r3, #0x3000
    6080: f5b3 5f00    	cmp.w	r3, #0x2000
    6084: d00e         	beq	0x60a4 <UartAsynchronousModeCtrl+0xa6> @ imm = #0x1c
    6086: f5b3 5f00    	cmp.w	r3, #0x2000
    608a: d80e         	bhi	0x60aa <UartAsynchronousModeCtrl+0xac> @ imm = #0x1c
    608c: 2b00         	cmp	r3, #0x0
    608e: d003         	beq	0x6098 <UartAsynchronousModeCtrl+0x9a> @ imm = #0x6
    6090: f5b3 5f80    	cmp.w	r3, #0x1000
    6094: d003         	beq	0x609e <UartAsynchronousModeCtrl+0xa0> @ imm = #0x6
    6096: e008         	b	0x60aa <UartAsynchronousModeCtrl+0xac> @ imm = #0x10
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1092
;         case ARM_USART_PARITY_NONE: parity = UART_PARITY_NONE; break;
    6098: 2300         	movs	r3, #0x0
    609a: 75bb         	strb	r3, [r7, #0x16]
    609c: e008         	b	0x60b0 <UartAsynchronousModeCtrl+0xb2> @ imm = #0x10
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1093
;         case ARM_USART_PARITY_EVEN: parity = UART_PARITY_EVEN; break;
    609e: 2301         	movs	r3, #0x1
    60a0: 75bb         	strb	r3, [r7, #0x16]
    60a2: e005         	b	0x60b0 <UartAsynchronousModeCtrl+0xb2> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1094
;         case ARM_USART_PARITY_ODD:  parity = UART_PARITY_ODD;  break;
    60a4: 2302         	movs	r3, #0x2
    60a6: 75bb         	strb	r3, [r7, #0x16]
    60a8: e002         	b	0x60b0 <UartAsynchronousModeCtrl+0xb2> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1095
;         default: return ARM_USART_ERROR_PARITY;
    60aa: f06f 0309    	mvn	r3, #0x9
    60ae: e06b         	b	0x6188 <UartAsynchronousModeCtrl+0x18a> @ imm = #0xd6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1099
;     switch (control & ARM_USART_STOP_BITS_Msk)
    60b0: 68bb         	ldr	r3, [r7, #0x8]
    60b2: f403 4340    	and	r3, r3, #0xc000
    60b6: 2b00         	cmp	r3, #0x0
    60b8: d003         	beq	0x60c2 <UartAsynchronousModeCtrl+0xc4> @ imm = #0x6
    60ba: f5b3 4f80    	cmp.w	r3, #0x4000
    60be: d003         	beq	0x60c8 <UartAsynchronousModeCtrl+0xca> @ imm = #0x6
    60c0: e005         	b	0x60ce <UartAsynchronousModeCtrl+0xd0> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1101
;         case ARM_USART_STOP_BITS_1: stop_bits = UART_STOP_BITS_1; break;
    60c2: 2300         	movs	r3, #0x0
    60c4: 757b         	strb	r3, [r7, #0x15]
    60c6: e005         	b	0x60d4 <UartAsynchronousModeCtrl+0xd6> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1102
;         case ARM_USART_STOP_BITS_2: stop_bits = UART_STOP_BITS_2; break;
    60c8: 2301         	movs	r3, #0x1
    60ca: 757b         	strb	r3, [r7, #0x15]
    60cc: e002         	b	0x60d4 <UartAsynchronousModeCtrl+0xd6> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1103
;         default: return ARM_USART_ERROR_STOP_BITS;
    60ce: f06f 030a    	mvn	r3, #0xa
    60d2: e059         	b	0x6188 <UartAsynchronousModeCtrl+0x18a> @ imm = #0xb2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1107
;     uart_set_data_parity_stop_bits(uart->regs, data_bits, parity, stop_bits);
    60d4: 68fb         	ldr	r3, [r7, #0xc]
    60d6: 6818         	ldr	r0, [r3]
    60d8: 7d7b         	ldrb	r3, [r7, #0x15]
    60da: 7dba         	ldrb	r2, [r7, #0x16]
    60dc: 7df9         	ldrb	r1, [r7, #0x17]
    60de: f001 f99f    	bl	0x7420 <uart_set_data_parity_stop_bits> @ imm = #0x133e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1110
;     switch (control & ARM_USART_FLOW_CONTROL_Msk)
    60e2: 68bb         	ldr	r3, [r7, #0x8]
    60e4: f403 3340    	and	r3, r3, #0x30000
    60e8: f5b3 3f40    	cmp.w	r3, #0x30000
    60ec: d031         	beq	0x6152 <UartAsynchronousModeCtrl+0x154> @ imm = #0x62
    60ee: f5b3 3f40    	cmp.w	r3, #0x30000
    60f2: d83e         	bhi	0x6172 <UartAsynchronousModeCtrl+0x174> @ imm = #0x7c
    60f4: f5b3 3f00    	cmp.w	r3, #0x20000
    60f8: d01b         	beq	0x6132 <UartAsynchronousModeCtrl+0x134> @ imm = #0x36
    60fa: f5b3 3f00    	cmp.w	r3, #0x20000
    60fe: d838         	bhi	0x6172 <UartAsynchronousModeCtrl+0x174> @ imm = #0x70
    6100: 2b00         	cmp	r3, #0x0
    6102: d003         	beq	0x610c <UartAsynchronousModeCtrl+0x10e> @ imm = #0x6
    6104: f5b3 3f80    	cmp.w	r3, #0x10000
    6108: d003         	beq	0x6112 <UartAsynchronousModeCtrl+0x114> @ imm = #0x6
    610a: e032         	b	0x6172 <UartAsynchronousModeCtrl+0x174> @ imm = #0x64
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1113
;             flow_control = UART_FLOW_CONTROL_NONE;
    610c: 2300         	movs	r3, #0x0
    610e: 753b         	strb	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1114
;             break;
    6110: e032         	b	0x6178 <UartAsynchronousModeCtrl+0x17a> @ imm = #0x64
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1121
;             if( (uart->instance >= 4) && (uart->instance <= 7) )
    6112: 68fb         	ldr	r3, [r7, #0xc]
    6114: f893 3040    	ldrb.w	r3, [r3, #0x40]
    6118: 2b03         	cmp	r3, #0x3
    611a: d907         	bls	0x612c <UartAsynchronousModeCtrl+0x12e> @ imm = #0xe
    611c: 68fb         	ldr	r3, [r7, #0xc]
    611e: f893 3040    	ldrb.w	r3, [r3, #0x40]
    6122: 2b07         	cmp	r3, #0x7
    6124: d802         	bhi	0x612c <UartAsynchronousModeCtrl+0x12e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1122
;                 return ARM_USART_ERROR_FLOW_CONTROL;   /* Unsupported. */
    6126: f06f 030b    	mvn	r3, #0xb
    612a: e02d         	b	0x6188 <UartAsynchronousModeCtrl+0x18a> @ imm = #0x5a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1124
;             flow_control = UART_FLOW_CONTROL_RTS;
    612c: 2301         	movs	r3, #0x1
    612e: 753b         	strb	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1125
;             break;
    6130: e022         	b	0x6178 <UartAsynchronousModeCtrl+0x17a> @ imm = #0x44
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1132
;             if( (uart->instance >= 4) && (uart->instance <= 7) )
    6132: 68fb         	ldr	r3, [r7, #0xc]
    6134: f893 3040    	ldrb.w	r3, [r3, #0x40]
    6138: 2b03         	cmp	r3, #0x3
    613a: d907         	bls	0x614c <UartAsynchronousModeCtrl+0x14e> @ imm = #0xe
    613c: 68fb         	ldr	r3, [r7, #0xc]
    613e: f893 3040    	ldrb.w	r3, [r3, #0x40]
    6142: 2b07         	cmp	r3, #0x7
    6144: d802         	bhi	0x614c <UartAsynchronousModeCtrl+0x14e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1133
;                 return ARM_USART_ERROR_FLOW_CONTROL;   /* Unsupported. */
    6146: f06f 030b    	mvn	r3, #0xb
    614a: e01d         	b	0x6188 <UartAsynchronousModeCtrl+0x18a> @ imm = #0x3a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1135
;             flow_control = UART_FLOW_CONTROL_CTS;
    614c: 2302         	movs	r3, #0x2
    614e: 753b         	strb	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1136
;             break;
    6150: e012         	b	0x6178 <UartAsynchronousModeCtrl+0x17a> @ imm = #0x24
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1143
;             if( (uart->instance >= 4) && (uart->instance <= 7) )
    6152: 68fb         	ldr	r3, [r7, #0xc]
    6154: f893 3040    	ldrb.w	r3, [r3, #0x40]
    6158: 2b03         	cmp	r3, #0x3
    615a: d907         	bls	0x616c <UartAsynchronousModeCtrl+0x16e> @ imm = #0xe
    615c: 68fb         	ldr	r3, [r7, #0xc]
    615e: f893 3040    	ldrb.w	r3, [r3, #0x40]
    6162: 2b07         	cmp	r3, #0x7
    6164: d802         	bhi	0x616c <UartAsynchronousModeCtrl+0x16e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1144
;                 return ARM_USART_ERROR_FLOW_CONTROL;   /* Unsupported. */
    6166: f06f 030b    	mvn	r3, #0xb
    616a: e00d         	b	0x6188 <UartAsynchronousModeCtrl+0x18a> @ imm = #0x1a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1146
;             flow_control = UART_FLOW_CONTROL_RTS_CTS;
    616c: 2303         	movs	r3, #0x3
    616e: 753b         	strb	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1147
;             break;
    6170: e002         	b	0x6178 <UartAsynchronousModeCtrl+0x17a> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1149
;         default: return ARM_USART_ERROR_FLOW_CONTROL;
    6172: f06f 030b    	mvn	r3, #0xb
    6176: e007         	b	0x6188 <UartAsynchronousModeCtrl+0x18a> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1152
;     uart_set_flow_control(uart->regs, flow_control);
    6178: 68fb         	ldr	r3, [r7, #0xc]
    617a: 681b         	ldr	r3, [r3]
    617c: 7d3a         	ldrb	r2, [r7, #0x14]
    617e: 4611         	mov	r1, r2
    6180: 4618         	mov	r0, r3
    6182: f001 f9ab    	bl	0x74dc <uart_set_flow_control> @ imm = #0x1356
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1154
;     return ARM_DRIVER_OK;
    6186: 2300         	movs	r3, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1155
; }
    6188: 4618         	mov	r0, r3
    618a: 3718         	adds	r7, #0x18
    618c: 46bd         	mov	sp, r7
    618e: bd80         	pop	{r7, pc}

00006190 <ARM_USART_Control>:
; ARM_USART_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1173
; {
    6190: b580         	push	{r7, lr}
    6192: b086         	sub	sp, #0x18
    6194: af00         	add	r7, sp, #0x0
    6196: 60f8         	str	r0, [r7, #0xc]
    6198: 60b9         	str	r1, [r7, #0x8]
    619a: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1174
;     int32_t ret = ARM_DRIVER_OK;
    619c: 2300         	movs	r3, #0x0
    619e: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1177
;     if (uart->state.powered == 0)
    61a0: 687b         	ldr	r3, [r7, #0x4]
    61a2: 6a9b         	ldr	r3, [r3, #0x28]
    61a4: f3c3 0340    	ubfx	r3, r3, #0x1, #0x1
    61a8: b2db         	uxtb	r3, r3
    61aa: 2b00         	cmp	r3, #0x0
    61ac: d102         	bne	0x61b4 <ARM_USART_Control+0x24> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1178
;         return ARM_DRIVER_ERROR;
    61ae: f04f 33ff    	mov.w	r3, #0xffffffff
    61b2: e0d4         	b	0x635e <ARM_USART_Control+0x1ce> @ imm = #0x1a8
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1180
;     switch (control & ARM_USART_CONTROL_Msk)
    61b4: 68fb         	ldr	r3, [r7, #0xc]
    61b6: b2db         	uxtb	r3, r3
    61b8: 3b01         	subs	r3, #0x1
    61ba: 2b18         	cmp	r3, #0x18
    61bc: f200 80ca    	bhi.w	0x6354 <ARM_USART_Control+0x1c4> @ imm = #0x194
    61c0: a201         	adr	r2, #4 <ARM_USART_Control+0x35>
    61c2: f852 f023    	ldr.w	pc, [r2, r3, lsl #2]
    61c6: bf00         	nop
    61c8: 2d 62 00 00  	.word	0x0000622d
    61cc: 55 63 00 00  	.word	0x00006355
    61d0: 55 63 00 00  	.word	0x00006355
    61d4: 55 63 00 00  	.word	0x00006355
    61d8: 55 63 00 00  	.word	0x00006355
    61dc: 55 63 00 00  	.word	0x00006355
    61e0: 55 63 00 00  	.word	0x00006355
    61e4: 55 63 00 00  	.word	0x00006355
    61e8: 55 63 00 00  	.word	0x00006355
    61ec: 55 63 00 00  	.word	0x00006355
    61f0: 55 63 00 00  	.word	0x00006355
    61f4: 55 63 00 00  	.word	0x00006355
    61f8: 55 63 00 00  	.word	0x00006355
    61fc: 55 63 00 00  	.word	0x00006355
    6200: 55 63 00 00  	.word	0x00006355
    6204: 55 63 00 00  	.word	0x00006355
    6208: 55 63 00 00  	.word	0x00006355
    620c: 55 63 00 00  	.word	0x00006355
    6210: 55 63 00 00  	.word	0x00006355
    6214: 55 63 00 00  	.word	0x00006355
    6218: 3b 62 00 00  	.word	0x0000623b
    621c: 7b 62 00 00  	.word	0x0000627b
    6220: 37 63 00 00  	.word	0x00006337
    6224: bb 62 00 00  	.word	0x000062bb
    6228: f9 62 00 00  	.word	0x000062f9
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1188
;             ret = UartAsynchronousModeCtrl(uart, control, arg);
    622c: 68ba         	ldr	r2, [r7, #0x8]
    622e: 68f9         	ldr	r1, [r7, #0xc]
    6230: 6878         	ldr	r0, [r7, #0x4]
    6232: f7ff fee4    	bl	0x5ffe <UartAsynchronousModeCtrl> @ imm = #-0x238
    6236: 6178         	str	r0, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1189
;             break;
    6238: e090         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0x120
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1194
;             if (arg) /* uart enable transmitter */
    623a: 68bb         	ldr	r3, [r7, #0x8]
    623c: 2b00         	cmp	r3, #0x0
    623e: d016         	beq	0x626e <ARM_USART_Control+0xde> @ imm = #0x2c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1215
;                 if(uart->tx_fifo_trg_lvl > UART_TX_FIFO_HALF_FULL)
    6240: 687b         	ldr	r3, [r7, #0x4]
    6242: f893 3035    	ldrb.w	r3, [r3, #0x35]
    6246: 2b03         	cmp	r3, #0x3
    6248: d902         	bls	0x6250 <ARM_USART_Control+0xc0> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1216
;                     return ARM_DRIVER_ERROR_PARAMETER;
    624a: f06f 0304    	mvn	r3, #0x4
    624e: e086         	b	0x635e <ARM_USART_Control+0x1ce> @ imm = #0x10c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1220
;                 uart_set_tx_trigger(uart->regs, uart->tx_fifo_trg_lvl);
    6250: 687b         	ldr	r3, [r7, #0x4]
    6252: 681a         	ldr	r2, [r3]
    6254: 687b         	ldr	r3, [r7, #0x4]
    6256: f893 3035    	ldrb.w	r3, [r3, #0x35]
    625a: 4619         	mov	r1, r3
    625c: 4610         	mov	r0, r2
    625e: f7ff fb1b    	bl	0x5898 <uart_set_tx_trigger> @ imm = #-0x9ca
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1223
;                 uart->state.tx_enabled = 1;
    6262: 687a         	ldr	r2, [r7, #0x4]
    6264: 6a93         	ldr	r3, [r2, #0x28]
    6266: f043 0304    	orr	r3, r3, #0x4
    626a: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1249
;             break;
    626c: e076         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0xec
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1247
;                 uart->state.tx_enabled = 0;
    626e: 687a         	ldr	r2, [r7, #0x4]
    6270: 6a93         	ldr	r3, [r2, #0x28]
    6272: f023 0304    	bic	r3, r3, #0x4
    6276: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1249
;             break;
    6278: e070         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0xe0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1254
;             if (arg) /* uart enable receiver */
    627a: 68bb         	ldr	r3, [r7, #0x8]
    627c: 2b00         	cmp	r3, #0x0
    627e: d016         	beq	0x62ae <ARM_USART_Control+0x11e> @ imm = #0x2c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1275
;                 if(uart->rx_fifo_trg_lvl > UART_RX_FIFO_TWO_LESS_FULL)
    6280: 687b         	ldr	r3, [r7, #0x4]
    6282: f893 3036    	ldrb.w	r3, [r3, #0x36]
    6286: 2b03         	cmp	r3, #0x3
    6288: d902         	bls	0x6290 <ARM_USART_Control+0x100> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1276
;                     return ARM_DRIVER_ERROR_PARAMETER;
    628a: f06f 0304    	mvn	r3, #0x4
    628e: e066         	b	0x635e <ARM_USART_Control+0x1ce> @ imm = #0xcc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1280
;                 uart_set_rx_trigger(uart->regs, uart->rx_fifo_trg_lvl);
    6290: 687b         	ldr	r3, [r7, #0x4]
    6292: 681a         	ldr	r2, [r3]
    6294: 687b         	ldr	r3, [r7, #0x4]
    6296: f893 3036    	ldrb.w	r3, [r3, #0x36]
    629a: 4619         	mov	r1, r3
    629c: 4610         	mov	r0, r2
    629e: f7ff fb0b    	bl	0x58b8 <uart_set_rx_trigger> @ imm = #-0x9ea
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1283
;                 uart->state.rx_enabled = 1;
    62a2: 687a         	ldr	r2, [r7, #0x4]
    62a4: 6a93         	ldr	r3, [r2, #0x28]
    62a6: f043 0308    	orr	r3, r3, #0x8
    62aa: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1309
;             break;
    62ac: e056         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0xac
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1307
;                 uart->state.rx_enabled = 0;
    62ae: 687a         	ldr	r2, [r7, #0x4]
    62b0: 6a93         	ldr	r3, [r2, #0x28]
    62b2: f023 0308    	bic	r3, r3, #0x8
    62b6: 6293         	str	r3, [r2, #0x28]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1309
;             break;
    62b8: e050         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0xa0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1313
;             if (uart->state.tx_enabled == 0U)
    62ba: 687b         	ldr	r3, [r7, #0x4]
    62bc: 6a9b         	ldr	r3, [r3, #0x28]
    62be: f3c3 0380    	ubfx	r3, r3, #0x2, #0x1
    62c2: b2db         	uxtb	r3, r3
    62c4: 2b00         	cmp	r3, #0x0
    62c6: d102         	bne	0x62ce <ARM_USART_Control+0x13e> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1318
;                 return ARM_DRIVER_ERROR;
    62c8: f04f 33ff    	mov.w	r3, #0xffffffff
    62cc: e047         	b	0x635e <ARM_USART_Control+0x1ce> @ imm = #0x8e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1331
;             uart_disable_tx_irq(uart->regs);
    62ce: 687b         	ldr	r3, [r7, #0x4]
    62d0: 681b         	ldr	r3, [r3]
    62d2: 4618         	mov	r0, r3
    62d4: f7ff fb59    	bl	0x598a <uart_disable_tx_irq> @ imm = #-0x94e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1334
;             uart_reset_txfifo(uart->regs);
    62d8: 687b         	ldr	r3, [r7, #0x4]
    62da: 681b         	ldr	r3, [r3]
    62dc: 4618         	mov	r0, r3
    62de: f7ff fb28    	bl	0x5932 <uart_reset_txfifo> @ imm = #-0x9b0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1337
;             uart->status.tx_busy = UART_STATUS_FREE;
    62e2: 687a         	ldr	r2, [r7, #0x4]
    62e4: f892 3024    	ldrb.w	r3, [r2, #0x24]
    62e8: f023 0301    	bic	r3, r3, #0x1
    62ec: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1340
;             uart->transfer.tx_total_num = 0U;
    62f0: 687b         	ldr	r3, [r7, #0x4]
    62f2: 2200         	movs	r2, #0x0
    62f4: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1342
;             break;
    62f6: e031         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0x62
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1346
;             if (uart->state.rx_enabled == 0U)
    62f8: 687b         	ldr	r3, [r7, #0x4]
    62fa: 6a9b         	ldr	r3, [r3, #0x28]
    62fc: f3c3 03c0    	ubfx	r3, r3, #0x3, #0x1
    6300: b2db         	uxtb	r3, r3
    6302: 2b00         	cmp	r3, #0x0
    6304: d102         	bne	0x630c <ARM_USART_Control+0x17c> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1351
;                 return ARM_DRIVER_ERROR;
    6306: f04f 33ff    	mov.w	r3, #0xffffffff
    630a: e028         	b	0x635e <ARM_USART_Control+0x1ce> @ imm = #0x50
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1364
;             uart_disable_rx_irq(uart->regs);
    630c: 687b         	ldr	r3, [r7, #0x4]
    630e: 681b         	ldr	r3, [r3]
    6310: 4618         	mov	r0, r3
    6312: f7ff fb60    	bl	0x59d6 <uart_disable_rx_irq> @ imm = #-0x940
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1367
;             uart_reset_rxfifo(uart->regs);
    6316: 687b         	ldr	r3, [r7, #0x4]
    6318: 681b         	ldr	r3, [r3]
    631a: 4618         	mov	r0, r3
    631c: f7ff fb17    	bl	0x594e <uart_reset_rxfifo> @ imm = #-0x9d2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1370
;             uart->status.rx_busy = UART_STATUS_FREE;
    6320: 687a         	ldr	r2, [r7, #0x4]
    6322: f892 3024    	ldrb.w	r3, [r2, #0x24]
    6326: f023 0302    	bic	r3, r3, #0x2
    632a: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1373
;             uart->transfer.rx_total_num = 0U;
    632e: 687b         	ldr	r3, [r7, #0x4]
    6330: 2200         	movs	r2, #0x0
    6332: 619a         	str	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1375
;             break;
    6334: e012         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0x24
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1380
;             if (arg)
    6336: 68bb         	ldr	r3, [r7, #0x8]
    6338: 2b00         	cmp	r3, #0x0
    633a: d005         	beq	0x6348 <ARM_USART_Control+0x1b8> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1382
;                 uart_set_break_control(uart->regs);
    633c: 687b         	ldr	r3, [r7, #0x4]
    633e: 681b         	ldr	r3, [r3]
    6340: 4618         	mov	r0, r3
    6342: f7ff fac9    	bl	0x58d8 <uart_set_break_control> @ imm = #-0xa6e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1388
;             break;
    6346: e009         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0x12
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1386
;                 uart_clear_break_control(uart->regs);
    6348: 687b         	ldr	r3, [r7, #0x4]
    634a: 681b         	ldr	r3, [r3]
    634c: 4618         	mov	r0, r3
    634e: f7ff fad3    	bl	0x58f8 <uart_clear_break_control> @ imm = #-0xa5a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1388
;             break;
    6352: e003         	b	0x635c <ARM_USART_Control+0x1cc> @ imm = #0x6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1392
;             ret =  ARM_DRIVER_ERROR_UNSUPPORTED;
    6354: f06f 0303    	mvn	r3, #0x3
    6358: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1393
;             break;
    635a: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1395
;     return ret;
    635c: 697b         	ldr	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1396
; }
    635e: 4618         	mov	r0, r3
    6360: 3718         	adds	r7, #0x18
    6362: 46bd         	mov	sp, r7
    6364: bd80         	pop	{r7, pc}

00006366 <ARM_USART_GetStatus>:
; ARM_USART_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1406
; {
    6366: b480         	push	{r7}
    6368: b083         	sub	sp, #0xc
    636a: af00         	add	r7, sp, #0x0
    636c: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1407
;     return uart->status;
    636e: 687b         	ldr	r3, [r7, #0x4]
    6370: 6a5b         	ldr	r3, [r3, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1408
; }
    6372: 4618         	mov	r0, r3
    6374: 370c         	adds	r7, #0xc
    6376: 46bd         	mov	sp, r7
    6378: f85d 7b04    	ldr	r7, [sp], #4
    637c: 4770         	bx	lr

0000637e <ARM_USART_SetModemControl>:
; ARM_USART_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1421
; {
    637e: b480         	push	{r7}
    6380: b083         	sub	sp, #0xc
    6382: af00         	add	r7, sp, #0x0
    6384: 4603         	mov	r3, r0
    6386: 6039         	str	r1, [r7]
    6388: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1427
;     return ARM_DRIVER_ERROR_UNSUPPORTED;
    638a: f06f 0303    	mvn	r3, #0x3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1428
; }
    638e: 4618         	mov	r0, r3
    6390: 370c         	adds	r7, #0xc
    6392: 46bd         	mov	sp, r7
    6394: f85d 7b04    	ldr	r7, [sp], #4
    6398: 4770         	bx	lr

0000639a <ARM_USART_GetModemStatus>:
; ARM_USART_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1438
; {
    639a: b480         	push	{r7}
    639c: b085         	sub	sp, #0x14
    639e: af00         	add	r7, sp, #0x0
    63a0: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1443
;     ARM_USART_MODEM_STATUS status = {0, 0, 0, 0, 0};
    63a2: 2300         	movs	r3, #0x0
    63a4: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1444
;     return status;
    63a6: 68fb         	ldr	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1445
; }
    63a8: 4618         	mov	r0, r3
    63aa: 3714         	adds	r7, #0x14
    63ac: 46bd         	mov	sp, r7
    63ae: f85d 7b04    	ldr	r7, [sp], #4
    63b2: 4770         	bx	lr

000063b4 <UART_IRQHandler>:
; UART_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1454
; {
    63b4: b580         	push	{r7, lr}
    63b6: b084         	sub	sp, #0x10
    63b8: af00         	add	r7, sp, #0x0
    63ba: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1455
;     UART_TRANSFER *transfer = &(uart->transfer);
    63bc: 687b         	ldr	r3, [r7, #0x4]
    63be: 3308         	adds	r3, #0x8
    63c0: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1456
;     uint32_t cb_event = 0U;
    63c2: 2300         	movs	r3, #0x0
    63c4: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1458
;     uart_irq_handler(uart->regs, transfer);
    63c6: 687b         	ldr	r3, [r7, #0x4]
    63c8: 681b         	ldr	r3, [r3]
    63ca: 68b9         	ldr	r1, [r7, #0x8]
    63cc: 4618         	mov	r0, r3
    63ce: f001 f8bb    	bl	0x7548 <uart_irq_handler> @ imm = #0x1176
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1461
;     if(transfer->status & UART_TRANSFER_STATUS_ERROR)
    63d2: 68bb         	ldr	r3, [r7, #0x8]
    63d4: 7e1b         	ldrb	r3, [r3, #0x18]
    63d6: b2db         	uxtb	r3, r3
    63d8: f003 0308    	and	r3, r3, #0x8
    63dc: 2b00         	cmp	r3, #0x0
    63de: d051         	beq	0x6484 <UART_IRQHandler+0xd0> @ imm = #0xa2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1468
;         if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_BREAK)
    63e0: 68bb         	ldr	r3, [r7, #0x8]
    63e2: 7e1b         	ldrb	r3, [r3, #0x18]
    63e4: b2db         	uxtb	r3, r3
    63e6: b25b         	sxtb	r3, r3
    63e8: 2b00         	cmp	r3, #0x0
    63ea: da0a         	bge	0x6402 <UART_IRQHandler+0x4e> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1470
;             uart->status.rx_break = 1;
    63ec: 687a         	ldr	r2, [r7, #0x4]
    63ee: f892 3024    	ldrb.w	r3, [r2, #0x24]
    63f2: f043 0310    	orr	r3, r3, #0x10
    63f6: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1471
;             cb_event |= ARM_USART_EVENT_RX_BREAK;
    63fa: 68fb         	ldr	r3, [r7, #0xc]
    63fc: f043 0380    	orr	r3, r3, #0x80
    6400: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1474
;         if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_FRAMING)
    6402: 68bb         	ldr	r3, [r7, #0x8]
    6404: 7e1b         	ldrb	r3, [r3, #0x18]
    6406: b2db         	uxtb	r3, r3
    6408: f003 0340    	and	r3, r3, #0x40
    640c: 2b00         	cmp	r3, #0x0
    640e: d00a         	beq	0x6426 <UART_IRQHandler+0x72> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1476
;             uart->status.rx_framing_error = 1;
    6410: 687a         	ldr	r2, [r7, #0x4]
    6412: f892 3024    	ldrb.w	r3, [r2, #0x24]
    6416: f043 0320    	orr	r3, r3, #0x20
    641a: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1477
;             cb_event |= ARM_USART_EVENT_RX_FRAMING_ERROR;
    641e: 68fb         	ldr	r3, [r7, #0xc]
    6420: f443 7380    	orr	r3, r3, #0x100
    6424: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1480
;         if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_PARITY)
    6426: 68bb         	ldr	r3, [r7, #0x8]
    6428: 7e1b         	ldrb	r3, [r3, #0x18]
    642a: b2db         	uxtb	r3, r3
    642c: f003 0320    	and	r3, r3, #0x20
    6430: 2b00         	cmp	r3, #0x0
    6432: d00a         	beq	0x644a <UART_IRQHandler+0x96> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1482
;             uart->status.rx_parity_error = 1;
    6434: 687a         	ldr	r2, [r7, #0x4]
    6436: f892 3024    	ldrb.w	r3, [r2, #0x24]
    643a: f043 0340    	orr	r3, r3, #0x40
    643e: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1483
;             cb_event |= ARM_USART_EVENT_RX_PARITY_ERROR;
    6442: 68fb         	ldr	r3, [r7, #0xc]
    6444: f443 7300    	orr	r3, r3, #0x200
    6448: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1486
;         if(transfer->status & UART_TRANSFER_STATUS_ERROR_RX_OVERRUN)
    644a: 68bb         	ldr	r3, [r7, #0x8]
    644c: 7e1b         	ldrb	r3, [r3, #0x18]
    644e: b2db         	uxtb	r3, r3
    6450: f003 0310    	and	r3, r3, #0x10
    6454: 2b00         	cmp	r3, #0x0
    6456: d00a         	beq	0x646e <UART_IRQHandler+0xba> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1488
;             uart->status.rx_overflow = 1;
    6458: 687a         	ldr	r2, [r7, #0x4]
    645a: f892 3024    	ldrb.w	r3, [r2, #0x24]
    645e: f043 0308    	orr	r3, r3, #0x8
    6462: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1489
;             cb_event |= ARM_USART_EVENT_RX_OVERFLOW;
    6466: 68fb         	ldr	r3, [r7, #0xc]
    6468: f043 0320    	orr	r3, r3, #0x20
    646c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1493
;         transfer->status = UART_TRANSFER_STATUS_NONE;
    646e: 68bb         	ldr	r3, [r7, #0x8]
    6470: 2200         	movs	r2, #0x0
    6472: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1501
;         if(uart->cb_event)
    6474: 687b         	ldr	r3, [r7, #0x4]
    6476: 685b         	ldr	r3, [r3, #0x4]
    6478: 2b00         	cmp	r3, #0x0
    647a: d003         	beq	0x6484 <UART_IRQHandler+0xd0> @ imm = #0x6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1502
;             uart->cb_event(cb_event);
    647c: 687b         	ldr	r3, [r7, #0x4]
    647e: 685b         	ldr	r3, [r3, #0x4]
    6480: 68f8         	ldr	r0, [r7, #0xc]
    6482: 4798         	blx	r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1506
;     if(transfer->status & UART_TRANSFER_STATUS_SEND_COMPLETE)
    6484: 68bb         	ldr	r3, [r7, #0x8]
    6486: 7e1b         	ldrb	r3, [r3, #0x18]
    6488: b2db         	uxtb	r3, r3
    648a: f003 0301    	and	r3, r3, #0x1
    648e: 2b00         	cmp	r3, #0x0
    6490: d011         	beq	0x64b6 <UART_IRQHandler+0x102> @ imm = #0x22
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1509
;         transfer->status = UART_TRANSFER_STATUS_NONE;
    6492: 68bb         	ldr	r3, [r7, #0x8]
    6494: 2200         	movs	r2, #0x0
    6496: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1512
;         uart->status.tx_busy = UART_STATUS_FREE;
    6498: 687a         	ldr	r2, [r7, #0x4]
    649a: f892 3024    	ldrb.w	r3, [r2, #0x24]
    649e: f023 0301    	bic	r3, r3, #0x1
    64a2: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1515
;         if(uart->cb_event)
    64a6: 687b         	ldr	r3, [r7, #0x4]
    64a8: 685b         	ldr	r3, [r3, #0x4]
    64aa: 2b00         	cmp	r3, #0x0
    64ac: d003         	beq	0x64b6 <UART_IRQHandler+0x102> @ imm = #0x6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1516
;             uart->cb_event(ARM_USART_EVENT_SEND_COMPLETE);
    64ae: 687b         	ldr	r3, [r7, #0x4]
    64b0: 685b         	ldr	r3, [r3, #0x4]
    64b2: 2001         	movs	r0, #0x1
    64b4: 4798         	blx	r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1520
;     if(transfer->status & UART_TRANSFER_STATUS_RECEIVE_COMPLETE)
    64b6: 68bb         	ldr	r3, [r7, #0x8]
    64b8: 7e1b         	ldrb	r3, [r3, #0x18]
    64ba: b2db         	uxtb	r3, r3
    64bc: f003 0302    	and	r3, r3, #0x2
    64c0: 2b00         	cmp	r3, #0x0
    64c2: d011         	beq	0x64e8 <UART_IRQHandler+0x134> @ imm = #0x22
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1523
;         transfer->status = UART_TRANSFER_STATUS_NONE;
    64c4: 68bb         	ldr	r3, [r7, #0x8]
    64c6: 2200         	movs	r2, #0x0
    64c8: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1526
;         uart->status.rx_busy = UART_STATUS_FREE;
    64ca: 687a         	ldr	r2, [r7, #0x4]
    64cc: f892 3024    	ldrb.w	r3, [r2, #0x24]
    64d0: f023 0302    	bic	r3, r3, #0x2
    64d4: f882 3024    	strb.w	r3, [r2, #0x24]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1529
;         if(uart->cb_event)
    64d8: 687b         	ldr	r3, [r7, #0x4]
    64da: 685b         	ldr	r3, [r3, #0x4]
    64dc: 2b00         	cmp	r3, #0x0
    64de: d003         	beq	0x64e8 <UART_IRQHandler+0x134> @ imm = #0x6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1530
;             uart->cb_event(ARM_USART_EVENT_RECEIVE_COMPLETE);
    64e0: 687b         	ldr	r3, [r7, #0x4]
    64e2: 685b         	ldr	r3, [r3, #0x4]
    64e4: 2002         	movs	r0, #0x2
    64e6: 4798         	blx	r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1534
;     if(transfer->status & UART_TRANSFER_STATUS_RX_TIMEOUT)
    64e8: 68bb         	ldr	r3, [r7, #0x8]
    64ea: 7e1b         	ldrb	r3, [r3, #0x18]
    64ec: b2db         	uxtb	r3, r3
    64ee: f003 0304    	and	r3, r3, #0x4
    64f2: 2b00         	cmp	r3, #0x0
    64f4: d00a         	beq	0x650c <UART_IRQHandler+0x158> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1537
;         transfer->status = UART_TRANSFER_STATUS_NONE;
    64f6: 68bb         	ldr	r3, [r7, #0x8]
    64f8: 2200         	movs	r2, #0x0
    64fa: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1545
;         if(uart->cb_event)
    64fc: 687b         	ldr	r3, [r7, #0x4]
    64fe: 685b         	ldr	r3, [r3, #0x4]
    6500: 2b00         	cmp	r3, #0x0
    6502: d003         	beq	0x650c <UART_IRQHandler+0x158> @ imm = #0x6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1546
;             uart->cb_event(ARM_USART_EVENT_RX_TIMEOUT);
    6504: 687b         	ldr	r3, [r7, #0x4]
    6506: 685b         	ldr	r3, [r3, #0x4]
    6508: 2040         	movs	r0, #0x40
    650a: 4798         	blx	r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1548
; }
    650c: bf00         	nop
    650e: 3710         	adds	r7, #0x10
    6510: 46bd         	mov	sp, r7
    6512: bd80         	pop	{r7, pc}

00006514 <UART0_IRQHandler>:
; UART0_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1722
; {
    6514: b580         	push	{r7, lr}
    6516: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1723
;     UART_IRQHandler(&UART0);
    6518: 4802         	ldr	r0, [pc, #0x8]          @ 0x6524 <UART0_IRQHandler+0x10>
    651a: f7ff ff4b    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0x16a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1724
; }
    651e: bf00         	nop
    6520: bd80         	pop	{r7, pc}
    6522: bf00         	nop
    6524: 80 03 00 20  	.word	0x20000380

00006528 <UART0_Initialize>:
; UART0_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1739
; {
    6528: b580         	push	{r7, lr}
    652a: b082         	sub	sp, #0x8
    652c: af00         	add	r7, sp, #0x0
    652e: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1740
;     return (ARM_USART_Initialize(cb_event,  &UART0));
    6530: 4904         	ldr	r1, [pc, #0x10]         @ 0x6544 <UART0_Initialize+0x1c>
    6532: 6878         	ldr	r0, [r7, #0x4]
    6534: f7ff fbc2    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0x87c
    6538: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1741
; }
    653a: 4618         	mov	r0, r3
    653c: 3708         	adds	r7, #0x8
    653e: 46bd         	mov	sp, r7
    6540: bd80         	pop	{r7, pc}
    6542: bf00         	nop
    6544: 80 03 00 20  	.word	0x20000380

00006548 <UART0_Uninitialize>:
; UART0_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1744
; {
    6548: b580         	push	{r7, lr}
    654a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1745
;     return (ARM_USART_Uninitialize(&UART0));
    654c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6558 <UART0_Uninitialize+0x10>
    654e: f7ff fc0e    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0x7e4
    6552: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1746
; }
    6554: 4618         	mov	r0, r3
    6556: bd80         	pop	{r7, pc}
    6558: 80 03 00 20  	.word	0x20000380

0000655c <UART0_PowerControl>:
; UART0_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1749
; {
    655c: b580         	push	{r7, lr}
    655e: b082         	sub	sp, #0x8
    6560: af00         	add	r7, sp, #0x0
    6562: 4603         	mov	r3, r0
    6564: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1750
;     return (ARM_USART_PowerControl(state, &UART0));
    6566: 79fb         	ldrb	r3, [r7, #0x7]
    6568: 4904         	ldr	r1, [pc, #0x10]         @ 0x657c <UART0_PowerControl+0x20>
    656a: 4618         	mov	r0, r3
    656c: f7ff faf2    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0xa1c
    6570: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1751
; }
    6572: 4618         	mov	r0, r3
    6574: 3708         	adds	r7, #0x8
    6576: 46bd         	mov	sp, r7
    6578: bd80         	pop	{r7, pc}
    657a: bf00         	nop
    657c: 80 03 00 20  	.word	0x20000380

00006580 <UART0_Send>:
; UART0_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1754
; {
    6580: b580         	push	{r7, lr}
    6582: b082         	sub	sp, #0x8
    6584: af00         	add	r7, sp, #0x0
    6586: 6078         	str	r0, [r7, #0x4]
    6588: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1755
;     return (ARM_USART_Send(p_data, num , &UART0));
    658a: 4a05         	ldr	r2, [pc, #0x14]         @ 0x65a0 <UART0_Send+0x20>
    658c: 6839         	ldr	r1, [r7]
    658e: 6878         	ldr	r0, [r7, #0x4]
    6590: f7ff fc62    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0x73c
    6594: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1756
; }
    6596: 4618         	mov	r0, r3
    6598: 3708         	adds	r7, #0x8
    659a: 46bd         	mov	sp, r7
    659c: bd80         	pop	{r7, pc}
    659e: bf00         	nop
    65a0: 80 03 00 20  	.word	0x20000380

000065a4 <UART0_Receive>:
; UART0_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1759
; {
    65a4: b580         	push	{r7, lr}
    65a6: b082         	sub	sp, #0x8
    65a8: af00         	add	r7, sp, #0x0
    65aa: 6078         	str	r0, [r7, #0x4]
    65ac: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1760
;     return (ARM_USART_Receive(p_data, num, &UART0));
    65ae: 4a05         	ldr	r2, [pc, #0x14]         @ 0x65c4 <UART0_Receive+0x20>
    65b0: 6839         	ldr	r1, [r7]
    65b2: 6878         	ldr	r0, [r7, #0x4]
    65b4: f7ff fc98    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0x6d0
    65b8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1761
; }
    65ba: 4618         	mov	r0, r3
    65bc: 3708         	adds	r7, #0x8
    65be: 46bd         	mov	sp, r7
    65c0: bd80         	pop	{r7, pc}
    65c2: bf00         	nop
    65c4: 80 03 00 20  	.word	0x20000380

000065c8 <UART0_Transfer>:
; UART0_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1764
; {
    65c8: b580         	push	{r7, lr}
    65ca: b084         	sub	sp, #0x10
    65cc: af00         	add	r7, sp, #0x0
    65ce: 60f8         	str	r0, [r7, #0xc]
    65d0: 60b9         	str	r1, [r7, #0x8]
    65d2: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1765
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART0));
    65d4: 4b05         	ldr	r3, [pc, #0x14]         @ 0x65ec <UART0_Transfer+0x24>
    65d6: 687a         	ldr	r2, [r7, #0x4]
    65d8: 68b9         	ldr	r1, [r7, #0x8]
    65da: 68f8         	ldr	r0, [r7, #0xc]
    65dc: f7ff fce8    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0x630
    65e0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1766
; }
    65e2: 4618         	mov	r0, r3
    65e4: 3710         	adds	r7, #0x10
    65e6: 46bd         	mov	sp, r7
    65e8: bd80         	pop	{r7, pc}
    65ea: bf00         	nop
    65ec: 80 03 00 20  	.word	0x20000380

000065f0 <UART0_GetTxCount>:
; UART0_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1769
; {
    65f0: b580         	push	{r7, lr}
    65f2: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1770
;     return (ARM_USART_GetTxCount(&UART0));
    65f4: 4802         	ldr	r0, [pc, #0x8]          @ 0x6600 <UART0_GetTxCount+0x10>
    65f6: f7ff fcea    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0x62c
    65fa: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1771
; }
    65fc: 4618         	mov	r0, r3
    65fe: bd80         	pop	{r7, pc}
    6600: 80 03 00 20  	.word	0x20000380

00006604 <UART0_GetRxCount>:
; UART0_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1774
; {
    6604: b580         	push	{r7, lr}
    6606: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1775
;     return (ARM_USART_GetRxCount(&UART0));
    6608: 4802         	ldr	r0, [pc, #0x8]          @ 0x6614 <UART0_GetRxCount+0x10>
    660a: f7ff fcec    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0x628
    660e: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1776
; }
    6610: 4618         	mov	r0, r3
    6612: bd80         	pop	{r7, pc}
    6614: 80 03 00 20  	.word	0x20000380

00006618 <UART0_Control>:
; UART0_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1779
; {
    6618: b580         	push	{r7, lr}
    661a: b082         	sub	sp, #0x8
    661c: af00         	add	r7, sp, #0x0
    661e: 6078         	str	r0, [r7, #0x4]
    6620: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1780
;     return (ARM_USART_Control(control, arg, &UART0));
    6622: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6638 <UART0_Control+0x20>
    6624: 6839         	ldr	r1, [r7]
    6626: 6878         	ldr	r0, [r7, #0x4]
    6628: f7ff fdb2    	bl	0x6190 <ARM_USART_Control> @ imm = #-0x49c
    662c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1781
; }
    662e: 4618         	mov	r0, r3
    6630: 3708         	adds	r7, #0x8
    6632: 46bd         	mov	sp, r7
    6634: bd80         	pop	{r7, pc}
    6636: bf00         	nop
    6638: 80 03 00 20  	.word	0x20000380

0000663c <UART0_GetStatus>:
; UART0_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1784
; {
    663c: b580         	push	{r7, lr}
    663e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1785
;     return (ARM_USART_GetStatus(&UART0));
    6640: 4802         	ldr	r0, [pc, #0x8]          @ 0x664c <UART0_GetStatus+0x10>
    6642: f7ff fe90    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0x2e0
    6646: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1786
; }
    6648: 4618         	mov	r0, r3
    664a: bd80         	pop	{r7, pc}
    664c: 80 03 00 20  	.word	0x20000380

00006650 <UART0_GetModemStatus>:
; UART0_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1789
; {
    6650: b580         	push	{r7, lr}
    6652: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1790
;     return (ARM_USART_GetModemStatus(&UART0));
    6654: 4802         	ldr	r0, [pc, #0x8]          @ 0x6660 <UART0_GetModemStatus+0x10>
    6656: f7ff fea0    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0x2c0
    665a: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1791
; }
    665c: 4618         	mov	r0, r3
    665e: bd80         	pop	{r7, pc}
    6660: 80 03 00 20  	.word	0x20000380

00006664 <UART0_SetModemControl>:
; UART0_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1794
; {
    6664: b580         	push	{r7, lr}
    6666: b082         	sub	sp, #0x8
    6668: af00         	add	r7, sp, #0x0
    666a: 4603         	mov	r3, r0
    666c: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1795
;     return (ARM_USART_SetModemControl(control, &UART0));
    666e: 79fb         	ldrb	r3, [r7, #0x7]
    6670: 4904         	ldr	r1, [pc, #0x10]         @ 0x6684 <UART0_SetModemControl+0x20>
    6672: 4618         	mov	r0, r3
    6674: f7ff fe83    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0x2fa
    6678: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1796
; }
    667a: 4618         	mov	r0, r3
    667c: 3708         	adds	r7, #0x8
    667e: 46bd         	mov	sp, r7
    6680: bd80         	pop	{r7, pc}
    6682: bf00         	nop
    6684: 80 03 00 20  	.word	0x20000380

00006688 <UART1_IRQHandler>:
; UART1_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1890
; {
    6688: b580         	push	{r7, lr}
    668a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1891
;     UART_IRQHandler(&UART1);
    668c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6698 <UART1_IRQHandler+0x10>
    668e: f7ff fe91    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0x2de
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1892
; }
    6692: bf00         	nop
    6694: bd80         	pop	{r7, pc}
    6696: bf00         	nop
    6698: c4 03 00 20  	.word	0x200003c4

0000669c <UART1_Initialize>:
; UART1_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1907
; {
    669c: b580         	push	{r7, lr}
    669e: b082         	sub	sp, #0x8
    66a0: af00         	add	r7, sp, #0x0
    66a2: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1908
;     return (ARM_USART_Initialize(cb_event,  &UART1));
    66a4: 4904         	ldr	r1, [pc, #0x10]         @ 0x66b8 <UART1_Initialize+0x1c>
    66a6: 6878         	ldr	r0, [r7, #0x4]
    66a8: f7ff fb08    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0x9f0
    66ac: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1909
; }
    66ae: 4618         	mov	r0, r3
    66b0: 3708         	adds	r7, #0x8
    66b2: 46bd         	mov	sp, r7
    66b4: bd80         	pop	{r7, pc}
    66b6: bf00         	nop
    66b8: c4 03 00 20  	.word	0x200003c4

000066bc <UART1_Uninitialize>:
; UART1_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1912
; {
    66bc: b580         	push	{r7, lr}
    66be: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1913
;     return (ARM_USART_Uninitialize(&UART1));
    66c0: 4802         	ldr	r0, [pc, #0x8]          @ 0x66cc <UART1_Uninitialize+0x10>
    66c2: f7ff fb54    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0x958
    66c6: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1914
; }
    66c8: 4618         	mov	r0, r3
    66ca: bd80         	pop	{r7, pc}
    66cc: c4 03 00 20  	.word	0x200003c4

000066d0 <UART1_PowerControl>:
; UART1_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1917
; {
    66d0: b580         	push	{r7, lr}
    66d2: b082         	sub	sp, #0x8
    66d4: af00         	add	r7, sp, #0x0
    66d6: 4603         	mov	r3, r0
    66d8: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1918
;     return (ARM_USART_PowerControl(state, &UART1));
    66da: 79fb         	ldrb	r3, [r7, #0x7]
    66dc: 4904         	ldr	r1, [pc, #0x10]         @ 0x66f0 <UART1_PowerControl+0x20>
    66de: 4618         	mov	r0, r3
    66e0: f7ff fa38    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0xb90
    66e4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1919
; }
    66e6: 4618         	mov	r0, r3
    66e8: 3708         	adds	r7, #0x8
    66ea: 46bd         	mov	sp, r7
    66ec: bd80         	pop	{r7, pc}
    66ee: bf00         	nop
    66f0: c4 03 00 20  	.word	0x200003c4

000066f4 <UART1_Send>:
; UART1_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1922
; {
    66f4: b580         	push	{r7, lr}
    66f6: b082         	sub	sp, #0x8
    66f8: af00         	add	r7, sp, #0x0
    66fa: 6078         	str	r0, [r7, #0x4]
    66fc: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1923
;     return (ARM_USART_Send(p_data, num , &UART1));
    66fe: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6714 <UART1_Send+0x20>
    6700: 6839         	ldr	r1, [r7]
    6702: 6878         	ldr	r0, [r7, #0x4]
    6704: f7ff fba8    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0x8b0
    6708: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1924
; }
    670a: 4618         	mov	r0, r3
    670c: 3708         	adds	r7, #0x8
    670e: 46bd         	mov	sp, r7
    6710: bd80         	pop	{r7, pc}
    6712: bf00         	nop
    6714: c4 03 00 20  	.word	0x200003c4

00006718 <UART1_Receive>:
; UART1_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1927
; {
    6718: b580         	push	{r7, lr}
    671a: b082         	sub	sp, #0x8
    671c: af00         	add	r7, sp, #0x0
    671e: 6078         	str	r0, [r7, #0x4]
    6720: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1928
;     return (ARM_USART_Receive(p_data, num, &UART1));
    6722: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6738 <UART1_Receive+0x20>
    6724: 6839         	ldr	r1, [r7]
    6726: 6878         	ldr	r0, [r7, #0x4]
    6728: f7ff fbde    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0x844
    672c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1929
; }
    672e: 4618         	mov	r0, r3
    6730: 3708         	adds	r7, #0x8
    6732: 46bd         	mov	sp, r7
    6734: bd80         	pop	{r7, pc}
    6736: bf00         	nop
    6738: c4 03 00 20  	.word	0x200003c4

0000673c <UART1_Transfer>:
; UART1_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1932
; {
    673c: b580         	push	{r7, lr}
    673e: b084         	sub	sp, #0x10
    6740: af00         	add	r7, sp, #0x0
    6742: 60f8         	str	r0, [r7, #0xc]
    6744: 60b9         	str	r1, [r7, #0x8]
    6746: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1933
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART1));
    6748: 4b05         	ldr	r3, [pc, #0x14]         @ 0x6760 <UART1_Transfer+0x24>
    674a: 687a         	ldr	r2, [r7, #0x4]
    674c: 68b9         	ldr	r1, [r7, #0x8]
    674e: 68f8         	ldr	r0, [r7, #0xc]
    6750: f7ff fc2e    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0x7a4
    6754: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1934
; }
    6756: 4618         	mov	r0, r3
    6758: 3710         	adds	r7, #0x10
    675a: 46bd         	mov	sp, r7
    675c: bd80         	pop	{r7, pc}
    675e: bf00         	nop
    6760: c4 03 00 20  	.word	0x200003c4

00006764 <UART1_GetTxCount>:
; UART1_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1937
; {
    6764: b580         	push	{r7, lr}
    6766: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1938
;     return (ARM_USART_GetTxCount(&UART1));
    6768: 4802         	ldr	r0, [pc, #0x8]          @ 0x6774 <UART1_GetTxCount+0x10>
    676a: f7ff fc30    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0x7a0
    676e: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1939
; }
    6770: 4618         	mov	r0, r3
    6772: bd80         	pop	{r7, pc}
    6774: c4 03 00 20  	.word	0x200003c4

00006778 <UART1_GetRxCount>:
; UART1_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1942
; {
    6778: b580         	push	{r7, lr}
    677a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1943
;     return (ARM_USART_GetRxCount(&UART1));
    677c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6788 <UART1_GetRxCount+0x10>
    677e: f7ff fc32    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0x79c
    6782: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1944
; }
    6784: 4618         	mov	r0, r3
    6786: bd80         	pop	{r7, pc}
    6788: c4 03 00 20  	.word	0x200003c4

0000678c <UART1_Control>:
; UART1_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1947
; {
    678c: b580         	push	{r7, lr}
    678e: b082         	sub	sp, #0x8
    6790: af00         	add	r7, sp, #0x0
    6792: 6078         	str	r0, [r7, #0x4]
    6794: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1948
;     return (ARM_USART_Control(control, arg, &UART1));
    6796: 4a05         	ldr	r2, [pc, #0x14]         @ 0x67ac <UART1_Control+0x20>
    6798: 6839         	ldr	r1, [r7]
    679a: 6878         	ldr	r0, [r7, #0x4]
    679c: f7ff fcf8    	bl	0x6190 <ARM_USART_Control> @ imm = #-0x610
    67a0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1949
; }
    67a2: 4618         	mov	r0, r3
    67a4: 3708         	adds	r7, #0x8
    67a6: 46bd         	mov	sp, r7
    67a8: bd80         	pop	{r7, pc}
    67aa: bf00         	nop
    67ac: c4 03 00 20  	.word	0x200003c4

000067b0 <UART1_GetStatus>:
; UART1_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1952
; {
    67b0: b580         	push	{r7, lr}
    67b2: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1953
;     return (ARM_USART_GetStatus(&UART1));
    67b4: 4802         	ldr	r0, [pc, #0x8]          @ 0x67c0 <UART1_GetStatus+0x10>
    67b6: f7ff fdd6    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0x454
    67ba: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1954
; }
    67bc: 4618         	mov	r0, r3
    67be: bd80         	pop	{r7, pc}
    67c0: c4 03 00 20  	.word	0x200003c4

000067c4 <UART1_GetModemStatus>:
; UART1_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1957
; {
    67c4: b580         	push	{r7, lr}
    67c6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1958
;     return (ARM_USART_GetModemStatus(&UART1));
    67c8: 4802         	ldr	r0, [pc, #0x8]          @ 0x67d4 <UART1_GetModemStatus+0x10>
    67ca: f7ff fde6    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0x434
    67ce: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1959
; }
    67d0: 4618         	mov	r0, r3
    67d2: bd80         	pop	{r7, pc}
    67d4: c4 03 00 20  	.word	0x200003c4

000067d8 <UART1_SetModemControl>:
; UART1_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1962
; {
    67d8: b580         	push	{r7, lr}
    67da: b082         	sub	sp, #0x8
    67dc: af00         	add	r7, sp, #0x0
    67de: 4603         	mov	r3, r0
    67e0: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1963
;     return (ARM_USART_SetModemControl(control, &UART1));
    67e2: 79fb         	ldrb	r3, [r7, #0x7]
    67e4: 4904         	ldr	r1, [pc, #0x10]         @ 0x67f8 <UART1_SetModemControl+0x20>
    67e6: 4618         	mov	r0, r3
    67e8: f7ff fdc9    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0x46e
    67ec: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:1964
; }
    67ee: 4618         	mov	r0, r3
    67f0: 3708         	adds	r7, #0x8
    67f2: 46bd         	mov	sp, r7
    67f4: bd80         	pop	{r7, pc}
    67f6: bf00         	nop
    67f8: c4 03 00 20  	.word	0x200003c4

000067fc <UART2_IRQHandler>:
; UART2_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2059
; {
    67fc: b580         	push	{r7, lr}
    67fe: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2060
;     UART_IRQHandler(&UART2);
    6800: 4802         	ldr	r0, [pc, #0x8]          @ 0x680c <UART2_IRQHandler+0x10>
    6802: f7ff fdd7    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0x452
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2061
; }
    6806: bf00         	nop
    6808: bd80         	pop	{r7, pc}
    680a: bf00         	nop
    680c: 08 04 00 20  	.word	0x20000408

00006810 <UART2_Initialize>:
; UART2_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2076
; {
    6810: b580         	push	{r7, lr}
    6812: b082         	sub	sp, #0x8
    6814: af00         	add	r7, sp, #0x0
    6816: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2077
;     return (ARM_USART_Initialize(cb_event,  &UART2));
    6818: 4904         	ldr	r1, [pc, #0x10]         @ 0x682c <UART2_Initialize+0x1c>
    681a: 6878         	ldr	r0, [r7, #0x4]
    681c: f7ff fa4e    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0xb64
    6820: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2078
; }
    6822: 4618         	mov	r0, r3
    6824: 3708         	adds	r7, #0x8
    6826: 46bd         	mov	sp, r7
    6828: bd80         	pop	{r7, pc}
    682a: bf00         	nop
    682c: 08 04 00 20  	.word	0x20000408

00006830 <UART2_Uninitialize>:
; UART2_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2081
; {
    6830: b580         	push	{r7, lr}
    6832: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2082
;     return (ARM_USART_Uninitialize(&UART2));
    6834: 4802         	ldr	r0, [pc, #0x8]          @ 0x6840 <UART2_Uninitialize+0x10>
    6836: f7ff fa9a    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0xacc
    683a: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2083
; }
    683c: 4618         	mov	r0, r3
    683e: bd80         	pop	{r7, pc}
    6840: 08 04 00 20  	.word	0x20000408

00006844 <UART2_PowerControl>:
; UART2_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2086
; {
    6844: b580         	push	{r7, lr}
    6846: b082         	sub	sp, #0x8
    6848: af00         	add	r7, sp, #0x0
    684a: 4603         	mov	r3, r0
    684c: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2087
;     return (ARM_USART_PowerControl(state, &UART2));
    684e: 79fb         	ldrb	r3, [r7, #0x7]
    6850: 4904         	ldr	r1, [pc, #0x10]         @ 0x6864 <UART2_PowerControl+0x20>
    6852: 4618         	mov	r0, r3
    6854: f7ff f97e    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0xd04
    6858: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2088
; }
    685a: 4618         	mov	r0, r3
    685c: 3708         	adds	r7, #0x8
    685e: 46bd         	mov	sp, r7
    6860: bd80         	pop	{r7, pc}
    6862: bf00         	nop
    6864: 08 04 00 20  	.word	0x20000408

00006868 <UART2_Send>:
; UART2_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2091
; {
    6868: b580         	push	{r7, lr}
    686a: b082         	sub	sp, #0x8
    686c: af00         	add	r7, sp, #0x0
    686e: 6078         	str	r0, [r7, #0x4]
    6870: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2092
;     return (ARM_USART_Send(p_data, num , &UART2));
    6872: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6888 <UART2_Send+0x20>
    6874: 6839         	ldr	r1, [r7]
    6876: 6878         	ldr	r0, [r7, #0x4]
    6878: f7ff faee    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0xa24
    687c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2093
; }
    687e: 4618         	mov	r0, r3
    6880: 3708         	adds	r7, #0x8
    6882: 46bd         	mov	sp, r7
    6884: bd80         	pop	{r7, pc}
    6886: bf00         	nop
    6888: 08 04 00 20  	.word	0x20000408

0000688c <UART2_Receive>:
; UART2_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2096
; {
    688c: b580         	push	{r7, lr}
    688e: b082         	sub	sp, #0x8
    6890: af00         	add	r7, sp, #0x0
    6892: 6078         	str	r0, [r7, #0x4]
    6894: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2097
;     return (ARM_USART_Receive(p_data, num, &UART2));
    6896: 4a05         	ldr	r2, [pc, #0x14]         @ 0x68ac <UART2_Receive+0x20>
    6898: 6839         	ldr	r1, [r7]
    689a: 6878         	ldr	r0, [r7, #0x4]
    689c: f7ff fb24    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0x9b8
    68a0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2098
; }
    68a2: 4618         	mov	r0, r3
    68a4: 3708         	adds	r7, #0x8
    68a6: 46bd         	mov	sp, r7
    68a8: bd80         	pop	{r7, pc}
    68aa: bf00         	nop
    68ac: 08 04 00 20  	.word	0x20000408

000068b0 <UART2_Transfer>:
; UART2_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2101
; {
    68b0: b580         	push	{r7, lr}
    68b2: b084         	sub	sp, #0x10
    68b4: af00         	add	r7, sp, #0x0
    68b6: 60f8         	str	r0, [r7, #0xc]
    68b8: 60b9         	str	r1, [r7, #0x8]
    68ba: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2102
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART2));
    68bc: 4b05         	ldr	r3, [pc, #0x14]         @ 0x68d4 <UART2_Transfer+0x24>
    68be: 687a         	ldr	r2, [r7, #0x4]
    68c0: 68b9         	ldr	r1, [r7, #0x8]
    68c2: 68f8         	ldr	r0, [r7, #0xc]
    68c4: f7ff fb74    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0x918
    68c8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2103
; }
    68ca: 4618         	mov	r0, r3
    68cc: 3710         	adds	r7, #0x10
    68ce: 46bd         	mov	sp, r7
    68d0: bd80         	pop	{r7, pc}
    68d2: bf00         	nop
    68d4: 08 04 00 20  	.word	0x20000408

000068d8 <UART2_GetTxCount>:
; UART2_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2106
; {
    68d8: b580         	push	{r7, lr}
    68da: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2107
;     return (ARM_USART_GetTxCount(&UART2));
    68dc: 4802         	ldr	r0, [pc, #0x8]          @ 0x68e8 <UART2_GetTxCount+0x10>
    68de: f7ff fb76    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0x914
    68e2: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2108
; }
    68e4: 4618         	mov	r0, r3
    68e6: bd80         	pop	{r7, pc}
    68e8: 08 04 00 20  	.word	0x20000408

000068ec <UART2_GetRxCount>:
; UART2_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2111
; {
    68ec: b580         	push	{r7, lr}
    68ee: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2112
;     return (ARM_USART_GetRxCount(&UART2));
    68f0: 4802         	ldr	r0, [pc, #0x8]          @ 0x68fc <UART2_GetRxCount+0x10>
    68f2: f7ff fb78    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0x910
    68f6: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2113
; }
    68f8: 4618         	mov	r0, r3
    68fa: bd80         	pop	{r7, pc}
    68fc: 08 04 00 20  	.word	0x20000408

00006900 <UART2_Control>:
; UART2_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2116
; {
    6900: b580         	push	{r7, lr}
    6902: b082         	sub	sp, #0x8
    6904: af00         	add	r7, sp, #0x0
    6906: 6078         	str	r0, [r7, #0x4]
    6908: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2117
;     return (ARM_USART_Control(control, arg, &UART2));
    690a: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6920 <UART2_Control+0x20>
    690c: 6839         	ldr	r1, [r7]
    690e: 6878         	ldr	r0, [r7, #0x4]
    6910: f7ff fc3e    	bl	0x6190 <ARM_USART_Control> @ imm = #-0x784
    6914: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2118
; }
    6916: 4618         	mov	r0, r3
    6918: 3708         	adds	r7, #0x8
    691a: 46bd         	mov	sp, r7
    691c: bd80         	pop	{r7, pc}
    691e: bf00         	nop
    6920: 08 04 00 20  	.word	0x20000408

00006924 <UART2_GetStatus>:
; UART2_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2121
; {
    6924: b580         	push	{r7, lr}
    6926: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2122
;     return (ARM_USART_GetStatus(&UART2));
    6928: 4802         	ldr	r0, [pc, #0x8]          @ 0x6934 <UART2_GetStatus+0x10>
    692a: f7ff fd1c    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0x5c8
    692e: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2123
; }
    6930: 4618         	mov	r0, r3
    6932: bd80         	pop	{r7, pc}
    6934: 08 04 00 20  	.word	0x20000408

00006938 <UART2_GetModemStatus>:
; UART2_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2126
; {
    6938: b580         	push	{r7, lr}
    693a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2127
;     return (ARM_USART_GetModemStatus(&UART2));
    693c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6948 <UART2_GetModemStatus+0x10>
    693e: f7ff fd2c    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0x5a8
    6942: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2128
; }
    6944: 4618         	mov	r0, r3
    6946: bd80         	pop	{r7, pc}
    6948: 08 04 00 20  	.word	0x20000408

0000694c <UART2_SetModemControl>:
; UART2_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2131
; {
    694c: b580         	push	{r7, lr}
    694e: b082         	sub	sp, #0x8
    6950: af00         	add	r7, sp, #0x0
    6952: 4603         	mov	r3, r0
    6954: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2132
;     return (ARM_USART_SetModemControl(control, &UART2));
    6956: 79fb         	ldrb	r3, [r7, #0x7]
    6958: 4904         	ldr	r1, [pc, #0x10]         @ 0x696c <UART2_SetModemControl+0x20>
    695a: 4618         	mov	r0, r3
    695c: f7ff fd0f    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0x5e2
    6960: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2133
; }
    6962: 4618         	mov	r0, r3
    6964: 3708         	adds	r7, #0x8
    6966: 46bd         	mov	sp, r7
    6968: bd80         	pop	{r7, pc}
    696a: bf00         	nop
    696c: 08 04 00 20  	.word	0x20000408

00006970 <UART3_IRQHandler>:
; UART3_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2227
; {
    6970: b580         	push	{r7, lr}
    6972: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2228
;     UART_IRQHandler(&UART3);
    6974: 4802         	ldr	r0, [pc, #0x8]          @ 0x6980 <UART3_IRQHandler+0x10>
    6976: f7ff fd1d    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0x5c6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2229
; }
    697a: bf00         	nop
    697c: bd80         	pop	{r7, pc}
    697e: bf00         	nop
    6980: 4c 04 00 20  	.word	0x2000044c

00006984 <UART3_Initialize>:
; UART3_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2244
; {
    6984: b580         	push	{r7, lr}
    6986: b082         	sub	sp, #0x8
    6988: af00         	add	r7, sp, #0x0
    698a: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2245
;     return (ARM_USART_Initialize(cb_event,  &UART3));
    698c: 4904         	ldr	r1, [pc, #0x10]         @ 0x69a0 <UART3_Initialize+0x1c>
    698e: 6878         	ldr	r0, [r7, #0x4]
    6990: f7ff f994    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0xcd8
    6994: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2246
; }
    6996: 4618         	mov	r0, r3
    6998: 3708         	adds	r7, #0x8
    699a: 46bd         	mov	sp, r7
    699c: bd80         	pop	{r7, pc}
    699e: bf00         	nop
    69a0: 4c 04 00 20  	.word	0x2000044c

000069a4 <UART3_Uninitialize>:
; UART3_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2249
; {
    69a4: b580         	push	{r7, lr}
    69a6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2250
;     return (ARM_USART_Uninitialize(&UART3));
    69a8: 4802         	ldr	r0, [pc, #0x8]          @ 0x69b4 <UART3_Uninitialize+0x10>
    69aa: f7ff f9e0    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0xc40
    69ae: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2251
; }
    69b0: 4618         	mov	r0, r3
    69b2: bd80         	pop	{r7, pc}
    69b4: 4c 04 00 20  	.word	0x2000044c

000069b8 <UART3_PowerControl>:
; UART3_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2254
; {
    69b8: b580         	push	{r7, lr}
    69ba: b082         	sub	sp, #0x8
    69bc: af00         	add	r7, sp, #0x0
    69be: 4603         	mov	r3, r0
    69c0: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2255
;     return (ARM_USART_PowerControl(state, &UART3));
    69c2: 79fb         	ldrb	r3, [r7, #0x7]
    69c4: 4904         	ldr	r1, [pc, #0x10]         @ 0x69d8 <UART3_PowerControl+0x20>
    69c6: 4618         	mov	r0, r3
    69c8: f7ff f8c4    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0xe78
    69cc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2256
; }
    69ce: 4618         	mov	r0, r3
    69d0: 3708         	adds	r7, #0x8
    69d2: 46bd         	mov	sp, r7
    69d4: bd80         	pop	{r7, pc}
    69d6: bf00         	nop
    69d8: 4c 04 00 20  	.word	0x2000044c

000069dc <UART3_Send>:
; UART3_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2259
; {
    69dc: b580         	push	{r7, lr}
    69de: b082         	sub	sp, #0x8
    69e0: af00         	add	r7, sp, #0x0
    69e2: 6078         	str	r0, [r7, #0x4]
    69e4: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2260
;     return (ARM_USART_Send(p_data, num , &UART3));
    69e6: 4a05         	ldr	r2, [pc, #0x14]         @ 0x69fc <UART3_Send+0x20>
    69e8: 6839         	ldr	r1, [r7]
    69ea: 6878         	ldr	r0, [r7, #0x4]
    69ec: f7ff fa34    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0xb98
    69f0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2261
; }
    69f2: 4618         	mov	r0, r3
    69f4: 3708         	adds	r7, #0x8
    69f6: 46bd         	mov	sp, r7
    69f8: bd80         	pop	{r7, pc}
    69fa: bf00         	nop
    69fc: 4c 04 00 20  	.word	0x2000044c

00006a00 <UART3_Receive>:
; UART3_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2264
; {
    6a00: b580         	push	{r7, lr}
    6a02: b082         	sub	sp, #0x8
    6a04: af00         	add	r7, sp, #0x0
    6a06: 6078         	str	r0, [r7, #0x4]
    6a08: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2265
;     return (ARM_USART_Receive(p_data, num, &UART3));
    6a0a: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6a20 <UART3_Receive+0x20>
    6a0c: 6839         	ldr	r1, [r7]
    6a0e: 6878         	ldr	r0, [r7, #0x4]
    6a10: f7ff fa6a    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0xb2c
    6a14: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2266
; }
    6a16: 4618         	mov	r0, r3
    6a18: 3708         	adds	r7, #0x8
    6a1a: 46bd         	mov	sp, r7
    6a1c: bd80         	pop	{r7, pc}
    6a1e: bf00         	nop
    6a20: 4c 04 00 20  	.word	0x2000044c

00006a24 <UART3_Transfer>:
; UART3_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2269
; {
    6a24: b580         	push	{r7, lr}
    6a26: b084         	sub	sp, #0x10
    6a28: af00         	add	r7, sp, #0x0
    6a2a: 60f8         	str	r0, [r7, #0xc]
    6a2c: 60b9         	str	r1, [r7, #0x8]
    6a2e: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2270
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART3));
    6a30: 4b05         	ldr	r3, [pc, #0x14]         @ 0x6a48 <UART3_Transfer+0x24>
    6a32: 687a         	ldr	r2, [r7, #0x4]
    6a34: 68b9         	ldr	r1, [r7, #0x8]
    6a36: 68f8         	ldr	r0, [r7, #0xc]
    6a38: f7ff faba    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0xa8c
    6a3c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2271
; }
    6a3e: 4618         	mov	r0, r3
    6a40: 3710         	adds	r7, #0x10
    6a42: 46bd         	mov	sp, r7
    6a44: bd80         	pop	{r7, pc}
    6a46: bf00         	nop
    6a48: 4c 04 00 20  	.word	0x2000044c

00006a4c <UART3_GetTxCount>:
; UART3_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2274
; {
    6a4c: b580         	push	{r7, lr}
    6a4e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2275
;     return (ARM_USART_GetTxCount(&UART3));
    6a50: 4802         	ldr	r0, [pc, #0x8]          @ 0x6a5c <UART3_GetTxCount+0x10>
    6a52: f7ff fabc    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0xa88
    6a56: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2276
; }
    6a58: 4618         	mov	r0, r3
    6a5a: bd80         	pop	{r7, pc}
    6a5c: 4c 04 00 20  	.word	0x2000044c

00006a60 <UART3_GetRxCount>:
; UART3_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2279
; {
    6a60: b580         	push	{r7, lr}
    6a62: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2280
;     return (ARM_USART_GetRxCount(&UART3));
    6a64: 4802         	ldr	r0, [pc, #0x8]          @ 0x6a70 <UART3_GetRxCount+0x10>
    6a66: f7ff fabe    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0xa84
    6a6a: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2281
; }
    6a6c: 4618         	mov	r0, r3
    6a6e: bd80         	pop	{r7, pc}
    6a70: 4c 04 00 20  	.word	0x2000044c

00006a74 <UART3_Control>:
; UART3_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2284
; {
    6a74: b580         	push	{r7, lr}
    6a76: b082         	sub	sp, #0x8
    6a78: af00         	add	r7, sp, #0x0
    6a7a: 6078         	str	r0, [r7, #0x4]
    6a7c: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2285
;     return (ARM_USART_Control(control, arg, &UART3));
    6a7e: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6a94 <UART3_Control+0x20>
    6a80: 6839         	ldr	r1, [r7]
    6a82: 6878         	ldr	r0, [r7, #0x4]
    6a84: f7ff fb84    	bl	0x6190 <ARM_USART_Control> @ imm = #-0x8f8
    6a88: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2286
; }
    6a8a: 4618         	mov	r0, r3
    6a8c: 3708         	adds	r7, #0x8
    6a8e: 46bd         	mov	sp, r7
    6a90: bd80         	pop	{r7, pc}
    6a92: bf00         	nop
    6a94: 4c 04 00 20  	.word	0x2000044c

00006a98 <UART3_GetStatus>:
; UART3_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2289
; {
    6a98: b580         	push	{r7, lr}
    6a9a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2290
;     return (ARM_USART_GetStatus(&UART3));
    6a9c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6aa8 <UART3_GetStatus+0x10>
    6a9e: f7ff fc62    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0x73c
    6aa2: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2291
; }
    6aa4: 4618         	mov	r0, r3
    6aa6: bd80         	pop	{r7, pc}
    6aa8: 4c 04 00 20  	.word	0x2000044c

00006aac <UART3_GetModemStatus>:
; UART3_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2294
; {
    6aac: b580         	push	{r7, lr}
    6aae: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2295
;     return (ARM_USART_GetModemStatus(&UART3));
    6ab0: 4802         	ldr	r0, [pc, #0x8]          @ 0x6abc <UART3_GetModemStatus+0x10>
    6ab2: f7ff fc72    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0x71c
    6ab6: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2296
; }
    6ab8: 4618         	mov	r0, r3
    6aba: bd80         	pop	{r7, pc}
    6abc: 4c 04 00 20  	.word	0x2000044c

00006ac0 <UART3_SetModemControl>:
; UART3_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2299
; {
    6ac0: b580         	push	{r7, lr}
    6ac2: b082         	sub	sp, #0x8
    6ac4: af00         	add	r7, sp, #0x0
    6ac6: 4603         	mov	r3, r0
    6ac8: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2300
;     return (ARM_USART_SetModemControl(control, &UART3));
    6aca: 79fb         	ldrb	r3, [r7, #0x7]
    6acc: 4904         	ldr	r1, [pc, #0x10]         @ 0x6ae0 <UART3_SetModemControl+0x20>
    6ace: 4618         	mov	r0, r3
    6ad0: f7ff fc55    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0x756
    6ad4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2301
; }
    6ad6: 4618         	mov	r0, r3
    6ad8: 3708         	adds	r7, #0x8
    6ada: 46bd         	mov	sp, r7
    6adc: bd80         	pop	{r7, pc}
    6ade: bf00         	nop
    6ae0: 4c 04 00 20  	.word	0x2000044c

00006ae4 <UART4_IRQHandler>:
; UART4_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2406
; {
    6ae4: b580         	push	{r7, lr}
    6ae6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2407
;     UART_IRQHandler(&UART4);
    6ae8: 4802         	ldr	r0, [pc, #0x8]          @ 0x6af4 <UART4_IRQHandler+0x10>
    6aea: f7ff fc63    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0x73a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2408
; }
    6aee: bf00         	nop
    6af0: bd80         	pop	{r7, pc}
    6af2: bf00         	nop
    6af4: 90 04 00 20  	.word	0x20000490

00006af8 <UART4_Initialize>:
; UART4_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2423
; {
    6af8: b580         	push	{r7, lr}
    6afa: b082         	sub	sp, #0x8
    6afc: af00         	add	r7, sp, #0x0
    6afe: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2424
;     return (ARM_USART_Initialize(cb_event,  &UART4));
    6b00: 4904         	ldr	r1, [pc, #0x10]         @ 0x6b14 <UART4_Initialize+0x1c>
    6b02: 6878         	ldr	r0, [r7, #0x4]
    6b04: f7ff f8da    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0xe4c
    6b08: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2425
; }
    6b0a: 4618         	mov	r0, r3
    6b0c: 3708         	adds	r7, #0x8
    6b0e: 46bd         	mov	sp, r7
    6b10: bd80         	pop	{r7, pc}
    6b12: bf00         	nop
    6b14: 90 04 00 20  	.word	0x20000490

00006b18 <UART4_Uninitialize>:
; UART4_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2428
; {
    6b18: b580         	push	{r7, lr}
    6b1a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2429
;     return (ARM_USART_Uninitialize(&UART4));
    6b1c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6b28 <UART4_Uninitialize+0x10>
    6b1e: f7ff f926    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0xdb4
    6b22: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2430
; }
    6b24: 4618         	mov	r0, r3
    6b26: bd80         	pop	{r7, pc}
    6b28: 90 04 00 20  	.word	0x20000490

00006b2c <UART4_PowerControl>:
; UART4_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2433
; {
    6b2c: b580         	push	{r7, lr}
    6b2e: b082         	sub	sp, #0x8
    6b30: af00         	add	r7, sp, #0x0
    6b32: 4603         	mov	r3, r0
    6b34: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2434
;     return (ARM_USART_PowerControl(state, &UART4));
    6b36: 79fb         	ldrb	r3, [r7, #0x7]
    6b38: 4904         	ldr	r1, [pc, #0x10]         @ 0x6b4c <UART4_PowerControl+0x20>
    6b3a: 4618         	mov	r0, r3
    6b3c: f7ff f80a    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0xfec
    6b40: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2435
; }
    6b42: 4618         	mov	r0, r3
    6b44: 3708         	adds	r7, #0x8
    6b46: 46bd         	mov	sp, r7
    6b48: bd80         	pop	{r7, pc}
    6b4a: bf00         	nop
    6b4c: 90 04 00 20  	.word	0x20000490

00006b50 <UART4_Send>:
; UART4_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2438
; {
    6b50: b580         	push	{r7, lr}
    6b52: b082         	sub	sp, #0x8
    6b54: af00         	add	r7, sp, #0x0
    6b56: 6078         	str	r0, [r7, #0x4]
    6b58: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2439
;     return (ARM_USART_Send(p_data, num , &UART4));
    6b5a: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6b70 <UART4_Send+0x20>
    6b5c: 6839         	ldr	r1, [r7]
    6b5e: 6878         	ldr	r0, [r7, #0x4]
    6b60: f7ff f97a    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0xd0c
    6b64: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2440
; }
    6b66: 4618         	mov	r0, r3
    6b68: 3708         	adds	r7, #0x8
    6b6a: 46bd         	mov	sp, r7
    6b6c: bd80         	pop	{r7, pc}
    6b6e: bf00         	nop
    6b70: 90 04 00 20  	.word	0x20000490

00006b74 <UART4_Receive>:
; UART4_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2443
; {
    6b74: b580         	push	{r7, lr}
    6b76: b082         	sub	sp, #0x8
    6b78: af00         	add	r7, sp, #0x0
    6b7a: 6078         	str	r0, [r7, #0x4]
    6b7c: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2444
;     return (ARM_USART_Receive(p_data, num, &UART4));
    6b7e: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6b94 <UART4_Receive+0x20>
    6b80: 6839         	ldr	r1, [r7]
    6b82: 6878         	ldr	r0, [r7, #0x4]
    6b84: f7ff f9b0    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0xca0
    6b88: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2445
; }
    6b8a: 4618         	mov	r0, r3
    6b8c: 3708         	adds	r7, #0x8
    6b8e: 46bd         	mov	sp, r7
    6b90: bd80         	pop	{r7, pc}
    6b92: bf00         	nop
    6b94: 90 04 00 20  	.word	0x20000490

00006b98 <UART4_Transfer>:
; UART4_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2448
; {
    6b98: b580         	push	{r7, lr}
    6b9a: b084         	sub	sp, #0x10
    6b9c: af00         	add	r7, sp, #0x0
    6b9e: 60f8         	str	r0, [r7, #0xc]
    6ba0: 60b9         	str	r1, [r7, #0x8]
    6ba2: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2449
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART4));
    6ba4: 4b05         	ldr	r3, [pc, #0x14]         @ 0x6bbc <UART4_Transfer+0x24>
    6ba6: 687a         	ldr	r2, [r7, #0x4]
    6ba8: 68b9         	ldr	r1, [r7, #0x8]
    6baa: 68f8         	ldr	r0, [r7, #0xc]
    6bac: f7ff fa00    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0xc00
    6bb0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2450
; }
    6bb2: 4618         	mov	r0, r3
    6bb4: 3710         	adds	r7, #0x10
    6bb6: 46bd         	mov	sp, r7
    6bb8: bd80         	pop	{r7, pc}
    6bba: bf00         	nop
    6bbc: 90 04 00 20  	.word	0x20000490

00006bc0 <UART4_GetTxCount>:
; UART4_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2453
; {
    6bc0: b580         	push	{r7, lr}
    6bc2: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2454
;     return (ARM_USART_GetTxCount(&UART4));
    6bc4: 4802         	ldr	r0, [pc, #0x8]          @ 0x6bd0 <UART4_GetTxCount+0x10>
    6bc6: f7ff fa02    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0xbfc
    6bca: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2455
; }
    6bcc: 4618         	mov	r0, r3
    6bce: bd80         	pop	{r7, pc}
    6bd0: 90 04 00 20  	.word	0x20000490

00006bd4 <UART4_GetRxCount>:
; UART4_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2458
; {
    6bd4: b580         	push	{r7, lr}
    6bd6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2459
;     return (ARM_USART_GetRxCount(&UART4));
    6bd8: 4802         	ldr	r0, [pc, #0x8]          @ 0x6be4 <UART4_GetRxCount+0x10>
    6bda: f7ff fa04    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0xbf8
    6bde: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2460
; }
    6be0: 4618         	mov	r0, r3
    6be2: bd80         	pop	{r7, pc}
    6be4: 90 04 00 20  	.word	0x20000490

00006be8 <UART4_Control>:
; UART4_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2463
; {
    6be8: b580         	push	{r7, lr}
    6bea: b082         	sub	sp, #0x8
    6bec: af00         	add	r7, sp, #0x0
    6bee: 6078         	str	r0, [r7, #0x4]
    6bf0: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2464
;     return (ARM_USART_Control(control, arg, &UART4));
    6bf2: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6c08 <UART4_Control+0x20>
    6bf4: 6839         	ldr	r1, [r7]
    6bf6: 6878         	ldr	r0, [r7, #0x4]
    6bf8: f7ff faca    	bl	0x6190 <ARM_USART_Control> @ imm = #-0xa6c
    6bfc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2465
; }
    6bfe: 4618         	mov	r0, r3
    6c00: 3708         	adds	r7, #0x8
    6c02: 46bd         	mov	sp, r7
    6c04: bd80         	pop	{r7, pc}
    6c06: bf00         	nop
    6c08: 90 04 00 20  	.word	0x20000490

00006c0c <UART4_GetStatus>:
; UART4_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2468
; {
    6c0c: b580         	push	{r7, lr}
    6c0e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2469
;     return (ARM_USART_GetStatus(&UART4));
    6c10: 4802         	ldr	r0, [pc, #0x8]          @ 0x6c1c <UART4_GetStatus+0x10>
    6c12: f7ff fba8    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0x8b0
    6c16: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2470
; }
    6c18: 4618         	mov	r0, r3
    6c1a: bd80         	pop	{r7, pc}
    6c1c: 90 04 00 20  	.word	0x20000490

00006c20 <UART4_GetModemStatus>:
; UART4_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2473
; {
    6c20: b580         	push	{r7, lr}
    6c22: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2474
;     return (ARM_USART_GetModemStatus(&UART4));
    6c24: 4802         	ldr	r0, [pc, #0x8]          @ 0x6c30 <UART4_GetModemStatus+0x10>
    6c26: f7ff fbb8    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0x890
    6c2a: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2475
; }
    6c2c: 4618         	mov	r0, r3
    6c2e: bd80         	pop	{r7, pc}
    6c30: 90 04 00 20  	.word	0x20000490

00006c34 <UART4_SetModemControl>:
; UART4_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2478
; {
    6c34: b580         	push	{r7, lr}
    6c36: b082         	sub	sp, #0x8
    6c38: af00         	add	r7, sp, #0x0
    6c3a: 4603         	mov	r3, r0
    6c3c: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2479
;     return (ARM_USART_SetModemControl(control, &UART4));
    6c3e: 79fb         	ldrb	r3, [r7, #0x7]
    6c40: 4904         	ldr	r1, [pc, #0x10]         @ 0x6c54 <UART4_SetModemControl+0x20>
    6c42: 4618         	mov	r0, r3
    6c44: f7ff fb9b    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0x8ca
    6c48: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2480
; }
    6c4a: 4618         	mov	r0, r3
    6c4c: 3708         	adds	r7, #0x8
    6c4e: 46bd         	mov	sp, r7
    6c50: bd80         	pop	{r7, pc}
    6c52: bf00         	nop
    6c54: 90 04 00 20  	.word	0x20000490

00006c58 <UART5_IRQHandler>:
; UART5_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2585
; {
    6c58: b580         	push	{r7, lr}
    6c5a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2586
;     UART_IRQHandler(&UART5);
    6c5c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6c68 <UART5_IRQHandler+0x10>
    6c5e: f7ff fba9    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0x8ae
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2587
; }
    6c62: bf00         	nop
    6c64: bd80         	pop	{r7, pc}
    6c66: bf00         	nop
    6c68: d4 04 00 20  	.word	0x200004d4

00006c6c <UART5_Initialize>:
; UART5_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2602
; {
    6c6c: b580         	push	{r7, lr}
    6c6e: b082         	sub	sp, #0x8
    6c70: af00         	add	r7, sp, #0x0
    6c72: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2603
;     return (ARM_USART_Initialize(cb_event,  &UART5));
    6c74: 4904         	ldr	r1, [pc, #0x10]         @ 0x6c88 <UART5_Initialize+0x1c>
    6c76: 6878         	ldr	r0, [r7, #0x4]
    6c78: f7ff f820    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0xfc0
    6c7c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2604
; }
    6c7e: 4618         	mov	r0, r3
    6c80: 3708         	adds	r7, #0x8
    6c82: 46bd         	mov	sp, r7
    6c84: bd80         	pop	{r7, pc}
    6c86: bf00         	nop
    6c88: d4 04 00 20  	.word	0x200004d4

00006c8c <UART5_Uninitialize>:
; UART5_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2607
; {
    6c8c: b580         	push	{r7, lr}
    6c8e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2608
;     return (ARM_USART_Uninitialize(&UART5));
    6c90: 4802         	ldr	r0, [pc, #0x8]          @ 0x6c9c <UART5_Uninitialize+0x10>
    6c92: f7ff f86c    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0xf28
    6c96: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2609
; }
    6c98: 4618         	mov	r0, r3
    6c9a: bd80         	pop	{r7, pc}
    6c9c: d4 04 00 20  	.word	0x200004d4

00006ca0 <UART5_PowerControl>:
; UART5_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2612
; {
    6ca0: b580         	push	{r7, lr}
    6ca2: b082         	sub	sp, #0x8
    6ca4: af00         	add	r7, sp, #0x0
    6ca6: 4603         	mov	r3, r0
    6ca8: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2613
;     return (ARM_USART_PowerControl(state, &UART5));
    6caa: 79fb         	ldrb	r3, [r7, #0x7]
    6cac: 4904         	ldr	r1, [pc, #0x10]         @ 0x6cc0 <UART5_PowerControl+0x20>
    6cae: 4618         	mov	r0, r3
    6cb0: f7fe ff50    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0x1160
    6cb4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2614
; }
    6cb6: 4618         	mov	r0, r3
    6cb8: 3708         	adds	r7, #0x8
    6cba: 46bd         	mov	sp, r7
    6cbc: bd80         	pop	{r7, pc}
    6cbe: bf00         	nop
    6cc0: d4 04 00 20  	.word	0x200004d4

00006cc4 <UART5_Send>:
; UART5_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2617
; {
    6cc4: b580         	push	{r7, lr}
    6cc6: b082         	sub	sp, #0x8
    6cc8: af00         	add	r7, sp, #0x0
    6cca: 6078         	str	r0, [r7, #0x4]
    6ccc: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2618
;     return (ARM_USART_Send(p_data, num , &UART5));
    6cce: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6ce4 <UART5_Send+0x20>
    6cd0: 6839         	ldr	r1, [r7]
    6cd2: 6878         	ldr	r0, [r7, #0x4]
    6cd4: f7ff f8c0    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0xe80
    6cd8: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2619
; }
    6cda: 4618         	mov	r0, r3
    6cdc: 3708         	adds	r7, #0x8
    6cde: 46bd         	mov	sp, r7
    6ce0: bd80         	pop	{r7, pc}
    6ce2: bf00         	nop
    6ce4: d4 04 00 20  	.word	0x200004d4

00006ce8 <UART5_Receive>:
; UART5_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2622
; {
    6ce8: b580         	push	{r7, lr}
    6cea: b082         	sub	sp, #0x8
    6cec: af00         	add	r7, sp, #0x0
    6cee: 6078         	str	r0, [r7, #0x4]
    6cf0: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2623
;     return (ARM_USART_Receive(p_data, num, &UART5));
    6cf2: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6d08 <UART5_Receive+0x20>
    6cf4: 6839         	ldr	r1, [r7]
    6cf6: 6878         	ldr	r0, [r7, #0x4]
    6cf8: f7ff f8f6    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0xe14
    6cfc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2624
; }
    6cfe: 4618         	mov	r0, r3
    6d00: 3708         	adds	r7, #0x8
    6d02: 46bd         	mov	sp, r7
    6d04: bd80         	pop	{r7, pc}
    6d06: bf00         	nop
    6d08: d4 04 00 20  	.word	0x200004d4

00006d0c <UART5_Transfer>:
; UART5_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2627
; {
    6d0c: b580         	push	{r7, lr}
    6d0e: b084         	sub	sp, #0x10
    6d10: af00         	add	r7, sp, #0x0
    6d12: 60f8         	str	r0, [r7, #0xc]
    6d14: 60b9         	str	r1, [r7, #0x8]
    6d16: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2628
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART5));
    6d18: 4b05         	ldr	r3, [pc, #0x14]         @ 0x6d30 <UART5_Transfer+0x24>
    6d1a: 687a         	ldr	r2, [r7, #0x4]
    6d1c: 68b9         	ldr	r1, [r7, #0x8]
    6d1e: 68f8         	ldr	r0, [r7, #0xc]
    6d20: f7ff f946    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0xd74
    6d24: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2629
; }
    6d26: 4618         	mov	r0, r3
    6d28: 3710         	adds	r7, #0x10
    6d2a: 46bd         	mov	sp, r7
    6d2c: bd80         	pop	{r7, pc}
    6d2e: bf00         	nop
    6d30: d4 04 00 20  	.word	0x200004d4

00006d34 <UART5_GetTxCount>:
; UART5_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2632
; {
    6d34: b580         	push	{r7, lr}
    6d36: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2633
;     return (ARM_USART_GetTxCount(&UART5));
    6d38: 4802         	ldr	r0, [pc, #0x8]          @ 0x6d44 <UART5_GetTxCount+0x10>
    6d3a: f7ff f948    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0xd70
    6d3e: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2634
; }
    6d40: 4618         	mov	r0, r3
    6d42: bd80         	pop	{r7, pc}
    6d44: d4 04 00 20  	.word	0x200004d4

00006d48 <UART5_GetRxCount>:
; UART5_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2637
; {
    6d48: b580         	push	{r7, lr}
    6d4a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2638
;     return (ARM_USART_GetRxCount(&UART5));
    6d4c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6d58 <UART5_GetRxCount+0x10>
    6d4e: f7ff f94a    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0xd6c
    6d52: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2639
; }
    6d54: 4618         	mov	r0, r3
    6d56: bd80         	pop	{r7, pc}
    6d58: d4 04 00 20  	.word	0x200004d4

00006d5c <UART5_Control>:
; UART5_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2642
; {
    6d5c: b580         	push	{r7, lr}
    6d5e: b082         	sub	sp, #0x8
    6d60: af00         	add	r7, sp, #0x0
    6d62: 6078         	str	r0, [r7, #0x4]
    6d64: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2643
;     return (ARM_USART_Control(control, arg, &UART5));
    6d66: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6d7c <UART5_Control+0x20>
    6d68: 6839         	ldr	r1, [r7]
    6d6a: 6878         	ldr	r0, [r7, #0x4]
    6d6c: f7ff fa10    	bl	0x6190 <ARM_USART_Control> @ imm = #-0xbe0
    6d70: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2644
; }
    6d72: 4618         	mov	r0, r3
    6d74: 3708         	adds	r7, #0x8
    6d76: 46bd         	mov	sp, r7
    6d78: bd80         	pop	{r7, pc}
    6d7a: bf00         	nop
    6d7c: d4 04 00 20  	.word	0x200004d4

00006d80 <UART5_GetStatus>:
; UART5_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2647
; {
    6d80: b580         	push	{r7, lr}
    6d82: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2648
;     return (ARM_USART_GetStatus(&UART5));
    6d84: 4802         	ldr	r0, [pc, #0x8]          @ 0x6d90 <UART5_GetStatus+0x10>
    6d86: f7ff faee    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0xa24
    6d8a: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2649
; }
    6d8c: 4618         	mov	r0, r3
    6d8e: bd80         	pop	{r7, pc}
    6d90: d4 04 00 20  	.word	0x200004d4

00006d94 <UART5_GetModemStatus>:
; UART5_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2652
; {
    6d94: b580         	push	{r7, lr}
    6d96: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2653
;     return (ARM_USART_GetModemStatus(&UART5));
    6d98: 4802         	ldr	r0, [pc, #0x8]          @ 0x6da4 <UART5_GetModemStatus+0x10>
    6d9a: f7ff fafe    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0xa04
    6d9e: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2654
; }
    6da0: 4618         	mov	r0, r3
    6da2: bd80         	pop	{r7, pc}
    6da4: d4 04 00 20  	.word	0x200004d4

00006da8 <UART5_SetModemControl>:
; UART5_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2657
; {
    6da8: b580         	push	{r7, lr}
    6daa: b082         	sub	sp, #0x8
    6dac: af00         	add	r7, sp, #0x0
    6dae: 4603         	mov	r3, r0
    6db0: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2658
;     return (ARM_USART_SetModemControl(control, &UART5));
    6db2: 79fb         	ldrb	r3, [r7, #0x7]
    6db4: 4904         	ldr	r1, [pc, #0x10]         @ 0x6dc8 <UART5_SetModemControl+0x20>
    6db6: 4618         	mov	r0, r3
    6db8: f7ff fae1    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0xa3e
    6dbc: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2659
; }
    6dbe: 4618         	mov	r0, r3
    6dc0: 3708         	adds	r7, #0x8
    6dc2: 46bd         	mov	sp, r7
    6dc4: bd80         	pop	{r7, pc}
    6dc6: bf00         	nop
    6dc8: d4 04 00 20  	.word	0x200004d4

00006dcc <UART6_IRQHandler>:
; UART6_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2764
; {
    6dcc: b580         	push	{r7, lr}
    6dce: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2765
;     UART_IRQHandler(&UART6);
    6dd0: 4802         	ldr	r0, [pc, #0x8]          @ 0x6ddc <UART6_IRQHandler+0x10>
    6dd2: f7ff faef    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0xa22
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2766
; }
    6dd6: bf00         	nop
    6dd8: bd80         	pop	{r7, pc}
    6dda: bf00         	nop
    6ddc: 18 05 00 20  	.word	0x20000518

00006de0 <UART6_Initialize>:
; UART6_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2781
; {
    6de0: b580         	push	{r7, lr}
    6de2: b082         	sub	sp, #0x8
    6de4: af00         	add	r7, sp, #0x0
    6de6: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2782
;     return (ARM_USART_Initialize(cb_event,  &UART6));
    6de8: 4904         	ldr	r1, [pc, #0x10]         @ 0x6dfc <UART6_Initialize+0x1c>
    6dea: 6878         	ldr	r0, [r7, #0x4]
    6dec: f7fe ff66    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0x1134
    6df0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2783
; }
    6df2: 4618         	mov	r0, r3
    6df4: 3708         	adds	r7, #0x8
    6df6: 46bd         	mov	sp, r7
    6df8: bd80         	pop	{r7, pc}
    6dfa: bf00         	nop
    6dfc: 18 05 00 20  	.word	0x20000518

00006e00 <UART6_Uninitialize>:
; UART6_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2786
; {
    6e00: b580         	push	{r7, lr}
    6e02: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2787
;     return (ARM_USART_Uninitialize(&UART6));
    6e04: 4802         	ldr	r0, [pc, #0x8]          @ 0x6e10 <UART6_Uninitialize+0x10>
    6e06: f7fe ffb2    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0x109c
    6e0a: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2788
; }
    6e0c: 4618         	mov	r0, r3
    6e0e: bd80         	pop	{r7, pc}
    6e10: 18 05 00 20  	.word	0x20000518

00006e14 <UART6_PowerControl>:
; UART6_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2791
; {
    6e14: b580         	push	{r7, lr}
    6e16: b082         	sub	sp, #0x8
    6e18: af00         	add	r7, sp, #0x0
    6e1a: 4603         	mov	r3, r0
    6e1c: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2792
;     return (ARM_USART_PowerControl(state, &UART6));
    6e1e: 79fb         	ldrb	r3, [r7, #0x7]
    6e20: 4904         	ldr	r1, [pc, #0x10]         @ 0x6e34 <UART6_PowerControl+0x20>
    6e22: 4618         	mov	r0, r3
    6e24: f7fe fe96    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0x12d4
    6e28: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2793
; }
    6e2a: 4618         	mov	r0, r3
    6e2c: 3708         	adds	r7, #0x8
    6e2e: 46bd         	mov	sp, r7
    6e30: bd80         	pop	{r7, pc}
    6e32: bf00         	nop
    6e34: 18 05 00 20  	.word	0x20000518

00006e38 <UART6_Send>:
; UART6_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2796
; {
    6e38: b580         	push	{r7, lr}
    6e3a: b082         	sub	sp, #0x8
    6e3c: af00         	add	r7, sp, #0x0
    6e3e: 6078         	str	r0, [r7, #0x4]
    6e40: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2797
;     return (ARM_USART_Send(p_data, num , &UART6));
    6e42: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6e58 <UART6_Send+0x20>
    6e44: 6839         	ldr	r1, [r7]
    6e46: 6878         	ldr	r0, [r7, #0x4]
    6e48: f7ff f806    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0xff4
    6e4c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2798
; }
    6e4e: 4618         	mov	r0, r3
    6e50: 3708         	adds	r7, #0x8
    6e52: 46bd         	mov	sp, r7
    6e54: bd80         	pop	{r7, pc}
    6e56: bf00         	nop
    6e58: 18 05 00 20  	.word	0x20000518

00006e5c <UART6_Receive>:
; UART6_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2801
; {
    6e5c: b580         	push	{r7, lr}
    6e5e: b082         	sub	sp, #0x8
    6e60: af00         	add	r7, sp, #0x0
    6e62: 6078         	str	r0, [r7, #0x4]
    6e64: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2802
;     return (ARM_USART_Receive(p_data, num, &UART6));
    6e66: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6e7c <UART6_Receive+0x20>
    6e68: 6839         	ldr	r1, [r7]
    6e6a: 6878         	ldr	r0, [r7, #0x4]
    6e6c: f7ff f83c    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0xf88
    6e70: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2803
; }
    6e72: 4618         	mov	r0, r3
    6e74: 3708         	adds	r7, #0x8
    6e76: 46bd         	mov	sp, r7
    6e78: bd80         	pop	{r7, pc}
    6e7a: bf00         	nop
    6e7c: 18 05 00 20  	.word	0x20000518

00006e80 <UART6_Transfer>:
; UART6_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2806
; {
    6e80: b580         	push	{r7, lr}
    6e82: b084         	sub	sp, #0x10
    6e84: af00         	add	r7, sp, #0x0
    6e86: 60f8         	str	r0, [r7, #0xc]
    6e88: 60b9         	str	r1, [r7, #0x8]
    6e8a: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2807
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART6));
    6e8c: 4b05         	ldr	r3, [pc, #0x14]         @ 0x6ea4 <UART6_Transfer+0x24>
    6e8e: 687a         	ldr	r2, [r7, #0x4]
    6e90: 68b9         	ldr	r1, [r7, #0x8]
    6e92: 68f8         	ldr	r0, [r7, #0xc]
    6e94: f7ff f88c    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0xee8
    6e98: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2808
; }
    6e9a: 4618         	mov	r0, r3
    6e9c: 3710         	adds	r7, #0x10
    6e9e: 46bd         	mov	sp, r7
    6ea0: bd80         	pop	{r7, pc}
    6ea2: bf00         	nop
    6ea4: 18 05 00 20  	.word	0x20000518

00006ea8 <UART6_GetTxCount>:
; UART6_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2811
; {
    6ea8: b580         	push	{r7, lr}
    6eaa: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2812
;     return (ARM_USART_GetTxCount(&UART6));
    6eac: 4802         	ldr	r0, [pc, #0x8]          @ 0x6eb8 <UART6_GetTxCount+0x10>
    6eae: f7ff f88e    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0xee4
    6eb2: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2813
; }
    6eb4: 4618         	mov	r0, r3
    6eb6: bd80         	pop	{r7, pc}
    6eb8: 18 05 00 20  	.word	0x20000518

00006ebc <UART6_GetRxCount>:
; UART6_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2816
; {
    6ebc: b580         	push	{r7, lr}
    6ebe: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2817
;     return (ARM_USART_GetRxCount(&UART6));
    6ec0: 4802         	ldr	r0, [pc, #0x8]          @ 0x6ecc <UART6_GetRxCount+0x10>
    6ec2: f7ff f890    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0xee0
    6ec6: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2818
; }
    6ec8: 4618         	mov	r0, r3
    6eca: bd80         	pop	{r7, pc}
    6ecc: 18 05 00 20  	.word	0x20000518

00006ed0 <UART6_Control>:
; UART6_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2821
; {
    6ed0: b580         	push	{r7, lr}
    6ed2: b082         	sub	sp, #0x8
    6ed4: af00         	add	r7, sp, #0x0
    6ed6: 6078         	str	r0, [r7, #0x4]
    6ed8: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2822
;     return (ARM_USART_Control(control, arg, &UART6));
    6eda: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6ef0 <UART6_Control+0x20>
    6edc: 6839         	ldr	r1, [r7]
    6ede: 6878         	ldr	r0, [r7, #0x4]
    6ee0: f7ff f956    	bl	0x6190 <ARM_USART_Control> @ imm = #-0xd54
    6ee4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2823
; }
    6ee6: 4618         	mov	r0, r3
    6ee8: 3708         	adds	r7, #0x8
    6eea: 46bd         	mov	sp, r7
    6eec: bd80         	pop	{r7, pc}
    6eee: bf00         	nop
    6ef0: 18 05 00 20  	.word	0x20000518

00006ef4 <UART6_GetStatus>:
; UART6_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2826
; {
    6ef4: b580         	push	{r7, lr}
    6ef6: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2827
;     return (ARM_USART_GetStatus(&UART6));
    6ef8: 4802         	ldr	r0, [pc, #0x8]          @ 0x6f04 <UART6_GetStatus+0x10>
    6efa: f7ff fa34    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0xb98
    6efe: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2828
; }
    6f00: 4618         	mov	r0, r3
    6f02: bd80         	pop	{r7, pc}
    6f04: 18 05 00 20  	.word	0x20000518

00006f08 <UART6_GetModemStatus>:
; UART6_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2831
; {
    6f08: b580         	push	{r7, lr}
    6f0a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2832
;     return (ARM_USART_GetModemStatus(&UART6));
    6f0c: 4802         	ldr	r0, [pc, #0x8]          @ 0x6f18 <UART6_GetModemStatus+0x10>
    6f0e: f7ff fa44    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0xb78
    6f12: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2833
; }
    6f14: 4618         	mov	r0, r3
    6f16: bd80         	pop	{r7, pc}
    6f18: 18 05 00 20  	.word	0x20000518

00006f1c <UART6_SetModemControl>:
; UART6_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2836
; {
    6f1c: b580         	push	{r7, lr}
    6f1e: b082         	sub	sp, #0x8
    6f20: af00         	add	r7, sp, #0x0
    6f22: 4603         	mov	r3, r0
    6f24: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2837
;     return (ARM_USART_SetModemControl(control, &UART6));
    6f26: 79fb         	ldrb	r3, [r7, #0x7]
    6f28: 4904         	ldr	r1, [pc, #0x10]         @ 0x6f3c <UART6_SetModemControl+0x20>
    6f2a: 4618         	mov	r0, r3
    6f2c: f7ff fa27    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0xbb2
    6f30: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2838
; }
    6f32: 4618         	mov	r0, r3
    6f34: 3708         	adds	r7, #0x8
    6f36: 46bd         	mov	sp, r7
    6f38: bd80         	pop	{r7, pc}
    6f3a: bf00         	nop
    6f3c: 18 05 00 20  	.word	0x20000518

00006f40 <UART7_IRQHandler>:
; UART7_IRQHandler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2943
; {
    6f40: b580         	push	{r7, lr}
    6f42: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2944
;     UART_IRQHandler(&UART7);
    6f44: 4802         	ldr	r0, [pc, #0x8]          @ 0x6f50 <UART7_IRQHandler+0x10>
    6f46: f7ff fa35    	bl	0x63b4 <UART_IRQHandler> @ imm = #-0xb96
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2945
; }
    6f4a: bf00         	nop
    6f4c: bd80         	pop	{r7, pc}
    6f4e: bf00         	nop
    6f50: 5c 05 00 20  	.word	0x2000055c

00006f54 <UART7_Initialize>:
; UART7_Initialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2960
; {
    6f54: b580         	push	{r7, lr}
    6f56: b082         	sub	sp, #0x8
    6f58: af00         	add	r7, sp, #0x0
    6f5a: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2961
;     return (ARM_USART_Initialize(cb_event,  &UART7));
    6f5c: 4904         	ldr	r1, [pc, #0x10]         @ 0x6f70 <UART7_Initialize+0x1c>
    6f5e: 6878         	ldr	r0, [r7, #0x4]
    6f60: f7fe feac    	bl	0x5cbc <ARM_USART_Initialize> @ imm = #-0x12a8
    6f64: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2962
; }
    6f66: 4618         	mov	r0, r3
    6f68: 3708         	adds	r7, #0x8
    6f6a: 46bd         	mov	sp, r7
    6f6c: bd80         	pop	{r7, pc}
    6f6e: bf00         	nop
    6f70: 5c 05 00 20  	.word	0x2000055c

00006f74 <UART7_Uninitialize>:
; UART7_Uninitialize():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2965
; {
    6f74: b580         	push	{r7, lr}
    6f76: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2966
;     return (ARM_USART_Uninitialize(&UART7));
    6f78: 4802         	ldr	r0, [pc, #0x8]          @ 0x6f84 <UART7_Uninitialize+0x10>
    6f7a: f7fe fef8    	bl	0x5d6e <ARM_USART_Uninitialize> @ imm = #-0x1210
    6f7e: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2967
; }
    6f80: 4618         	mov	r0, r3
    6f82: bd80         	pop	{r7, pc}
    6f84: 5c 05 00 20  	.word	0x2000055c

00006f88 <UART7_PowerControl>:
; UART7_PowerControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2970
; {
    6f88: b580         	push	{r7, lr}
    6f8a: b082         	sub	sp, #0x8
    6f8c: af00         	add	r7, sp, #0x0
    6f8e: 4603         	mov	r3, r0
    6f90: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2971
;     return (ARM_USART_PowerControl(state, &UART7));
    6f92: 79fb         	ldrb	r3, [r7, #0x7]
    6f94: 4904         	ldr	r1, [pc, #0x10]         @ 0x6fa8 <UART7_PowerControl+0x20>
    6f96: 4618         	mov	r0, r3
    6f98: f7fe fddc    	bl	0x5b54 <ARM_USART_PowerControl> @ imm = #-0x1448
    6f9c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2972
; }
    6f9e: 4618         	mov	r0, r3
    6fa0: 3708         	adds	r7, #0x8
    6fa2: 46bd         	mov	sp, r7
    6fa4: bd80         	pop	{r7, pc}
    6fa6: bf00         	nop
    6fa8: 5c 05 00 20  	.word	0x2000055c

00006fac <UART7_Send>:
; UART7_Send():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2975
; {
    6fac: b580         	push	{r7, lr}
    6fae: b082         	sub	sp, #0x8
    6fb0: af00         	add	r7, sp, #0x0
    6fb2: 6078         	str	r0, [r7, #0x4]
    6fb4: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2976
;     return (ARM_USART_Send(p_data, num , &UART7));
    6fb6: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6fcc <UART7_Send+0x20>
    6fb8: 6839         	ldr	r1, [r7]
    6fba: 6878         	ldr	r0, [r7, #0x4]
    6fbc: f7fe ff4c    	bl	0x5e58 <ARM_USART_Send> @ imm = #-0x1168
    6fc0: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2977
; }
    6fc2: 4618         	mov	r0, r3
    6fc4: 3708         	adds	r7, #0x8
    6fc6: 46bd         	mov	sp, r7
    6fc8: bd80         	pop	{r7, pc}
    6fca: bf00         	nop
    6fcc: 5c 05 00 20  	.word	0x2000055c

00006fd0 <UART7_Receive>:
; UART7_Receive():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2980
; {
    6fd0: b580         	push	{r7, lr}
    6fd2: b082         	sub	sp, #0x8
    6fd4: af00         	add	r7, sp, #0x0
    6fd6: 6078         	str	r0, [r7, #0x4]
    6fd8: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2981
;     return (ARM_USART_Receive(p_data, num, &UART7));
    6fda: 4a05         	ldr	r2, [pc, #0x14]         @ 0x6ff0 <UART7_Receive+0x20>
    6fdc: 6839         	ldr	r1, [r7]
    6fde: 6878         	ldr	r0, [r7, #0x4]
    6fe0: f7fe ff82    	bl	0x5ee8 <ARM_USART_Receive> @ imm = #-0x10fc
    6fe4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2982
; }
    6fe6: 4618         	mov	r0, r3
    6fe8: 3708         	adds	r7, #0x8
    6fea: 46bd         	mov	sp, r7
    6fec: bd80         	pop	{r7, pc}
    6fee: bf00         	nop
    6ff0: 5c 05 00 20  	.word	0x2000055c

00006ff4 <UART7_Transfer>:
; UART7_Transfer():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2985
; {
    6ff4: b580         	push	{r7, lr}
    6ff6: b084         	sub	sp, #0x10
    6ff8: af00         	add	r7, sp, #0x0
    6ffa: 60f8         	str	r0, [r7, #0xc]
    6ffc: 60b9         	str	r1, [r7, #0x8]
    6ffe: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2986
;     return (ARM_USART_Transfer(p_data_out, p_data_in, num, &UART7));
    7000: 4b05         	ldr	r3, [pc, #0x14]         @ 0x7018 <UART7_Transfer+0x24>
    7002: 687a         	ldr	r2, [r7, #0x4]
    7004: 68b9         	ldr	r1, [r7, #0x8]
    7006: 68f8         	ldr	r0, [r7, #0xc]
    7008: f7fe ffd2    	bl	0x5fb0 <ARM_USART_Transfer> @ imm = #-0x105c
    700c: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2987
; }
    700e: 4618         	mov	r0, r3
    7010: 3710         	adds	r7, #0x10
    7012: 46bd         	mov	sp, r7
    7014: bd80         	pop	{r7, pc}
    7016: bf00         	nop
    7018: 5c 05 00 20  	.word	0x2000055c

0000701c <UART7_GetTxCount>:
; UART7_GetTxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2990
; {
    701c: b580         	push	{r7, lr}
    701e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2991
;     return (ARM_USART_GetTxCount(&UART7));
    7020: 4802         	ldr	r0, [pc, #0x8]          @ 0x702c <UART7_GetTxCount+0x10>
    7022: f7fe ffd4    	bl	0x5fce <ARM_USART_GetTxCount> @ imm = #-0x1058
    7026: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2992
; }
    7028: 4618         	mov	r0, r3
    702a: bd80         	pop	{r7, pc}
    702c: 5c 05 00 20  	.word	0x2000055c

00007030 <UART7_GetRxCount>:
; UART7_GetRxCount():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2995
; {
    7030: b580         	push	{r7, lr}
    7032: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2996
;     return (ARM_USART_GetRxCount(&UART7));
    7034: 4802         	ldr	r0, [pc, #0x8]          @ 0x7040 <UART7_GetRxCount+0x10>
    7036: f7fe ffd6    	bl	0x5fe6 <ARM_USART_GetRxCount> @ imm = #-0x1054
    703a: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:2997
; }
    703c: 4618         	mov	r0, r3
    703e: bd80         	pop	{r7, pc}
    7040: 5c 05 00 20  	.word	0x2000055c

00007044 <UART7_Control>:
; UART7_Control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3000
; {
    7044: b580         	push	{r7, lr}
    7046: b082         	sub	sp, #0x8
    7048: af00         	add	r7, sp, #0x0
    704a: 6078         	str	r0, [r7, #0x4]
    704c: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3001
;     return (ARM_USART_Control(control, arg, &UART7));
    704e: 4a05         	ldr	r2, [pc, #0x14]         @ 0x7064 <UART7_Control+0x20>
    7050: 6839         	ldr	r1, [r7]
    7052: 6878         	ldr	r0, [r7, #0x4]
    7054: f7ff f89c    	bl	0x6190 <ARM_USART_Control> @ imm = #-0xec8
    7058: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3002
; }
    705a: 4618         	mov	r0, r3
    705c: 3708         	adds	r7, #0x8
    705e: 46bd         	mov	sp, r7
    7060: bd80         	pop	{r7, pc}
    7062: bf00         	nop
    7064: 5c 05 00 20  	.word	0x2000055c

00007068 <UART7_GetStatus>:
; UART7_GetStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3005
; {
    7068: b580         	push	{r7, lr}
    706a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3006
;     return (ARM_USART_GetStatus(&UART7));
    706c: 4802         	ldr	r0, [pc, #0x8]          @ 0x7078 <UART7_GetStatus+0x10>
    706e: f7ff f97a    	bl	0x6366 <ARM_USART_GetStatus> @ imm = #-0xd0c
    7072: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3007
; }
    7074: 4618         	mov	r0, r3
    7076: bd80         	pop	{r7, pc}
    7078: 5c 05 00 20  	.word	0x2000055c

0000707c <UART7_GetModemStatus>:
; UART7_GetModemStatus():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3010
; {
    707c: b580         	push	{r7, lr}
    707e: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3011
;     return (ARM_USART_GetModemStatus(&UART7));
    7080: 4802         	ldr	r0, [pc, #0x8]          @ 0x708c <UART7_GetModemStatus+0x10>
    7082: f7ff f98a    	bl	0x639a <ARM_USART_GetModemStatus> @ imm = #-0xcec
    7086: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3012
; }
    7088: 4618         	mov	r0, r3
    708a: bd80         	pop	{r7, pc}
    708c: 5c 05 00 20  	.word	0x2000055c

00007090 <UART7_SetModemControl>:
; UART7_SetModemControl():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3015
; {
    7090: b580         	push	{r7, lr}
    7092: b082         	sub	sp, #0x8
    7094: af00         	add	r7, sp, #0x0
    7096: 4603         	mov	r3, r0
    7098: 71fb         	strb	r3, [r7, #0x7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3016
;     return (ARM_USART_SetModemControl(control, &UART7));
    709a: 79fb         	ldrb	r3, [r7, #0x7]
    709c: 4904         	ldr	r1, [pc, #0x10]         @ 0x70b0 <UART7_SetModemControl+0x20>
    709e: 4618         	mov	r0, r3
    70a0: f7ff f96d    	bl	0x637e <ARM_USART_SetModemControl> @ imm = #-0xd26
    70a4: 4603         	mov	r3, r0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Alif_CMSIS/Source/Driver_USART.c:3017
; }
    70a6: 4618         	mov	r0, r3
    70a8: 3708         	adds	r7, #0x8
    70aa: 46bd         	mov	sp, r7
    70ac: bd80         	pop	{r7, pc}
    70ae: bf00         	nop
    70b0: 5c 05 00 20  	.word	0x2000055c

000070b4 <uart_disable_tx_irq>:
; uart_disable_tx_irq():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:608
; {
    70b4: b480         	push	{r7}
    70b6: b083         	sub	sp, #0xc
    70b8: af00         	add	r7, sp, #0x0
    70ba: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:611
;     uart->UART_IER &= ~UART_IER_ENABLE_TRANSMIT_HOLD_REG_EMPTY;
    70bc: 687b         	ldr	r3, [r7, #0x4]
    70be: 685b         	ldr	r3, [r3, #0x4]
    70c0: f023 0202    	bic	r2, r3, #0x2
    70c4: 687b         	ldr	r3, [r7, #0x4]
    70c6: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:612
; }
    70c8: bf00         	nop
    70ca: 370c         	adds	r7, #0xc
    70cc: 46bd         	mov	sp, r7
    70ce: f85d 7b04    	ldr	r7, [sp], #4
    70d2: 4770         	bx	lr

000070d4 <uart_disable_rx_irq>:
; uart_disable_rx_irq():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:640
; {
    70d4: b480         	push	{r7}
    70d6: b083         	sub	sp, #0xc
    70d8: af00         	add	r7, sp, #0x0
    70da: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:644
;     uart->UART_IER &= ~UART_IER_ENABLE_RECEIVED_DATA_AVAILABLE;
    70dc: 687b         	ldr	r3, [r7, #0x4]
    70de: 685b         	ldr	r3, [r3, #0x4]
    70e0: f023 0201    	bic	r2, r3, #0x1
    70e4: 687b         	ldr	r3, [r7, #0x4]
    70e6: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:647
;     uart->UART_IER &= ~UART_IER_ENABLE_RECEIVER_LINE_STATUS;
    70e8: 687b         	ldr	r3, [r7, #0x4]
    70ea: 685b         	ldr	r3, [r3, #0x4]
    70ec: f023 0204    	bic	r2, r3, #0x4
    70f0: 687b         	ldr	r3, [r7, #0x4]
    70f2: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/include/uart.h:648
; }
    70f4: bf00         	nop
    70f6: 370c         	adds	r7, #0xc
    70f8: 46bd         	mov	sp, r7
    70fa: f85d 7b04    	ldr	r7, [sp], #4
    70fe: 4770         	bx	lr

00007100 <uart_tx_ready>:
; uart_tx_ready():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:24
; {
    7100: b480         	push	{r7}
    7102: b083         	sub	sp, #0xc
    7104: af00         	add	r7, sp, #0x0
    7106: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:26
;     return ((uart->UART_USR & UART_USR_TRANSMIT_FIFO_NOT_FULL) ? 1 : 0);
    7108: 687b         	ldr	r3, [r7, #0x4]
    710a: 6fdb         	ldr	r3, [r3, #0x7c]
    710c: f003 0302    	and	r3, r3, #0x2
    7110: 2b00         	cmp	r3, #0x0
    7112: bf14         	ite	ne
    7114: 2301         	movne	r3, #0x1
    7116: 2300         	moveq	r3, #0x0
    7118: b2db         	uxtb	r3, r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:27
; }
    711a: 4618         	mov	r0, r3
    711c: 370c         	adds	r7, #0xc
    711e: 46bd         	mov	sp, r7
    7120: f85d 7b04    	ldr	r7, [sp], #4
    7124: 4770         	bx	lr

00007126 <uart_rx_ready>:
; uart_rx_ready():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:37
; {
    7126: b480         	push	{r7}
    7128: b083         	sub	sp, #0xc
    712a: af00         	add	r7, sp, #0x0
    712c: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:39
;     return ((uart->UART_USR & UART_USR_RECEIVE_FIFO_NOT_EMPTY) ? 1 : 0);
    712e: 687b         	ldr	r3, [r7, #0x4]
    7130: 6fdb         	ldr	r3, [r3, #0x7c]
    7132: f003 0308    	and	r3, r3, #0x8
    7136: 2b00         	cmp	r3, #0x0
    7138: bf14         	ite	ne
    713a: 2301         	movne	r3, #0x1
    713c: 2300         	moveq	r3, #0x0
    713e: b2db         	uxtb	r3, r3
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:40
; }
    7140: 4618         	mov	r0, r3
    7142: 370c         	adds	r7, #0xc
    7144: 46bd         	mov	sp, r7
    7146: f85d 7b04    	ldr	r7, [sp], #4
    714a: 4770         	bx	lr

0000714c <uart_send_a_char_to_thr>:
; uart_send_a_char_to_thr():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:53
; {
    714c: b480         	push	{r7}
    714e: b083         	sub	sp, #0xc
    7150: af00         	add	r7, sp, #0x0
    7152: 6078         	str	r0, [r7, #0x4]
    7154: 460b         	mov	r3, r1
    7156: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:55
;     uart->UART_THR = chr;
    7158: 78fa         	ldrb	r2, [r7, #0x3]
    715a: 687b         	ldr	r3, [r7, #0x4]
    715c: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:56
; }
    715e: bf00         	nop
    7160: 370c         	adds	r7, #0xc
    7162: 46bd         	mov	sp, r7
    7164: f85d 7b04    	ldr	r7, [sp], #4
    7168: 4770         	bx	lr

0000716a <uart_receive_a_char_from_rbr>:
; uart_receive_a_char_from_rbr():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:66
; {
    716a: b480         	push	{r7}
    716c: b083         	sub	sp, #0xc
    716e: af00         	add	r7, sp, #0x0
    7170: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:68
;     return uart->UART_RBR;
    7172: 687b         	ldr	r3, [r7, #0x4]
    7174: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:69
; }
    7176: 4618         	mov	r0, r3
    7178: 370c         	adds	r7, #0xc
    717a: 46bd         	mov	sp, r7
    717c: f85d 7b04    	ldr	r7, [sp], #4
    7180: 4770         	bx	lr

00007182 <uart_get_tx_fifo_available_count>:
; uart_get_tx_fifo_available_count():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:79
; {
    7182: b480         	push	{r7}
    7184: b083         	sub	sp, #0xc
    7186: af00         	add	r7, sp, #0x0
    7188: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:83
;     return (UART_FIFO_DEPTH - uart->UART_TFL);
    718a: 687b         	ldr	r3, [r7, #0x4]
    718c: f8d3 3080    	ldr.w	r3, [r3, #0x80]
    7190: f1c3 0320    	rsb.w	r3, r3, #0x20
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:84
; }
    7194: 4618         	mov	r0, r3
    7196: 370c         	adds	r7, #0xc
    7198: 46bd         	mov	sp, r7
    719a: f85d 7b04    	ldr	r7, [sp], #4
    719e: 4770         	bx	lr

000071a0 <uart_get_rx_fifo_available_count>:
; uart_get_rx_fifo_available_count():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:94
; {
    71a0: b480         	push	{r7}
    71a2: b083         	sub	sp, #0xc
    71a4: af00         	add	r7, sp, #0x0
    71a6: 6078         	str	r0, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:96
;     return (uart->UART_RFL);
    71a8: 687b         	ldr	r3, [r7, #0x4]
    71aa: f8d3 3084    	ldr.w	r3, [r3, #0x84]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:97
; }
    71ae: 4618         	mov	r0, r3
    71b0: 370c         	adds	r7, #0xc
    71b2: 46bd         	mov	sp, r7
    71b4: f85d 7b04    	ldr	r7, [sp], #4
    71b8: 4770         	bx	lr

000071ba <uart_send_blocking>:
; uart_send_blocking():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:108
; {
    71ba: b580         	push	{r7, lr}
    71bc: b084         	sub	sp, #0x10
    71be: af00         	add	r7, sp, #0x0
    71c0: 6078         	str	r0, [r7, #0x4]
    71c2: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:110
;     uint32_t tx_fifo_available_cnt  = 0U;
    71c4: 2300         	movs	r3, #0x0
    71c6: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:111
;     uint32_t i = 0U;
    71c8: 2300         	movs	r3, #0x0
    71ca: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:114
;     while ( transfer->tx_curr_cnt < transfer->tx_total_num )
    71cc: e02f         	b	0x722e <uart_send_blocking+0x74> @ imm = #0x5e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:117
;         while (!uart_tx_ready(uart)); /* blocked */
    71ce: bf00         	nop
    71d0: 6878         	ldr	r0, [r7, #0x4]
    71d2: f7ff ff95    	bl	0x7100 <uart_tx_ready>  @ imm = #-0xd6
    71d6: 4603         	mov	r3, r0
    71d8: f083 0301    	eor	r3, r3, #0x1
    71dc: b2db         	uxtb	r3, r3
    71de: 2b00         	cmp	r3, #0x0
    71e0: d1f6         	bne	0x71d0 <uart_send_blocking+0x16> @ imm = #-0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:120
;         tx_fifo_available_cnt = uart_get_tx_fifo_available_count (uart);
    71e2: 6878         	ldr	r0, [r7, #0x4]
    71e4: f7ff ffcd    	bl	0x7182 <uart_get_tx_fifo_available_count> @ imm = #-0x66
    71e8: 4603         	mov	r3, r0
    71ea: 60bb         	str	r3, [r7, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:124
;         for(i = 0; i < tx_fifo_available_cnt; i++)
    71ec: 2300         	movs	r3, #0x0
    71ee: 60fb         	str	r3, [r7, #0xc]
    71f0: e017         	b	0x7222 <uart_send_blocking+0x68> @ imm = #0x2e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:126
;             if(transfer->tx_curr_cnt >= transfer->tx_total_num)
    71f2: 683b         	ldr	r3, [r7]
    71f4: 689a         	ldr	r2, [r3, #0x8]
    71f6: 683b         	ldr	r3, [r7]
    71f8: 685b         	ldr	r3, [r3, #0x4]
    71fa: 429a         	cmp	r2, r3
    71fc: d216         	bhs	0x722c <uart_send_blocking+0x72> @ imm = #0x2c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:133
;             uart_send_a_char_to_thr(uart, transfer->tx_buf[transfer->tx_curr_cnt]);
    71fe: 683b         	ldr	r3, [r7]
    7200: 681a         	ldr	r2, [r3]
    7202: 683b         	ldr	r3, [r7]
    7204: 689b         	ldr	r3, [r3, #0x8]
    7206: 4413         	add	r3, r2
    7208: 781b         	ldrb	r3, [r3]
    720a: 4619         	mov	r1, r3
    720c: 6878         	ldr	r0, [r7, #0x4]
    720e: f7ff ff9d    	bl	0x714c <uart_send_a_char_to_thr> @ imm = #-0xc6
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:134
;             transfer->tx_curr_cnt++; /* increment the tx current count */
    7212: 683b         	ldr	r3, [r7]
    7214: 689b         	ldr	r3, [r3, #0x8]
    7216: 1c5a         	adds	r2, r3, #0x1
    7218: 683b         	ldr	r3, [r7]
    721a: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:124
;         for(i = 0; i < tx_fifo_available_cnt; i++)
    721c: 68fb         	ldr	r3, [r7, #0xc]
    721e: 3301         	adds	r3, #0x1
    7220: 60fb         	str	r3, [r7, #0xc]
    7222: 68fa         	ldr	r2, [r7, #0xc]
    7224: 68bb         	ldr	r3, [r7, #0x8]
    7226: 429a         	cmp	r2, r3
    7228: d3e3         	blo	0x71f2 <uart_send_blocking+0x38> @ imm = #-0x3a
    722a: e000         	b	0x722e <uart_send_blocking+0x74> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:129
;                 break;
    722c: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:114
;     while ( transfer->tx_curr_cnt < transfer->tx_total_num )
    722e: 683b         	ldr	r3, [r7]
    7230: 689a         	ldr	r2, [r3, #0x8]
    7232: 683b         	ldr	r3, [r7]
    7234: 685b         	ldr	r3, [r3, #0x4]
    7236: 429a         	cmp	r2, r3
    7238: d3c9         	blo	0x71ce <uart_send_blocking+0x14> @ imm = #-0x6e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:137
; }
    723a: bf00         	nop
    723c: bf00         	nop
    723e: 3710         	adds	r7, #0x10
    7240: 46bd         	mov	sp, r7
    7242: bd80         	pop	{r7, pc}

00007244 <uart_receive_blocking>:
; uart_receive_blocking():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:148
; {
    7244: b580         	push	{r7, lr}
    7246: b086         	sub	sp, #0x18
    7248: af00         	add	r7, sp, #0x0
    724a: 6078         	str	r0, [r7, #0x4]
    724c: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:150
;     uint32_t rx_fifo_available_cnt  = 0U;
    724e: 2300         	movs	r3, #0x0
    7250: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:153
;     uint32_t rx_line_status = 0U;
    7252: 2300         	movs	r3, #0x0
    7254: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:154
;     uint32_t i = 0U;
    7256: 2300         	movs	r3, #0x0
    7258: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:157
;     while(transfer->rx_curr_cnt < transfer->rx_total_num)
    725a: e06f         	b	0x733c <uart_receive_blocking+0xf8> @ imm = #0xde
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:160
;         while (!uart_rx_ready(uart)); /* blocked */
    725c: bf00         	nop
    725e: 6878         	ldr	r0, [r7, #0x4]
    7260: f7ff ff61    	bl	0x7126 <uart_rx_ready>  @ imm = #-0x13e
    7264: 4603         	mov	r3, r0
    7266: f083 0301    	eor	r3, r3, #0x1
    726a: b2db         	uxtb	r3, r3
    726c: 2b00         	cmp	r3, #0x0
    726e: d1f6         	bne	0x725e <uart_receive_blocking+0x1a> @ imm = #-0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:163
;         rx_fifo_available_cnt = uart_get_rx_fifo_available_count (uart);
    7270: 6878         	ldr	r0, [r7, #0x4]
    7272: f7ff ff95    	bl	0x71a0 <uart_get_rx_fifo_available_count> @ imm = #-0xd6
    7276: 4603         	mov	r3, r0
    7278: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:167
;         for(i = 0; i < rx_fifo_available_cnt; i++)
    727a: 2300         	movs	r3, #0x0
    727c: 617b         	str	r3, [r7, #0x14]
    727e: e057         	b	0x7330 <uart_receive_blocking+0xec> @ imm = #0xae
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:169
;             if (transfer->rx_curr_cnt >= transfer->rx_total_num)
    7280: 683b         	ldr	r3, [r7]
    7282: 695a         	ldr	r2, [r3, #0x14]
    7284: 683b         	ldr	r3, [r7]
    7286: 691b         	ldr	r3, [r3, #0x10]
    7288: 429a         	cmp	r2, r3
    728a: d256         	bhs	0x733a <uart_receive_blocking+0xf6> @ imm = #0xac
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:176
;             rx_line_status = uart->UART_LSR;
    728c: 687b         	ldr	r3, [r7, #0x4]
    728e: 695b         	ldr	r3, [r3, #0x14]
    7290: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:178
;             if (rx_line_status & (UART_LSR_RECEIVER_FIFO_ERR | UART_LSR_OVERRUN_ERR) )
    7292: 68fb         	ldr	r3, [r7, #0xc]
    7294: f003 0382    	and	r3, r3, #0x82
    7298: 2b00         	cmp	r3, #0x0
    729a: d036         	beq	0x730a <uart_receive_blocking+0xc6> @ imm = #0x6c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:181
;                 transfer->status = UART_TRANSFER_STATUS_ERROR;
    729c: 683b         	ldr	r3, [r7]
    729e: 2208         	movs	r2, #0x8
    72a0: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:187
;                 if (rx_line_status & UART_LSR_BREAK_INTERRUPT)
    72a2: 68fb         	ldr	r3, [r7, #0xc]
    72a4: f003 0310    	and	r3, r3, #0x10
    72a8: 2b00         	cmp	r3, #0x0
    72aa: d007         	beq	0x72bc <uart_receive_blocking+0x78> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:189
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_BREAK;
    72ac: 683b         	ldr	r3, [r7]
    72ae: 7e1b         	ldrb	r3, [r3, #0x18]
    72b0: b2db         	uxtb	r3, r3
    72b2: f063 037f    	orn	r3, r3, #0x7f
    72b6: b2da         	uxtb	r2, r3
    72b8: 683b         	ldr	r3, [r7]
    72ba: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:192
;                 if (rx_line_status & UART_LSR_FRAME_ERR)
    72bc: 68fb         	ldr	r3, [r7, #0xc]
    72be: f003 0308    	and	r3, r3, #0x8
    72c2: 2b00         	cmp	r3, #0x0
    72c4: d007         	beq	0x72d6 <uart_receive_blocking+0x92> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:194
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_FRAMING;
    72c6: 683b         	ldr	r3, [r7]
    72c8: 7e1b         	ldrb	r3, [r3, #0x18]
    72ca: b2db         	uxtb	r3, r3
    72cc: f043 0340    	orr	r3, r3, #0x40
    72d0: b2da         	uxtb	r2, r3
    72d2: 683b         	ldr	r3, [r7]
    72d4: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:197
;                 if (rx_line_status & UART_LSR_PARITY_ERR)
    72d6: 68fb         	ldr	r3, [r7, #0xc]
    72d8: f003 0304    	and	r3, r3, #0x4
    72dc: 2b00         	cmp	r3, #0x0
    72de: d007         	beq	0x72f0 <uart_receive_blocking+0xac> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:199
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_PARITY;
    72e0: 683b         	ldr	r3, [r7]
    72e2: 7e1b         	ldrb	r3, [r3, #0x18]
    72e4: b2db         	uxtb	r3, r3
    72e6: f043 0320    	orr	r3, r3, #0x20
    72ea: b2da         	uxtb	r2, r3
    72ec: 683b         	ldr	r3, [r7]
    72ee: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:202
;                 if (rx_line_status & UART_LSR_OVERRUN_ERR)
    72f0: 68fb         	ldr	r3, [r7, #0xc]
    72f2: f003 0302    	and	r3, r3, #0x2
    72f6: 2b00         	cmp	r3, #0x0
    72f8: d007         	beq	0x730a <uart_receive_blocking+0xc6> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:204
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_OVERRUN;
    72fa: 683b         	ldr	r3, [r7]
    72fc: 7e1b         	ldrb	r3, [r3, #0x18]
    72fe: b2db         	uxtb	r3, r3
    7300: f043 0310    	orr	r3, r3, #0x10
    7304: b2da         	uxtb	r2, r3
    7306: 683b         	ldr	r3, [r7]
    7308: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:209
;             transfer->rx_buf[transfer->rx_curr_cnt] = uart_receive_a_char_from_rbr(uart);
    730a: 6878         	ldr	r0, [r7, #0x4]
    730c: f7ff ff2d    	bl	0x716a <uart_receive_a_char_from_rbr> @ imm = #-0x1a6
    7310: 4601         	mov	r1, r0
    7312: 683b         	ldr	r3, [r7]
    7314: 68da         	ldr	r2, [r3, #0xc]
    7316: 683b         	ldr	r3, [r7]
    7318: 695b         	ldr	r3, [r3, #0x14]
    731a: 4413         	add	r3, r2
    731c: b2ca         	uxtb	r2, r1
    731e: 701a         	strb	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:210
;             transfer->rx_curr_cnt++;
    7320: 683b         	ldr	r3, [r7]
    7322: 695b         	ldr	r3, [r3, #0x14]
    7324: 1c5a         	adds	r2, r3, #0x1
    7326: 683b         	ldr	r3, [r7]
    7328: 615a         	str	r2, [r3, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:167
;         for(i = 0; i < rx_fifo_available_cnt; i++)
    732a: 697b         	ldr	r3, [r7, #0x14]
    732c: 3301         	adds	r3, #0x1
    732e: 617b         	str	r3, [r7, #0x14]
    7330: 697a         	ldr	r2, [r7, #0x14]
    7332: 693b         	ldr	r3, [r7, #0x10]
    7334: 429a         	cmp	r2, r3
    7336: d3a3         	blo	0x7280 <uart_receive_blocking+0x3c> @ imm = #-0xba
    7338: e000         	b	0x733c <uart_receive_blocking+0xf8> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:172
;                 break;
    733a: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:157
;     while(transfer->rx_curr_cnt < transfer->rx_total_num)
    733c: 683b         	ldr	r3, [r7]
    733e: 695a         	ldr	r2, [r3, #0x14]
    7340: 683b         	ldr	r3, [r7]
    7342: 691b         	ldr	r3, [r3, #0x10]
    7344: 429a         	cmp	r2, r3
    7346: d389         	blo	0x725c <uart_receive_blocking+0x18> @ imm = #-0xee
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:213
; }
    7348: bf00         	nop
    734a: bf00         	nop
    734c: 3718         	adds	r7, #0x18
    734e: 46bd         	mov	sp, r7
    7350: bd80         	pop	{r7, pc}

00007352 <uart_set_baudrate>:
; uart_set_baudrate():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:225
; {
    7352: b480         	push	{r7}
    7354: b089         	sub	sp, #0x24
    7356: af00         	add	r7, sp, #0x0
    7358: 60f8         	str	r0, [r7, #0xc]
    735a: 60b9         	str	r1, [r7, #0x8]
    735c: 607a         	str	r2, [r7, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:226
;     int32_t baud_divisor    = 0;
    735e: 2300         	movs	r3, #0x0
    7360: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:227
;     int32_t fraction        = 0;
    7362: 2300         	movs	r3, #0x0
    7364: 61bb         	str	r3, [r7, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:228
;     float decimal           = 0.0;
    7366: f04f 0300    	mov.w	r3, #0x0
    736a: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:229
;     int32_t i               = 0;
    736c: 2300         	movs	r3, #0x0
    736e: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:231
;     if(baudrate)
    7370: 687b         	ldr	r3, [r7, #0x4]
    7372: 2b00         	cmp	r3, #0x0
    7374: d029         	beq	0x73ca <uart_set_baudrate+0x78> @ imm = #0x52
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:233
;         decimal = UART_CONVERT_BAUD_TO_DIVISOR((float)clk, (float)baudrate);
    7376: 68bb         	ldr	r3, [r7, #0x8]
    7378: ee07 3a90    	vmov	s15, r3
    737c: eef8 6a67    	vcvt.f32.u32	s13, s15
    7380: 687b         	ldr	r3, [r7, #0x4]
    7382: ee07 3a90    	vmov	s15, r3
    7386: eef8 7a67    	vcvt.f32.u32	s15, s15
    738a: eeb3 7a00    	vmov.f32	s14, #1.600000e+01
    738e: ee27 7a87    	vmul.f32	s14, s15, s14
    7392: eec6 7a87    	vdiv.f32	s15, s13, s14
    7396: edc7 7a04    	vstr	s15, [r7, #16]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:234
;         baud_divisor = (int32_t)UART_CONVERT_BAUD_TO_DIVISOR(clk, baudrate);
    739a: 687b         	ldr	r3, [r7, #0x4]
    739c: 011b         	lsls	r3, r3, #0x4
    739e: 68ba         	ldr	r2, [r7, #0x8]
    73a0: fbb2 f3f3    	udiv	r3, r2, r3
    73a4: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:235
;         fraction = (int32_t)((decimal - baud_divisor) * (1 << UART_DLF_SIZE));
    73a6: 69fb         	ldr	r3, [r7, #0x1c]
    73a8: ee07 3a90    	vmov	s15, r3
    73ac: eef8 7ae7    	vcvt.f32.s32	s15, s15
    73b0: ed97 7a04    	vldr	s14, [r7, #16]
    73b4: ee77 7a67    	vsub.f32	s15, s14, s15
    73b8: eeb3 7a00    	vmov.f32	s14, #1.600000e+01
    73bc: ee67 7a87    	vmul.f32	s15, s15, s14
    73c0: eefd 7ae7    	vcvt.s32.f32	s15, s15
    73c4: ee17 3a90    	vmov	r3, s15
    73c8: 61bb         	str	r3, [r7, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:239
;     uart->UART_LCR |= UART_LCR_DLAB;
    73ca: 68fb         	ldr	r3, [r7, #0xc]
    73cc: 68db         	ldr	r3, [r3, #0xc]
    73ce: f043 0280    	orr	r2, r3, #0x80
    73d2: 68fb         	ldr	r3, [r7, #0xc]
    73d4: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:242
;     uart->UART_DLL = baud_divisor & 0xff;       /* DLL divisor latch low register       */
    73d6: 69fb         	ldr	r3, [r7, #0x1c]
    73d8: b2da         	uxtb	r2, r3
    73da: 68fb         	ldr	r3, [r7, #0xc]
    73dc: 601a         	str	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:243
;     uart->UART_DLH = (baud_divisor>>8) & 0xff;  /* DLH divisor latch high register      */
    73de: 69fb         	ldr	r3, [r7, #0x1c]
    73e0: 121b         	asrs	r3, r3, #0x8
    73e2: b2da         	uxtb	r2, r3
    73e4: 68fb         	ldr	r3, [r7, #0xc]
    73e6: 605a         	str	r2, [r3, #0x4]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:244
;     uart->UART_DLF = fraction;                  /* DLF divisor latch fraction register  */
    73e8: 69ba         	ldr	r2, [r7, #0x18]
    73ea: 68fb         	ldr	r3, [r7, #0xc]
    73ec: f8c3 20c0    	str.w	r2, [r3, #0xc0]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:247
;     uart->UART_LCR &= ~(UART_LCR_DLAB);
    73f0: 68fb         	ldr	r3, [r7, #0xc]
    73f2: 68db         	ldr	r3, [r3, #0xc]
    73f4: f023 0280    	bic	r2, r3, #0x80
    73f8: 68fb         	ldr	r3, [r7, #0xc]
    73fa: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:250
;     for(i = 0; i < (32 * baud_divisor * 1); i++);
    73fc: 2300         	movs	r3, #0x0
    73fe: 617b         	str	r3, [r7, #0x14]
    7400: e002         	b	0x7408 <uart_set_baudrate+0xb6> @ imm = #0x4
    7402: 697b         	ldr	r3, [r7, #0x14]
    7404: 3301         	adds	r3, #0x1
    7406: 617b         	str	r3, [r7, #0x14]
    7408: 69fb         	ldr	r3, [r7, #0x1c]
    740a: 015b         	lsls	r3, r3, #0x5
    740c: 697a         	ldr	r2, [r7, #0x14]
    740e: 429a         	cmp	r2, r3
    7410: dbf7         	blt	0x7402 <uart_set_baudrate+0xb0> @ imm = #-0x12
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:251
; }
    7412: bf00         	nop
    7414: bf00         	nop
    7416: 3724         	adds	r7, #0x24
    7418: 46bd         	mov	sp, r7
    741a: f85d 7b04    	ldr	r7, [sp], #4
    741e: 4770         	bx	lr

00007420 <uart_set_data_parity_stop_bits>:
; uart_set_data_parity_stop_bits():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:271
; {
    7420: b480         	push	{r7}
    7422: b085         	sub	sp, #0x14
    7424: af00         	add	r7, sp, #0x0
    7426: 6078         	str	r0, [r7, #0x4]
    7428: 4608         	mov	r0, r1
    742a: 4611         	mov	r1, r2
    742c: 461a         	mov	r2, r3
    742e: 4603         	mov	r3, r0
    7430: 70fb         	strb	r3, [r7, #0x3]
    7432: 460b         	mov	r3, r1
    7434: 70bb         	strb	r3, [r7, #0x2]
    7436: 4613         	mov	r3, r2
    7438: 707b         	strb	r3, [r7, #0x1]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:272
;     uint32_t lcr  = 0;
    743a: 2300         	movs	r3, #0x0
    743c: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:275
;     switch (data_bits)
    743e: 78fb         	ldrb	r3, [r7, #0x3]
    7440: 2b03         	cmp	r3, #0x3
    7442: d81a         	bhi	0x747a <uart_set_data_parity_stop_bits+0x5a> @ imm = #0x34
    7444: a201         	adr	r2, #4 <uart_set_data_parity_stop_bits+0x29>
    7446: f852 f023    	ldr.w	pc, [r2, r3, lsl #2]
    744a: bf00         	nop
    744c: 7b 74 00 00  	.word	0x0000747b
    7450: 5d 74 00 00  	.word	0x0000745d
    7454: 67 74 00 00  	.word	0x00007467
    7458: 71 74 00 00  	.word	0x00007471
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:280
;         case UART_DATA_BITS_6: lcr |= (UART_LCR_DATA_LENGTH_6); break;
    745c: 68fb         	ldr	r3, [r7, #0xc]
    745e: f043 0301    	orr	r3, r3, #0x1
    7462: 60fb         	str	r3, [r7, #0xc]
    7464: e009         	b	0x747a <uart_set_data_parity_stop_bits+0x5a> @ imm = #0x12
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:281
;         case UART_DATA_BITS_7: lcr |= (UART_LCR_DATA_LENGTH_7); break;
    7466: 68fb         	ldr	r3, [r7, #0xc]
    7468: f043 0302    	orr	r3, r3, #0x2
    746c: 60fb         	str	r3, [r7, #0xc]
    746e: e004         	b	0x747a <uart_set_data_parity_stop_bits+0x5a> @ imm = #0x8
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:282
;         case UART_DATA_BITS_8: lcr |= (UART_LCR_DATA_LENGTH_8); break;
    7470: 68fb         	ldr	r3, [r7, #0xc]
    7472: f043 0303    	orr	r3, r3, #0x3
    7476: 60fb         	str	r3, [r7, #0xc]
    7478: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:286
;     switch (parity)
    747a: 78bb         	ldrb	r3, [r7, #0x2]
    747c: 2b02         	cmp	r3, #0x2
    747e: d00a         	beq	0x7496 <uart_set_data_parity_stop_bits+0x76> @ imm = #0x14
    7480: 2b02         	cmp	r3, #0x2
    7482: dc0e         	bgt	0x74a2 <uart_set_data_parity_stop_bits+0x82> @ imm = #0x1c
    7484: 2b00         	cmp	r3, #0x0
    7486: d00b         	beq	0x74a0 <uart_set_data_parity_stop_bits+0x80> @ imm = #0x16
    7488: 2b01         	cmp	r3, #0x1
    748a: d10a         	bne	0x74a2 <uart_set_data_parity_stop_bits+0x82> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:291
;         case UART_PARITY_EVEN: lcr |= (UART_LCR_PARITY_EVEN); break;
    748c: 68fb         	ldr	r3, [r7, #0xc]
    748e: f043 0318    	orr	r3, r3, #0x18
    7492: 60fb         	str	r3, [r7, #0xc]
    7494: e005         	b	0x74a2 <uart_set_data_parity_stop_bits+0x82> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:292
;         case UART_PARITY_ODD:  lcr |= (UART_LCR_PARITY_ODD);  break;
    7496: 68fb         	ldr	r3, [r7, #0xc]
    7498: f043 0308    	orr	r3, r3, #0x8
    749c: 60fb         	str	r3, [r7, #0xc]
    749e: e000         	b	0x74a2 <uart_set_data_parity_stop_bits+0x82> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:290
;         case UART_PARITY_NONE: lcr |= (UART_LCR_PARITY_NONE); break;
    74a0: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:296
;     switch (stop_bits)
    74a2: 787b         	ldrb	r3, [r7, #0x1]
    74a4: 2b00         	cmp	r3, #0x0
    74a6: d006         	beq	0x74b6 <uart_set_data_parity_stop_bits+0x96> @ imm = #0xc
    74a8: 2b01         	cmp	r3, #0x1
    74aa: d105         	bne	0x74b8 <uart_set_data_parity_stop_bits+0x98> @ imm = #0xa
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:300
;         case UART_STOP_BITS_2: lcr |= (UART_LCR_STOP_2BIT); break;
    74ac: 68fb         	ldr	r3, [r7, #0xc]
    74ae: f043 0304    	orr	r3, r3, #0x4
    74b2: 60fb         	str	r3, [r7, #0xc]
    74b4: e000         	b	0x74b8 <uart_set_data_parity_stop_bits+0x98> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:299
;         case UART_STOP_BITS_1: lcr |= (UART_LCR_STOP_1BIT); break;
    74b6: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:304
;     uart->UART_LCR &= (~UART_LCR_DATA_PARITY_STOP_MASK);
    74b8: 687b         	ldr	r3, [r7, #0x4]
    74ba: 68db         	ldr	r3, [r3, #0xc]
    74bc: f023 023f    	bic	r2, r3, #0x3f
    74c0: 687b         	ldr	r3, [r7, #0x4]
    74c2: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:307
;     uart->UART_LCR |= lcr;
    74c4: 687b         	ldr	r3, [r7, #0x4]
    74c6: 68da         	ldr	r2, [r3, #0xc]
    74c8: 68fb         	ldr	r3, [r7, #0xc]
    74ca: 431a         	orrs	r2, r3
    74cc: 687b         	ldr	r3, [r7, #0x4]
    74ce: 60da         	str	r2, [r3, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:308
; }
    74d0: bf00         	nop
    74d2: 3714         	adds	r7, #0x14
    74d4: 46bd         	mov	sp, r7
    74d6: f85d 7b04    	ldr	r7, [sp], #4
    74da: 4770         	bx	lr

000074dc <uart_set_flow_control>:
; uart_set_flow_control():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:322
; {
    74dc: b480         	push	{r7}
    74de: b083         	sub	sp, #0xc
    74e0: af00         	add	r7, sp, #0x0
    74e2: 6078         	str	r0, [r7, #0x4]
    74e4: 460b         	mov	r3, r1
    74e6: 70fb         	strb	r3, [r7, #0x3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:324
;     switch (flow_control)
    74e8: 78fb         	ldrb	r3, [r7, #0x3]
    74ea: 2b03         	cmp	r3, #0x3
    74ec: d826         	bhi	0x753c <uart_set_flow_control+0x60> @ imm = #0x4c
    74ee: a201         	adr	r2, #4 <uart_set_flow_control+0x17>
    74f0: f852 f023    	ldr.w	pc, [r2, r3, lsl #2]
    74f4: 05 75 00 00  	.word	0x00007505
    74f8: 13 75 00 00  	.word	0x00007513
    74fc: 21 75 00 00  	.word	0x00007521
    7500: 2f 75 00 00  	.word	0x0000752f
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:328
;             uart->UART_MCR &= ~(UART_MCR_AFCE|UART_MCR_RTS);
    7504: 687b         	ldr	r3, [r7, #0x4]
    7506: 691b         	ldr	r3, [r3, #0x10]
    7508: f023 0222    	bic	r2, r3, #0x22
    750c: 687b         	ldr	r3, [r7, #0x4]
    750e: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:329
;             break;
    7510: e014         	b	0x753c <uart_set_flow_control+0x60> @ imm = #0x28
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:332
;             uart->UART_MCR |= (UART_MCR_AFCE|UART_MCR_RTS);
    7512: 687b         	ldr	r3, [r7, #0x4]
    7514: 691b         	ldr	r3, [r3, #0x10]
    7516: f043 0222    	orr	r2, r3, #0x22
    751a: 687b         	ldr	r3, [r7, #0x4]
    751c: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:333
;             break;
    751e: e00d         	b	0x753c <uart_set_flow_control+0x60> @ imm = #0x1a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:336
;             uart->UART_MCR |= (UART_MCR_AFCE);
    7520: 687b         	ldr	r3, [r7, #0x4]
    7522: 691b         	ldr	r3, [r3, #0x10]
    7524: f043 0220    	orr	r2, r3, #0x20
    7528: 687b         	ldr	r3, [r7, #0x4]
    752a: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:337
;             break;
    752c: e006         	b	0x753c <uart_set_flow_control+0x60> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:340
;             uart->UART_MCR |= (UART_MCR_AFCE|UART_MCR_RTS);
    752e: 687b         	ldr	r3, [r7, #0x4]
    7530: 691b         	ldr	r3, [r3, #0x10]
    7532: f043 0222    	orr	r2, r3, #0x22
    7536: 687b         	ldr	r3, [r7, #0x4]
    7538: 611a         	str	r2, [r3, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:341
;             break;
    753a: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:343
; }
    753c: bf00         	nop
    753e: 370c         	adds	r7, #0xc
    7540: 46bd         	mov	sp, r7
    7542: f85d 7b04    	ldr	r7, [sp], #4
    7546: 4770         	bx	lr

00007548 <uart_irq_handler>:
; uart_irq_handler():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:361
; {
    7548: b580         	push	{r7, lr}
    754a: b088         	sub	sp, #0x20
    754c: af00         	add	r7, sp, #0x0
    754e: 6078         	str	r0, [r7, #0x4]
    7550: 6039         	str	r1, [r7]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:362
;     uint32_t uart_int_status        = 0U;   /* uart interrupt status    */
    7552: 2300         	movs	r3, #0x0
    7554: 61bb         	str	r3, [r7, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:363
;     uint32_t rx_line_status         = 0U;   /* uart rx line status      */
    7556: 2300         	movs	r3, #0x0
    7558: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:364
;     uint32_t tx_fifo_available_cnt  = 0U;   /* TX fifo Available count. */
    755a: 2300         	movs	r3, #0x0
    755c: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:365
;     uint32_t rx_fifo_available_cnt  = 0U;   /* RX fifo Available count. */
    755e: 2300         	movs	r3, #0x0
    7560: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:366
;     uint32_t i = 0U;
    7562: 2300         	movs	r3, #0x0
    7564: 61fb         	str	r3, [r7, #0x1c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:369
;     uart_int_status = (uart->UART_IIR) & UART_IIR_INTERRUPT_ID_MASK;
    7566: 687b         	ldr	r3, [r7, #0x4]
    7568: 689b         	ldr	r3, [r3, #0x8]
    756a: f003 030f    	and	r3, r3, #0xf
    756e: 61bb         	str	r3, [r7, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:371
;     switch (uart_int_status)
    7570: 69bb         	ldr	r3, [r7, #0x18]
    7572: 2b0c         	cmp	r3, #0xc
    7574: f200 80f0    	bhi.w	0x7758 <uart_irq_handler+0x210> @ imm = #0x1e0
    7578: a201         	adr	r2, #4 <uart_irq_handler+0x35>
    757a: f852 f023    	ldr.w	pc, [r2, r3, lsl #2]
    757e: bf00         	nop
    7580: b5 75 00 00  	.word	0x000075b5
    7584: 59 77 00 00  	.word	0x00007759
    7588: 3f 76 00 00  	.word	0x0000763f
    758c: 59 77 00 00  	.word	0x00007759
    7590: c1 76 00 00  	.word	0x000076c1
    7594: 59 77 00 00  	.word	0x00007759
    7598: bb 75 00 00  	.word	0x000075bb
    759c: 59 77 00 00  	.word	0x00007759
    75a0: 59 77 00 00  	.word	0x00007759
    75a4: 59 77 00 00  	.word	0x00007759
    75a8: 59 77 00 00  	.word	0x00007759
    75ac: 59 77 00 00  	.word	0x00007759
    75b0: c1 76 00 00  	.word	0x000076c1
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:374
;             (void)(uart->UART_MSR);
    75b4: 687b         	ldr	r3, [r7, #0x4]
    75b6: 699b         	ldr	r3, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:376
;             break;
    75b8: e0d6         	b	0x7768 <uart_irq_handler+0x220> @ imm = #0x1ac
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:379
;             rx_line_status = uart->UART_LSR;
    75ba: 687b         	ldr	r3, [r7, #0x4]
    75bc: 695b         	ldr	r3, [r3, #0x14]
    75be: 617b         	str	r3, [r7, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:382
;             if (rx_line_status & (UART_LSR_RECEIVER_FIFO_ERR | UART_LSR_OVERRUN_ERR) )
    75c0: 697b         	ldr	r3, [r7, #0x14]
    75c2: f003 0382    	and	r3, r3, #0x82
    75c6: 2b00         	cmp	r3, #0x0
    75c8: f000 80c9    	beq.w	0x775e <uart_irq_handler+0x216> @ imm = #0x192
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:385
;                 transfer->status = UART_TRANSFER_STATUS_ERROR;
    75cc: 683b         	ldr	r3, [r7]
    75ce: 2208         	movs	r2, #0x8
    75d0: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:390
;                 if (rx_line_status & UART_LSR_BREAK_INTERRUPT)
    75d2: 697b         	ldr	r3, [r7, #0x14]
    75d4: f003 0310    	and	r3, r3, #0x10
    75d8: 2b00         	cmp	r3, #0x0
    75da: d007         	beq	0x75ec <uart_irq_handler+0xa4> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:392
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_BREAK;
    75dc: 683b         	ldr	r3, [r7]
    75de: 7e1b         	ldrb	r3, [r3, #0x18]
    75e0: b2db         	uxtb	r3, r3
    75e2: f063 037f    	orn	r3, r3, #0x7f
    75e6: b2da         	uxtb	r2, r3
    75e8: 683b         	ldr	r3, [r7]
    75ea: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:395
;                 if (rx_line_status & UART_LSR_FRAME_ERR)
    75ec: 697b         	ldr	r3, [r7, #0x14]
    75ee: f003 0308    	and	r3, r3, #0x8
    75f2: 2b00         	cmp	r3, #0x0
    75f4: d007         	beq	0x7606 <uart_irq_handler+0xbe> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:397
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_FRAMING;
    75f6: 683b         	ldr	r3, [r7]
    75f8: 7e1b         	ldrb	r3, [r3, #0x18]
    75fa: b2db         	uxtb	r3, r3
    75fc: f043 0340    	orr	r3, r3, #0x40
    7600: b2da         	uxtb	r2, r3
    7602: 683b         	ldr	r3, [r7]
    7604: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:400
;                 if (rx_line_status & UART_LSR_PARITY_ERR)
    7606: 697b         	ldr	r3, [r7, #0x14]
    7608: f003 0304    	and	r3, r3, #0x4
    760c: 2b00         	cmp	r3, #0x0
    760e: d007         	beq	0x7620 <uart_irq_handler+0xd8> @ imm = #0xe
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:402
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_PARITY;
    7610: 683b         	ldr	r3, [r7]
    7612: 7e1b         	ldrb	r3, [r3, #0x18]
    7614: b2db         	uxtb	r3, r3
    7616: f043 0320    	orr	r3, r3, #0x20
    761a: b2da         	uxtb	r2, r3
    761c: 683b         	ldr	r3, [r7]
    761e: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:405
;                 if (rx_line_status & UART_LSR_OVERRUN_ERR)
    7620: 697b         	ldr	r3, [r7, #0x14]
    7622: f003 0302    	and	r3, r3, #0x2
    7626: 2b00         	cmp	r3, #0x0
    7628: f000 8099    	beq.w	0x775e <uart_irq_handler+0x216> @ imm = #0x132
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:407
;                     transfer->status |= UART_TRANSFER_STATUS_ERROR_RX_OVERRUN;
    762c: 683b         	ldr	r3, [r7]
    762e: 7e1b         	ldrb	r3, [r3, #0x18]
    7630: b2db         	uxtb	r3, r3
    7632: f043 0310    	orr	r3, r3, #0x10
    7636: b2da         	uxtb	r2, r3
    7638: 683b         	ldr	r3, [r7]
    763a: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:410
;             break;
    763c: e08f         	b	0x775e <uart_irq_handler+0x216> @ imm = #0x11e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:416
;                 tx_fifo_available_cnt = uart_get_tx_fifo_available_count (uart);
    763e: 6878         	ldr	r0, [r7, #0x4]
    7640: f7ff fd9f    	bl	0x7182 <uart_get_tx_fifo_available_count> @ imm = #-0x4c2
    7644: 4603         	mov	r3, r0
    7646: 613b         	str	r3, [r7, #0x10]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:419
;                 for(i=0; i<tx_fifo_available_cnt; i++)
    7648: 2300         	movs	r3, #0x0
    764a: 61fb         	str	r3, [r7, #0x1c]
    764c: e017         	b	0x767e <uart_irq_handler+0x136> @ imm = #0x2e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:421
;                     if(transfer->tx_curr_cnt >= transfer->tx_total_num)
    764e: 683b         	ldr	r3, [r7]
    7650: 689a         	ldr	r2, [r3, #0x8]
    7652: 683b         	ldr	r3, [r7]
    7654: 685b         	ldr	r3, [r3, #0x4]
    7656: 429a         	cmp	r2, r3
    7658: d216         	bhs	0x7688 <uart_irq_handler+0x140> @ imm = #0x2c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:428
;                     uart_send_a_char_to_thr(uart, transfer->tx_buf[transfer->tx_curr_cnt]);
    765a: 683b         	ldr	r3, [r7]
    765c: 681a         	ldr	r2, [r3]
    765e: 683b         	ldr	r3, [r7]
    7660: 689b         	ldr	r3, [r3, #0x8]
    7662: 4413         	add	r3, r2
    7664: 781b         	ldrb	r3, [r3]
    7666: 4619         	mov	r1, r3
    7668: 6878         	ldr	r0, [r7, #0x4]
    766a: f7ff fd6f    	bl	0x714c <uart_send_a_char_to_thr> @ imm = #-0x522
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:429
;                     transfer->tx_curr_cnt++; /* increment the tx current count */
    766e: 683b         	ldr	r3, [r7]
    7670: 689b         	ldr	r3, [r3, #0x8]
    7672: 1c5a         	adds	r2, r3, #0x1
    7674: 683b         	ldr	r3, [r7]
    7676: 609a         	str	r2, [r3, #0x8]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:419
;                 for(i=0; i<tx_fifo_available_cnt; i++)
    7678: 69fb         	ldr	r3, [r7, #0x1c]
    767a: 3301         	adds	r3, #0x1
    767c: 61fb         	str	r3, [r7, #0x1c]
    767e: 69fa         	ldr	r2, [r7, #0x1c]
    7680: 693b         	ldr	r3, [r7, #0x10]
    7682: 429a         	cmp	r2, r3
    7684: d3e3         	blo	0x764e <uart_irq_handler+0x106> @ imm = #-0x3a
    7686: e000         	b	0x768a <uart_irq_handler+0x142> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:424
;                         break;
    7688: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:434
;             } while( uart_tx_ready(uart) && (transfer->tx_curr_cnt < transfer->tx_total_num) );
    768a: 6878         	ldr	r0, [r7, #0x4]
    768c: f7ff fd38    	bl	0x7100 <uart_tx_ready>  @ imm = #-0x590
    7690: 4603         	mov	r3, r0
    7692: 2b00         	cmp	r3, #0x0
    7694: d007         	beq	0x76a6 <uart_irq_handler+0x15e> @ imm = #0xe
    7696: 683b         	ldr	r3, [r7]
    7698: 689a         	ldr	r2, [r3, #0x8]
    769a: 683b         	ldr	r3, [r7]
    769c: 685b         	ldr	r3, [r3, #0x4]
    769e: 429a         	cmp	r2, r3
    76a0: d201         	bhs	0x76a6 <uart_irq_handler+0x15e> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:412
;         case UART_IIR_TRANSMIT_HOLDING_REG_EMPTY: /* transmit holding register empty */
    76a2: bf00         	nop
    76a4: e7cb         	b	0x763e <uart_irq_handler+0xf6> @ imm = #-0x6a
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:437
;             if (transfer->tx_curr_cnt >= transfer->tx_total_num)
    76a6: 683b         	ldr	r3, [r7]
    76a8: 689a         	ldr	r2, [r3, #0x8]
    76aa: 683b         	ldr	r3, [r7]
    76ac: 685b         	ldr	r3, [r3, #0x4]
    76ae: 429a         	cmp	r2, r3
    76b0: d357         	blo	0x7762 <uart_irq_handler+0x21a> @ imm = #0xae
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:440
;                 uart_disable_tx_irq(uart);
    76b2: 6878         	ldr	r0, [r7, #0x4]
    76b4: f7ff fcfe    	bl	0x70b4 <uart_disable_tx_irq> @ imm = #-0x604
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:443
;                 transfer->status = UART_TRANSFER_STATUS_SEND_COMPLETE;
    76b8: 683b         	ldr	r3, [r7]
    76ba: 2201         	movs	r2, #0x1
    76bc: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:445
;             break;
    76be: e050         	b	0x7762 <uart_irq_handler+0x21a> @ imm = #0xa0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:452
;                 rx_fifo_available_cnt = uart_get_rx_fifo_available_count (uart);
    76c0: 6878         	ldr	r0, [r7, #0x4]
    76c2: f7ff fd6d    	bl	0x71a0 <uart_get_rx_fifo_available_count> @ imm = #-0x526
    76c6: 4603         	mov	r3, r0
    76c8: 60fb         	str	r3, [r7, #0xc]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:455
;                 for(i=0; i<rx_fifo_available_cnt; i++)
    76ca: 2300         	movs	r3, #0x0
    76cc: 61fb         	str	r3, [r7, #0x1c]
    76ce: e018         	b	0x7702 <uart_irq_handler+0x1ba> @ imm = #0x30
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:457
;                     if (transfer->rx_curr_cnt >= transfer->rx_total_num)
    76d0: 683b         	ldr	r3, [r7]
    76d2: 695a         	ldr	r2, [r3, #0x14]
    76d4: 683b         	ldr	r3, [r7]
    76d6: 691b         	ldr	r3, [r3, #0x10]
    76d8: 429a         	cmp	r2, r3
    76da: d217         	bhs	0x770c <uart_irq_handler+0x1c4> @ imm = #0x2e
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:464
;                     transfer->rx_buf[transfer->rx_curr_cnt] = uart_receive_a_char_from_rbr(uart);
    76dc: 6878         	ldr	r0, [r7, #0x4]
    76de: f7ff fd44    	bl	0x716a <uart_receive_a_char_from_rbr> @ imm = #-0x578
    76e2: 4601         	mov	r1, r0
    76e4: 683b         	ldr	r3, [r7]
    76e6: 68da         	ldr	r2, [r3, #0xc]
    76e8: 683b         	ldr	r3, [r7]
    76ea: 695b         	ldr	r3, [r3, #0x14]
    76ec: 4413         	add	r3, r2
    76ee: b2ca         	uxtb	r2, r1
    76f0: 701a         	strb	r2, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:465
;                     transfer->rx_curr_cnt++;
    76f2: 683b         	ldr	r3, [r7]
    76f4: 695b         	ldr	r3, [r3, #0x14]
    76f6: 1c5a         	adds	r2, r3, #0x1
    76f8: 683b         	ldr	r3, [r7]
    76fa: 615a         	str	r2, [r3, #0x14]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:455
;                 for(i=0; i<rx_fifo_available_cnt; i++)
    76fc: 69fb         	ldr	r3, [r7, #0x1c]
    76fe: 3301         	adds	r3, #0x1
    7700: 61fb         	str	r3, [r7, #0x1c]
    7702: 69fa         	ldr	r2, [r7, #0x1c]
    7704: 68fb         	ldr	r3, [r7, #0xc]
    7706: 429a         	cmp	r2, r3
    7708: d3e2         	blo	0x76d0 <uart_irq_handler+0x188> @ imm = #-0x3c
    770a: e000         	b	0x770e <uart_irq_handler+0x1c6> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:460
;                         break;
    770c: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:469
;             } while( uart_rx_ready(uart) && (transfer->rx_curr_cnt < transfer->rx_total_num) );
    770e: 6878         	ldr	r0, [r7, #0x4]
    7710: f7ff fd09    	bl	0x7126 <uart_rx_ready>  @ imm = #-0x5ee
    7714: 4603         	mov	r3, r0
    7716: 2b00         	cmp	r3, #0x0
    7718: d007         	beq	0x772a <uart_irq_handler+0x1e2> @ imm = #0xe
    771a: 683b         	ldr	r3, [r7]
    771c: 695a         	ldr	r2, [r3, #0x14]
    771e: 683b         	ldr	r3, [r7]
    7720: 691b         	ldr	r3, [r3, #0x10]
    7722: 429a         	cmp	r2, r3
    7724: d201         	bhs	0x772a <uart_irq_handler+0x1e2> @ imm = #0x2
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:447
;         case UART_IIR_CHARACTER_TIMEOUT:        /* character timeout */
    7726: bf00         	nop
    7728: e7ca         	b	0x76c0 <uart_irq_handler+0x178> @ imm = #-0x6c
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:472
;             if (transfer->rx_curr_cnt >= transfer->rx_total_num)
    772a: 683b         	ldr	r3, [r7]
    772c: 695a         	ldr	r2, [r3, #0x14]
    772e: 683b         	ldr	r3, [r7]
    7730: 691b         	ldr	r3, [r3, #0x10]
    7732: 429a         	cmp	r2, r3
    7734: d306         	blo	0x7744 <uart_irq_handler+0x1fc> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:475
;                 uart_disable_rx_irq(uart);
    7736: 6878         	ldr	r0, [r7, #0x4]
    7738: f7ff fccc    	bl	0x70d4 <uart_disable_rx_irq> @ imm = #-0x668
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:478
;                 transfer->status = UART_TRANSFER_STATUS_RECEIVE_COMPLETE;
    773c: 683b         	ldr	r3, [r7]
    773e: 2202         	movs	r2, #0x2
    7740: 761a         	strb	r2, [r3, #0x18]
    7742: e002         	b	0x774a <uart_irq_handler+0x202> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:500
;                 transfer->status = UART_TRANSFER_STATUS_RX_TIMEOUT;
    7744: 683b         	ldr	r3, [r7]
    7746: 2204         	movs	r2, #0x4
    7748: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:504
;             if (uart_int_status == UART_IIR_CHARACTER_TIMEOUT)
    774a: 69bb         	ldr	r3, [r7, #0x18]
    774c: 2b0c         	cmp	r3, #0xc
    774e: d10a         	bne	0x7766 <uart_irq_handler+0x21e> @ imm = #0x14
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:512
;                 transfer->status = UART_TRANSFER_STATUS_RX_TIMEOUT;
    7750: 683b         	ldr	r3, [r7]
    7752: 2204         	movs	r2, #0x4
    7754: 761a         	strb	r2, [r3, #0x18]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:515
;             break;
    7756: e006         	b	0x7766 <uart_irq_handler+0x21e> @ imm = #0xc
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:519
;             (void)(uart->UART_USR);
    7758: 687b         	ldr	r3, [r7, #0x4]
    775a: 6fdb         	ldr	r3, [r3, #0x7c]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:520
;             break;
    775c: e004         	b	0x7768 <uart_irq_handler+0x220> @ imm = #0x8
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:410
;             break;
    775e: bf00         	nop
    7760: e002         	b	0x7768 <uart_irq_handler+0x220> @ imm = #0x4
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:445
;             break;
    7762: bf00         	nop
    7764: e000         	b	0x7768 <uart_irq_handler+0x220> @ imm = #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:515
;             break;
    7766: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:523
;     return;
    7768: bf00         	nop
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/drivers/source/uart.c:524
; }
    776a: 3720         	adds	r7, #0x20
    776c: 46bd         	mov	sp, r7
    776e: bd80         	pop	{r7, pc}

00007770 <GetSystemAXIClock>:
; GetSystemAXIClock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:65
; {
    7770: b480         	push	{r7}
    7772: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:66
;   return SystemAXIClock;
    7774: 4b03         	ldr	r3, [pc, #0xc]          @ 0x7784 <GetSystemAXIClock+0x14>
    7776: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:67
; }
    7778: 4618         	mov	r0, r3
    777a: 46bd         	mov	sp, r7
    777c: f85d 7b04    	ldr	r7, [sp], #4
    7780: 4770         	bx	lr
    7782: bf00         	nop
    7784: a0 05 00 20  	.word	0x200005a0

00007788 <GetSystemAHBClock>:
; GetSystemAHBClock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:73
; {
    7788: b480         	push	{r7}
    778a: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:74
;   return SystemAHBClock;
    778c: 4b03         	ldr	r3, [pc, #0xc]          @ 0x779c <GetSystemAHBClock+0x14>
    778e: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:75
; }
    7790: 4618         	mov	r0, r3
    7792: 46bd         	mov	sp, r7
    7794: f85d 7b04    	ldr	r7, [sp], #4
    7798: 4770         	bx	lr
    779a: bf00         	nop
    779c: a4 05 00 20  	.word	0x200005a4

000077a0 <GetSystemAPBClock>:
; GetSystemAPBClock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:81
; {
    77a0: b480         	push	{r7}
    77a2: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:82
;   return SystemAPBClock;
    77a4: 4b03         	ldr	r3, [pc, #0xc]          @ 0x77b4 <GetSystemAPBClock+0x14>
    77a6: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:83
; }
    77a8: 4618         	mov	r0, r3
    77aa: 46bd         	mov	sp, r7
    77ac: f85d 7b04    	ldr	r7, [sp], #4
    77b0: 4770         	bx	lr
    77b2: bf00         	nop
    77b4: a8 05 00 20  	.word	0x200005a8

000077b8 <GetSystemREFClock>:
; GetSystemREFClock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:89
; {
    77b8: b480         	push	{r7}
    77ba: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:90
;   return SystemREFClock;
    77bc: 4b03         	ldr	r3, [pc, #0xc]          @ 0x77cc <GetSystemREFClock+0x14>
    77be: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:91
; }
    77c0: 4618         	mov	r0, r3
    77c2: 46bd         	mov	sp, r7
    77c4: f85d 7b04    	ldr	r7, [sp], #4
    77c8: 4770         	bx	lr
    77ca: bf00         	nop
    77cc: ac 05 00 20  	.word	0x200005ac

000077d0 <GetSystemHFOSClock>:
; GetSystemHFOSClock():
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:97
; {
    77d0: b480         	push	{r7}
    77d2: af00         	add	r7, sp, #0x0
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:98
;   return SystemHFOSCClock;
    77d4: 4b03         	ldr	r3, [pc, #0xc]          @ 0x77e4 <GetSystemHFOSClock+0x14>
    77d6: 681b         	ldr	r3, [r3]
; /Users/till/.cache/arm/packs/AlifSemiconductor/Ensemble/1.3.3/Device/common/source/clk.c:99
; }
    77d8: 4618         	mov	r0, r3
    77da: 46bd         	mov	sp, r7
    77dc: f85d 7b04    	ldr	r7, [sp], #4
    77e0: 4770         	bx	lr
    77e2: bf00         	nop
    77e4: b0 05 00 20  	.word	0x200005b0

000077e8 <__aeabi_uldivmod>:
; __aeabi_uldivmod():
    77e8: b953         	cbnz	r3, 0x7800 <__aeabi_uldivmod+0x18> @ imm = #0x14
    77ea: b94a         	cbnz	r2, 0x7800 <__aeabi_uldivmod+0x18> @ imm = #0x12
    77ec: 2900         	cmp	r1, #0x0
    77ee: bf08         	it	eq
    77f0: 2800         	cmpeq	r0, #0x0
    77f2: bf1c         	itt	ne
    77f4: f04f 31ff    	movne.w	r1, #0xffffffff
    77f8: f04f 30ff    	movne.w	r0, #0xffffffff
    77fc: f001 b96c    	b.w	0x8ad8 <__aeabi_ldiv0>  @ imm = #0x12d8
    7800: f1ad 0c08    	sub.w	r12, sp, #0x8
    7804: e96d ce04    	strd	r12, lr, [sp, #-16]!
    7808: f000 f806    	bl	0x7818 <__udivmoddi4>   @ imm = #0xc
    780c: f8dd e004    	ldr.w	lr, [sp, #0x4]
    7810: e9dd 2302    	ldrd	r2, r3, [sp, #8]
    7814: b004         	add	sp, #0x10
    7816: 4770         	bx	lr

00007818 <__udivmoddi4>:
; __udivmoddi4():
    7818: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    781c: 468c         	mov	r12, r1
    781e: 9e09         	ldr	r6, [sp, #0x24]
    7820: 4604         	mov	r4, r0
    7822: 460f         	mov	r7, r1
    7824: 2b00         	cmp	r3, #0x0
    7826: d148         	bne	0x78ba <__udivmoddi4+0xa2> @ imm = #0x90
    7828: 428a         	cmp	r2, r1
    782a: 4615         	mov	r5, r2
    782c: d95e         	bls	0x78ec <__udivmoddi4+0xd4> @ imm = #0xbc
    782e: fab2 f382    	clz	r3, r2
    7832: b13b         	cbz	r3, 0x7844 <__udivmoddi4+0x2c> @ imm = #0xe
    7834: f1c3 0220    	rsb.w	r2, r3, #0x20
    7838: 409f         	lsls	r7, r3
    783a: 409d         	lsls	r5, r3
    783c: 409c         	lsls	r4, r3
    783e: fa20 f202    	lsr.w	r2, r0, r2
    7842: 4317         	orrs	r7, r2
    7844: ea4f 4e15    	lsr.w	lr, r5, #0x10
    7848: fa1f fc85    	uxth.w	r12, r5
    784c: 0c22         	lsrs	r2, r4, #0x10
    784e: fbb7 f1fe    	udiv	r1, r7, lr
    7852: fb0e 7711    	mls	r7, lr, r1, r7
    7856: fb01 f00c    	mul	r0, r1, r12
    785a: ea42 4207    	orr.w	r2, r2, r7, lsl #16
    785e: 4290         	cmp	r0, r2
    7860: d907         	bls	0x7872 <__udivmoddi4+0x5a> @ imm = #0xe
    7862: 18aa         	adds	r2, r5, r2
    7864: f101 37ff    	add.w	r7, r1, #0xffffffff
    7868: d202         	bhs	0x7870 <__udivmoddi4+0x58> @ imm = #0x4
    786a: 4290         	cmp	r0, r2
    786c: f200 8158    	bhi.w	0x7b20 <__udivmoddi4+0x308> @ imm = #0x2b0
    7870: 4639         	mov	r1, r7
    7872: 1a12         	subs	r2, r2, r0
    7874: b2a4         	uxth	r4, r4
    7876: fbb2 f0fe    	udiv	r0, r2, lr
    787a: fb0e 2210    	mls	r2, lr, r0, r2
    787e: fb00 fc0c    	mul	r12, r0, r12
    7882: ea44 4402    	orr.w	r4, r4, r2, lsl #16
    7886: 45a4         	cmp	r12, r4
    7888: d90b         	bls	0x78a2 <__udivmoddi4+0x8a> @ imm = #0x16
    788a: 192c         	adds	r4, r5, r4
    788c: f100 32ff    	add.w	r2, r0, #0xffffffff
    7890: bf2c         	ite	hs
    7892: 2701         	movhs	r7, #0x1
    7894: 2700         	movlo	r7, #0x0
    7896: 45a4         	cmp	r12, r4
    7898: d902         	bls	0x78a0 <__udivmoddi4+0x88> @ imm = #0x4
    789a: 2f00         	cmp	r7, #0x0
    789c: f000 8143    	beq.w	0x7b26 <__udivmoddi4+0x30e> @ imm = #0x286
    78a0: 4610         	mov	r0, r2
    78a2: ea40 4001    	orr.w	r0, r0, r1, lsl #16
    78a6: eba4 040c    	sub.w	r4, r4, r12
    78aa: 2100         	movs	r1, #0x0
    78ac: b11e         	cbz	r6, 0x78b6 <__udivmoddi4+0x9e> @ imm = #0x6
    78ae: 40dc         	lsrs	r4, r3
    78b0: 2300         	movs	r3, #0x0
    78b2: e9c6 4300    	strd	r4, r3, [r6]
    78b6: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    78ba: 428b         	cmp	r3, r1
    78bc: d906         	bls	0x78cc <__udivmoddi4+0xb4> @ imm = #0xc
    78be: b10e         	cbz	r6, 0x78c4 <__udivmoddi4+0xac> @ imm = #0x2
    78c0: e9c6 0100    	strd	r0, r1, [r6]
    78c4: 2100         	movs	r1, #0x0
    78c6: 4608         	mov	r0, r1
    78c8: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    78cc: fab3 f183    	clz	r1, r3
    78d0: 2900         	cmp	r1, #0x0
    78d2: d151         	bne	0x7978 <__udivmoddi4+0x160> @ imm = #0xa2
    78d4: 4563         	cmp	r3, r12
    78d6: f0c0 8116    	blo.w	0x7b06 <__udivmoddi4+0x2ee> @ imm = #0x22c
    78da: 4282         	cmp	r2, r0
    78dc: f240 8113    	bls.w	0x7b06 <__udivmoddi4+0x2ee> @ imm = #0x226
    78e0: 4608         	mov	r0, r1
    78e2: 2e00         	cmp	r6, #0x0
    78e4: d0e7         	beq	0x78b6 <__udivmoddi4+0x9e> @ imm = #-0x32
    78e6: e9c6 4700    	strd	r4, r7, [r6]
    78ea: e7e4         	b	0x78b6 <__udivmoddi4+0x9e> @ imm = #-0x38
    78ec: 2a00         	cmp	r2, #0x0
    78ee: f000 80af    	beq.w	0x7a50 <__udivmoddi4+0x238> @ imm = #0x15e
    78f2: fab2 f382    	clz	r3, r2
    78f6: 2b00         	cmp	r3, #0x0
    78f8: f040 80c2    	bne.w	0x7a80 <__udivmoddi4+0x268> @ imm = #0x184
    78fc: 1a8a         	subs	r2, r1, r2
    78fe: ea4f 4e15    	lsr.w	lr, r5, #0x10
    7902: b2af         	uxth	r7, r5
    7904: 2101         	movs	r1, #0x1
    7906: 0c20         	lsrs	r0, r4, #0x10
    7908: fbb2 fcfe    	udiv	r12, r2, lr
    790c: fb0e 221c    	mls	r2, lr, r12, r2
    7910: ea40 4202    	orr.w	r2, r0, r2, lsl #16
    7914: fb07 f00c    	mul	r0, r7, r12
    7918: 4290         	cmp	r0, r2
    791a: d90e         	bls	0x793a <__udivmoddi4+0x122> @ imm = #0x1c
    791c: 18aa         	adds	r2, r5, r2
    791e: f10c 38ff    	add.w	r8, r12, #0xffffffff
    7922: bf2c         	ite	hs
    7924: f04f 0901    	movhs.w	r9, #0x1
    7928: f04f 0900    	movlo.w	r9, #0x0
    792c: 4290         	cmp	r0, r2
    792e: d903         	bls	0x7938 <__udivmoddi4+0x120> @ imm = #0x6
    7930: f1b9 0f00    	cmp.w	r9, #0x0
    7934: f000 80f0    	beq.w	0x7b18 <__udivmoddi4+0x300> @ imm = #0x1e0
    7938: 46c4         	mov	r12, r8
    793a: 1a12         	subs	r2, r2, r0
    793c: b2a4         	uxth	r4, r4
    793e: fbb2 f0fe    	udiv	r0, r2, lr
    7942: fb0e 2210    	mls	r2, lr, r0, r2
    7946: fb00 f707    	mul	r7, r0, r7
    794a: ea44 4402    	orr.w	r4, r4, r2, lsl #16
    794e: 42a7         	cmp	r7, r4
    7950: d90e         	bls	0x7970 <__udivmoddi4+0x158> @ imm = #0x1c
    7952: 192c         	adds	r4, r5, r4
    7954: f100 32ff    	add.w	r2, r0, #0xffffffff
    7958: bf2c         	ite	hs
    795a: f04f 0e01    	movhs.w	lr, #0x1
    795e: f04f 0e00    	movlo.w	lr, #0x0
    7962: 42a7         	cmp	r7, r4
    7964: d903         	bls	0x796e <__udivmoddi4+0x156> @ imm = #0x6
    7966: f1be 0f00    	cmp.w	lr, #0x0
    796a: f000 80d2    	beq.w	0x7b12 <__udivmoddi4+0x2fa> @ imm = #0x1a4
    796e: 4610         	mov	r0, r2
    7970: 1be4         	subs	r4, r4, r7
    7972: ea40 400c    	orr.w	r0, r0, r12, lsl #16
    7976: e799         	b	0x78ac <__udivmoddi4+0x94> @ imm = #-0xce
    7978: f1c1 0520    	rsb.w	r5, r1, #0x20
    797c: 408b         	lsls	r3, r1
    797e: fa0c f401    	lsl.w	r4, r12, r1
    7982: fa00 f901    	lsl.w	r9, r0, r1
    7986: fa22 f705    	lsr.w	r7, r2, r5
    798a: fa2c fc05    	lsr.w	r12, r12, r5
    798e: 408a         	lsls	r2, r1
    7990: 431f         	orrs	r7, r3
    7992: fa20 f305    	lsr.w	r3, r0, r5
    7996: 0c38         	lsrs	r0, r7, #0x10
    7998: 4323         	orrs	r3, r4
    799a: fa1f fe87    	uxth.w	lr, r7
    799e: 0c1c         	lsrs	r4, r3, #0x10
    79a0: fbbc f8f0    	udiv	r8, r12, r0
    79a4: fb00 cc18    	mls	r12, r0, r8, r12
    79a8: ea44 440c    	orr.w	r4, r4, r12, lsl #16
    79ac: fb08 fc0e    	mul	r12, r8, lr
    79b0: 45a4         	cmp	r12, r4
    79b2: d90e         	bls	0x79d2 <__udivmoddi4+0x1ba> @ imm = #0x1c
    79b4: 193c         	adds	r4, r7, r4
    79b6: f108 3aff    	add.w	r10, r8, #0xffffffff
    79ba: bf2c         	ite	hs
    79bc: f04f 0b01    	movhs.w	r11, #0x1
    79c0: f04f 0b00    	movlo.w	r11, #0x0
    79c4: 45a4         	cmp	r12, r4
    79c6: d903         	bls	0x79d0 <__udivmoddi4+0x1b8> @ imm = #0x6
    79c8: f1bb 0f00    	cmp.w	r11, #0x0
    79cc: f000 80b8    	beq.w	0x7b40 <__udivmoddi4+0x328> @ imm = #0x170
    79d0: 46d0         	mov	r8, r10
    79d2: eba4 040c    	sub.w	r4, r4, r12
    79d6: fa1f fc83    	uxth.w	r12, r3
    79da: fbb4 f3f0    	udiv	r3, r4, r0
    79de: fb00 4413    	mls	r4, r0, r3, r4
    79e2: fb03 fe0e    	mul	lr, r3, lr
    79e6: ea4c 4404    	orr.w	r4, r12, r4, lsl #16
    79ea: 45a6         	cmp	lr, r4
    79ec: d90e         	bls	0x7a0c <__udivmoddi4+0x1f4> @ imm = #0x1c
    79ee: 193c         	adds	r4, r7, r4
    79f0: f103 30ff    	add.w	r0, r3, #0xffffffff
    79f4: bf2c         	ite	hs
    79f6: f04f 0c01    	movhs.w	r12, #0x1
    79fa: f04f 0c00    	movlo.w	r12, #0x0
    79fe: 45a6         	cmp	lr, r4
    7a00: d903         	bls	0x7a0a <__udivmoddi4+0x1f2> @ imm = #0x6
    7a02: f1bc 0f00    	cmp.w	r12, #0x0
    7a06: f000 809f    	beq.w	0x7b48 <__udivmoddi4+0x330> @ imm = #0x13e
    7a0a: 4603         	mov	r3, r0
    7a0c: ea43 4008    	orr.w	r0, r3, r8, lsl #16
    7a10: eba4 040e    	sub.w	r4, r4, lr
    7a14: fba0 ec02    	umull	lr, r12, r0, r2
    7a18: 4564         	cmp	r4, r12
    7a1a: 4673         	mov	r3, lr
    7a1c: 46e0         	mov	r8, r12
    7a1e: d302         	blo	0x7a26 <__udivmoddi4+0x20e> @ imm = #0x4
    7a20: d107         	bne	0x7a32 <__udivmoddi4+0x21a> @ imm = #0xe
    7a22: 45f1         	cmp	r9, lr
    7a24: d205         	bhs	0x7a32 <__udivmoddi4+0x21a> @ imm = #0xa
    7a26: ebbe 0302    	subs.w	r3, lr, r2
    7a2a: eb6c 0c07    	sbc.w	r12, r12, r7
    7a2e: 3801         	subs	r0, #0x1
    7a30: 46e0         	mov	r8, r12
    7a32: b15e         	cbz	r6, 0x7a4c <__udivmoddi4+0x234> @ imm = #0x16
    7a34: ebb9 0203    	subs.w	r2, r9, r3
    7a38: eb64 0408    	sbc.w	r4, r4, r8
    7a3c: fa04 f505    	lsl.w	r5, r4, r5
    7a40: fa22 f301    	lsr.w	r3, r2, r1
    7a44: 40cc         	lsrs	r4, r1
    7a46: 431d         	orrs	r5, r3
    7a48: e9c6 5400    	strd	r5, r4, [r6]
    7a4c: 2100         	movs	r1, #0x0
    7a4e: e732         	b	0x78b6 <__udivmoddi4+0x9e> @ imm = #-0x19c
    7a50: 0842         	lsrs	r2, r0, #0x1
    7a52: 462f         	mov	r7, r5
    7a54: 084b         	lsrs	r3, r1, #0x1
    7a56: 46ac         	mov	r12, r5
    7a58: ea42 72c1    	orr.w	r2, r2, r1, lsl #31
    7a5c: 46ae         	mov	lr, r5
    7a5e: 07c4         	lsls	r4, r0, #0x1f
    7a60: 0c11         	lsrs	r1, r2, #0x10
    7a62: b292         	uxth	r2, r2
    7a64: ea41 4103    	orr.w	r1, r1, r3, lsl #16
    7a68: ea42 4201    	orr.w	r2, r2, r1, lsl #16
    7a6c: fbb1 f1f5    	udiv	r1, r1, r5
    7a70: fbb3 f0f5    	udiv	r0, r3, r5
    7a74: 231f         	movs	r3, #0x1f
    7a76: eba2 020c    	sub.w	r2, r2, r12
    7a7a: ea41 4100    	orr.w	r1, r1, r0, lsl #16
    7a7e: e742         	b	0x7906 <__udivmoddi4+0xee> @ imm = #-0x17c
    7a80: 409d         	lsls	r5, r3
    7a82: f1c3 0220    	rsb.w	r2, r3, #0x20
    7a86: 4099         	lsls	r1, r3
    7a88: 409c         	lsls	r4, r3
    7a8a: fa2c fc02    	lsr.w	r12, r12, r2
    7a8e: ea4f 4e15    	lsr.w	lr, r5, #0x10
    7a92: fa20 f202    	lsr.w	r2, r0, r2
    7a96: b2af         	uxth	r7, r5
    7a98: fbbc f8fe    	udiv	r8, r12, lr
    7a9c: 430a         	orrs	r2, r1
    7a9e: fb0e cc18    	mls	r12, lr, r8, r12
    7aa2: 0c11         	lsrs	r1, r2, #0x10
    7aa4: ea41 410c    	orr.w	r1, r1, r12, lsl #16
    7aa8: fb08 fc07    	mul	r12, r8, r7
    7aac: 458c         	cmp	r12, r1
    7aae: d950         	bls	0x7b52 <__udivmoddi4+0x33a> @ imm = #0xa0
    7ab0: 1869         	adds	r1, r5, r1
    7ab2: f108 30ff    	add.w	r0, r8, #0xffffffff
    7ab6: bf2c         	ite	hs
    7ab8: f04f 0901    	movhs.w	r9, #0x1
    7abc: f04f 0900    	movlo.w	r9, #0x0
    7ac0: 458c         	cmp	r12, r1
    7ac2: d902         	bls	0x7aca <__udivmoddi4+0x2b2> @ imm = #0x4
    7ac4: f1b9 0f00    	cmp.w	r9, #0x0
    7ac8: d030         	beq	0x7b2c <__udivmoddi4+0x314> @ imm = #0x60
    7aca: eba1 010c    	sub.w	r1, r1, r12
    7ace: fbb1 f8fe    	udiv	r8, r1, lr
    7ad2: fb08 fc07    	mul	r12, r8, r7
    7ad6: fb0e 1118    	mls	r1, lr, r8, r1
    7ada: b292         	uxth	r2, r2
    7adc: ea42 4201    	orr.w	r2, r2, r1, lsl #16
    7ae0: 4562         	cmp	r2, r12
    7ae2: d234         	bhs	0x7b4e <__udivmoddi4+0x336> @ imm = #0x68
    7ae4: 18aa         	adds	r2, r5, r2
    7ae6: f108 31ff    	add.w	r1, r8, #0xffffffff
    7aea: bf2c         	ite	hs
    7aec: f04f 0901    	movhs.w	r9, #0x1
    7af0: f04f 0900    	movlo.w	r9, #0x0
    7af4: 4562         	cmp	r2, r12
    7af6: d2be         	bhs	0x7a76 <__udivmoddi4+0x25e> @ imm = #-0x84
    7af8: f1b9 0f00    	cmp.w	r9, #0x0
    7afc: d1bb         	bne	0x7a76 <__udivmoddi4+0x25e> @ imm = #-0x8a
    7afe: f1a8 0102    	sub.w	r1, r8, #0x2
    7b02: 442a         	add	r2, r5
    7b04: e7b7         	b	0x7a76 <__udivmoddi4+0x25e> @ imm = #-0x92
    7b06: 1a84         	subs	r4, r0, r2
    7b08: eb6c 0203    	sbc.w	r2, r12, r3
    7b0c: 2001         	movs	r0, #0x1
    7b0e: 4617         	mov	r7, r2
    7b10: e6e7         	b	0x78e2 <__udivmoddi4+0xca> @ imm = #-0x232
    7b12: 442c         	add	r4, r5
    7b14: 3802         	subs	r0, #0x2
    7b16: e72b         	b	0x7970 <__udivmoddi4+0x158> @ imm = #-0x1aa
    7b18: f1ac 0c02    	sub.w	r12, r12, #0x2
    7b1c: 442a         	add	r2, r5
    7b1e: e70c         	b	0x793a <__udivmoddi4+0x122> @ imm = #-0x1e8
    7b20: 3902         	subs	r1, #0x2
    7b22: 442a         	add	r2, r5
    7b24: e6a5         	b	0x7872 <__udivmoddi4+0x5a> @ imm = #-0x2b6
    7b26: 442c         	add	r4, r5
    7b28: 3802         	subs	r0, #0x2
    7b2a: e6ba         	b	0x78a2 <__udivmoddi4+0x8a> @ imm = #-0x28c
    7b2c: eba5 0c0c    	sub.w	r12, r5, r12
    7b30: f1a8 0002    	sub.w	r0, r8, #0x2
    7b34: 4461         	add	r1, r12
    7b36: fbb1 f8fe    	udiv	r8, r1, lr
    7b3a: fb08 fc07    	mul	r12, r8, r7
    7b3e: e7ca         	b	0x7ad6 <__udivmoddi4+0x2be> @ imm = #-0x6c
    7b40: f1a8 0802    	sub.w	r8, r8, #0x2
    7b44: 443c         	add	r4, r7
    7b46: e744         	b	0x79d2 <__udivmoddi4+0x1ba> @ imm = #-0x178
    7b48: 3b02         	subs	r3, #0x2
    7b4a: 443c         	add	r4, r7
    7b4c: e75e         	b	0x7a0c <__udivmoddi4+0x1f4> @ imm = #-0x144
    7b4e: 4641         	mov	r1, r8
    7b50: e791         	b	0x7a76 <__udivmoddi4+0x25e> @ imm = #-0xde
    7b52: eba1 010c    	sub.w	r1, r1, r12
    7b56: 4640         	mov	r0, r8
    7b58: fbb1 f8fe    	udiv	r8, r1, lr
    7b5c: fb08 fc07    	mul	r12, r8, r7
    7b60: e7b9         	b	0x7ad6 <__udivmoddi4+0x2be> @ imm = #-0x8e
    7b62: bf00         	nop

00007b64 <selfrel_offset31>:
; selfrel_offset31():
    7b64: 6803         	ldr	r3, [r0]
    7b66: 005a         	lsls	r2, r3, #0x1
    7b68: bf4c         	ite	mi
    7b6a: f043 4300    	orrmi	r3, r3, #0x80000000
    7b6e: f023 4300    	bicpl	r3, r3, #0x80000000
    7b72: 4418         	add	r0, r3
    7b74: 4770         	bx	lr
    7b76: bf00         	nop

00007b78 <search_EIT_table>:
; search_EIT_table():
    7b78: e92d 47f0    	push.w	{r4, r5, r6, r7, r8, r9, r10, lr}
    7b7c: b329         	cbz	r1, 0x7bca <search_EIT_table+0x52> @ imm = #0x4a
    7b7e: f101 3aff    	add.w	r10, r1, #0xffffffff
    7b82: 4680         	mov	r8, r0
    7b84: 4691         	mov	r9, r2
    7b86: 2500         	movs	r5, #0x0
    7b88: 4656         	mov	r6, r10
    7b8a: 19a9         	adds	r1, r5, r6
    7b8c: bf48         	it	mi
    7b8e: 3101         	addmi	r1, #0x1
    7b90: 1049         	asrs	r1, r1, #0x1
    7b92: eb08 07c1    	add.w	r7, r8, r1, lsl #3
    7b96: 00cc         	lsls	r4, r1, #0x3
    7b98: 4638         	mov	r0, r7
    7b9a: f7ff ffe3    	bl	0x7b64 <selfrel_offset31> @ imm = #-0x3a
    7b9e: 458a         	cmp	r10, r1
    7ba0: d00d         	beq	0x7bbe <search_EIT_table+0x46> @ imm = #0x1a
    7ba2: 3408         	adds	r4, #0x8
    7ba4: 4548         	cmp	r0, r9
    7ba6: eb08 0004    	add.w	r0, r8, r4
    7baa: d80a         	bhi	0x7bc2 <search_EIT_table+0x4a> @ imm = #0x14
    7bac: f7ff ffda    	bl	0x7b64 <selfrel_offset31> @ imm = #-0x4c
    7bb0: 3801         	subs	r0, #0x1
    7bb2: 1c4d         	adds	r5, r1, #0x1
    7bb4: 4548         	cmp	r0, r9
    7bb6: d3e8         	blo	0x7b8a <search_EIT_table+0x12> @ imm = #-0x30
    7bb8: 4638         	mov	r0, r7
    7bba: e8bd 87f0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, pc}
    7bbe: 4548         	cmp	r0, r9
    7bc0: d9fa         	bls	0x7bb8 <search_EIT_table+0x40> @ imm = #-0xc
    7bc2: 428d         	cmp	r5, r1
    7bc4: f101 36ff    	add.w	r6, r1, #0xffffffff
    7bc8: d1df         	bne	0x7b8a <search_EIT_table+0x12> @ imm = #-0x42
    7bca: 2700         	movs	r7, #0x0
    7bcc: 4638         	mov	r0, r7
    7bce: e8bd 87f0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, pc}
    7bd2: bf00         	nop

00007bd4 <__gnu_unwind_get_pr_addr>:
; __gnu_unwind_get_pr_addr():
    7bd4: 2801         	cmp	r0, #0x1
    7bd6: d006         	beq	0x7be6 <__gnu_unwind_get_pr_addr+0x12> @ imm = #0xc
    7bd8: 2802         	cmp	r0, #0x2
    7bda: d002         	beq	0x7be2 <__gnu_unwind_get_pr_addr+0xe> @ imm = #0x4
    7bdc: b928         	cbnz	r0, 0x7bea <__gnu_unwind_get_pr_addr+0x16> @ imm = #0xa
    7bde: 4804         	ldr	r0, [pc, #0x10]         @ 0x7bf0 <__gnu_unwind_get_pr_addr+0x1c>
    7be0: 4770         	bx	lr
    7be2: 4804         	ldr	r0, [pc, #0x10]         @ 0x7bf4 <__gnu_unwind_get_pr_addr+0x20>
    7be4: 4770         	bx	lr
    7be6: 4804         	ldr	r0, [pc, #0x10]         @ 0x7bf8 <__gnu_unwind_get_pr_addr+0x24>
    7be8: 4770         	bx	lr
    7bea: 2000         	movs	r0, #0x0
    7bec: 4770         	bx	lr
    7bee: bf00         	nop
    7bf0: c9 82 00 00  	.word	0x000082c9
    7bf4: d9 82 00 00  	.word	0x000082d9
    7bf8: d1 82 00 00  	.word	0x000082d1

00007bfc <get_eit_entry>:
; get_eit_entry():
    7bfc: 4b22         	ldr	r3, [pc, #0x88]         @ 0x7c88 <get_eit_entry+0x8c>
    7bfe: b530         	push	{r4, r5, lr}
    7c00: 4604         	mov	r4, r0
    7c02: b083         	sub	sp, #0xc
    7c04: 1e8d         	subs	r5, r1, #0x2
    7c06: b343         	cbz	r3, 0x7c5a <get_eit_entry+0x5e> @ imm = #0x50
    7c08: a901         	add	r1, sp, #0x4
    7c0a: 4628         	mov	r0, r5
    7c0c: f3af 8000    	nop.w
    7c10: b1f0         	cbz	r0, 0x7c50 <get_eit_entry+0x54> @ imm = #0x3c
    7c12: 9901         	ldr	r1, [sp, #0x4]
    7c14: 462a         	mov	r2, r5
    7c16: f7ff ffaf    	bl	0x7b78 <search_EIT_table> @ imm = #-0xa2
    7c1a: 4601         	mov	r1, r0
    7c1c: b1c0         	cbz	r0, 0x7c50 <get_eit_entry+0x54> @ imm = #0x30
    7c1e: f7ff ffa1    	bl	0x7b64 <selfrel_offset31> @ imm = #-0xbe
    7c22: 684b         	ldr	r3, [r1, #0x4]
    7c24: 64a0         	str	r0, [r4, #0x48]
    7c26: 2b01         	cmp	r3, #0x1
    7c28: d02a         	beq	0x7c80 <get_eit_entry+0x84> @ imm = #0x54
    7c2a: 2b00         	cmp	r3, #0x0
    7c2c: f101 0004    	add.w	r0, r1, #0x4
    7c30: db24         	blt	0x7c7c <get_eit_entry+0x80> @ imm = #0x48
    7c32: f7ff ff97    	bl	0x7b64 <selfrel_offset31> @ imm = #-0xd2
    7c36: 2300         	movs	r3, #0x0
    7c38: 6523         	str	r3, [r4, #0x50]
    7c3a: 6803         	ldr	r3, [r0]
    7c3c: 64e0         	str	r0, [r4, #0x4c]
    7c3e: 2b00         	cmp	r3, #0x0
    7c40: db11         	blt	0x7c66 <get_eit_entry+0x6a> @ imm = #0x22
    7c42: f7ff ff8f    	bl	0x7b64 <selfrel_offset31> @ imm = #-0xe2
    7c46: 4603         	mov	r3, r0
    7c48: 2000         	movs	r0, #0x0
    7c4a: 6123         	str	r3, [r4, #0x10]
    7c4c: b003         	add	sp, #0xc
    7c4e: bd30         	pop	{r4, r5, pc}
    7c50: 2300         	movs	r3, #0x0
    7c52: 2009         	movs	r0, #0x9
    7c54: 6123         	str	r3, [r4, #0x10]
    7c56: b003         	add	sp, #0xc
    7c58: bd30         	pop	{r4, r5, pc}
    7c5a: 480c         	ldr	r0, [pc, #0x30]         @ 0x7c8c <get_eit_entry+0x90>
    7c5c: 490c         	ldr	r1, [pc, #0x30]         @ 0x7c90 <get_eit_entry+0x94>
    7c5e: 1a09         	subs	r1, r1, r0
    7c60: 10c9         	asrs	r1, r1, #0x3
    7c62: 9101         	str	r1, [sp, #0x4]
    7c64: e7d6         	b	0x7c14 <get_eit_entry+0x18> @ imm = #-0x54
    7c66: f3c3 6003    	ubfx	r0, r3, #0x18, #0x4
    7c6a: f7ff ffb3    	bl	0x7bd4 <__gnu_unwind_get_pr_addr> @ imm = #-0x9a
    7c6e: 1e03         	subs	r3, r0, #0x0
    7c70: bf0c         	ite	eq
    7c72: 2009         	moveq	r0, #0x9
    7c74: 2000         	movne	r0, #0x0
    7c76: 6123         	str	r3, [r4, #0x10]
    7c78: b003         	add	sp, #0xc
    7c7a: bd30         	pop	{r4, r5, pc}
    7c7c: 2301         	movs	r3, #0x1
    7c7e: e7db         	b	0x7c38 <get_eit_entry+0x3c> @ imm = #-0x4a
    7c80: 2300         	movs	r3, #0x0
    7c82: 2005         	movs	r0, #0x5
    7c84: e7e1         	b	0x7c4a <get_eit_entry+0x4e> @ imm = #-0x3e
    7c86: bf00         	nop
    7c88: 00 00 00 00  	.word	0x00000000
    7c8c: c0 0c 00 20  	.word	0x20000cc0
    7c90: 78 0d 00 20  	.word	0x20000d78

00007c94 <restore_non_core_regs>:
; restore_non_core_regs():
    7c94: 6803         	ldr	r3, [r0]
    7c96: 07da         	lsls	r2, r3, #0x1f
    7c98: b510         	push	{r4, lr}
    7c9a: 4604         	mov	r4, r0
    7c9c: d406         	bmi	0x7cac <restore_non_core_regs+0x18> @ imm = #0xc
    7c9e: 079b         	lsls	r3, r3, #0x1e
    7ca0: f100 0050    	add.w	r0, r0, #0x50
    7ca4: d509         	bpl	0x7cba <restore_non_core_regs+0x26> @ imm = #0x12
    7ca6: f000 fcb3    	bl	0x8610 <__gnu_Unwind_Restore_VFP_D> @ imm = #0x966
    7caa: 6823         	ldr	r3, [r4]
    7cac: 0759         	lsls	r1, r3, #0x1d
    7cae: d509         	bpl	0x7cc4 <restore_non_core_regs+0x30> @ imm = #0x12
    7cb0: 071a         	lsls	r2, r3, #0x1c
    7cb2: d50e         	bpl	0x7cd2 <restore_non_core_regs+0x3e> @ imm = #0x1c
    7cb4: 06db         	lsls	r3, r3, #0x1b
    7cb6: d513         	bpl	0x7ce0 <restore_non_core_regs+0x4c> @ imm = #0x26
    7cb8: bd10         	pop	{r4, pc}
    7cba: f000 fca1    	bl	0x8600 <__gnu_Unwind_Restore_VFP> @ imm = #0x942
    7cbe: 6823         	ldr	r3, [r4]
    7cc0: 0759         	lsls	r1, r3, #0x1d
    7cc2: d4f5         	bmi	0x7cb0 <restore_non_core_regs+0x1c> @ imm = #-0x16
    7cc4: f104 00d8    	add.w	r0, r4, #0xd8
    7cc8: f000 fcaa    	bl	0x8620 <__gnu_Unwind_Restore_VFP_D_16_to_31> @ imm = #0x954
    7ccc: 6823         	ldr	r3, [r4]
    7cce: 071a         	lsls	r2, r3, #0x1c
    7cd0: d4f0         	bmi	0x7cb4 <restore_non_core_regs+0x20> @ imm = #-0x20
    7cd2: f504 70ac    	add.w	r0, r4, #0x158
    7cd6: f000 fcab    	bl	0x8630 <__gnu_Unwind_Restore_WMMXD> @ imm = #0x956
    7cda: 6823         	ldr	r3, [r4]
    7cdc: 06db         	lsls	r3, r3, #0x1b
    7cde: d4eb         	bmi	0x7cb8 <restore_non_core_regs+0x24> @ imm = #-0x2a
    7ce0: f504 70ec    	add.w	r0, r4, #0x1d8
    7ce4: e8bd 4010    	pop.w	{r4, lr}
    7ce8: f000 bce6    	b.w	0x86b8 <__gnu_Unwind_Restore_WMMXC> @ imm = #0x9cc

00007cec <_Unwind_decode_typeinfo_ptr.constprop.0>:
; _Unwind_decode_typeinfo_ptr.constprop.0():
    7cec: 4603         	mov	r3, r0
    7cee: 6800         	ldr	r0, [r0]
    7cf0: b100         	cbz	r0, 0x7cf4 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8> @ imm = #0x0
    7cf2: 4418         	add	r0, r3
    7cf4: 4770         	bx	lr
    7cf6: bf00         	nop

00007cf8 <_Unwind_DebugHook>:
; _Unwind_DebugHook():
    7cf8: 4770         	bx	lr
    7cfa: bf00         	nop

00007cfc <unwind_phase2>:
; unwind_phase2():
    7cfc: b570         	push	{r4, r5, r6, lr}
    7cfe: 4604         	mov	r4, r0
    7d00: 460e         	mov	r6, r1
    7d02: 6c31         	ldr	r1, [r6, #0x40]
    7d04: 4620         	mov	r0, r4
    7d06: f7ff ff79    	bl	0x7bfc <get_eit_entry>  @ imm = #-0x10e
    7d0a: 4605         	mov	r5, r0
    7d0c: b998         	cbnz	r0, 0x7d36 <unwind_phase2+0x3a> @ imm = #0x26
    7d0e: f8d6 c040    	ldr.w	r12, [r6, #0x40]
    7d12: 4632         	mov	r2, r6
    7d14: 6923         	ldr	r3, [r4, #0x10]
    7d16: 4621         	mov	r1, r4
    7d18: 2001         	movs	r0, #0x1
    7d1a: f8c4 c014    	str.w	r12, [r4, #0x14]
    7d1e: 4798         	blx	r3
    7d20: 2808         	cmp	r0, #0x8
    7d22: d0ee         	beq	0x7d02 <unwind_phase2+0x6> @ imm = #-0x24
    7d24: 2807         	cmp	r0, #0x7
    7d26: d106         	bne	0x7d36 <unwind_phase2+0x3a> @ imm = #0xc
    7d28: 4628         	mov	r0, r5
    7d2a: 6c31         	ldr	r1, [r6, #0x40]
    7d2c: f7ff ffe4    	bl	0x7cf8 <_Unwind_DebugHook> @ imm = #-0x38
    7d30: 1d30         	adds	r0, r6, #0x4
    7d32: f000 fc59    	bl	0x85e8 <restore_core_regs> @ imm = #0x8b2
    7d36: f000 fed1    	bl	0x8adc <abort>          @ imm = #0xda2
    7d3a: bf00         	nop

00007d3c <unwind_phase2_forced>:
; unwind_phase2_forced():
    7d3c: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7d40: 1d0f         	adds	r7, r1, #0x4
    7d42: f5ad 7d77    	sub.w	sp, sp, #0x3dc
    7d46: f8d0 900c    	ldr.w	r9, [r0, #0xc]
    7d4a: 4606         	mov	r6, r0
    7d4c: f8d0 a018    	ldr.w	r10, [r0, #0x18]
    7d50: 4614         	mov	r4, r2
    7d52: f10d 0c0c    	add.w	r12, sp, #0xc
    7d56: ad02         	add	r5, sp, #0x8
    7d58: f04f 0e00    	mov.w	lr, #0x0
    7d5c: f50d 78f8    	add.w	r8, sp, #0x1f0
    7d60: cf0f         	ldm	r7!, {r0, r1, r2, r3}
    7d62: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
    7d66: cf0f         	ldm	r7!, {r0, r1, r2, r3}
    7d68: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
    7d6c: cf0f         	ldm	r7!, {r0, r1, r2, r3}
    7d6e: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
    7d72: e897 000f    	ldm.w	r7, {r0, r1, r2, r3}
    7d76: f8c5 e000    	str.w	lr, [r5]
    7d7a: e88c 000f    	stm.w	r12, {r0, r1, r2, r3}
    7d7e: e021         	b	0x7dc4 <unwind_phase2_forced+0x88> @ imm = #0x42
    7d80: 6c2b         	ldr	r3, [r5, #0x40]
    7d82: f44f 72f4    	mov.w	r2, #0x1e8
    7d86: 4629         	mov	r1, r5
    7d88: 4640         	mov	r0, r8
    7d8a: 6173         	str	r3, [r6, #0x14]
    7d8c: f001 f8ce    	bl	0x8f2c <memcpy>         @ imm = #0x119c
    7d90: 6933         	ldr	r3, [r6, #0x10]
    7d92: 4642         	mov	r2, r8
    7d94: 4631         	mov	r1, r6
    7d96: 4658         	mov	r0, r11
    7d98: 4798         	blx	r3
    7d9a: 4621         	mov	r1, r4
    7d9c: f8d8 4038    	ldr.w	r4, [r8, #0x38]
    7da0: 4607         	mov	r7, r0
    7da2: 4633         	mov	r3, r6
    7da4: 4632         	mov	r2, r6
    7da6: 64ac         	str	r4, [r5, #0x48]
    7da8: 2001         	movs	r0, #0x1
    7daa: e9cd 5a00    	strd	r5, r10, [sp]
    7dae: 47c8         	blx	r9
    7db0: 4604         	mov	r4, r0
    7db2: bb18         	cbnz	r0, 0x7dfc <unwind_phase2_forced+0xc0> @ imm = #0x46
    7db4: f44f 72f4    	mov.w	r2, #0x1e8
    7db8: 4641         	mov	r1, r8
    7dba: 4628         	mov	r0, r5
    7dbc: f001 f8b6    	bl	0x8f2c <memcpy>         @ imm = #0x116c
    7dc0: 2f08         	cmp	r7, #0x8
    7dc2: d119         	bne	0x7df8 <unwind_phase2_forced+0xbc> @ imm = #0x32
    7dc4: 3409         	adds	r4, #0x9
    7dc6: 6c29         	ldr	r1, [r5, #0x40]
    7dc8: 4630         	mov	r0, r6
    7dca: f7ff ff17    	bl	0x7bfc <get_eit_entry>  @ imm = #-0x1d2
    7dce: 4607         	mov	r7, r0
    7dd0: fa5f fb84    	uxtb.w	r11, r4
    7dd4: 2800         	cmp	r0, #0x0
    7dd6: d0d3         	beq	0x7d80 <unwind_phase2_forced+0x44> @ imm = #-0x5a
    7dd8: 6bac         	ldr	r4, [r5, #0x38]
    7dda: 4633         	mov	r3, r6
    7ddc: 4632         	mov	r2, r6
    7dde: f04b 0110    	orr	r1, r11, #0x10
    7de2: 64ac         	str	r4, [r5, #0x48]
    7de4: 2001         	movs	r0, #0x1
    7de6: e9cd 5a00    	strd	r5, r10, [sp]
    7dea: 47c8         	blx	r9
    7dec: b930         	cbnz	r0, 0x7dfc <unwind_phase2_forced+0xc0> @ imm = #0xc
    7dee: 4638         	mov	r0, r7
    7df0: f50d 7d77    	add.w	sp, sp, #0x3dc
    7df4: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    7df8: 2f07         	cmp	r7, #0x7
    7dfa: d005         	beq	0x7e08 <unwind_phase2_forced+0xcc> @ imm = #0xa
    7dfc: 2709         	movs	r7, #0x9
    7dfe: 4638         	mov	r0, r7
    7e00: f50d 7d77    	add.w	sp, sp, #0x3dc
    7e04: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    7e08: 4620         	mov	r0, r4
    7e0a: 6c29         	ldr	r1, [r5, #0x40]
    7e0c: f7ff ff74    	bl	0x7cf8 <_Unwind_DebugHook> @ imm = #-0x118
    7e10: a803         	add	r0, sp, #0xc
    7e12: f000 fbe9    	bl	0x85e8 <restore_core_regs> @ imm = #0x7d2
    7e16: bf00         	nop

00007e18 <__gnu_Unwind_RaiseException>:
; __gnu_Unwind_RaiseException():
    7e18: b5f0         	push	{r4, r5, r6, r7, lr}
    7e1a: 6bcb         	ldr	r3, [r1, #0x3c]
    7e1c: b0fb         	sub	sp, #0x1ec
    7e1e: f101 0c04    	add.w	r12, r1, #0x4
    7e22: 460f         	mov	r7, r1
    7e24: 640b         	str	r3, [r1, #0x40]
    7e26: ac01         	add	r4, sp, #0x4
    7e28: 4605         	mov	r5, r0
    7e2a: f04f 3eff    	mov.w	lr, #0xffffffff
    7e2e: 466e         	mov	r6, sp
    7e30: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
    7e34: c40f         	stm	r4!, {r0, r1, r2, r3}
    7e36: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
    7e3a: c40f         	stm	r4!, {r0, r1, r2, r3}
    7e3c: e8bc 000f    	ldm.w	r12!, {r0, r1, r2, r3}
    7e40: c40f         	stm	r4!, {r0, r1, r2, r3}
    7e42: e89c 000f    	ldm.w	r12, {r0, r1, r2, r3}
    7e46: f8cd e000    	str.w	lr, [sp]
    7e4a: e884 000f    	stm.w	r4, {r0, r1, r2, r3}
    7e4e: e006         	b	0x7e5e <__gnu_Unwind_RaiseException+0x46> @ imm = #0xc
    7e50: 692b         	ldr	r3, [r5, #0x10]
    7e52: 4632         	mov	r2, r6
    7e54: 4629         	mov	r1, r5
    7e56: 4798         	blx	r3
    7e58: 2808         	cmp	r0, #0x8
    7e5a: 4604         	mov	r4, r0
    7e5c: d108         	bne	0x7e70 <__gnu_Unwind_RaiseException+0x58> @ imm = #0x10
    7e5e: 6c31         	ldr	r1, [r6, #0x40]
    7e60: 4628         	mov	r0, r5
    7e62: f7ff fecb    	bl	0x7bfc <get_eit_entry>  @ imm = #-0x26a
    7e66: 2800         	cmp	r0, #0x0
    7e68: d0f2         	beq	0x7e50 <__gnu_Unwind_RaiseException+0x38> @ imm = #-0x1c
    7e6a: 2009         	movs	r0, #0x9
    7e6c: b07b         	add	sp, #0x1ec
    7e6e: bdf0         	pop	{r4, r5, r6, r7, pc}
    7e70: 4630         	mov	r0, r6
    7e72: f7ff ff0f    	bl	0x7c94 <restore_non_core_regs> @ imm = #-0x1e2
    7e76: 2c06         	cmp	r4, #0x6
    7e78: d1f7         	bne	0x7e6a <__gnu_Unwind_RaiseException+0x52> @ imm = #-0x12
    7e7a: 4639         	mov	r1, r7
    7e7c: 4628         	mov	r0, r5
    7e7e: f7ff ff3d    	bl	0x7cfc <unwind_phase2>  @ imm = #-0x186
    7e82: bf00         	nop

00007e84 <__gnu_Unwind_ForcedUnwind>:
; __gnu_Unwind_ForcedUnwind():
    7e84: b410         	push	{r4}
    7e86: 6bdc         	ldr	r4, [r3, #0x3c]
    7e88: 60c1         	str	r1, [r0, #0xc]
    7e8a: 4619         	mov	r1, r3
    7e8c: 6182         	str	r2, [r0, #0x18]
    7e8e: 2200         	movs	r2, #0x0
    7e90: 641c         	str	r4, [r3, #0x40]
    7e92: bc10         	pop	{r4}
    7e94: f7ff bf52    	b.w	0x7d3c <unwind_phase2_forced> @ imm = #-0x15c

00007e98 <__gnu_Unwind_Resume>:
; __gnu_Unwind_Resume():
    7e98: b570         	push	{r4, r5, r6, lr}
    7e9a: 6943         	ldr	r3, [r0, #0x14]
    7e9c: 68c6         	ldr	r6, [r0, #0xc]
    7e9e: 640b         	str	r3, [r1, #0x40]
    7ea0: b9ae         	cbnz	r6, 0x7ece <__gnu_Unwind_Resume+0x36> @ imm = #0x2a
    7ea2: 6903         	ldr	r3, [r0, #0x10]
    7ea4: 460a         	mov	r2, r1
    7ea6: 4604         	mov	r4, r0
    7ea8: 460d         	mov	r5, r1
    7eaa: 4601         	mov	r1, r0
    7eac: 2002         	movs	r0, #0x2
    7eae: 4798         	blx	r3
    7eb0: 2807         	cmp	r0, #0x7
    7eb2: d005         	beq	0x7ec0 <__gnu_Unwind_Resume+0x28> @ imm = #0xa
    7eb4: 2808         	cmp	r0, #0x8
    7eb6: d10f         	bne	0x7ed8 <__gnu_Unwind_Resume+0x40> @ imm = #0x1e
    7eb8: 4629         	mov	r1, r5
    7eba: 4620         	mov	r0, r4
    7ebc: f7ff ff1e    	bl	0x7cfc <unwind_phase2>  @ imm = #-0x1c4
    7ec0: 4630         	mov	r0, r6
    7ec2: 6c29         	ldr	r1, [r5, #0x40]
    7ec4: f7ff ff18    	bl	0x7cf8 <_Unwind_DebugHook> @ imm = #-0x1d0
    7ec8: 1d28         	adds	r0, r5, #0x4
    7eca: f000 fb8d    	bl	0x85e8 <restore_core_regs> @ imm = #0x71a
    7ece: 2201         	movs	r2, #0x1
    7ed0: f7ff ff34    	bl	0x7d3c <unwind_phase2_forced> @ imm = #-0x198
    7ed4: f000 fe02    	bl	0x8adc <abort>          @ imm = #0xc04
    7ed8: f000 fe00    	bl	0x8adc <abort>          @ imm = #0xc00

00007edc <__gnu_Unwind_Resume_or_Rethrow>:
; __gnu_Unwind_Resume_or_Rethrow():
    7edc: 68c2         	ldr	r2, [r0, #0xc]
    7ede: b508         	push	{r3, lr}
    7ee0: b142         	cbz	r2, 0x7ef4 <__gnu_Unwind_Resume_or_Rethrow+0x18> @ imm = #0x10
    7ee2: f8d1 c03c    	ldr.w	r12, [r1, #0x3c]
    7ee6: 2200         	movs	r2, #0x0
    7ee8: e8bd 4008    	pop.w	{r3, lr}
    7eec: f8c1 c040    	str.w	r12, [r1, #0x40]
    7ef0: f7ff bf24    	b.w	0x7d3c <unwind_phase2_forced> @ imm = #-0x1b8
    7ef4: f7ff ff90    	bl	0x7e18 <__gnu_Unwind_RaiseException> @ imm = #-0xe0
    7ef8: 2009         	movs	r0, #0x9
    7efa: bd08         	pop	{r3, pc}

00007efc <_Unwind_VRS_Get>:
; _Unwind_VRS_Get():
    7efc: 2905         	cmp	r1, #0x5
    7efe: d815         	bhi	0x7f2c <_Unwind_VRS_Get+0x30> @ imm = #0x2a
    7f00: e8df f001    	tbb	[pc, r1]
    7f04: 0a 03 14 03  	.word	0x0314030a
    7f08: 03 05        	.short	0x0503
    7f0a: 2001         	movs	r0, #0x1
    7f0c: 4770         	bx	lr
    7f0e: 6c43         	ldr	r3, [r0, #0x44]
    7f10: 2000         	movs	r0, #0x0
    7f12: 9a00         	ldr	r2, [sp]
    7f14: 6013         	str	r3, [r2]
    7f16: 4770         	bx	lr
    7f18: b943         	cbnz	r3, 0x7f2c <_Unwind_VRS_Get+0x30> @ imm = #0x10
    7f1a: 2a0f         	cmp	r2, #0xf
    7f1c: d806         	bhi	0x7f2c <_Unwind_VRS_Get+0x30> @ imm = #0xc
    7f1e: eb00 0282    	add.w	r2, r0, r2, lsl #2
    7f22: 2000         	movs	r0, #0x0
    7f24: 6853         	ldr	r3, [r2, #0x4]
    7f26: 9a00         	ldr	r2, [sp]
    7f28: 6013         	str	r3, [r2]
    7f2a: 4770         	bx	lr
    7f2c: 2002         	movs	r0, #0x2
    7f2e: 4770         	bx	lr

00007f30 <_Unwind_GetGR>:
; _Unwind_GetGR():
    7f30: b510         	push	{r4, lr}
    7f32: b084         	sub	sp, #0x10
    7f34: 2300         	movs	r3, #0x0
    7f36: 460a         	mov	r2, r1
    7f38: ac03         	add	r4, sp, #0xc
    7f3a: 4619         	mov	r1, r3
    7f3c: 9400         	str	r4, [sp]
    7f3e: f7ff ffdd    	bl	0x7efc <_Unwind_VRS_Get> @ imm = #-0x46
    7f42: 9803         	ldr	r0, [sp, #0xc]
    7f44: b004         	add	sp, #0x10
    7f46: bd10         	pop	{r4, pc}

00007f48 <_Unwind_VRS_Set>:
; _Unwind_VRS_Set():
    7f48: 2905         	cmp	r1, #0x5
    7f4a: d815         	bhi	0x7f78 <_Unwind_VRS_Set+0x30> @ imm = #0x2a
    7f4c: e8df f001    	tbb	[pc, r1]
    7f50: 0a 03 14 03  	.word	0x0314030a
    7f54: 03 05        	.short	0x0503
    7f56: 2001         	movs	r0, #0x1
    7f58: 4770         	bx	lr
    7f5a: 9b00         	ldr	r3, [sp]
    7f5c: 681b         	ldr	r3, [r3]
    7f5e: 6443         	str	r3, [r0, #0x44]
    7f60: 2000         	movs	r0, #0x0
    7f62: 4770         	bx	lr
    7f64: b943         	cbnz	r3, 0x7f78 <_Unwind_VRS_Set+0x30> @ imm = #0x10
    7f66: 2a0f         	cmp	r2, #0xf
    7f68: d806         	bhi	0x7f78 <_Unwind_VRS_Set+0x30> @ imm = #0xc
    7f6a: 9b00         	ldr	r3, [sp]
    7f6c: eb00 0282    	add.w	r2, r0, r2, lsl #2
    7f70: 2000         	movs	r0, #0x0
    7f72: 681b         	ldr	r3, [r3]
    7f74: 6053         	str	r3, [r2, #0x4]
    7f76: 4770         	bx	lr
    7f78: 2002         	movs	r0, #0x2
    7f7a: 4770         	bx	lr

00007f7c <_Unwind_SetGR>:
; _Unwind_SetGR():
    7f7c: b510         	push	{r4, lr}
    7f7e: b084         	sub	sp, #0x10
    7f80: 2300         	movs	r3, #0x0
    7f82: ac03         	add	r4, sp, #0xc
    7f84: 9203         	str	r2, [sp, #0xc]
    7f86: 460a         	mov	r2, r1
    7f88: 4619         	mov	r1, r3
    7f8a: 9400         	str	r4, [sp]
    7f8c: f7ff ffdc    	bl	0x7f48 <_Unwind_VRS_Set> @ imm = #-0x48
    7f90: b004         	add	sp, #0x10
    7f92: bd10         	pop	{r4, pc}

00007f94 <__gnu_Unwind_Backtrace>:
; __gnu_Unwind_Backtrace():
    7f94: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    7f98: 6bd3         	ldr	r3, [r2, #0x3c]
    7f9a: f5ad 7d10    	sub.w	sp, sp, #0x240
    7f9e: 1d14         	adds	r4, r2, #0x4
    7fa0: 4680         	mov	r8, r0
    7fa2: 6413         	str	r3, [r2, #0x40]
    7fa4: f10d 0c5c    	add.w	r12, sp, #0x5c
    7fa8: 460f         	mov	r7, r1
    7faa: ad16         	add	r5, sp, #0x58
    7fac: f04f 3eff    	mov.w	lr, #0xffffffff
    7fb0: 466e         	mov	r6, sp
    7fb2: cc0f         	ldm	r4!, {r0, r1, r2, r3}
    7fb4: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
    7fb8: cc0f         	ldm	r4!, {r0, r1, r2, r3}
    7fba: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
    7fbe: cc0f         	ldm	r4!, {r0, r1, r2, r3}
    7fc0: e8ac 000f    	stm.w	r12!, {r0, r1, r2, r3}
    7fc4: e894 000f    	ldm.w	r4, {r0, r1, r2, r3}
    7fc8: f8c5 e000    	str.w	lr, [r5]
    7fcc: e88c 000f    	stm.w	r12, {r0, r1, r2, r3}
    7fd0: e010         	b	0x7ff4 <__gnu_Unwind_Backtrace+0x60> @ imm = #0x20
    7fd2: f7ff ffd3    	bl	0x7f7c <_Unwind_SetGR>  @ imm = #-0x5a
    7fd6: 4639         	mov	r1, r7
    7fd8: 4628         	mov	r0, r5
    7fda: 47c0         	blx	r8
    7fdc: 4603         	mov	r3, r0
    7fde: 462a         	mov	r2, r5
    7fe0: 4631         	mov	r1, r6
    7fe2: 2008         	movs	r0, #0x8
    7fe4: b983         	cbnz	r3, 0x8008 <__gnu_Unwind_Backtrace+0x74> @ imm = #0x20
    7fe6: 6933         	ldr	r3, [r6, #0x10]
    7fe8: 4798         	blx	r3
    7fea: 2805         	cmp	r0, #0x5
    7fec: 4604         	mov	r4, r0
    7fee: d00c         	beq	0x800a <__gnu_Unwind_Backtrace+0x76> @ imm = #0x18
    7ff0: 2809         	cmp	r0, #0x9
    7ff2: d00a         	beq	0x800a <__gnu_Unwind_Backtrace+0x76> @ imm = #0x14
    7ff4: 6c29         	ldr	r1, [r5, #0x40]
    7ff6: 4630         	mov	r0, r6
    7ff8: f7ff fe00    	bl	0x7bfc <get_eit_entry>  @ imm = #-0x400
    7ffc: 4603         	mov	r3, r0
    7ffe: 4632         	mov	r2, r6
    8000: 210c         	movs	r1, #0xc
    8002: 4628         	mov	r0, r5
    8004: 2b00         	cmp	r3, #0x0
    8006: d0e4         	beq	0x7fd2 <__gnu_Unwind_Backtrace+0x3e> @ imm = #-0x38
    8008: 2409         	movs	r4, #0x9
    800a: 4628         	mov	r0, r5
    800c: f7ff fe42    	bl	0x7c94 <restore_non_core_regs> @ imm = #-0x37c
    8010: 4620         	mov	r0, r4
    8012: f50d 7d10    	add.w	sp, sp, #0x240
    8016: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
    801a: bf00         	nop

0000801c <__gnu_unwind_pr_common>:
; __gnu_unwind_pr_common():
    801c: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    8020: 4616         	mov	r6, r2
    8022: 6cca         	ldr	r2, [r1, #0x4c]
    8024: b089         	sub	sp, #0x24
    8026: 460d         	mov	r5, r1
    8028: f852 1b04    	ldr	r1, [r2], #4
    802c: f000 0c03    	and	r12, r0, #0x3
    8030: 9206         	str	r2, [sp, #0x18]
    8032: b1e3         	cbz	r3, 0x806e <__gnu_unwind_pr_common+0x52> @ imm = #0x38
    8034: 0c0c         	lsrs	r4, r1, #0x10
    8036: 0409         	lsls	r1, r1, #0x10
    8038: f88d 401d    	strb.w	r4, [sp, #0x1d]
    803c: b2e4         	uxtb	r4, r4
    803e: 9105         	str	r1, [sp, #0x14]
    8040: 2102         	movs	r1, #0x2
    8042: eb02 0284    	add.w	r2, r2, r4, lsl #2
    8046: f1bc 0f02    	cmp.w	r12, #0x2
    804a: f88d 101c    	strb.w	r1, [sp, #0x1c]
    804e: 6d29         	ldr	r1, [r5, #0x50]
    8050: bf08         	it	eq
    8052: 6baa         	ldreq	r2, [r5, #0x38]
    8054: f011 0801    	ands	r8, r1, #0x1
    8058: d00f         	beq	0x807a <__gnu_unwind_pr_common+0x5e> @ imm = #0x1e
    805a: a905         	add	r1, sp, #0x14
    805c: 4630         	mov	r0, r6
    805e: f000 fbb7    	bl	0x87d0 <__gnu_unwind_execute> @ imm = #0x76e
    8062: 2800         	cmp	r0, #0x0
    8064: d161         	bne	0x812a <__gnu_unwind_pr_common+0x10e> @ imm = #0xc2
    8066: 2008         	movs	r0, #0x8
    8068: b009         	add	sp, #0x24
    806a: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    806e: 0209         	lsls	r1, r1, #0x8
    8070: f88d 301d    	strb.w	r3, [sp, #0x1d]
    8074: 9105         	str	r1, [sp, #0x14]
    8076: 2103         	movs	r1, #0x3
    8078: e7e5         	b	0x8046 <__gnu_unwind_pr_common+0x2a> @ imm = #-0x36
    807a: 6817         	ldr	r7, [r2]
    807c: 2f00         	cmp	r7, #0x0
    807e: d0ec         	beq	0x805a <__gnu_unwind_pr_common+0x3e> @ imm = #-0x28
    8080: f000 0108    	and	r1, r0, #0x8
    8084: 46bb         	mov	r11, r7
    8086: 469a         	mov	r10, r3
    8088: 4667         	mov	r7, r12
    808a: 9101         	str	r1, [sp, #0x4]
    808c: f8cd 8008    	str.w	r8, [sp, #0x8]
    8090: f1ba 0f02    	cmp.w	r10, #0x2
    8094: d04d         	beq	0x8132 <__gnu_unwind_pr_common+0x116> @ imm = #0x9a
    8096: f8b2 b000    	ldrh.w	r11, [r2]
    809a: f102 0904    	add.w	r9, r2, #0x4
    809e: 8854         	ldrh	r4, [r2, #0x2]
    80a0: f024 0201    	bic	r2, r4, #0x1
    80a4: 6cab         	ldr	r3, [r5, #0x48]
    80a6: 0064         	lsls	r4, r4, #0x1
    80a8: 210f         	movs	r1, #0xf
    80aa: eb02 0803    	add.w	r8, r2, r3
    80ae: 4630         	mov	r0, r6
    80b0: f7ff ff3e    	bl	0x7f30 <_Unwind_GetGR>  @ imm = #-0x184
    80b4: f004 0402    	and	r4, r4, #0x2
    80b8: f00b 0301    	and	r3, r11, #0x1
    80bc: 4580         	cmp	r8, r0
    80be: ea43 0304    	orr.w	r3, r3, r4
    80c2: d82c         	bhi	0x811e <__gnu_unwind_pr_common+0x102> @ imm = #0x58
    80c4: f02b 0b01    	bic	r11, r11, #0x1
    80c8: 2b01         	cmp	r3, #0x1
    80ca: 44c3         	add	r11, r8
    80cc: d068         	beq	0x81a0 <__gnu_unwind_pr_common+0x184> @ imm = #0xd0
    80ce: 2b02         	cmp	r3, #0x2
    80d0: d041         	beq	0x8156 <__gnu_unwind_pr_common+0x13a> @ imm = #0x82
    80d2: bb53         	cbnz	r3, 0x812a <__gnu_unwind_pr_common+0x10e> @ imm = #0x54
    80d4: b117         	cbz	r7, 0x80dc <__gnu_unwind_pr_common+0xc0> @ imm = #0x4
    80d6: 4583         	cmp	r11, r0
    80d8: f200 80d0    	bhi.w	0x827c <__gnu_unwind_pr_common+0x260> @ imm = #0x1a0
    80dc: f109 0204    	add.w	r2, r9, #0x4
    80e0: f8d2 b000    	ldr.w	r11, [r2]
    80e4: f1bb 0f00    	cmp.w	r11, #0x0
    80e8: d1d2         	bne	0x8090 <__gnu_unwind_pr_common+0x74> @ imm = #-0x5c
    80ea: a905         	add	r1, sp, #0x14
    80ec: 4630         	mov	r0, r6
    80ee: f8dd 8008    	ldr.w	r8, [sp, #0x8]
    80f2: f000 fb6d    	bl	0x87d0 <__gnu_unwind_execute> @ imm = #0x6da
    80f6: b9c0         	cbnz	r0, 0x812a <__gnu_unwind_pr_common+0x10e> @ imm = #0x30
    80f8: f1b8 0f00    	cmp.w	r8, #0x0
    80fc: d0b3         	beq	0x8066 <__gnu_unwind_pr_common+0x4a> @ imm = #-0x9a
    80fe: 210f         	movs	r1, #0xf
    8100: 4630         	mov	r0, r6
    8102: f7ff ff15    	bl	0x7f30 <_Unwind_GetGR>  @ imm = #-0x1d6
    8106: 210e         	movs	r1, #0xe
    8108: 4602         	mov	r2, r0
    810a: 4630         	mov	r0, r6
    810c: f7ff ff36    	bl	0x7f7c <_Unwind_SetGR>  @ imm = #-0x194
    8110: 4a6c         	ldr	r2, [pc, #0x1b0]        @ 0x82c4 <__gnu_unwind_pr_common+0x2a8>
    8112: 210f         	movs	r1, #0xf
    8114: 4630         	mov	r0, r6
    8116: f7ff ff31    	bl	0x7f7c <_Unwind_SetGR>  @ imm = #-0x19e
    811a: 2007         	movs	r0, #0x7
    811c: e7a4         	b	0x8068 <__gnu_unwind_pr_common+0x4c> @ imm = #-0xb8
    811e: 2b01         	cmp	r3, #0x1
    8120: d03a         	beq	0x8198 <__gnu_unwind_pr_common+0x17c> @ imm = #0x74
    8122: 2b02         	cmp	r3, #0x2
    8124: d009         	beq	0x813a <__gnu_unwind_pr_common+0x11e> @ imm = #0x12
    8126: 2b00         	cmp	r3, #0x0
    8128: d0d8         	beq	0x80dc <__gnu_unwind_pr_common+0xc0> @ imm = #-0x50
    812a: 2009         	movs	r0, #0x9
    812c: b009         	add	sp, #0x24
    812e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    8132: 6854         	ldr	r4, [r2, #0x4]
    8134: f102 0908    	add.w	r9, r2, #0x8
    8138: e7b2         	b	0x80a0 <__gnu_unwind_pr_common+0x84> @ imm = #-0x9c
    813a: f8d9 4000    	ldr.w	r4, [r9]
    813e: f024 4800    	bic	r8, r4, #0x80000000
    8142: b977         	cbnz	r7, 0x8162 <__gnu_unwind_pr_common+0x146> @ imm = #0x1c
    8144: 2c00         	cmp	r4, #0x0
    8146: da01         	bge	0x814c <__gnu_unwind_pr_common+0x130> @ imm = #0x2
    8148: f109 0904    	add.w	r9, r9, #0x4
    814c: f108 0301    	add.w	r3, r8, #0x1
    8150: eb09 0283    	add.w	r2, r9, r3, lsl #2
    8154: e7c4         	b	0x80e0 <__gnu_unwind_pr_common+0xc4> @ imm = #-0x78
    8156: f8d9 4000    	ldr.w	r4, [r9]
    815a: f024 4800    	bic	r8, r4, #0x80000000
    815e: 2f00         	cmp	r7, #0x0
    8160: d061         	beq	0x8226 <__gnu_unwind_pr_common+0x20a> @ imm = #0xc2
    8162: f8d5 b020    	ldr.w	r11, [r5, #0x20]
    8166: 210d         	movs	r1, #0xd
    8168: 4630         	mov	r0, r6
    816a: f7ff fee1    	bl	0x7f30 <_Unwind_GetGR>  @ imm = #-0x23e
    816e: 4583         	cmp	r11, r0
    8170: d1e8         	bne	0x8144 <__gnu_unwind_pr_common+0x128> @ imm = #-0x30
    8172: 6aaa         	ldr	r2, [r5, #0x28]
    8174: 4591         	cmp	r9, r2
    8176: d1e5         	bne	0x8144 <__gnu_unwind_pr_common+0x128> @ imm = #-0x36
    8178: 2400         	movs	r4, #0x0
    817a: 2204         	movs	r2, #0x4
    817c: f8c5 8028    	str.w	r8, [r5, #0x28]
    8180: e9c5 420b    	strd	r4, r2, [r5, #44]
    8184: 444a         	add	r2, r9
    8186: 636a         	str	r2, [r5, #0x34]
    8188: f8d9 2000    	ldr.w	r2, [r9]
    818c: 42a2         	cmp	r2, r4
    818e: f2c0 8093    	blt.w	0x82b8 <__gnu_unwind_pr_common+0x29c> @ imm = #0x126
    8192: 2301         	movs	r3, #0x1
    8194: 9302         	str	r3, [sp, #0x8]
    8196: e7d9         	b	0x814c <__gnu_unwind_pr_common+0x130> @ imm = #-0x4e
    8198: b91f         	cbnz	r7, 0x81a2 <__gnu_unwind_pr_common+0x186> @ imm = #0x6
    819a: f109 0208    	add.w	r2, r9, #0x8
    819e: e79f         	b	0x80e0 <__gnu_unwind_pr_common+0xc4> @ imm = #-0xc2
    81a0: b1bf         	cbz	r7, 0x81d2 <__gnu_unwind_pr_common+0x1b6> @ imm = #0x2e
    81a2: 6a2c         	ldr	r4, [r5, #0x20]
    81a4: 210d         	movs	r1, #0xd
    81a6: 4630         	mov	r0, r6
    81a8: f7ff fec2    	bl	0x7f30 <_Unwind_GetGR>  @ imm = #-0x27c
    81ac: 4284         	cmp	r4, r0
    81ae: d1f4         	bne	0x819a <__gnu_unwind_pr_common+0x17e> @ imm = #-0x18
    81b0: 6aab         	ldr	r3, [r5, #0x28]
    81b2: 4599         	cmp	r9, r3
    81b4: d1f1         	bne	0x819a <__gnu_unwind_pr_common+0x17e> @ imm = #-0x1e
    81b6: 4648         	mov	r0, r9
    81b8: f7ff fcd4    	bl	0x7b64 <selfrel_offset31> @ imm = #-0x658
    81bc: 210f         	movs	r1, #0xf
    81be: 4602         	mov	r2, r0
    81c0: 4630         	mov	r0, r6
    81c2: f7ff fedb    	bl	0x7f7c <_Unwind_SetGR>  @ imm = #-0x24a
    81c6: 462a         	mov	r2, r5
    81c8: 2100         	movs	r1, #0x0
    81ca: 4630         	mov	r0, r6
    81cc: f7ff fed6    	bl	0x7f7c <_Unwind_SetGR>  @ imm = #-0x254
    81d0: e7a3         	b	0x811a <__gnu_unwind_pr_common+0xfe> @ imm = #-0xba
    81d2: 4583         	cmp	r11, r0
    81d4: d9e1         	bls	0x819a <__gnu_unwind_pr_common+0x17e> @ imm = #-0x3e
    81d6: f8d9 3004    	ldr.w	r3, [r9, #0x4]
    81da: f8d9 2000    	ldr.w	r2, [r9]
    81de: 1c99         	adds	r1, r3, #0x2
    81e0: ea4f 72d2    	lsr.w	r2, r2, #0x1f
    81e4: d0a1         	beq	0x812a <__gnu_unwind_pr_common+0x10e> @ imm = #-0xbe
    81e6: f105 0458    	add.w	r4, r5, #0x58
    81ea: 3301         	adds	r3, #0x1
    81ec: 9404         	str	r4, [sp, #0x10]
    81ee: d05c         	beq	0x82aa <__gnu_unwind_pr_common+0x28e> @ imm = #0xb8
    81f0: f109 0004    	add.w	r0, r9, #0x4
    81f4: f7ff fd7a    	bl	0x7cec <_Unwind_decode_typeinfo_ptr.constprop.0> @ imm = #-0x50c
    81f8: ab04         	add	r3, sp, #0x10
    81fa: 4601         	mov	r1, r0
    81fc: 4628         	mov	r0, r5
    81fe: f3af 8000    	nop.w
    8202: 2800         	cmp	r0, #0x0
    8204: d0c9         	beq	0x819a <__gnu_unwind_pr_common+0x17e> @ imm = #-0x6e
    8206: 4604         	mov	r4, r0
    8208: 210d         	movs	r1, #0xd
    820a: 4630         	mov	r0, r6
    820c: 9e04         	ldr	r6, [sp, #0x10]
    820e: f7ff fe8f    	bl	0x7f30 <_Unwind_GetGR>  @ imm = #-0x2e2
    8212: 2c02         	cmp	r4, #0x2
    8214: 6228         	str	r0, [r5, #0x20]
    8216: d102         	bne	0x821e <__gnu_unwind_pr_common+0x202> @ imm = #0x4
    8218: 62ee         	str	r6, [r5, #0x2c]
    821a: f105 062c    	add.w	r6, r5, #0x2c
    821e: 2006         	movs	r0, #0x6
    8220: e9c5 6909    	strd	r6, r9, [r5, #36]
    8224: e720         	b	0x8068 <__gnu_unwind_pr_common+0x4c> @ imm = #-0x1c0
    8226: 4583         	cmp	r11, r0
    8228: d98c         	bls	0x8144 <__gnu_unwind_pr_common+0x128> @ imm = #-0xe8
    822a: 9b01         	ldr	r3, [sp, #0x4]
    822c: b113         	cbz	r3, 0x8234 <__gnu_unwind_pr_common+0x218> @ imm = #0x4
    822e: f1b8 0f00    	cmp.w	r8, #0x0
    8232: d187         	bne	0x8144 <__gnu_unwind_pr_common+0x128> @ imm = #-0xf2
    8234: f105 0358    	add.w	r3, r5, #0x58
    8238: 9703         	str	r7, [sp, #0xc]
    823a: f109 0b04    	add.w	r11, r9, #0x4
    823e: 2400         	movs	r4, #0x0
    8240: 461f         	mov	r7, r3
    8242: e00c         	b	0x825e <__gnu_unwind_pr_common+0x242> @ imm = #0x18
    8244: 4658         	mov	r0, r11
    8246: 2200         	movs	r2, #0x0
    8248: 9704         	str	r7, [sp, #0x10]
    824a: f7ff fd4f    	bl	0x7cec <_Unwind_decode_typeinfo_ptr.constprop.0> @ imm = #-0x562
    824e: ab04         	add	r3, sp, #0x10
    8250: 4601         	mov	r1, r0
    8252: 4628         	mov	r0, r5
    8254: f10b 0b04    	add.w	r11, r11, #0x4
    8258: f3af 8000    	nop.w
    825c: bb08         	cbnz	r0, 0x82a2 <__gnu_unwind_pr_common+0x286> @ imm = #0x42
    825e: 4544         	cmp	r4, r8
    8260: f104 0401    	add.w	r4, r4, #0x1
    8264: d1ee         	bne	0x8244 <__gnu_unwind_pr_common+0x228> @ imm = #-0x24
    8266: 210d         	movs	r1, #0xd
    8268: 4630         	mov	r0, r6
    826a: f7ff fe61    	bl	0x7f30 <_Unwind_GetGR>  @ imm = #-0x33e
    826e: 9b04         	ldr	r3, [sp, #0x10]
    8270: 4602         	mov	r2, r0
    8272: 2006         	movs	r0, #0x6
    8274: 622a         	str	r2, [r5, #0x20]
    8276: e9c5 3909    	strd	r3, r9, [r5, #36]
    827a: e6f5         	b	0x8068 <__gnu_unwind_pr_common+0x4c> @ imm = #-0x216
    827c: 4648         	mov	r0, r9
    827e: f7ff fc71    	bl	0x7b64 <selfrel_offset31> @ imm = #-0x71e
    8282: f109 0204    	add.w	r2, r9, #0x4
    8286: 4604         	mov	r4, r0
    8288: 4628         	mov	r0, r5
    828a: 63aa         	str	r2, [r5, #0x38]
    828c: f3af 8000    	nop.w
    8290: 2800         	cmp	r0, #0x0
    8292: f43f af4a    	beq.w	0x812a <__gnu_unwind_pr_common+0x10e> @ imm = #-0x16c
    8296: 4622         	mov	r2, r4
    8298: 210f         	movs	r1, #0xf
    829a: 4630         	mov	r0, r6
    829c: f7ff fe6e    	bl	0x7f7c <_Unwind_SetGR>  @ imm = #-0x324
    82a0: e73b         	b	0x811a <__gnu_unwind_pr_common+0xfe> @ imm = #-0x18a
    82a2: 9f03         	ldr	r7, [sp, #0xc]
    82a4: f8d9 4000    	ldr.w	r4, [r9]
    82a8: e74c         	b	0x8144 <__gnu_unwind_pr_common+0x128> @ imm = #-0x168
    82aa: 4630         	mov	r0, r6
    82ac: 210d         	movs	r1, #0xd
    82ae: f7ff fe3f    	bl	0x7f30 <_Unwind_GetGR>  @ imm = #-0x382
    82b2: 4626         	mov	r6, r4
    82b4: 6228         	str	r0, [r5, #0x20]
    82b6: e7b2         	b	0x821e <__gnu_unwind_pr_common+0x202> @ imm = #-0x9c
    82b8: f108 0201    	add.w	r2, r8, #0x1
    82bc: eb09 0082    	add.w	r0, r9, r2, lsl #2
    82c0: e77a         	b	0x81b8 <__gnu_unwind_pr_common+0x19c> @ imm = #-0x10c
    82c2: bf00         	nop
    82c4: 00 00 00 00  	.word	0x00000000

000082c8 <__aeabi_unwind_cpp_pr0>:
; __aeabi_unwind_cpp_pr0():
    82c8: 2300         	movs	r3, #0x0
    82ca: f7ff bea7    	b.w	0x801c <__gnu_unwind_pr_common> @ imm = #-0x2b2
    82ce: bf00         	nop

000082d0 <__aeabi_unwind_cpp_pr1>:
; __aeabi_unwind_cpp_pr1():
    82d0: 2301         	movs	r3, #0x1
    82d2: f7ff bea3    	b.w	0x801c <__gnu_unwind_pr_common> @ imm = #-0x2ba
    82d6: bf00         	nop

000082d8 <__aeabi_unwind_cpp_pr2>:
; __aeabi_unwind_cpp_pr2():
    82d8: 2302         	movs	r3, #0x2
    82da: f7ff be9f    	b.w	0x801c <__gnu_unwind_pr_common> @ imm = #-0x2c2
    82de: bf00         	nop

000082e0 <_Unwind_VRS_Pop>:
; _Unwind_VRS_Pop():
    82e0: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    82e4: 4605         	mov	r5, r0
    82e6: b0c4         	sub	sp, #0x110
    82e8: 4614         	mov	r4, r2
    82ea: 2905         	cmp	r1, #0x5
    82ec: d804         	bhi	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #0x8
    82ee: e8df f001    	tbb	[pc, r1]
    82f2: 12 2b 03 6b  	.word	0x6b032b12
    82f6: 91 07        	.short	0x0791
    82f8: 2002         	movs	r0, #0x2
    82fa: b044         	add	sp, #0x110
    82fc: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
    8300: 6b83         	ldr	r3, [r0, #0x38]
    8302: 2c00         	cmp	r4, #0x0
    8304: d1f8         	bne	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x10
    8306: f853 2b04    	ldr	r2, [r3], #4
    830a: 6442         	str	r2, [r0, #0x44]
    830c: 6383         	str	r3, [r0, #0x38]
    830e: 2000         	movs	r0, #0x0
    8310: b044         	add	sp, #0x110
    8312: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
    8316: 2b00         	cmp	r3, #0x0
    8318: d1ee         	bne	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x24
    831a: fa1f fc84    	uxth.w	r12, r4
    831e: 6b80         	ldr	r0, [r0, #0x38]
    8320: 2601         	movs	r6, #0x1
    8322: 1d2f         	adds	r7, r5, #0x4
    8324: fa06 f103    	lsl.w	r1, r6, r3
    8328: 4602         	mov	r2, r0
    832a: ea11 0f0c    	tst.w	r1, r12
    832e: d004         	beq	0x833a <_Unwind_VRS_Pop+0x5a> @ imm = #0x8
    8330: f852 1b04    	ldr	r1, [r2], #4
    8334: 4610         	mov	r0, r2
    8336: f847 1023    	str.w	r1, [r7, r3, lsl #2]
    833a: 3301         	adds	r3, #0x1
    833c: 2b10         	cmp	r3, #0x10
    833e: d1f1         	bne	0x8324 <_Unwind_VRS_Pop+0x44> @ imm = #-0x1e
    8340: 04a4         	lsls	r4, r4, #0x12
    8342: d4e4         	bmi	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x38
    8344: 63a8         	str	r0, [r5, #0x38]
    8346: e7e2         	b	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x3c
    8348: f003 02fb    	and	r2, r3, #0xfb
    834c: 0c26         	lsrs	r6, r4, #0x10
    834e: b2a4         	uxth	r4, r4
    8350: 2a01         	cmp	r2, #0x1
    8352: d1d1         	bne	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x5e
    8354: 2b01         	cmp	r3, #0x1
    8356: eb06 0204    	add.w	r2, r6, r4
    835a: f000 80b8    	beq.w	0x84ce <_Unwind_VRS_Pop+0x1ee> @ imm = #0x170
    835e: 2a20         	cmp	r2, #0x20
    8360: d8ca         	bhi	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x6c
    8362: 2e0f         	cmp	r6, #0xf
    8364: d97b         	bls	0x845e <_Unwind_VRS_Pop+0x17e> @ imm = #0xf6
    8366: 2c00         	cmp	r4, #0x0
    8368: d0d1         	beq	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x5e
    836a: 6802         	ldr	r2, [r0]
    836c: 9301         	str	r3, [sp, #0x4]
    836e: 0751         	lsls	r1, r2, #0x1d
    8370: f100 810b    	bmi.w	0x858a <_Unwind_VRS_Pop+0x2aa> @ imm = #0x216
    8374: af02         	add	r7, sp, #0x8
    8376: 4638         	mov	r0, r7
    8378: f000 f956    	bl	0x8628 <__gnu_Unwind_Save_VFP_D_16_to_31> @ imm = #0x2ac
    837c: f8d5 c038    	ldr.w	r12, [r5, #0x38]
    8380: 9b01         	ldr	r3, [sp, #0x4]
    8382: 2e10         	cmp	r6, #0x10
    8384: 4631         	mov	r1, r6
    8386: ea4f 0444    	lsl.w	r4, r4, #0x1
    838a: 4660         	mov	r0, r12
    838c: bf38         	it	lo
    838e: 2110         	movlo	r1, #0x10
    8390: f104 3eff    	add.w	lr, r4, #0xffffffff
    8394: eb07 01c1    	add.w	r1, r7, r1, lsl #3
    8398: 4672         	mov	r2, lr
    839a: 3984         	subs	r1, #0x84
    839c: f850 4b04    	ldr	r4, [r0], #4
    83a0: 3a01         	subs	r2, #0x1
    83a2: f841 4f04    	str	r4, [r1, #4]!
    83a6: 1c54         	adds	r4, r2, #0x1
    83a8: d1f8         	bne	0x839c <_Unwind_VRS_Pop+0xbc> @ imm = #-0x10
    83aa: f10c 0c04    	add.w	r12, r12, #0x4
    83ae: 2b01         	cmp	r3, #0x1
    83b0: eb0c 028e    	add.w	r2, r12, lr, lsl #2
    83b4: f000 80c3    	beq.w	0x853e <_Unwind_VRS_Pop+0x25e> @ imm = #0x186
    83b8: 2e0f         	cmp	r6, #0xf
    83ba: 63aa         	str	r2, [r5, #0x38]
    83bc: f240 80c8    	bls.w	0x8550 <_Unwind_VRS_Pop+0x270> @ imm = #0x190
    83c0: 4638         	mov	r0, r7
    83c2: f000 f92d    	bl	0x8620 <__gnu_Unwind_Restore_VFP_D_16_to_31> @ imm = #0x25a
    83c6: e7a2         	b	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0xbc
    83c8: 2b03         	cmp	r3, #0x3
    83ca: d195         	bne	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0xd6
    83cc: fa1f f884    	uxth.w	r8, r4
    83d0: 0c26         	lsrs	r6, r4, #0x10
    83d2: eb08 4414    	add.w	r4, r8, r4, lsr #16
    83d6: 2c10         	cmp	r4, #0x10
    83d8: d88e         	bhi	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0xe4
    83da: 6803         	ldr	r3, [r0]
    83dc: 0718         	lsls	r0, r3, #0x1c
    83de: f100 809b    	bmi.w	0x8518 <_Unwind_VRS_Pop+0x238> @ imm = #0x136
    83e2: af22         	add	r7, sp, #0x88
    83e4: 4638         	mov	r0, r7
    83e6: f000 f945    	bl	0x8674 <__gnu_Unwind_Save_WMMXD> @ imm = #0x28a
    83ea: 6bac         	ldr	r4, [r5, #0x38]
    83ec: ea4f 0148    	lsl.w	r1, r8, #0x1
    83f0: eb07 03c6    	add.w	r3, r7, r6, lsl #3
    83f4: 1e4a         	subs	r2, r1, #0x1
    83f6: b141         	cbz	r1, 0x840a <_Unwind_VRS_Pop+0x12a> @ imm = #0x10
    83f8: 1ae0         	subs	r0, r4, r3
    83fa: 5819         	ldr	r1, [r3, r0]
    83fc: 3a01         	subs	r2, #0x1
    83fe: f843 1b04    	str	r1, [r3], #4
    8402: 1c51         	adds	r1, r2, #0x1
    8404: d1f9         	bne	0x83fa <_Unwind_VRS_Pop+0x11a> @ imm = #-0xe
    8406: eb04 04c8    	add.w	r4, r4, r8, lsl #3
    840a: 4638         	mov	r0, r7
    840c: 63ac         	str	r4, [r5, #0x38]
    840e: f000 f90f    	bl	0x8630 <__gnu_Unwind_Restore_WMMXD> @ imm = #0x21e
    8412: e77c         	b	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x108
    8414: 2b00         	cmp	r3, #0x0
    8416: f47f af6f    	bne.w	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x122
    841a: 2c10         	cmp	r4, #0x10
    841c: f63f af6c    	bhi.w	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x128
    8420: 6803         	ldr	r3, [r0]
    8422: 06da         	lsls	r2, r3, #0x1b
    8424: d470         	bmi	0x8508 <_Unwind_VRS_Pop+0x228> @ imm = #0xe0
    8426: af22         	add	r7, sp, #0x88
    8428: 4638         	mov	r0, r7
    842a: f000 f94f    	bl	0x86cc <__gnu_Unwind_Save_WMMXC> @ imm = #0x29e
    842e: 6bae         	ldr	r6, [r5, #0x38]
    8430: 4639         	mov	r1, r7
    8432: 2300         	movs	r3, #0x0
    8434: f04f 0c01    	mov.w	r12, #0x1
    8438: fa0c f203    	lsl.w	r2, r12, r3
    843c: 4630         	mov	r0, r6
    843e: 3301         	adds	r3, #0x1
    8440: 4222         	tst	r2, r4
    8442: d003         	beq	0x844c <_Unwind_VRS_Pop+0x16c> @ imm = #0x6
    8444: f850 2b04    	ldr	r2, [r0], #4
    8448: 4606         	mov	r6, r0
    844a: 600a         	str	r2, [r1]
    844c: 2b04         	cmp	r3, #0x4
    844e: f101 0104    	add.w	r1, r1, #0x4
    8452: d1f1         	bne	0x8438 <_Unwind_VRS_Pop+0x158> @ imm = #-0x1e
    8454: 4638         	mov	r0, r7
    8456: 63ae         	str	r6, [r5, #0x38]
    8458: f000 f92e    	bl	0x86b8 <__gnu_Unwind_Restore_WMMXC> @ imm = #0x25c
    845c: e757         	b	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x152
    845e: 2a10         	cmp	r2, #0x10
    8460: f240 809a    	bls.w	0x8598 <_Unwind_VRS_Pop+0x2b8> @ imm = #0x134
    8464: 6829         	ldr	r1, [r5]
    8466: f1a2 0410    	sub.w	r4, r2, #0x10
    846a: 07cf         	lsls	r7, r1, #0x1f
    846c: d474         	bmi	0x8558 <_Unwind_VRS_Pop+0x278> @ imm = #0xe8
    846e: 074a         	lsls	r2, r1, #0x1d
    8470: d508         	bpl	0x8484 <_Unwind_VRS_Pop+0x1a4> @ imm = #0x10
    8472: f021 0104    	bic	r1, r1, #0x4
    8476: 4628         	mov	r0, r5
    8478: 9301         	str	r3, [sp, #0x4]
    847a: f840 1bd8    	str	r1, [r0], #216
    847e: f000 f8d3    	bl	0x8628 <__gnu_Unwind_Save_VFP_D_16_to_31> @ imm = #0x1a6
    8482: 9b01         	ldr	r3, [sp, #0x4]
    8484: af22         	add	r7, sp, #0x88
    8486: 9301         	str	r3, [sp, #0x4]
    8488: f1c6 0810    	rsb.w	r8, r6, #0x10
    848c: 4638         	mov	r0, r7
    848e: f000 f8c3    	bl	0x8618 <__gnu_Unwind_Save_VFP_D> @ imm = #0x186
    8492: a802         	add	r0, sp, #0x8
    8494: f000 f8c8    	bl	0x8628 <__gnu_Unwind_Save_VFP_D_16_to_31> @ imm = #0x190
    8498: f8d5 c038    	ldr.w	r12, [r5, #0x38]
    849c: 9b01         	ldr	r3, [sp, #0x4]
    849e: ea4f 0848    	lsl.w	r8, r8, #0x1
    84a2: 4660         	mov	r0, r12
    84a4: eb07 01c6    	add.w	r1, r7, r6, lsl #3
    84a8: f108 38ff    	add.w	r8, r8, #0xffffffff
    84ac: 3904         	subs	r1, #0x4
    84ae: 4642         	mov	r2, r8
    84b0: 3a01         	subs	r2, #0x1
    84b2: f850 eb04    	ldr	lr, [r0], #4
    84b6: f1b2 3fff    	cmp.w	r2, #0xffffffff
    84ba: f841 ef04    	str	lr, [r1, #4]!
    84be: d1f7         	bne	0x84b0 <_Unwind_VRS_Pop+0x1d0> @ imm = #-0x12
    84c0: f10c 0c04    	add.w	r12, r12, #0x4
    84c4: eb0c 0c88    	add.w	r12, r12, r8, lsl #2
    84c8: b374         	cbz	r4, 0x8528 <_Unwind_VRS_Pop+0x248> @ imm = #0x5c
    84ca: af02         	add	r7, sp, #0x8
    84cc: e759         	b	0x8382 <_Unwind_VRS_Pop+0xa2> @ imm = #-0x14e
    84ce: 2a10         	cmp	r2, #0x10
    84d0: f63f af12    	bhi.w	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x1dc
    84d4: 2e10         	cmp	r6, #0x10
    84d6: f43f af0f    	beq.w	0x82f8 <_Unwind_VRS_Pop+0x18> @ imm = #-0x1e2
    84da: 6802         	ldr	r2, [r0]
    84dc: 07d1         	lsls	r1, r2, #0x1f
    84de: d507         	bpl	0x84f0 <_Unwind_VRS_Pop+0x210> @ imm = #0xe
    84e0: f022 0203    	bic	r2, r2, #0x3
    84e4: 9301         	str	r3, [sp, #0x4]
    84e6: f840 2b50    	str	r2, [r0], #80
    84ea: f000 f88d    	bl	0x8608 <__gnu_Unwind_Save_VFP> @ imm = #0x11a
    84ee: 9b01         	ldr	r3, [sp, #0x4]
    84f0: af22         	add	r7, sp, #0x88
    84f2: 9301         	str	r3, [sp, #0x4]
    84f4: 4638         	mov	r0, r7
    84f6: f000 f887    	bl	0x8608 <__gnu_Unwind_Save_VFP> @ imm = #0x10e
    84fa: f8d5 c038    	ldr.w	r12, [r5, #0x38]
    84fe: 9b01         	ldr	r3, [sp, #0x4]
    8500: b1fc         	cbz	r4, 0x8542 <_Unwind_VRS_Pop+0x262> @ imm = #0x3e
    8502: 46a0         	mov	r8, r4
    8504: 2400         	movs	r4, #0x0
    8506: e7ca         	b	0x849e <_Unwind_VRS_Pop+0x1be> @ imm = #-0x6c
    8508: f023 0310    	bic	r3, r3, #0x10
    850c: f500 70ec    	add.w	r0, r0, #0x1d8
    8510: 602b         	str	r3, [r5]
    8512: f000 f8db    	bl	0x86cc <__gnu_Unwind_Save_WMMXC> @ imm = #0x1b6
    8516: e786         	b	0x8426 <_Unwind_VRS_Pop+0x146> @ imm = #-0xf4
    8518: f023 0308    	bic	r3, r3, #0x8
    851c: f505 70ac    	add.w	r0, r5, #0x158
    8520: 602b         	str	r3, [r5]
    8522: f000 f8a7    	bl	0x8674 <__gnu_Unwind_Save_WMMXD> @ imm = #0x14e
    8526: e75c         	b	0x83e2 <_Unwind_VRS_Pop+0x102> @ imm = #-0x148
    8528: 2b01         	cmp	r3, #0x1
    852a: d00a         	beq	0x8542 <_Unwind_VRS_Pop+0x262> @ imm = #0x14
    852c: 2e0f         	cmp	r6, #0xf
    852e: f8c5 c038    	str.w	r12, [r5, #0x38]
    8532: f63f aeec    	bhi.w	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x228
    8536: 4638         	mov	r0, r7
    8538: f000 f86a    	bl	0x8610 <__gnu_Unwind_Restore_VFP_D> @ imm = #0xd4
    853c: e6e7         	b	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x232
    853e: 4694         	mov	r12, r2
    8540: af22         	add	r7, sp, #0x88
    8542: f10c 0304    	add.w	r3, r12, #0x4
    8546: 4638         	mov	r0, r7
    8548: 63ab         	str	r3, [r5, #0x38]
    854a: f000 f859    	bl	0x8600 <__gnu_Unwind_Restore_VFP> @ imm = #0xb2
    854e: e6de         	b	0x830e <_Unwind_VRS_Pop+0x2e> @ imm = #-0x244
    8550: a822         	add	r0, sp, #0x88
    8552: f000 f85d    	bl	0x8610 <__gnu_Unwind_Restore_VFP_D> @ imm = #0xba
    8556: e733         	b	0x83c0 <_Unwind_VRS_Pop+0xe0> @ imm = #-0x19a
    8558: f021 0201    	bic	r2, r1, #0x1
    855c: 4628         	mov	r0, r5
    855e: 9301         	str	r3, [sp, #0x4]
    8560: f042 0202    	orr	r2, r2, #0x2
    8564: f840 2b50    	str	r2, [r0], #80
    8568: f000 f856    	bl	0x8618 <__gnu_Unwind_Save_VFP_D> @ imm = #0xac
    856c: 682a         	ldr	r2, [r5]
    856e: 9b01         	ldr	r3, [sp, #0x4]
    8570: f012 0f04    	tst.w	r2, #0x4
    8574: d086         	beq	0x8484 <_Unwind_VRS_Pop+0x1a4> @ imm = #-0xf4
    8576: f022 0204    	bic	r2, r2, #0x4
    857a: 4628         	mov	r0, r5
    857c: 9301         	str	r3, [sp, #0x4]
    857e: f840 2bd8    	str	r2, [r0], #216
    8582: f000 f851    	bl	0x8628 <__gnu_Unwind_Save_VFP_D_16_to_31> @ imm = #0xa2
    8586: 9b01         	ldr	r3, [sp, #0x4]
    8588: e77c         	b	0x8484 <_Unwind_VRS_Pop+0x1a4> @ imm = #-0x108
    858a: f022 0204    	bic	r2, r2, #0x4
    858e: f840 2bd8    	str	r2, [r0], #216
    8592: f000 f849    	bl	0x8628 <__gnu_Unwind_Save_VFP_D_16_to_31> @ imm = #0x92
    8596: e6ed         	b	0x8374 <_Unwind_VRS_Pop+0x94> @ imm = #-0x226
    8598: 6802         	ldr	r2, [r0]
    859a: 07d0         	lsls	r0, r2, #0x1f
    859c: d40c         	bmi	0x85b8 <_Unwind_VRS_Pop+0x2d8> @ imm = #0x18
    859e: af22         	add	r7, sp, #0x88
    85a0: 9301         	str	r3, [sp, #0x4]
    85a2: 4638         	mov	r0, r7
    85a4: f000 f838    	bl	0x8618 <__gnu_Unwind_Save_VFP_D> @ imm = #0x70
    85a8: 2c00         	cmp	r4, #0x0
    85aa: d0c4         	beq	0x8536 <_Unwind_VRS_Pop+0x256> @ imm = #-0x78
    85ac: 46a0         	mov	r8, r4
    85ae: f8d5 c038    	ldr.w	r12, [r5, #0x38]
    85b2: 2400         	movs	r4, #0x0
    85b4: 9b01         	ldr	r3, [sp, #0x4]
    85b6: e772         	b	0x849e <_Unwind_VRS_Pop+0x1be> @ imm = #-0x11c
    85b8: 2b05         	cmp	r3, #0x5
    85ba: 9301         	str	r3, [sp, #0x4]
    85bc: d10a         	bne	0x85d4 <_Unwind_VRS_Pop+0x2f4> @ imm = #0x14
    85be: f022 0201    	bic	r2, r2, #0x1
    85c2: 4628         	mov	r0, r5
    85c4: f042 0202    	orr	r2, r2, #0x2
    85c8: f840 2b50    	str	r2, [r0], #80
    85cc: f000 f824    	bl	0x8618 <__gnu_Unwind_Save_VFP_D> @ imm = #0x48
    85d0: 9b01         	ldr	r3, [sp, #0x4]
    85d2: e7e4         	b	0x859e <_Unwind_VRS_Pop+0x2be> @ imm = #-0x38
    85d4: f022 0203    	bic	r2, r2, #0x3
    85d8: 4628         	mov	r0, r5
    85da: f840 2b50    	str	r2, [r0], #80
    85de: f000 f813    	bl	0x8608 <__gnu_Unwind_Save_VFP> @ imm = #0x26
    85e2: 9b01         	ldr	r3, [sp, #0x4]
    85e4: e7db         	b	0x859e <_Unwind_VRS_Pop+0x2be> @ imm = #-0x4a
    85e6: bf00         	nop

000085e8 <restore_core_regs>:
; restore_core_regs():
    85e8: f100 0134    	add.w	r1, r0, #0x34
    85ec: e891 0038    	ldm.w	r1, {r3, r4, r5}
    85f0: 469c         	mov	r12, r3
    85f2: 46a6         	mov	lr, r4
    85f4: f84c 5d04    	str	r5, [r12, #-4]!
    85f8: e890 0fff    	ldm.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11}
    85fc: 46e5         	mov	sp, r12
    85fe: bd00         	pop	{pc}

00008600 <__gnu_Unwind_Restore_VFP>:
; __gnu_Unwind_Restore_VFP():
    8600: ec90 0b21    	fldmiax	r0, {d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15}
    8604: 4770         	bx	lr
    8606: bf00         	nop

00008608 <__gnu_Unwind_Save_VFP>:
; __gnu_Unwind_Save_VFP():
    8608: ec80 0b21    	fstmiax	r0, {d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15}
    860c: 4770         	bx	lr
    860e: bf00         	nop

00008610 <__gnu_Unwind_Restore_VFP_D>:
; __gnu_Unwind_Restore_VFP_D():
    8610: ec90 0b20    	vldmia	r0, {d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15}
    8614: 4770         	bx	lr
    8616: bf00         	nop

00008618 <__gnu_Unwind_Save_VFP_D>:
; __gnu_Unwind_Save_VFP_D():
    8618: ec80 0b20    	vstmia	r0, {d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15}
    861c: 4770         	bx	lr
    861e: bf00         	nop

00008620 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
; __gnu_Unwind_Restore_VFP_D_16_to_31():
    8620: ecd0 0b20    	<unknown>
    8624: 4770         	bx	lr
    8626: bf00         	nop

00008628 <__gnu_Unwind_Save_VFP_D_16_to_31>:
; __gnu_Unwind_Save_VFP_D_16_to_31():
    8628: ecc0 0b20    	<unknown>
    862c: 4770         	bx	lr
    862e: bf00         	nop

00008630 <__gnu_Unwind_Restore_WMMXD>:
; __gnu_Unwind_Restore_WMMXD():
    8630: ecf0 0102    	ldcl	p1, c0, [r0], #8
    8634: ecf0 1102    	ldcl	p1, c1, [r0], #8
    8638: ecf0 2102    	ldcl	p1, c2, [r0], #8
    863c: ecf0 3102    	ldcl	p1, c3, [r0], #8
    8640: ecf0 4102    	ldcl	p1, c4, [r0], #8
    8644: ecf0 5102    	ldcl	p1, c5, [r0], #8
    8648: ecf0 6102    	ldcl	p1, c6, [r0], #8
    864c: ecf0 7102    	ldcl	p1, c7, [r0], #8
    8650: ecf0 8102    	ldcl	p1, c8, [r0], #8
    8654: ecf0 9102    	ldcl	p1, c9, [r0], #8
    8658: ecf0 a102    	ldcl	p1, c10, [r0], #8
    865c: ecf0 b102    	ldcl	p1, c11, [r0], #8
    8660: ecf0 c102    	ldcl	p1, c12, [r0], #8
    8664: ecf0 d102    	ldcl	p1, c13, [r0], #8
    8668: ecf0 e102    	ldcl	p1, c14, [r0], #8
    866c: ecf0 f102    	ldcl	p1, c15, [r0], #8
    8670: 4770         	bx	lr
    8672: bf00         	nop

00008674 <__gnu_Unwind_Save_WMMXD>:
; __gnu_Unwind_Save_WMMXD():
    8674: ece0 0102    	stcl	p1, c0, [r0], #8
    8678: ece0 1102    	stcl	p1, c1, [r0], #8
    867c: ece0 2102    	stcl	p1, c2, [r0], #8
    8680: ece0 3102    	stcl	p1, c3, [r0], #8
    8684: ece0 4102    	stcl	p1, c4, [r0], #8
    8688: ece0 5102    	stcl	p1, c5, [r0], #8
    868c: ece0 6102    	stcl	p1, c6, [r0], #8
    8690: ece0 7102    	stcl	p1, c7, [r0], #8
    8694: ece0 8102    	stcl	p1, c8, [r0], #8
    8698: ece0 9102    	stcl	p1, c9, [r0], #8
    869c: ece0 a102    	stcl	p1, c10, [r0], #8
    86a0: ece0 b102    	stcl	p1, c11, [r0], #8
    86a4: ece0 c102    	stcl	p1, c12, [r0], #8
    86a8: ece0 d102    	stcl	p1, c13, [r0], #8
    86ac: ece0 e102    	stcl	p1, c14, [r0], #8
    86b0: ece0 f102    	stcl	p1, c15, [r0], #8
    86b4: 4770         	bx	lr
    86b6: bf00         	nop

000086b8 <__gnu_Unwind_Restore_WMMXC>:
; __gnu_Unwind_Restore_WMMXC():
    86b8: fcb0 8101    	ldc2	p1, c8, [r0], #4
    86bc: fcb0 9101    	ldc2	p1, c9, [r0], #4
    86c0: fcb0 a101    	ldc2	p1, c10, [r0], #4
    86c4: fcb0 b101    	ldc2	p1, c11, [r0], #4
    86c8: 4770         	bx	lr
    86ca: bf00         	nop

000086cc <__gnu_Unwind_Save_WMMXC>:
; __gnu_Unwind_Save_WMMXC():
    86cc: fca0 8101    	stc2	p1, c8, [r0], #4
    86d0: fca0 9101    	stc2	p1, c9, [r0], #4
    86d4: fca0 a101    	stc2	p1, c10, [r0], #4
    86d8: fca0 b101    	stc2	p1, c11, [r0], #4
    86dc: 4770         	bx	lr
    86de: bf00         	nop

000086e0 <___Unwind_RaiseException>:
; _Unwind_RaiseException():
    86e0: 46ec         	mov	r12, sp
    86e2: b500         	push	{lr}
    86e4: e92d 5000    	push.w	{r12, lr}
    86e8: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
    86ec: f04f 0300    	mov.w	r3, #0x0
    86f0: e92d 000c    	push.w	{r2, r3}
    86f4: a901         	add	r1, sp, #0x4
    86f6: f7ff fb8f    	bl	0x7e18 <__gnu_Unwind_RaiseException> @ imm = #-0x8e2
    86fa: f8dd e040    	ldr.w	lr, [sp, #0x40]
    86fe: b012         	add	sp, #0x48
    8700: 4770         	bx	lr
    8702: bf00         	nop

00008704 <___Unwind_Resume>:
; _Unwind_Resume():
    8704: 46ec         	mov	r12, sp
    8706: b500         	push	{lr}
    8708: e92d 5000    	push.w	{r12, lr}
    870c: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
    8710: f04f 0300    	mov.w	r3, #0x0
    8714: e92d 000c    	push.w	{r2, r3}
    8718: a901         	add	r1, sp, #0x4
    871a: f7ff fbbd    	bl	0x7e98 <__gnu_Unwind_Resume> @ imm = #-0x886
    871e: f8dd e040    	ldr.w	lr, [sp, #0x40]
    8722: b012         	add	sp, #0x48
    8724: 4770         	bx	lr
    8726: bf00         	nop

00008728 <___Unwind_Resume_or_Rethrow>:
; ___Unwind_Resume_or_Rethrow():
    8728: 46ec         	mov	r12, sp
    872a: b500         	push	{lr}
    872c: e92d 5000    	push.w	{r12, lr}
    8730: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
    8734: f04f 0300    	mov.w	r3, #0x0
    8738: e92d 000c    	push.w	{r2, r3}
    873c: a901         	add	r1, sp, #0x4
    873e: f7ff fbcd    	bl	0x7edc <__gnu_Unwind_Resume_or_Rethrow> @ imm = #-0x866
    8742: f8dd e040    	ldr.w	lr, [sp, #0x40]
    8746: b012         	add	sp, #0x48
    8748: 4770         	bx	lr
    874a: bf00         	nop

0000874c <___Unwind_ForcedUnwind>:
; _Unwind_ForcedUnwind():
    874c: 46ec         	mov	r12, sp
    874e: b500         	push	{lr}
    8750: e92d 5000    	push.w	{r12, lr}
    8754: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
    8758: f04f 0300    	mov.w	r3, #0x0
    875c: e92d 000c    	push.w	{r2, r3}
    8760: ab01         	add	r3, sp, #0x4
    8762: f7ff fb8f    	bl	0x7e84 <__gnu_Unwind_ForcedUnwind> @ imm = #-0x8e2
    8766: f8dd e040    	ldr.w	lr, [sp, #0x40]
    876a: b012         	add	sp, #0x48
    876c: 4770         	bx	lr
    876e: bf00         	nop

00008770 <___Unwind_Backtrace>:
; ___Unwind_Backtrace():
    8770: 46ec         	mov	r12, sp
    8772: b500         	push	{lr}
    8774: e92d 5000    	push.w	{r12, lr}
    8778: e92d 1fff    	push.w	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12}
    877c: f04f 0300    	mov.w	r3, #0x0
    8780: e92d 000c    	push.w	{r2, r3}
    8784: aa01         	add	r2, sp, #0x4
    8786: f7ff fc05    	bl	0x7f94 <__gnu_Unwind_Backtrace> @ imm = #-0x7f6
    878a: f8dd e040    	ldr.w	lr, [sp, #0x40]
    878e: b012         	add	sp, #0x48
    8790: 4770         	bx	lr
    8792: bf00         	nop

00008794 <next_unwind_byte>:
; next_unwind_byte():
    8794: 7a02         	ldrb	r2, [r0, #0x8]
    8796: 4603         	mov	r3, r0
    8798: b98a         	cbnz	r2, 0x87be <next_unwind_byte+0x2a> @ imm = #0x22
    879a: 7a42         	ldrb	r2, [r0, #0x9]
    879c: b1b2         	cbz	r2, 0x87cc <next_unwind_byte+0x38> @ imm = #0x2c
    879e: 6841         	ldr	r1, [r0, #0x4]
    87a0: 3a01         	subs	r2, #0x1
    87a2: f04f 0c03    	mov.w	r12, #0x3
    87a6: b410         	push	{r4}
    87a8: 7242         	strb	r2, [r0, #0x9]
    87aa: 1d0c         	adds	r4, r1, #0x4
    87ac: 6808         	ldr	r0, [r1]
    87ae: f883 c008    	strb.w	r12, [r3, #0x8]
    87b2: 0202         	lsls	r2, r0, #0x8
    87b4: 605c         	str	r4, [r3, #0x4]
    87b6: 0e00         	lsrs	r0, r0, #0x18
    87b8: bc10         	pop	{r4}
    87ba: 601a         	str	r2, [r3]
    87bc: 4770         	bx	lr
    87be: 6800         	ldr	r0, [r0]
    87c0: 3a01         	subs	r2, #0x1
    87c2: 721a         	strb	r2, [r3, #0x8]
    87c4: 0202         	lsls	r2, r0, #0x8
    87c6: 0e00         	lsrs	r0, r0, #0x18
    87c8: 601a         	str	r2, [r3]
    87ca: 4770         	bx	lr
    87cc: 20b0         	movs	r0, #0xb0
    87ce: 4770         	bx	lr

000087d0 <__gnu_unwind_execute>:
; __gnu_unwind_execute():
    87d0: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
    87d4: 2700         	movs	r7, #0x0
    87d6: b085         	sub	sp, #0x14
    87d8: 4606         	mov	r6, r0
    87da: 460d         	mov	r5, r1
    87dc: 4628         	mov	r0, r5
    87de: f7ff ffd9    	bl	0x8794 <next_unwind_byte> @ imm = #-0x4e
    87e2: 28b0         	cmp	r0, #0xb0
    87e4: 4604         	mov	r4, r0
    87e6: f000 8124    	beq.w	0x8a32 <__gnu_unwind_execute+0x262> @ imm = #0x248
    87ea: 0603         	lsls	r3, r0, #0x18
    87ec: d538         	bpl	0x8860 <__gnu_unwind_execute+0x90> @ imm = #0x70
    87ee: f000 03f0    	and	r3, r0, #0xf0
    87f2: 2ba0         	cmp	r3, #0xa0
    87f4: f000 8083    	beq.w	0x88fe <__gnu_unwind_execute+0x12e> @ imm = #0x106
    87f8: d80c         	bhi	0x8814 <__gnu_unwind_execute+0x44> @ imm = #0x18
    87fa: 2b80         	cmp	r3, #0x80
    87fc: d060         	beq	0x88c0 <__gnu_unwind_execute+0xf0> @ imm = #0xc0
    87fe: 2b90         	cmp	r3, #0x90
    8800: d104         	bne	0x880c <__gnu_unwind_execute+0x3c> @ imm = #0x8
    8802: f000 030d    	and	r3, r0, #0xd
    8806: 2b0d         	cmp	r3, #0xd
    8808: f040 808f    	bne.w	0x892a <__gnu_unwind_execute+0x15a> @ imm = #0x11e
    880c: 2009         	movs	r0, #0x9
    880e: b005         	add	sp, #0x14
    8810: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
    8814: 2bb0         	cmp	r3, #0xb0
    8816: d068         	beq	0x88ea <__gnu_unwind_execute+0x11a> @ imm = #0xd0
    8818: 2bc0         	cmp	r3, #0xc0
    881a: d140         	bne	0x889e <__gnu_unwind_execute+0xce> @ imm = #0x80
    881c: 28c6         	cmp	r0, #0xc6
    881e: f000 80f5    	beq.w	0x8a0c <__gnu_unwind_execute+0x23c> @ imm = #0x1ea
    8822: 28c7         	cmp	r0, #0xc7
    8824: f000 8108    	beq.w	0x8a38 <__gnu_unwind_execute+0x268> @ imm = #0x210
    8828: f000 03f8    	and	r3, r0, #0xf8
    882c: 2bc0         	cmp	r3, #0xc0
    882e: f000 8115    	beq.w	0x8a5c <__gnu_unwind_execute+0x28c> @ imm = #0x22a
    8832: 28c8         	cmp	r0, #0xc8
    8834: f000 8120    	beq.w	0x8a78 <__gnu_unwind_execute+0x2a8> @ imm = #0x240
    8838: 28c9         	cmp	r0, #0xc9
    883a: d1e7         	bne	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x32
    883c: 4628         	mov	r0, r5
    883e: f7ff ffa9    	bl	0x8794 <next_unwind_byte> @ imm = #-0xae
    8842: 0302         	lsls	r2, r0, #0xc
    8844: f000 000f    	and	r0, r0, #0xf
    8848: f402 2270    	and	r2, r2, #0xf0000
    884c: 3001         	adds	r0, #0x1
    884e: 4302         	orrs	r2, r0
    8850: 2101         	movs	r1, #0x1
    8852: 2305         	movs	r3, #0x5
    8854: 4630         	mov	r0, r6
    8856: f7ff fd43    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x57a
    885a: 2800         	cmp	r0, #0x0
    885c: d0be         	beq	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x84
    885e: e7d5         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x56
    8860: 0083         	lsls	r3, r0, #0x2
    8862: f10d 0908    	add.w	r9, sp, #0x8
    8866: 220d         	movs	r2, #0xd
    8868: 4630         	mov	r0, r6
    886a: b2db         	uxtb	r3, r3
    886c: f8cd 9000    	str.w	r9, [sp]
    8870: f103 0804    	add.w	r8, r3, #0x4
    8874: 2300         	movs	r3, #0x0
    8876: 4619         	mov	r1, r3
    8878: f7ff fb40    	bl	0x7efc <_Unwind_VRS_Get> @ imm = #-0x980
    887c: 9a02         	ldr	r2, [sp, #0x8]
    887e: 0660         	lsls	r0, r4, #0x19
    8880: f04f 0300    	mov.w	r3, #0x0
    8884: 4630         	mov	r0, r6
    8886: f8cd 9000    	str.w	r9, [sp]
    888a: bf4c         	ite	mi
    888c: eba2 0208    	submi.w	r2, r2, r8
    8890: 4442         	addpl	r2, r8
    8892: 4619         	mov	r1, r3
    8894: 9202         	str	r2, [sp, #0x8]
    8896: 220d         	movs	r2, #0xd
    8898: f7ff fb56    	bl	0x7f48 <_Unwind_VRS_Set> @ imm = #-0x954
    889c: e79e         	b	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0xc4
    889e: f000 03f8    	and	r3, r0, #0xf8
    88a2: 2bd0         	cmp	r3, #0xd0
    88a4: d1b2         	bne	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x9c
    88a6: f000 0207    	and	r2, r0, #0x7
    88aa: 2305         	movs	r3, #0x5
    88ac: 2101         	movs	r1, #0x1
    88ae: 4630         	mov	r0, r6
    88b0: 3201         	adds	r2, #0x1
    88b2: f442 2200    	orr	r2, r2, #0x80000
    88b6: f7ff fd13    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x5da
    88ba: 2800         	cmp	r0, #0x0
    88bc: d08e         	beq	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0xe4
    88be: e7a5         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0xb6
    88c0: 0224         	lsls	r4, r4, #0x8
    88c2: 4628         	mov	r0, r5
    88c4: f7ff ff66    	bl	0x8794 <next_unwind_byte> @ imm = #-0x134
    88c8: 4320         	orrs	r0, r4
    88ca: f5b0 4f00    	cmp.w	r0, #0x8000
    88ce: d09d         	beq	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0xc6
    88d0: 0104         	lsls	r4, r0, #0x4
    88d2: 2300         	movs	r3, #0x0
    88d4: 4630         	mov	r0, r6
    88d6: b2a2         	uxth	r2, r4
    88d8: 4619         	mov	r1, r3
    88da: f7ff fd01    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x5fe
    88de: 2800         	cmp	r0, #0x0
    88e0: d194         	bne	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0xd8
    88e2: f3c4 30c0    	ubfx	r0, r4, #0xf, #0x1
    88e6: 4307         	orrs	r7, r0
    88e8: e778         	b	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x110
    88ea: f1a0 03b1    	sub.w	r3, r0, #0xb1
    88ee: 2b04         	cmp	r3, #0x4
    88f0: f200 80de    	bhi.w	0x8ab0 <__gnu_unwind_execute+0x2e0> @ imm = #0x1bc
    88f4: e8df f003    	tbb	[pc, r3]
    88f8: 81 53 40 36  	.word	0x36405381
    88fc: 2d           	.byte	0x2d
    88fd: 00           	.byte	0x00
    88fe: 43c3         	mvns	r3, r0
    8900: f44f 627f    	mov.w	r2, #0xff0
    8904: 0701         	lsls	r1, r0, #0x1c
    8906: f003 0307    	and	r3, r3, #0x7
    890a: fa42 f203    	asr.w	r2, r2, r3
    890e: f402 627f    	and	r2, r2, #0xff0
    8912: d501         	bpl	0x8918 <__gnu_unwind_execute+0x148> @ imm = #0x2
    8914: f442 4280    	orr	r2, r2, #0x4000
    8918: 2300         	movs	r3, #0x0
    891a: 4630         	mov	r0, r6
    891c: 4619         	mov	r1, r3
    891e: f7ff fcdf    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x642
    8922: 2800         	cmp	r0, #0x0
    8924: f43f af5a    	beq.w	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x14c
    8928: e770         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x120
    892a: f10d 0808    	add.w	r8, sp, #0x8
    892e: 2300         	movs	r3, #0x0
    8930: f000 020f    	and	r2, r0, #0xf
    8934: 4630         	mov	r0, r6
    8936: 4619         	mov	r1, r3
    8938: f8cd 8000    	str.w	r8, [sp]
    893c: f7ff fade    	bl	0x7efc <_Unwind_VRS_Get> @ imm = #-0xa44
    8940: 2300         	movs	r3, #0x0
    8942: 220d         	movs	r2, #0xd
    8944: 4630         	mov	r0, r6
    8946: 4619         	mov	r1, r3
    8948: f8cd 8000    	str.w	r8, [sp]
    894c: f7ff fafc    	bl	0x7f48 <_Unwind_VRS_Set> @ imm = #-0xa08
    8950: e744         	b	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x178
    8952: aa03         	add	r2, sp, #0xc
    8954: 2300         	movs	r3, #0x0
    8956: 4630         	mov	r0, r6
    8958: 9200         	str	r2, [sp]
    895a: 4619         	mov	r1, r3
    895c: 220d         	movs	r2, #0xd
    895e: f7ff facd    	bl	0x7efc <_Unwind_VRS_Get> @ imm = #-0xa66
    8962: e73b         	b	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x18a
    8964: 2300         	movs	r3, #0x0
    8966: 2105         	movs	r1, #0x5
    8968: 4630         	mov	r0, r6
    896a: 461a         	mov	r2, r3
    896c: f7ff fcb8    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x690
    8970: 2800         	cmp	r0, #0x0
    8972: f43f af33    	beq.w	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x19a
    8976: e749         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x16e
    8978: 4628         	mov	r0, r5
    897a: f7ff ff0b    	bl	0x8794 <next_unwind_byte> @ imm = #-0x1ea
    897e: 2301         	movs	r3, #0x1
    8980: 0302         	lsls	r2, r0, #0xc
    8982: f000 000f    	and	r0, r0, #0xf
    8986: 4619         	mov	r1, r3
    8988: 3001         	adds	r0, #0x1
    898a: f402 2270    	and	r2, r2, #0xf0000
    898e: 4302         	orrs	r2, r0
    8990: 4630         	mov	r0, r6
    8992: f7ff fca5    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x6b6
    8996: 2800         	cmp	r0, #0x0
    8998: f43f af20    	beq.w	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x1c0
    899c: e736         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x194
    899e: 2300         	movs	r3, #0x0
    89a0: f10d 0908    	add.w	r9, sp, #0x8
    89a4: 220d         	movs	r2, #0xd
    89a6: 4630         	mov	r0, r6
    89a8: 4619         	mov	r1, r3
    89aa: f8cd 9000    	str.w	r9, [sp]
    89ae: f7ff faa5    	bl	0x7efc <_Unwind_VRS_Get> @ imm = #-0xab6
    89b2: 4628         	mov	r0, r5
    89b4: f7ff feee    	bl	0x8794 <next_unwind_byte> @ imm = #-0x224
    89b8: 0602         	lsls	r2, r0, #0x18
    89ba: 9c02         	ldr	r4, [sp, #0x8]
    89bc: f04f 0802    	mov.w	r8, #0x2
    89c0: d50c         	bpl	0x89dc <__gnu_unwind_execute+0x20c> @ imm = #0x18
    89c2: f000 007f    	and	r0, r0, #0x7f
    89c6: fa00 f008    	lsl.w	r0, r0, r8
    89ca: f108 0807    	add.w	r8, r8, #0x7
    89ce: 4404         	add	r4, r0
    89d0: 4628         	mov	r0, r5
    89d2: 9402         	str	r4, [sp, #0x8]
    89d4: f7ff fede    	bl	0x8794 <next_unwind_byte> @ imm = #-0x244
    89d8: 0603         	lsls	r3, r0, #0x18
    89da: d4f2         	bmi	0x89c2 <__gnu_unwind_execute+0x1f2> @ imm = #-0x1c
    89dc: fa00 f008    	lsl.w	r0, r0, r8
    89e0: f504 7401    	add.w	r4, r4, #0x204
    89e4: 2300         	movs	r3, #0x0
    89e6: 220d         	movs	r2, #0xd
    89e8: 4404         	add	r4, r0
    89ea: f8cd 9000    	str.w	r9, [sp]
    89ee: 4619         	mov	r1, r3
    89f0: 4630         	mov	r0, r6
    89f2: 9402         	str	r4, [sp, #0x8]
    89f4: f7ff faa8    	bl	0x7f48 <_Unwind_VRS_Set> @ imm = #-0xab0
    89f8: e6f0         	b	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x220
    89fa: 4628         	mov	r0, r5
    89fc: f7ff feca    	bl	0x8794 <next_unwind_byte> @ imm = #-0x26c
    8a00: 1e43         	subs	r3, r0, #0x1
    8a02: 4602         	mov	r2, r0
    8a04: b2db         	uxtb	r3, r3
    8a06: 2b0e         	cmp	r3, #0xe
    8a08: d986         	bls	0x8918 <__gnu_unwind_execute+0x148> @ imm = #-0xf4
    8a0a: e6ff         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x202
    8a0c: 4628         	mov	r0, r5
    8a0e: f7ff fec1    	bl	0x8794 <next_unwind_byte> @ imm = #-0x27e
    8a12: 2303         	movs	r3, #0x3
    8a14: 0302         	lsls	r2, r0, #0xc
    8a16: f000 000f    	and	r0, r0, #0xf
    8a1a: 4619         	mov	r1, r3
    8a1c: 3001         	adds	r0, #0x1
    8a1e: f402 2270    	and	r2, r2, #0xf0000
    8a22: 4302         	orrs	r2, r0
    8a24: 4630         	mov	r0, r6
    8a26: f7ff fc5b    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x74a
    8a2a: 2800         	cmp	r0, #0x0
    8a2c: f43f aed6    	beq.w	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x254
    8a30: e6ec         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x228
    8a32: b36f         	cbz	r7, 0x8a90 <__gnu_unwind_execute+0x2c0> @ imm = #0x5a
    8a34: 2000         	movs	r0, #0x0
    8a36: e6ea         	b	0x880e <__gnu_unwind_execute+0x3e> @ imm = #-0x22c
    8a38: 4628         	mov	r0, r5
    8a3a: f7ff feab    	bl	0x8794 <next_unwind_byte> @ imm = #-0x2aa
    8a3e: 1e43         	subs	r3, r0, #0x1
    8a40: 4602         	mov	r2, r0
    8a42: b2db         	uxtb	r3, r3
    8a44: 2b0e         	cmp	r3, #0xe
    8a46: f63f aee1    	bhi.w	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x23e
    8a4a: 2300         	movs	r3, #0x0
    8a4c: 2104         	movs	r1, #0x4
    8a4e: 4630         	mov	r0, r6
    8a50: f7ff fc46    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x774
    8a54: 2800         	cmp	r0, #0x0
    8a56: f43f aec1    	beq.w	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x27e
    8a5a: e6d7         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x252
    8a5c: f000 020f    	and	r2, r0, #0xf
    8a60: 2303         	movs	r3, #0x3
    8a62: 4630         	mov	r0, r6
    8a64: 3201         	adds	r2, #0x1
    8a66: 4619         	mov	r1, r3
    8a68: f442 2220    	orr	r2, r2, #0xa0000
    8a6c: f7ff fc38    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x790
    8a70: 2800         	cmp	r0, #0x0
    8a72: f43f aeb3    	beq.w	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x29a
    8a76: e6c9         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x26e
    8a78: 4628         	mov	r0, r5
    8a7a: f7ff fe8b    	bl	0x8794 <next_unwind_byte> @ imm = #-0x2ea
    8a7e: f000 02f0    	and	r2, r0, #0xf0
    8a82: f000 030f    	and	r3, r0, #0xf
    8a86: 3210         	adds	r2, #0x10
    8a88: 3301         	adds	r3, #0x1
    8a8a: ea43 3202    	orr.w	r2, r3, r2, lsl #12
    8a8e: e6df         	b	0x8850 <__gnu_unwind_execute+0x80> @ imm = #-0x242
    8a90: ac02         	add	r4, sp, #0x8
    8a92: 463b         	mov	r3, r7
    8a94: 4639         	mov	r1, r7
    8a96: 220e         	movs	r2, #0xe
    8a98: 4630         	mov	r0, r6
    8a9a: 9400         	str	r4, [sp]
    8a9c: f7ff fa2e    	bl	0x7efc <_Unwind_VRS_Get> @ imm = #-0xba4
    8aa0: 220f         	movs	r2, #0xf
    8aa2: 463b         	mov	r3, r7
    8aa4: 4639         	mov	r1, r7
    8aa6: 4630         	mov	r0, r6
    8aa8: 9400         	str	r4, [sp]
    8aaa: f7ff fa4d    	bl	0x7f48 <_Unwind_VRS_Set> @ imm = #-0xb66
    8aae: e7c1         	b	0x8a34 <__gnu_unwind_execute+0x264> @ imm = #-0x7e
    8ab0: f000 03fc    	and	r3, r0, #0xfc
    8ab4: 2bb4         	cmp	r3, #0xb4
    8ab6: f43f aea9    	beq.w	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x2ae
    8aba: f000 0207    	and	r2, r0, #0x7
    8abe: 2301         	movs	r3, #0x1
    8ac0: 4630         	mov	r0, r6
    8ac2: 441a         	add	r2, r3
    8ac4: 4619         	mov	r1, r3
    8ac6: f442 2200    	orr	r2, r2, #0x80000
    8aca: f7ff fc09    	bl	0x82e0 <_Unwind_VRS_Pop> @ imm = #-0x7ee
    8ace: 2800         	cmp	r0, #0x0
    8ad0: f43f ae84    	beq.w	0x87dc <__gnu_unwind_execute+0xc> @ imm = #-0x2f8
    8ad4: e69a         	b	0x880c <__gnu_unwind_execute+0x3c> @ imm = #-0x2cc
    8ad6: bf00         	nop

00008ad8 <__aeabi_ldiv0>:
; __aeabi_idiv0():
    8ad8: 4770         	bx	lr
    8ada: bf00         	nop

00008adc <abort>:
; abort():
    8adc: 2006         	movs	r0, #0x6
    8ade: b508         	push	{r3, lr}
    8ae0: f000 f9b0    	bl	0x8e44 <raise>          @ imm = #0x360
    8ae4: 2001         	movs	r0, #0x1
    8ae6: f006 fe85    	bl	0xf7f4 <_exit>          @ imm = #0x6d0a
    8aea: bf00         	nop

00008aec <exit>:
; exit():
    8aec: b508         	push	{r3, lr}
    8aee: 2100         	movs	r1, #0x0
    8af0: 4604         	mov	r4, r0
    8af2: f000 fac9    	bl	0x9088 <__call_exitprocs> @ imm = #0x592
    8af6: 4b03         	ldr	r3, [pc, #0xc]          @ 0x8b04 <exit+0x18>
    8af8: 681b         	ldr	r3, [r3]
    8afa: b103         	cbz	r3, 0x8afe <exit+0x12>  @ imm = #0x0
    8afc: 4798         	blx	r3
    8afe: 4620         	mov	r0, r4
    8b00: f006 fe78    	bl	0xf7f4 <_exit>          @ imm = #0x6cf0
    8b04: fc 17 00 20  	.word	0x200017fc

00008b08 <printf>:
; printf():
    8b08: b40f         	push	{r0, r1, r2, r3}
    8b0a: 4908         	ldr	r1, [pc, #0x20]         @ 0x8b2c <printf+0x24>
    8b0c: b500         	push	{lr}
    8b0e: b083         	sub	sp, #0xc
    8b10: 6808         	ldr	r0, [r1]
    8b12: ab04         	add	r3, sp, #0x10
    8b14: 6881         	ldr	r1, [r0, #0x8]
    8b16: f853 2b04    	ldr	r2, [r3], #4
    8b1a: 9301         	str	r3, [sp, #0x4]
    8b1c: f000 fdd4    	bl	0x96c8 <_vfprintf_r>    @ imm = #0xba8
    8b20: b003         	add	sp, #0xc
    8b22: f85d eb04    	ldr	lr, [sp], #4
    8b26: b004         	add	sp, #0x10
    8b28: 4770         	bx	lr
    8b2a: bf00         	nop
    8b2c: c4 05 00 20  	.word	0x200005c4

00008b30 <putchar>:
; putchar():
    8b30: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8b3c <putchar+0xc>
    8b32: 4601         	mov	r1, r0
    8b34: 6818         	ldr	r0, [r3]
    8b36: 6882         	ldr	r2, [r0, #0x8]
    8b38: f003 b9f8    	b.w	0xbf2c <_putc_r>        @ imm = #0x33f0
    8b3c: c4 05 00 20  	.word	0x200005c4

00008b40 <_puts_r>:
; _puts_r():
    8b40: b530         	push	{r4, r5, lr}
    8b42: 4605         	mov	r5, r0
    8b44: b089         	sub	sp, #0x24
    8b46: 4608         	mov	r0, r1
    8b48: 460c         	mov	r4, r1
    8b4a: f000 fa65    	bl	0x9018 <strlen>         @ imm = #0x4ca
    8b4e: 4b2a         	ldr	r3, [pc, #0xa8]         @ 0x8bf8 <_puts_r+0xb8>
    8b50: 2201         	movs	r2, #0x1
    8b52: 9404         	str	r4, [sp, #0x10]
    8b54: 9306         	str	r3, [sp, #0x18]
    8b56: ab04         	add	r3, sp, #0x10
    8b58: 1881         	adds	r1, r0, r2
    8b5a: 9207         	str	r2, [sp, #0x1c]
    8b5c: 9301         	str	r3, [sp, #0x4]
    8b5e: 2202         	movs	r2, #0x2
    8b60: 6b6b         	ldr	r3, [r5, #0x34]
    8b62: 68ac         	ldr	r4, [r5, #0x8]
    8b64: 9005         	str	r0, [sp, #0x14]
    8b66: e9cd 2102    	strd	r2, r1, [sp, #8]
    8b6a: 2b00         	cmp	r3, #0x0
    8b6c: d040         	beq	0x8bf0 <_puts_r+0xb0>   @ imm = #0x80
    8b6e: 6e63         	ldr	r3, [r4, #0x64]
    8b70: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
    8b74: 07d8         	lsls	r0, r3, #0x1f
    8b76: d51a         	bpl	0x8bae <_puts_r+0x6e>   @ imm = #0x34
    8b78: 0491         	lsls	r1, r2, #0x12
    8b7a: d421         	bmi	0x8bc0 <_puts_r+0x80>   @ imm = #0x42
    8b7c: f442 5200    	orr	r2, r2, #0x2000
    8b80: f423 5300    	bic	r3, r3, #0x2000
    8b84: 81a2         	strh	r2, [r4, #0xc]
    8b86: 6663         	str	r3, [r4, #0x64]
    8b88: 4628         	mov	r0, r5
    8b8a: aa01         	add	r2, sp, #0x4
    8b8c: 4621         	mov	r1, r4
    8b8e: f002 fe73    	bl	0xb878 <__sfvwrite_r>   @ imm = #0x2ce6
    8b92: 2800         	cmp	r0, #0x0
    8b94: 6e63         	ldr	r3, [r4, #0x64]
    8b96: bf14         	ite	ne
    8b98: f04f 35ff    	movne.w	r5, #0xffffffff
    8b9c: 250a         	moveq	r5, #0xa
    8b9e: 07da         	lsls	r2, r3, #0x1f
    8ba0: d402         	bmi	0x8ba8 <_puts_r+0x68>   @ imm = #0x4
    8ba2: 89a3         	ldrh	r3, [r4, #0xc]
    8ba4: 059b         	lsls	r3, r3, #0x16
    8ba6: d510         	bpl	0x8bca <_puts_r+0x8a>   @ imm = #0x20
    8ba8: 4628         	mov	r0, r5
    8baa: b009         	add	sp, #0x24
    8bac: bd30         	pop	{r4, r5, pc}
    8bae: 0590         	lsls	r0, r2, #0x16
    8bb0: d511         	bpl	0x8bd6 <_puts_r+0x96>   @ imm = #0x22
    8bb2: 0491         	lsls	r1, r2, #0x12
    8bb4: d5e2         	bpl	0x8b7c <_puts_r+0x3c>   @ imm = #-0x3c
    8bb6: 049b         	lsls	r3, r3, #0x12
    8bb8: d5e6         	bpl	0x8b88 <_puts_r+0x48>   @ imm = #-0x34
    8bba: f04f 35ff    	mov.w	r5, #0xffffffff
    8bbe: e7f0         	b	0x8ba2 <_puts_r+0x62>   @ imm = #-0x20
    8bc0: 049b         	lsls	r3, r3, #0x12
    8bc2: d5e1         	bpl	0x8b88 <_puts_r+0x48>   @ imm = #-0x3e
    8bc4: f04f 35ff    	mov.w	r5, #0xffffffff
    8bc8: e7ee         	b	0x8ba8 <_puts_r+0x68>   @ imm = #-0x24
    8bca: 6da0         	ldr	r0, [r4, #0x58]
    8bcc: f000 f9ac    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #0x358
    8bd0: 4628         	mov	r0, r5
    8bd2: b009         	add	sp, #0x24
    8bd4: bd30         	pop	{r4, r5, pc}
    8bd6: 6da0         	ldr	r0, [r4, #0x58]
    8bd8: f000 f9a4    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #0x348
    8bdc: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
    8be0: 6e63         	ldr	r3, [r4, #0x64]
    8be2: 0490         	lsls	r0, r2, #0x12
    8be4: d5ca         	bpl	0x8b7c <_puts_r+0x3c>   @ imm = #-0x6c
    8be6: 0499         	lsls	r1, r3, #0x12
    8be8: d5ce         	bpl	0x8b88 <_puts_r+0x48>   @ imm = #-0x64
    8bea: f04f 35ff    	mov.w	r5, #0xffffffff
    8bee: e7d6         	b	0x8b9e <_puts_r+0x5e>   @ imm = #-0x54
    8bf0: 4628         	mov	r0, r5
    8bf2: f000 f8af    	bl	0x8d54 <__sinit>        @ imm = #0x15e
    8bf6: e7ba         	b	0x8b6e <_puts_r+0x2e>   @ imm = #-0x8c
    8bf8: 2c 1d 21 80  	.word	0x80211d2c

00008bfc <puts>:
; puts():
    8bfc: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8c08 <puts+0xc>
    8bfe: 4601         	mov	r1, r0
    8c00: 6818         	ldr	r0, [r3]
    8c02: f7ff bf9d    	b.w	0x8b40 <_puts_r>        @ imm = #-0xc6
    8c06: bf00         	nop
    8c08: c4 05 00 20  	.word	0x200005c4

00008c0c <stdio_exit_handler>:
; stdio_exit_handler():
    8c0c: 4a02         	ldr	r2, [pc, #0x8]          @ 0x8c18 <stdio_exit_handler+0xc>
    8c0e: 4903         	ldr	r1, [pc, #0xc]          @ 0x8c1c <stdio_exit_handler+0x10>
    8c10: 4803         	ldr	r0, [pc, #0xc]          @ 0x8c20 <stdio_exit_handler+0x14>
    8c12: f002 bfaf    	b.w	0xbb74 <_fwalk_sglue>   @ imm = #0x2f5e
    8c16: bf00         	nop
    8c18: b8 05 00 20  	.word	0x200005b8
    8c1c: c5 bf 00 00  	.word	0x0000bfc5
    8c20: c8 05 00 20  	.word	0x200005c8

00008c24 <cleanup_stdio>:
; cleanup_stdio():
    8c24: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x8c58 <cleanup_stdio+0x34>
    8c26: 6841         	ldr	r1, [r0, #0x4]
    8c28: 4299         	cmp	r1, r3
    8c2a: b510         	push	{r4, lr}
    8c2c: 4604         	mov	r4, r0
    8c2e: d001         	beq	0x8c34 <cleanup_stdio+0x10> @ imm = #0x2
    8c30: f003 f9c8    	bl	0xbfc4 <_fclose_r>      @ imm = #0x3390
    8c34: 68a1         	ldr	r1, [r4, #0x8]
    8c36: 4b09         	ldr	r3, [pc, #0x24]         @ 0x8c5c <cleanup_stdio+0x38>
    8c38: 4299         	cmp	r1, r3
    8c3a: d002         	beq	0x8c42 <cleanup_stdio+0x1e> @ imm = #0x4
    8c3c: 4620         	mov	r0, r4
    8c3e: f003 f9c1    	bl	0xbfc4 <_fclose_r>      @ imm = #0x3382
    8c42: 68e1         	ldr	r1, [r4, #0xc]
    8c44: 4b06         	ldr	r3, [pc, #0x18]         @ 0x8c60 <cleanup_stdio+0x3c>
    8c46: 4299         	cmp	r1, r3
    8c48: d004         	beq	0x8c54 <cleanup_stdio+0x30> @ imm = #0x8
    8c4a: 4620         	mov	r0, r4
    8c4c: e8bd 4010    	pop.w	{r4, lr}
    8c50: f003 b9b8    	b.w	0xbfc4 <_fclose_r>      @ imm = #0x3370
    8c54: bd10         	pop	{r4, pc}
    8c56: bf00         	nop
    8c58: c4 16 00 20  	.word	0x200016c4
    8c5c: 2c 17 00 20  	.word	0x2000172c
    8c60: 94 17 00 20  	.word	0x20001794

00008c64 <global_stdio_init.part.0>:
; global_stdio_init.part.0():
    8c64: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
    8c68: 4a31         	ldr	r2, [pc, #0xc4]         @ 0x8d30 <global_stdio_init.part.0+0xcc>
    8c6a: 2500         	movs	r5, #0x0
    8c6c: 4c31         	ldr	r4, [pc, #0xc4]         @ 0x8d34 <global_stdio_init.part.0+0xd0>
    8c6e: 2304         	movs	r3, #0x4
    8c70: 4931         	ldr	r1, [pc, #0xc4]         @ 0x8d38 <global_stdio_init.part.0+0xd4>
    8c72: f8df 90d8    	ldr.w	r9, [pc, #0xd8]         @ 0x8d4c <global_stdio_init.part.0+0xe8>
    8c76: f104 005c    	add.w	r0, r4, #0x5c
    8c7a: f8df 80d4    	ldr.w	r8, [pc, #0xd4]         @ 0x8d50 <global_stdio_init.part.0+0xec>
    8c7e: 4f2f         	ldr	r7, [pc, #0xbc]         @ 0x8d3c <global_stdio_init.part.0+0xd8>
    8c80: 4e2f         	ldr	r6, [pc, #0xbc]         @ 0x8d40 <global_stdio_init.part.0+0xdc>
    8c82: 6011         	str	r1, [r2]
    8c84: 4629         	mov	r1, r5
    8c86: 2208         	movs	r2, #0x8
    8c88: 6025         	str	r5, [r4]
    8c8a: 6665         	str	r5, [r4, #0x64]
    8c8c: e9c4 3503    	strd	r3, r5, [r4, #12]
    8c90: e9c4 5501    	strd	r5, r5, [r4, #4]
    8c94: e9c4 5505    	strd	r5, r5, [r4, #20]
    8c98: f000 f886    	bl	0x8da8 <memset>         @ imm = #0x10c
    8c9c: f104 0058    	add.w	r0, r4, #0x58
    8ca0: 62e6         	str	r6, [r4, #0x2c]
    8ca2: e9c4 4907    	strd	r4, r9, [r4, #28]
    8ca6: e9c4 8709    	strd	r8, r7, [r4, #36]
    8caa: f000 f937    	bl	0x8f1c <__retarget_lock_init_recursive> @ imm = #0x26e
    8cae: 4b25         	ldr	r3, [pc, #0x94]         @ 0x8d44 <global_stdio_init.part.0+0xe0>
    8cb0: 4629         	mov	r1, r5
    8cb2: 2208         	movs	r2, #0x8
    8cb4: f104 00c4    	add.w	r0, r4, #0xc4
    8cb8: 6763         	str	r3, [r4, #0x74]
    8cba: 6725         	str	r5, [r4, #0x70]
    8cbc: f8c4 50cc    	str.w	r5, [r4, #0xcc]
    8cc0: f8c4 5080    	str.w	r5, [r4, #0x80]
    8cc4: e9c4 551a    	strd	r5, r5, [r4, #104]
    8cc8: e9c4 551e    	strd	r5, r5, [r4, #120]
    8ccc: f000 f86c    	bl	0x8da8 <memset>         @ imm = #0xd8
    8cd0: f104 0368    	add.w	r3, r4, #0x68
    8cd4: f104 00c0    	add.w	r0, r4, #0xc0
    8cd8: f8c4 3084    	str.w	r3, [r4, #0x84]
    8cdc: e9c4 9822    	strd	r9, r8, [r4, #136]
    8ce0: e9c4 7624    	strd	r7, r6, [r4, #144]
    8ce4: f000 f91a    	bl	0x8f1c <__retarget_lock_init_recursive> @ imm = #0x234
    8ce8: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x8d48 <global_stdio_init.part.0+0xe4>
    8cea: 4629         	mov	r1, r5
    8cec: f504 7096    	add.w	r0, r4, #0x12c
    8cf0: 2208         	movs	r2, #0x8
    8cf2: f8c4 30dc    	str.w	r3, [r4, #0xdc]
    8cf6: f8c4 50d8    	str.w	r5, [r4, #0xd8]
    8cfa: f8c4 5134    	str.w	r5, [r4, #0x134]
    8cfe: f8c4 50e8    	str.w	r5, [r4, #0xe8]
    8d02: e9c4 5534    	strd	r5, r5, [r4, #208]
    8d06: e9c4 5538    	strd	r5, r5, [r4, #224]
    8d0a: f000 f84d    	bl	0x8da8 <memset>         @ imm = #0x9a
    8d0e: f104 03d0    	add.w	r3, r4, #0xd0
    8d12: f504 7094    	add.w	r0, r4, #0x128
    8d16: f8c4 90f0    	str.w	r9, [r4, #0xf0]
    8d1a: f8c4 60fc    	str.w	r6, [r4, #0xfc]
    8d1e: f8c4 30ec    	str.w	r3, [r4, #0xec]
    8d22: e9c4 873d    	strd	r8, r7, [r4, #244]
    8d26: e8bd 43f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, lr}
    8d2a: f000 b8f7    	b.w	0x8f1c <__retarget_lock_init_recursive> @ imm = #0x1ee
    8d2e: bf00         	nop
    8d30: fc 17 00 20  	.word	0x200017fc
    8d34: c4 16 00 20  	.word	0x200016c4
    8d38: 0d 8c 00 00  	.word	0x00008c0d
    8d3c: 71 c2 00 00  	.word	0x0000c271
    8d40: 99 c2 00 00  	.word	0x0000c299
    8d44: 09 00 01 00  	.word	0x00010009
    8d48: 12 00 02 00  	.word	0x00020012
    8d4c: 0d c2 00 00  	.word	0x0000c20d
    8d50: 31 c2 00 00  	.word	0x0000c231

00008d54 <__sinit>:
; __sinit():
    8d54: b510         	push	{r4, lr}
    8d56: 4604         	mov	r4, r0
    8d58: 480a         	ldr	r0, [pc, #0x28]         @ 0x8d84 <__sinit+0x30>
    8d5a: f000 f8e3    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #0x1c6
    8d5e: 6b63         	ldr	r3, [r4, #0x34]
    8d60: b923         	cbnz	r3, 0x8d6c <__sinit+0x18> @ imm = #0x8
    8d62: 4b09         	ldr	r3, [pc, #0x24]         @ 0x8d88 <__sinit+0x34>
    8d64: 4a09         	ldr	r2, [pc, #0x24]         @ 0x8d8c <__sinit+0x38>
    8d66: 681b         	ldr	r3, [r3]
    8d68: 6362         	str	r2, [r4, #0x34]
    8d6a: b123         	cbz	r3, 0x8d76 <__sinit+0x22> @ imm = #0x8
    8d6c: 4805         	ldr	r0, [pc, #0x14]         @ 0x8d84 <__sinit+0x30>
    8d6e: e8bd 4010    	pop.w	{r4, lr}
    8d72: f000 b8d9    	b.w	0x8f28 <__retarget_lock_release_recursive> @ imm = #0x1b2
    8d76: f7ff ff75    	bl	0x8c64 <global_stdio_init.part.0> @ imm = #-0x116
    8d7a: 4802         	ldr	r0, [pc, #0x8]          @ 0x8d84 <__sinit+0x30>
    8d7c: e8bd 4010    	pop.w	{r4, lr}
    8d80: f000 b8d2    	b.w	0x8f28 <__retarget_lock_release_recursive> @ imm = #0x1a4
    8d84: 08 18 00 20  	.word	0x20001808
    8d88: fc 17 00 20  	.word	0x200017fc
    8d8c: 25 8c 00 00  	.word	0x00008c25

00008d90 <__sfp_lock_acquire>:
; __sfp_lock_acquire():
    8d90: 4801         	ldr	r0, [pc, #0x4]          @ 0x8d98 <__sfp_lock_acquire+0x8>
    8d92: f000 b8c7    	b.w	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #0x18e
    8d96: bf00         	nop
    8d98: 08 18 00 20  	.word	0x20001808

00008d9c <__sfp_lock_release>:
; __sfp_lock_release():
    8d9c: 4801         	ldr	r0, [pc, #0x4]          @ 0x8da4 <__sfp_lock_release+0x8>
    8d9e: f000 b8c3    	b.w	0x8f28 <__retarget_lock_release_recursive> @ imm = #0x186
    8da2: bf00         	nop
    8da4: 08 18 00 20  	.word	0x20001808

00008da8 <memset>:
; memset():
    8da8: 0783         	lsls	r3, r0, #0x1e
    8daa: b530         	push	{r4, r5, lr}
    8dac: d046         	beq	0x8e3c <memset+0x94>    @ imm = #0x8c
    8dae: 1884         	adds	r4, r0, r2
    8db0: 4684         	mov	r12, r0
    8db2: e004         	b	0x8dbe <memset+0x16>    @ imm = #0x8
    8db4: f803 1b01    	strb	r1, [r3], #1
    8db8: 079d         	lsls	r5, r3, #0x1e
    8dba: d004         	beq	0x8dc6 <memset+0x1e>    @ imm = #0x8
    8dbc: 469c         	mov	r12, r3
    8dbe: 45a4         	cmp	r12, r4
    8dc0: 4663         	mov	r3, r12
    8dc2: d1f7         	bne	0x8db4 <memset+0xc>     @ imm = #-0x12
    8dc4: bd30         	pop	{r4, r5, pc}
    8dc6: 3a01         	subs	r2, #0x1
    8dc8: 4402         	add	r2, r0
    8dca: eba2 020c    	sub.w	r2, r2, r12
    8dce: 2a03         	cmp	r2, #0x3
    8dd0: d929         	bls	0x8e26 <memset+0x7e>    @ imm = #0x52
    8dd2: b2cc         	uxtb	r4, r1
    8dd4: 2a0f         	cmp	r2, #0xf
    8dd6: eb04 2404    	add.w	r4, r4, r4, lsl #8
    8dda: eb04 4404    	add.w	r4, r4, r4, lsl #16
    8dde: d92f         	bls	0x8e40 <memset+0x98>    @ imm = #0x5e
    8de0: f1a2 0c10    	sub.w	r12, r2, #0x10
    8de4: f103 0510    	add.w	r5, r3, #0x10
    8de8: f02c 0c0f    	bic	r12, r12, #0xf
    8dec: 44ac         	add	r12, r5
    8dee: e9c3 4400    	strd	r4, r4, [r3]
    8df2: e9c3 4402    	strd	r4, r4, [r3, #8]
    8df6: 3310         	adds	r3, #0x10
    8df8: 4563         	cmp	r3, r12
    8dfa: d1f8         	bne	0x8dee <memset+0x46>    @ imm = #-0x10
    8dfc: f012 0f0c    	tst.w	r2, #0xc
    8e00: f002 0e0f    	and	lr, r2, #0xf
    8e04: d018         	beq	0x8e38 <memset+0x90>    @ imm = #0x30
    8e06: f02e 0c03    	bic	r12, lr, #0x3
    8e0a: f1ae 0504    	sub.w	r5, lr, #0x4
    8e0e: 461a         	mov	r2, r3
    8e10: 449c         	add	r12, r3
    8e12: f842 4b04    	str	r4, [r2], #4
    8e16: 4562         	cmp	r2, r12
    8e18: d1fb         	bne	0x8e12 <memset+0x6a>    @ imm = #-0xa
    8e1a: f025 0403    	bic	r4, r5, #0x3
    8e1e: 3304         	adds	r3, #0x4
    8e20: f00e 0203    	and	r2, lr, #0x3
    8e24: 4423         	add	r3, r4
    8e26: 2a00         	cmp	r2, #0x0
    8e28: d0cc         	beq	0x8dc4 <memset+0x1c>    @ imm = #-0x68
    8e2a: b2c9         	uxtb	r1, r1
    8e2c: 441a         	add	r2, r3
    8e2e: f803 1b01    	strb	r1, [r3], #1
    8e32: 4293         	cmp	r3, r2
    8e34: d1fb         	bne	0x8e2e <memset+0x86>    @ imm = #-0xa
    8e36: bd30         	pop	{r4, r5, pc}
    8e38: 4672         	mov	r2, lr
    8e3a: e7f4         	b	0x8e26 <memset+0x7e>    @ imm = #-0x18
    8e3c: 4603         	mov	r3, r0
    8e3e: e7c6         	b	0x8dce <memset+0x26>    @ imm = #-0x74
    8e40: 4696         	mov	lr, r2
    8e42: e7e0         	b	0x8e06 <memset+0x5e>    @ imm = #-0x40

00008e44 <raise>:
; raise():
    8e44: b538         	push	{r3, r4, r5, lr}
    8e46: 281f         	cmp	r0, #0x1f
    8e48: 4b13         	ldr	r3, [pc, #0x4c]         @ 0x8e98 <raise+0x54>
    8e4a: 681d         	ldr	r5, [r3]
    8e4c: d81e         	bhi	0x8e8c <raise+0x48>     @ imm = #0x3c
    8e4e: f8d5 2138    	ldr.w	r2, [r5, #0x138]
    8e52: 4604         	mov	r4, r0
    8e54: b162         	cbz	r2, 0x8e70 <raise+0x2c> @ imm = #0x18
    8e56: f852 3020    	ldr.w	r3, [r2, r0, lsl #2]
    8e5a: b14b         	cbz	r3, 0x8e70 <raise+0x2c> @ imm = #0x12
    8e5c: 2b01         	cmp	r3, #0x1
    8e5e: d005         	beq	0x8e6c <raise+0x28>     @ imm = #0xa
    8e60: 1c59         	adds	r1, r3, #0x1
    8e62: d00f         	beq	0x8e84 <raise+0x40>     @ imm = #0x1e
    8e64: 2100         	movs	r1, #0x0
    8e66: f842 1020    	str.w	r1, [r2, r0, lsl #2]
    8e6a: 4798         	blx	r3
    8e6c: 2000         	movs	r0, #0x0
    8e6e: bd38         	pop	{r3, r4, r5, pc}
    8e70: 4628         	mov	r0, r5
    8e72: f000 f829    	bl	0x8ec8 <_getpid_r>      @ imm = #0x52
    8e76: 4622         	mov	r2, r4
    8e78: 4601         	mov	r1, r0
    8e7a: 4628         	mov	r0, r5
    8e7c: e8bd 4038    	pop.w	{r3, r4, r5, lr}
    8e80: f000 b80c    	b.w	0x8e9c <_kill_r>        @ imm = #0x18
    8e84: 2316         	movs	r3, #0x16
    8e86: 2001         	movs	r0, #0x1
    8e88: 602b         	str	r3, [r5]
    8e8a: bd38         	pop	{r3, r4, r5, pc}
    8e8c: 2316         	movs	r3, #0x16
    8e8e: f04f 30ff    	mov.w	r0, #0xffffffff
    8e92: 602b         	str	r3, [r5]
    8e94: bd38         	pop	{r3, r4, r5, pc}
    8e96: bf00         	nop
    8e98: c4 05 00 20  	.word	0x200005c4

00008e9c <_kill_r>:
; _kill_r():
    8e9c: b570         	push	{r4, r5, r6, lr}
    8e9e: 460c         	mov	r4, r1
    8ea0: 4603         	mov	r3, r0
    8ea2: 4d08         	ldr	r5, [pc, #0x20]         @ 0x8ec4 <_kill_r+0x28>
    8ea4: 2600         	movs	r6, #0x0
    8ea6: 4620         	mov	r0, r4
    8ea8: 4611         	mov	r1, r2
    8eaa: 461c         	mov	r4, r3
    8eac: 602e         	str	r6, [r5]
    8eae: f006 fc79    	bl	0xf7a4 <_kill>          @ imm = #0x68f2
    8eb2: 1c43         	adds	r3, r0, #0x1
    8eb4: d000         	beq	0x8eb8 <_kill_r+0x1c>   @ imm = #0x0
    8eb6: bd70         	pop	{r4, r5, r6, pc}
    8eb8: 682b         	ldr	r3, [r5]
    8eba: 2b00         	cmp	r3, #0x0
    8ebc: d0fb         	beq	0x8eb6 <_kill_r+0x1a>   @ imm = #-0xa
    8ebe: 6023         	str	r3, [r4]
    8ec0: bd70         	pop	{r4, r5, r6, pc}
    8ec2: bf00         	nop
    8ec4: 44 18 00 20  	.word	0x20001844

00008ec8 <_getpid_r>:
; _getpid_r():
    8ec8: f006 bc5c    	b.w	0xf784 <_getpid>        @ imm = #0x68b8

00008ecc <__libc_init_array>:
; __libc_init_array():
    8ecc: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x8f0c <__libc_init_array+0x40>
    8ece: b570         	push	{r4, r5, r6, lr}
    8ed0: 4d0f         	ldr	r5, [pc, #0x3c]         @ 0x8f10 <__libc_init_array+0x44>
    8ed2: 42ab         	cmp	r3, r5
    8ed4: eba3 0605    	sub.w	r6, r3, r5
    8ed8: d007         	beq	0x8eea <__libc_init_array+0x1e> @ imm = #0xe
    8eda: 10b6         	asrs	r6, r6, #0x2
    8edc: 2400         	movs	r4, #0x0
    8ede: 3401         	adds	r4, #0x1
    8ee0: f855 3b04    	ldr	r3, [r5], #4
    8ee4: 4798         	blx	r3
    8ee6: 42a6         	cmp	r6, r4
    8ee8: d8f9         	bhi	0x8ede <__libc_init_array+0x12> @ imm = #-0xe
    8eea: 4d0a         	ldr	r5, [pc, #0x28]         @ 0x8f14 <__libc_init_array+0x48>
    8eec: f006 fc90    	bl	0xf810 <___init_veneer> @ imm = #0x6920
    8ef0: 4b09         	ldr	r3, [pc, #0x24]         @ 0x8f18 <__libc_init_array+0x4c>
    8ef2: 1b5e         	subs	r6, r3, r5
    8ef4: 42ab         	cmp	r3, r5
    8ef6: ea4f 06a6    	asr.w	r6, r6, #0x2
    8efa: d006         	beq	0x8f0a <__libc_init_array+0x3e> @ imm = #0xc
    8efc: 2400         	movs	r4, #0x0
    8efe: 3401         	adds	r4, #0x1
    8f00: f855 3b04    	ldr	r3, [r5], #4
    8f04: 4798         	blx	r3
    8f06: 42a6         	cmp	r6, r4
    8f08: d8f9         	bhi	0x8efe <__libc_init_array+0x32> @ imm = #-0xe
    8f0a: bd70         	pop	{r4, r5, r6, pc}
    8f0c: fc 17 21 80  	.word	0x802117fc
    8f10: f8 17 21 80  	.word	0x802117f8
    8f14: fc 17 21 80  	.word	0x802117fc
    8f18: 08 18 21 80  	.word	0x80211808

00008f1c <__retarget_lock_init_recursive>:
; __retarget_lock_init_recursive():
    8f1c: 4770         	bx	lr
    8f1e: bf00         	nop

00008f20 <__retarget_lock_close_recursive>:
; __retarget_lock_close_recursive():
    8f20: 4770         	bx	lr
    8f22: bf00         	nop

00008f24 <__retarget_lock_acquire_recursive>:
; __retarget_lock_acquire_recursive():
    8f24: 4770         	bx	lr
    8f26: bf00         	nop

00008f28 <__retarget_lock_release_recursive>:
; __retarget_lock_release_recursive():
    8f28: 4770         	bx	lr
    8f2a: bf00         	nop

00008f2c <memcpy>:
; memcpy():
    8f2c: 4684         	mov	r12, r0
    8f2e: ea41 0300    	orr.w	r3, r1, r0
    8f32: f013 0303    	ands	r3, r3, #0x3
    8f36: d149         	bne	0x8fcc <memcpy+0xa0>    @ imm = #0x92
    8f38: 3a40         	subs	r2, #0x40
    8f3a: d323         	blo	0x8f84 <memcpy+0x58>    @ imm = #0x46
    8f3c: 680b         	ldr	r3, [r1]
    8f3e: 6003         	str	r3, [r0]
    8f40: 684b         	ldr	r3, [r1, #0x4]
    8f42: 6043         	str	r3, [r0, #0x4]
    8f44: 688b         	ldr	r3, [r1, #0x8]
    8f46: 6083         	str	r3, [r0, #0x8]
    8f48: 68cb         	ldr	r3, [r1, #0xc]
    8f4a: 60c3         	str	r3, [r0, #0xc]
    8f4c: 690b         	ldr	r3, [r1, #0x10]
    8f4e: 6103         	str	r3, [r0, #0x10]
    8f50: 694b         	ldr	r3, [r1, #0x14]
    8f52: 6143         	str	r3, [r0, #0x14]
    8f54: 698b         	ldr	r3, [r1, #0x18]
    8f56: 6183         	str	r3, [r0, #0x18]
    8f58: 69cb         	ldr	r3, [r1, #0x1c]
    8f5a: 61c3         	str	r3, [r0, #0x1c]
    8f5c: 6a0b         	ldr	r3, [r1, #0x20]
    8f5e: 6203         	str	r3, [r0, #0x20]
    8f60: 6a4b         	ldr	r3, [r1, #0x24]
    8f62: 6243         	str	r3, [r0, #0x24]
    8f64: 6a8b         	ldr	r3, [r1, #0x28]
    8f66: 6283         	str	r3, [r0, #0x28]
    8f68: 6acb         	ldr	r3, [r1, #0x2c]
    8f6a: 62c3         	str	r3, [r0, #0x2c]
    8f6c: 6b0b         	ldr	r3, [r1, #0x30]
    8f6e: 6303         	str	r3, [r0, #0x30]
    8f70: 6b4b         	ldr	r3, [r1, #0x34]
    8f72: 6343         	str	r3, [r0, #0x34]
    8f74: 6b8b         	ldr	r3, [r1, #0x38]
    8f76: 6383         	str	r3, [r0, #0x38]
    8f78: 6bcb         	ldr	r3, [r1, #0x3c]
    8f7a: 63c3         	str	r3, [r0, #0x3c]
    8f7c: 3040         	adds	r0, #0x40
    8f7e: 3140         	adds	r1, #0x40
    8f80: 3a40         	subs	r2, #0x40
    8f82: d2db         	bhs	0x8f3c <memcpy+0x10>    @ imm = #-0x4a
    8f84: 3230         	adds	r2, #0x30
    8f86: d30b         	blo	0x8fa0 <memcpy+0x74>    @ imm = #0x16
    8f88: 680b         	ldr	r3, [r1]
    8f8a: 6003         	str	r3, [r0]
    8f8c: 684b         	ldr	r3, [r1, #0x4]
    8f8e: 6043         	str	r3, [r0, #0x4]
    8f90: 688b         	ldr	r3, [r1, #0x8]
    8f92: 6083         	str	r3, [r0, #0x8]
    8f94: 68cb         	ldr	r3, [r1, #0xc]
    8f96: 60c3         	str	r3, [r0, #0xc]
    8f98: 3010         	adds	r0, #0x10
    8f9a: 3110         	adds	r1, #0x10
    8f9c: 3a10         	subs	r2, #0x10
    8f9e: d2f3         	bhs	0x8f88 <memcpy+0x5c>    @ imm = #-0x1a
    8fa0: 320c         	adds	r2, #0xc
    8fa2: d305         	blo	0x8fb0 <memcpy+0x84>    @ imm = #0xa
    8fa4: f851 3b04    	ldr	r3, [r1], #4
    8fa8: f840 3b04    	str	r3, [r0], #4
    8fac: 3a04         	subs	r2, #0x4
    8fae: d2f9         	bhs	0x8fa4 <memcpy+0x78>    @ imm = #-0xe
    8fb0: 3204         	adds	r2, #0x4
    8fb2: d008         	beq	0x8fc6 <memcpy+0x9a>    @ imm = #0x10
    8fb4: 07d2         	lsls	r2, r2, #0x1f
    8fb6: bf1c         	itt	ne
    8fb8: f811 3b01    	ldrbne	r3, [r1], #1
    8fbc: f800 3b01    	strbne	r3, [r0], #1
    8fc0: d301         	blo	0x8fc6 <memcpy+0x9a>    @ imm = #0x2
    8fc2: 880b         	ldrh	r3, [r1]
    8fc4: 8003         	strh	r3, [r0]
    8fc6: 4660         	mov	r0, r12
    8fc8: 4770         	bx	lr
    8fca: bf00         	nop
    8fcc: 2a08         	cmp	r2, #0x8
    8fce: d313         	blo	0x8ff8 <memcpy+0xcc>    @ imm = #0x26
    8fd0: 078b         	lsls	r3, r1, #0x1e
    8fd2: d0b1         	beq	0x8f38 <memcpy+0xc>     @ imm = #-0x9e
    8fd4: f010 0303    	ands	r3, r0, #0x3
    8fd8: d0ae         	beq	0x8f38 <memcpy+0xc>     @ imm = #-0xa4
    8fda: f1c3 0304    	rsb.w	r3, r3, #0x4
    8fde: 1ad2         	subs	r2, r2, r3
    8fe0: 07db         	lsls	r3, r3, #0x1f
    8fe2: bf1c         	itt	ne
    8fe4: f811 3b01    	ldrbne	r3, [r1], #1
    8fe8: f800 3b01    	strbne	r3, [r0], #1
    8fec: d3a4         	blo	0x8f38 <memcpy+0xc>     @ imm = #-0xb8
    8fee: f831 3b02    	ldrh	r3, [r1], #2
    8ff2: f820 3b02    	strh	r3, [r0], #2
    8ff6: e79f         	b	0x8f38 <memcpy+0xc>     @ imm = #-0xc2
    8ff8: 3a04         	subs	r2, #0x4
    8ffa: d3d9         	blo	0x8fb0 <memcpy+0x84>    @ imm = #-0x4e
    8ffc: 3a01         	subs	r2, #0x1
    8ffe: f811 3b01    	ldrb	r3, [r1], #1
    9002: f800 3b01    	strb	r3, [r0], #1
    9006: d2f9         	bhs	0x8ffc <memcpy+0xd0>    @ imm = #-0xe
    9008: 780b         	ldrb	r3, [r1]
    900a: 7003         	strb	r3, [r0]
    900c: 784b         	ldrb	r3, [r1, #0x1]
    900e: 7043         	strb	r3, [r0, #0x1]
    9010: 788b         	ldrb	r3, [r1, #0x2]
    9012: 7083         	strb	r3, [r0, #0x2]
    9014: 4660         	mov	r0, r12
    9016: 4770         	bx	lr

00009018 <strlen>:
; strlen():
    9018: f020 0103    	bic	r1, r0, #0x3
    901c: f010 0003    	ands	r0, r0, #0x3
    9020: f1c0 0000    	rsb.w	r0, r0, #0x0
    9024: f851 3b04    	ldr	r3, [r1], #4
    9028: f100 0c04    	add.w	r12, r0, #0x4
    902c: ea4f 0ccc    	lsl.w	r12, r12, #0x3
    9030: f06f 0200    	mvn	r2, #0x0
    9034: bf1c         	itt	ne
    9036: fa22 f20c    	lsrne.w	r2, r2, r12
    903a: 4313         	orrne	r3, r2
    903c: f04f 0c01    	mov.w	r12, #0x1
    9040: ea4c 2c0c    	orr.w	r12, r12, r12, lsl #8
    9044: ea4c 4c0c    	orr.w	r12, r12, r12, lsl #16
    9048: eba3 020c    	sub.w	r2, r3, r12
    904c: ea22 0203    	bic.w	r2, r2, r3
    9050: ea12 12cc    	ands.w	r2, r2, r12, lsl #7
    9054: bf04         	itt	eq
    9056: f851 3b04    	ldreq	r3, [r1], #4
    905a: 3004         	addeq	r0, #0x4
    905c: d0f4         	beq	0x9048 <strlen+0x30>    @ imm = #-0x18
    905e: f1c2 0100    	rsb.w	r1, r2, #0x0
    9062: ea02 0201    	and.w	r2, r2, r1
    9066: fab2 f282    	clz	r2, r2
    906a: f1c2 021f    	rsb.w	r2, r2, #0x1f
    906e: eb00 00d2    	add.w	r0, r0, r2, lsr #3
    9072: 4770         	bx	lr

00009074 <register_fini>:
; register_fini():
    9074: 4b02         	ldr	r3, [pc, #0x8]          @ 0x9080 <register_fini+0xc>
    9076: b113         	cbz	r3, 0x907e <register_fini+0xa> @ imm = #0x4
    9078: 4802         	ldr	r0, [pc, #0x8]          @ 0x9084 <register_fini+0x10>
    907a: f000 b863    	b.w	0x9144 <atexit>         @ imm = #0xc6
    907e: 4770         	bx	lr
    9080: 00 00 00 00  	.word	0x00000000
    9084: 7d c6 00 00  	.word	0x0000c67d

00009088 <__call_exitprocs>:
; __call_exitprocs():
    9088: 4b2c         	ldr	r3, [pc, #0xb0]         @ 0x913c <__call_exitprocs+0xb4>
    908a: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    908e: 4682         	mov	r10, r0
    9090: b083         	sub	sp, #0xc
    9092: 4f2b         	ldr	r7, [pc, #0xac]         @ 0x9140 <__call_exitprocs+0xb8>
    9094: 468b         	mov	r11, r1
    9096: 6818         	ldr	r0, [r3]
    9098: f8cd a004    	str.w	r10, [sp, #0x4]
    909c: f7ff ff42    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0x17c
    90a0: 683e         	ldr	r6, [r7]
    90a2: b1a6         	cbz	r6, 0x90ce <__call_exitprocs+0x46> @ imm = #0x28
    90a4: f04f 0900    	mov.w	r9, #0x0
    90a8: f04f 0801    	mov.w	r8, #0x1
    90ac: 6874         	ldr	r4, [r6, #0x4]
    90ae: 1e65         	subs	r5, r4, #0x1
    90b0: d40d         	bmi	0x90ce <__call_exitprocs+0x46> @ imm = #0x1a
    90b2: 3401         	adds	r4, #0x1
    90b4: eb06 0484    	add.w	r4, r6, r4, lsl #2
    90b8: f1bb 0f00    	cmp.w	r11, #0x0
    90bc: d00e         	beq	0x90dc <__call_exitprocs+0x54> @ imm = #0x1c
    90be: f8d4 3100    	ldr.w	r3, [r4, #0x100]
    90c2: 455b         	cmp	r3, r11
    90c4: d00a         	beq	0x90dc <__call_exitprocs+0x54> @ imm = #0x14
    90c6: 3d01         	subs	r5, #0x1
    90c8: 3c04         	subs	r4, #0x4
    90ca: 1c6a         	adds	r2, r5, #0x1
    90cc: d1f7         	bne	0x90be <__call_exitprocs+0x36> @ imm = #-0x12
    90ce: 4b1b         	ldr	r3, [pc, #0x6c]         @ 0x913c <__call_exitprocs+0xb4>
    90d0: 6818         	ldr	r0, [r3]
    90d2: b003         	add	sp, #0xc
    90d4: e8bd 4ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    90d8: f7ff bf26    	b.w	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x1b4
    90dc: 6873         	ldr	r3, [r6, #0x4]
    90de: 6822         	ldr	r2, [r4]
    90e0: 3b01         	subs	r3, #0x1
    90e2: 42ab         	cmp	r3, r5
    90e4: bf0c         	ite	eq
    90e6: 6075         	streq	r5, [r6, #0x4]
    90e8: f8c4 9000    	strne.w	r9, [r4]
    90ec: b172         	cbz	r2, 0x910c <__call_exitprocs+0x84> @ imm = #0x1c
    90ee: fa08 f305    	lsl.w	r3, r8, r5
    90f2: f8d6 1188    	ldr.w	r1, [r6, #0x188]
    90f6: f8d6 a004    	ldr.w	r10, [r6, #0x4]
    90fa: 420b         	tst	r3, r1
    90fc: d10b         	bne	0x9116 <__call_exitprocs+0x8e> @ imm = #0x16
    90fe: 4790         	blx	r2
    9100: 6873         	ldr	r3, [r6, #0x4]
    9102: 683a         	ldr	r2, [r7]
    9104: 4553         	cmp	r3, r10
    9106: d112         	bne	0x912e <__call_exitprocs+0xa6> @ imm = #0x24
    9108: 42b2         	cmp	r2, r6
    910a: d110         	bne	0x912e <__call_exitprocs+0xa6> @ imm = #0x20
    910c: 3d01         	subs	r5, #0x1
    910e: 3c04         	subs	r4, #0x4
    9110: 1c6b         	adds	r3, r5, #0x1
    9112: d1d1         	bne	0x90b8 <__call_exitprocs+0x30> @ imm = #-0x5e
    9114: e7db         	b	0x90ce <__call_exitprocs+0x46> @ imm = #-0x4a
    9116: f8d6 018c    	ldr.w	r0, [r6, #0x18c]
    911a: f8d4 1080    	ldr.w	r1, [r4, #0x80]
    911e: 4203         	tst	r3, r0
    9120: d109         	bne	0x9136 <__call_exitprocs+0xae> @ imm = #0x12
    9122: 9801         	ldr	r0, [sp, #0x4]
    9124: 4790         	blx	r2
    9126: 6873         	ldr	r3, [r6, #0x4]
    9128: 683a         	ldr	r2, [r7]
    912a: 4553         	cmp	r3, r10
    912c: d0ec         	beq	0x9108 <__call_exitprocs+0x80> @ imm = #-0x28
    912e: 2a00         	cmp	r2, #0x0
    9130: d0cd         	beq	0x90ce <__call_exitprocs+0x46> @ imm = #-0x66
    9132: 4616         	mov	r6, r2
    9134: e7ba         	b	0x90ac <__call_exitprocs+0x24> @ imm = #-0x8c
    9136: 4608         	mov	r0, r1
    9138: 4790         	blx	r2
    913a: e7e1         	b	0x9100 <__call_exitprocs+0x78> @ imm = #-0x3e
    913c: 08 07 00 20  	.word	0x20000708
    9140: 0c 18 00 20  	.word	0x2000180c

00009144 <atexit>:
; atexit():
    9144: 2300         	movs	r3, #0x0
    9146: 4601         	mov	r1, r0
    9148: 461a         	mov	r2, r3
    914a: 4618         	mov	r0, r3
    914c: f003 bb1c    	b.w	0xc788 <__register_exitproc> @ imm = #0x3638

00009150 <_malloc_r>:
; _malloc_r():
    9150: f101 030b    	add.w	r3, r1, #0xb
    9154: 2b16         	cmp	r3, #0x16
    9156: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    915a: 4607         	mov	r7, r0
    915c: b083         	sub	sp, #0xc
    915e: d823         	bhi	0x91a8 <_malloc_r+0x58> @ imm = #0x46
    9160: 2910         	cmp	r1, #0x10
    9162: f200 80af    	bhi.w	0x92c4 <_malloc_r+0x174> @ imm = #0x15e
    9166: f002 fcf9    	bl	0xbb5c <__malloc_lock>  @ imm = #0x29f2
    916a: 2510         	movs	r5, #0x10
    916c: 2318         	movs	r3, #0x18
    916e: 2002         	movs	r0, #0x2
    9170: 4eba         	ldr	r6, [pc, #0x2e8]        @ 0x945c <_malloc_r+0x30c>
    9172: 4433         	add	r3, r6
    9174: 685c         	ldr	r4, [r3, #0x4]
    9176: f1a3 0208    	sub.w	r2, r3, #0x8
    917a: 4294         	cmp	r4, r2
    917c: f000 8156    	beq.w	0x942c <_malloc_r+0x2dc> @ imm = #0x2ac
    9180: 6863         	ldr	r3, [r4, #0x4]
    9182: 4638         	mov	r0, r7
    9184: f023 0303    	bic	r3, r3, #0x3
    9188: e9d4 1202    	ldrd	r1, r2, [r4, #8]
    918c: 4423         	add	r3, r4
    918e: 60ca         	str	r2, [r1, #0xc]
    9190: 6091         	str	r1, [r2, #0x8]
    9192: 685a         	ldr	r2, [r3, #0x4]
    9194: 3408         	adds	r4, #0x8
    9196: f042 0201    	orr	r2, r2, #0x1
    919a: 605a         	str	r2, [r3, #0x4]
    919c: f002 fce4    	bl	0xbb68 <__malloc_unlock> @ imm = #0x29c8
    91a0: 4620         	mov	r0, r4
    91a2: b003         	add	sp, #0xc
    91a4: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    91a8: 2b00         	cmp	r3, #0x0
    91aa: f023 0507    	bic	r5, r3, #0x7
    91ae: f2c0 8089    	blt.w	0x92c4 <_malloc_r+0x174> @ imm = #0x112
    91b2: 42a9         	cmp	r1, r5
    91b4: f200 8086    	bhi.w	0x92c4 <_malloc_r+0x174> @ imm = #0x10c
    91b8: f002 fcd0    	bl	0xbb5c <__malloc_lock>  @ imm = #0x29a0
    91bc: f5b5 7ffc    	cmp.w	r5, #0x1f8
    91c0: f0c0 827b    	blo.w	0x96ba <_malloc_r+0x56a> @ imm = #0x4f6
    91c4: 0a6b         	lsrs	r3, r5, #0x9
    91c6: f000 8084    	beq.w	0x92d2 <_malloc_r+0x182> @ imm = #0x108
    91ca: 2b04         	cmp	r3, #0x4
    91cc: f200 8162    	bhi.w	0x9494 <_malloc_r+0x344> @ imm = #0x2c4
    91d0: 09ab         	lsrs	r3, r5, #0x6
    91d2: f103 0039    	add.w	r0, r3, #0x39
    91d6: f103 0e38    	add.w	lr, r3, #0x38
    91da: 00c3         	lsls	r3, r0, #0x3
    91dc: 4e9f         	ldr	r6, [pc, #0x27c]        @ 0x945c <_malloc_r+0x30c>
    91de: 4433         	add	r3, r6
    91e0: f1a3 0c08    	sub.w	r12, r3, #0x8
    91e4: 685c         	ldr	r4, [r3, #0x4]
    91e6: 45a4         	cmp	r12, r4
    91e8: d107         	bne	0x91fa <_malloc_r+0xaa> @ imm = #0xe
    91ea: e00d         	b	0x9208 <_malloc_r+0xb8> @ imm = #0x1a
    91ec: 2a00         	cmp	r2, #0x0
    91ee: 68e1         	ldr	r1, [r4, #0xc]
    91f0: f280 8116    	bge.w	0x9420 <_malloc_r+0x2d0> @ imm = #0x22c
    91f4: 458c         	cmp	r12, r1
    91f6: 460c         	mov	r4, r1
    91f8: d006         	beq	0x9208 <_malloc_r+0xb8> @ imm = #0xc
    91fa: 6863         	ldr	r3, [r4, #0x4]
    91fc: f023 0303    	bic	r3, r3, #0x3
    9200: 1b5a         	subs	r2, r3, r5
    9202: 2a0f         	cmp	r2, #0xf
    9204: ddf2         	ble	0x91ec <_malloc_r+0x9c> @ imm = #-0x1c
    9206: 4670         	mov	r0, lr
    9208: f8df 8268    	ldr.w	r8, [pc, #0x268]        @ 0x9474 <_malloc_r+0x324>
    920c: 6934         	ldr	r4, [r6, #0x10]
    920e: 4544         	cmp	r4, r8
    9210: f000 80f2    	beq.w	0x93f8 <_malloc_r+0x2a8> @ imm = #0x1e4
    9214: 6863         	ldr	r3, [r4, #0x4]
    9216: f023 0c03    	bic	r12, r3, #0x3
    921a: ebac 0305    	sub.w	r3, r12, r5
    921e: 2b0f         	cmp	r3, #0xf
    9220: f300 8174    	bgt.w	0x950c <_malloc_r+0x3bc> @ imm = #0x2e8
    9224: 2b00         	cmp	r3, #0x0
    9226: e9c6 8804    	strd	r8, r8, [r6, #16]
    922a: f280 8163    	bge.w	0x94f4 <_malloc_r+0x3a4> @ imm = #0x2c6
    922e: f5bc 7f00    	cmp.w	r12, #0x200
    9232: f8d6 e004    	ldr.w	lr, [r6, #0x4]
    9236: f080 80ff    	bhs.w	0x9438 <_malloc_r+0x2e8> @ imm = #0x1fe
    923a: ea4f 03dc    	lsr.w	r3, r12, #0x3
    923e: 2201         	movs	r2, #0x1
    9240: ea4f 1c5c    	lsr.w	r12, r12, #0x5
    9244: 3301         	adds	r3, #0x1
    9246: fa02 f20c    	lsl.w	r2, r2, r12
    924a: f856 1033    	ldr.w	r1, [r6, r3, lsl #3]
    924e: ea4e 0e02    	orr.w	lr, lr, r2
    9252: eb06 02c3    	add.w	r2, r6, r3, lsl #3
    9256: 3a08         	subs	r2, #0x8
    9258: f8c6 e004    	str.w	lr, [r6, #0x4]
    925c: e9c4 1202    	strd	r1, r2, [r4, #8]
    9260: f846 4033    	str.w	r4, [r6, r3, lsl #3]
    9264: 60cc         	str	r4, [r1, #0xc]
    9266: 1083         	asrs	r3, r0, #0x2
    9268: f04f 0c01    	mov.w	r12, #0x1
    926c: fa0c fc03    	lsl.w	r12, r12, r3
    9270: 45f4         	cmp	r12, lr
    9272: d834         	bhi	0x92de <_malloc_r+0x18e> @ imm = #0x68
    9274: ea1c 0f0e    	tst.w	r12, lr
    9278: d107         	bne	0x928a <_malloc_r+0x13a> @ imm = #0xe
    927a: f020 0003    	bic	r0, r0, #0x3
    927e: ea4f 0c4c    	lsl.w	r12, r12, #0x1
    9282: 3004         	adds	r0, #0x4
    9284: ea1c 0f0e    	tst.w	r12, lr
    9288: d0f9         	beq	0x927e <_malloc_r+0x12e> @ imm = #-0xe
    928a: eb06 0ac0    	add.w	r10, r6, r0, lsl #3
    928e: 4681         	mov	r9, r0
    9290: 46d6         	mov	lr, r10
    9292: f8de 300c    	ldr.w	r3, [lr, #0xc]
    9296: e00b         	b	0x92b0 <_malloc_r+0x160> @ imm = #0x16
    9298: 685a         	ldr	r2, [r3, #0x4]
    929a: 461c         	mov	r4, r3
    929c: 68db         	ldr	r3, [r3, #0xc]
    929e: f022 0203    	bic	r2, r2, #0x3
    92a2: 1b51         	subs	r1, r2, r5
    92a4: 290f         	cmp	r1, #0xf
    92a6: f300 8101    	bgt.w	0x94ac <_malloc_r+0x35c> @ imm = #0x202
    92aa: 2900         	cmp	r1, #0x0
    92ac: f280 8115    	bge.w	0x94da <_malloc_r+0x38a> @ imm = #0x22a
    92b0: 459e         	cmp	lr, r3
    92b2: d1f1         	bne	0x9298 <_malloc_r+0x148> @ imm = #-0x1e
    92b4: f109 0901    	add.w	r9, r9, #0x1
    92b8: f10e 0e08    	add.w	lr, lr, #0x8
    92bc: f019 0f03    	tst.w	r9, #0x3
    92c0: d1e7         	bne	0x9292 <_malloc_r+0x142> @ imm = #-0x32
    92c2: e158         	b	0x9576 <_malloc_r+0x426> @ imm = #0x2b0
    92c4: 230c         	movs	r3, #0xc
    92c6: 603b         	str	r3, [r7]
    92c8: 2400         	movs	r4, #0x0
    92ca: 4620         	mov	r0, r4
    92cc: b003         	add	sp, #0xc
    92ce: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    92d2: f44f 7300    	mov.w	r3, #0x200
    92d6: 2040         	movs	r0, #0x40
    92d8: f04f 0e3f    	mov.w	lr, #0x3f
    92dc: e77e         	b	0x91dc <_malloc_r+0x8c> @ imm = #-0x104
    92de: 68b4         	ldr	r4, [r6, #0x8]
    92e0: 6863         	ldr	r3, [r4, #0x4]
    92e2: f023 0903    	bic	r9, r3, #0x3
    92e6: 45a9         	cmp	r9, r5
    92e8: eba9 0305    	sub.w	r3, r9, r5
    92ec: d302         	blo	0x92f4 <_malloc_r+0x1a4> @ imm = #0x4
    92ee: 2b0f         	cmp	r3, #0xf
    92f0: f300 8085    	bgt.w	0x93fe <_malloc_r+0x2ae> @ imm = #0x10a
    92f4: 4b5a         	ldr	r3, [pc, #0x168]        @ 0x9460 <_malloc_r+0x310>
    92f6: 2008         	movs	r0, #0x8
    92f8: 681b         	ldr	r3, [r3]
    92fa: f103 0810    	add.w	r8, r3, #0x10
    92fe: eb04 0309    	add.w	r3, r4, r9
    9302: 9300         	str	r3, [sp]
    9304: f003 f9ac    	bl	0xc660 <sysconf>        @ imm = #0x3358
    9308: 4a56         	ldr	r2, [pc, #0x158]        @ 0x9464 <_malloc_r+0x314>
    930a: 44a8         	add	r8, r5
    930c: 4683         	mov	r11, r0
    930e: 6813         	ldr	r3, [r2]
    9310: 3301         	adds	r3, #0x1
    9312: d005         	beq	0x9320 <_malloc_r+0x1d0> @ imm = #0xa
    9314: f108 38ff    	add.w	r8, r8, #0xffffffff
    9318: 4243         	rsbs	r3, r0, #0
    931a: 4480         	add	r8, r0
    931c: ea03 0808    	and.w	r8, r3, r8
    9320: 4641         	mov	r1, r8
    9322: 4638         	mov	r0, r7
    9324: f003 f98a    	bl	0xc63c <_sbrk_r>        @ imm = #0x3314
    9328: f1b0 3fff    	cmp.w	r0, #0xffffffff
    932c: 4682         	mov	r10, r0
    932e: 4a4d         	ldr	r2, [pc, #0x134]        @ 0x9464 <_malloc_r+0x314>
    9330: f000 8107    	beq.w	0x9542 <_malloc_r+0x3f2> @ imm = #0x20e
    9334: eb04 0309    	add.w	r3, r4, r9
    9338: 4283         	cmp	r3, r0
    933a: f200 8100    	bhi.w	0x953e <_malloc_r+0x3ee> @ imm = #0x200
    933e: 4b4a         	ldr	r3, [pc, #0x128]        @ 0x9468 <_malloc_r+0x318>
    9340: f10b 3cff    	add.w	r12, r11, #0xffffffff
    9344: 6818         	ldr	r0, [r3]
    9346: 4440         	add	r0, r8
    9348: 6018         	str	r0, [r3]
    934a: f000 8164    	beq.w	0x9616 <_malloc_r+0x4c6> @ imm = #0x2c8
    934e: 6811         	ldr	r1, [r2]
    9350: 3101         	adds	r1, #0x1
    9352: f000 816c    	beq.w	0x962e <_malloc_r+0x4de> @ imm = #0x2d8
    9356: eb04 0209    	add.w	r2, r4, r9
    935a: ebaa 0202    	sub.w	r2, r10, r2
    935e: 4402         	add	r2, r0
    9360: 601a         	str	r2, [r3]
    9362: f01a 0207    	ands	r2, r10, #0x7
    9366: e9cd 2300    	strd	r2, r3, [sp]
    936a: f000 8127    	beq.w	0x95bc <_malloc_r+0x46c> @ imm = #0x24e
    936e: f1c2 0208    	rsb.w	r2, r2, #0x8
    9372: 4638         	mov	r0, r7
    9374: 4492         	add	r10, r2
    9376: 445a         	add	r2, r11
    9378: 44d0         	add	r8, r10
    937a: ea08 010c    	and.w	r1, r8, r12
    937e: 1a52         	subs	r2, r2, r1
    9380: ea02 0b0c    	and.w	r11, r2, r12
    9384: 4659         	mov	r1, r11
    9386: f003 f959    	bl	0xc63c <_sbrk_r>        @ imm = #0x32b2
    938a: 1c42         	adds	r2, r0, #0x1
    938c: 9b01         	ldr	r3, [sp, #0x4]
    938e: f000 816a    	beq.w	0x9666 <_malloc_r+0x516> @ imm = #0x2d4
    9392: eba0 000a    	sub.w	r0, r0, r10
    9396: eb00 080b    	add.w	r8, r0, r11
    939a: 6818         	ldr	r0, [r3]
    939c: f048 0201    	orr	r2, r8, #0x1
    93a0: 42b4         	cmp	r4, r6
    93a2: f8c6 a008    	str.w	r10, [r6, #0x8]
    93a6: 4458         	add	r0, r11
    93a8: f8ca 2004    	str.w	r2, [r10, #0x4]
    93ac: 6018         	str	r0, [r3]
    93ae: d017         	beq	0x93e0 <_malloc_r+0x290> @ imm = #0x2e
    93b0: f1b9 0f0f    	cmp.w	r9, #0xf
    93b4: f240 813e    	bls.w	0x9634 <_malloc_r+0x4e4> @ imm = #0x27c
    93b8: 6861         	ldr	r1, [r4, #0x4]
    93ba: f1a9 020c    	sub.w	r2, r9, #0xc
    93be: f04f 0c05    	mov.w	r12, #0x5
    93c2: f022 0207    	bic	r2, r2, #0x7
    93c6: f001 0101    	and	r1, r1, #0x1
    93ca: 4311         	orrs	r1, r2
    93cc: 2a0f         	cmp	r2, #0xf
    93ce: 6061         	str	r1, [r4, #0x4]
    93d0: eb04 0102    	add.w	r1, r4, r2
    93d4: e9c1 cc01    	strd	r12, r12, [r1, #4]
    93d8: f200 814d    	bhi.w	0x9676 <_malloc_r+0x526> @ imm = #0x29a
    93dc: f8da 2004    	ldr.w	r2, [r10, #0x4]
    93e0: 4b22         	ldr	r3, [pc, #0x88]         @ 0x946c <_malloc_r+0x31c>
    93e2: 4654         	mov	r4, r10
    93e4: 6819         	ldr	r1, [r3]
    93e6: 4281         	cmp	r1, r0
    93e8: bf38         	it	lo
    93ea: 6018         	strlo	r0, [r3]
    93ec: 4b20         	ldr	r3, [pc, #0x80]         @ 0x9470 <_malloc_r+0x320>
    93ee: 6819         	ldr	r1, [r3]
    93f0: 4281         	cmp	r1, r0
    93f2: bf38         	it	lo
    93f4: 6018         	strlo	r0, [r3]
    93f6: e0a6         	b	0x9546 <_malloc_r+0x3f6> @ imm = #0x14c
    93f8: f8d6 e004    	ldr.w	lr, [r6, #0x4]
    93fc: e733         	b	0x9266 <_malloc_r+0x116> @ imm = #-0x19a
    93fe: 1962         	adds	r2, r4, r5
    9400: f045 0501    	orr	r5, r5, #0x1
    9404: f043 0301    	orr	r3, r3, #0x1
    9408: 3408         	adds	r4, #0x8
    940a: f844 5c04    	str	r5, [r4, #-4]
    940e: 4638         	mov	r0, r7
    9410: 60b2         	str	r2, [r6, #0x8]
    9412: 6053         	str	r3, [r2, #0x4]
    9414: f002 fba8    	bl	0xbb68 <__malloc_unlock> @ imm = #0x2750
    9418: 4620         	mov	r0, r4
    941a: b003         	add	sp, #0xc
    941c: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    9420: 68a2         	ldr	r2, [r4, #0x8]
    9422: 4423         	add	r3, r4
    9424: 4638         	mov	r0, r7
    9426: 60d1         	str	r1, [r2, #0xc]
    9428: 608a         	str	r2, [r1, #0x8]
    942a: e6b2         	b	0x9192 <_malloc_r+0x42> @ imm = #-0x29c
    942c: 68dc         	ldr	r4, [r3, #0xc]
    942e: 42a3         	cmp	r3, r4
    9430: f47f aea6    	bne.w	0x9180 <_malloc_r+0x30> @ imm = #-0x2b4
    9434: 3002         	adds	r0, #0x2
    9436: e6e7         	b	0x9208 <_malloc_r+0xb8> @ imm = #-0x232
    9438: f5bc 6f20    	cmp.w	r12, #0xa00
    943c: ea4f 225c    	lsr.w	r2, r12, #0x9
    9440: d376         	blo	0x9530 <_malloc_r+0x3e0> @ imm = #0xec
    9442: 2a14         	cmp	r2, #0x14
    9444: f200 80cd    	bhi.w	0x95e2 <_malloc_r+0x492> @ imm = #0x19a
    9448: f102 035c    	add.w	r3, r2, #0x5c
    944c: 325b         	adds	r2, #0x5b
    944e: 00db         	lsls	r3, r3, #0x3
    9450: 18f1         	adds	r1, r6, r3
    9452: 58f3         	ldr	r3, [r6, r3]
    9454: 3908         	subs	r1, #0x8
    9456: 4299         	cmp	r1, r3
    9458: d111         	bne	0x947e <_malloc_r+0x32e> @ imm = #0x22
    945a: e0a5         	b	0x95a8 <_malloc_r+0x458> @ imm = #0x14a
    945c: 18 07 00 20  	.word	0x20000718
    9460: 40 18 00 20  	.word	0x20001840
    9464: 0c 07 00 20  	.word	0x2000070c
    9468: 10 18 00 20  	.word	0x20001810
    946c: 3c 18 00 20  	.word	0x2000183c
    9470: 38 18 00 20  	.word	0x20001838
    9474: 20 07 00 20  	.word	0x20000720
    9478: 689b         	ldr	r3, [r3, #0x8]
    947a: 4299         	cmp	r1, r3
    947c: d004         	beq	0x9488 <_malloc_r+0x338> @ imm = #0x8
    947e: 685a         	ldr	r2, [r3, #0x4]
    9480: f022 0203    	bic	r2, r2, #0x3
    9484: 4562         	cmp	r2, r12
    9486: d8f7         	bhi	0x9478 <_malloc_r+0x328> @ imm = #-0x12
    9488: 68d9         	ldr	r1, [r3, #0xc]
    948a: e9c4 3102    	strd	r3, r1, [r4, #8]
    948e: 608c         	str	r4, [r1, #0x8]
    9490: 60dc         	str	r4, [r3, #0xc]
    9492: e6e8         	b	0x9266 <_malloc_r+0x116> @ imm = #-0x230
    9494: 2b14         	cmp	r3, #0x14
    9496: d963         	bls	0x9560 <_malloc_r+0x410> @ imm = #0xc6
    9498: 2b54         	cmp	r3, #0x54
    949a: f200 80ab    	bhi.w	0x95f4 <_malloc_r+0x4a4> @ imm = #0x156
    949e: 0b2b         	lsrs	r3, r5, #0xc
    94a0: f103 006f    	add.w	r0, r3, #0x6f
    94a4: f103 0e6e    	add.w	lr, r3, #0x6e
    94a8: 00c3         	lsls	r3, r0, #0x3
    94aa: e697         	b	0x91dc <_malloc_r+0x8c> @ imm = #-0x2d2
    94ac: f8d4 c008    	ldr.w	r12, [r4, #0x8]
    94b0: 4638         	mov	r0, r7
    94b2: 1967         	adds	r7, r4, r5
    94b4: f045 0501    	orr	r5, r5, #0x1
    94b8: 6065         	str	r5, [r4, #0x4]
    94ba: f8cc 300c    	str.w	r3, [r12, #0xc]
    94be: f8c3 c008    	str.w	r12, [r3, #0x8]
    94c2: f041 0301    	orr	r3, r1, #0x1
    94c6: e9c6 7704    	strd	r7, r7, [r6, #16]
    94ca: e9c7 8802    	strd	r8, r8, [r7, #8]
    94ce: 607b         	str	r3, [r7, #0x4]
    94d0: 50a1         	str	r1, [r4, r2]
    94d2: 3408         	adds	r4, #0x8
    94d4: f002 fb48    	bl	0xbb68 <__malloc_unlock> @ imm = #0x2690
    94d8: e6f7         	b	0x92ca <_malloc_r+0x17a> @ imm = #-0x212
    94da: 4422         	add	r2, r4
    94dc: 4638         	mov	r0, r7
    94de: 6851         	ldr	r1, [r2, #0x4]
    94e0: f041 0101    	orr	r1, r1, #0x1
    94e4: 6051         	str	r1, [r2, #0x4]
    94e6: f854 2f08    	ldr	r2, [r4, #8]!
    94ea: 60d3         	str	r3, [r2, #0xc]
    94ec: 609a         	str	r2, [r3, #0x8]
    94ee: f002 fb3b    	bl	0xbb68 <__malloc_unlock> @ imm = #0x2676
    94f2: e6ea         	b	0x92ca <_malloc_r+0x17a> @ imm = #-0x22c
    94f4: 44a4         	add	r12, r4
    94f6: 4638         	mov	r0, r7
    94f8: 3408         	adds	r4, #0x8
    94fa: f8dc 3004    	ldr.w	r3, [r12, #0x4]
    94fe: f043 0301    	orr	r3, r3, #0x1
    9502: f8cc 3004    	str.w	r3, [r12, #0x4]
    9506: f002 fb2f    	bl	0xbb68 <__malloc_unlock> @ imm = #0x265e
    950a: e6de         	b	0x92ca <_malloc_r+0x17a> @ imm = #-0x244
    950c: 1962         	adds	r2, r4, r5
    950e: f043 0101    	orr	r1, r3, #0x1
    9512: f045 0501    	orr	r5, r5, #0x1
    9516: 4638         	mov	r0, r7
    9518: 6065         	str	r5, [r4, #0x4]
    951a: e9c6 2204    	strd	r2, r2, [r6, #16]
    951e: e9c2 8802    	strd	r8, r8, [r2, #8]
    9522: 6051         	str	r1, [r2, #0x4]
    9524: f844 300c    	str.w	r3, [r4, r12]
    9528: 3408         	adds	r4, #0x8
    952a: f002 fb1d    	bl	0xbb68 <__malloc_unlock> @ imm = #0x263a
    952e: e6cc         	b	0x92ca <_malloc_r+0x17a> @ imm = #-0x268
    9530: ea4f 129c    	lsr.w	r2, r12, #0x6
    9534: f102 0339    	add.w	r3, r2, #0x39
    9538: 3238         	adds	r2, #0x38
    953a: 00db         	lsls	r3, r3, #0x3
    953c: e788         	b	0x9450 <_malloc_r+0x300> @ imm = #-0xf0
    953e: 42b4         	cmp	r4, r6
    9540: d062         	beq	0x9608 <_malloc_r+0x4b8> @ imm = #0xc4
    9542: 68b4         	ldr	r4, [r6, #0x8]
    9544: 6862         	ldr	r2, [r4, #0x4]
    9546: f022 0803    	bic	r8, r2, #0x3
    954a: 45a8         	cmp	r8, r5
    954c: eba8 0305    	sub.w	r3, r8, r5
    9550: d302         	blo	0x9558 <_malloc_r+0x408> @ imm = #0x4
    9552: 2b0f         	cmp	r3, #0xf
    9554: f73f af53    	bgt.w	0x93fe <_malloc_r+0x2ae> @ imm = #-0x15a
    9558: 4638         	mov	r0, r7
    955a: f002 fb05    	bl	0xbb68 <__malloc_unlock> @ imm = #0x260a
    955e: e6b3         	b	0x92c8 <_malloc_r+0x178> @ imm = #-0x29a
    9560: f103 005c    	add.w	r0, r3, #0x5c
    9564: f103 0e5b    	add.w	lr, r3, #0x5b
    9568: 00c3         	lsls	r3, r0, #0x3
    956a: e637         	b	0x91dc <_malloc_r+0x8c> @ imm = #-0x392
    956c: f85a 3908    	ldr	r3, [r10], #-8
    9570: 4553         	cmp	r3, r10
    9572: f040 80a0    	bne.w	0x96b6 <_malloc_r+0x566> @ imm = #0x140
    9576: f010 0f03    	tst.w	r0, #0x3
    957a: f100 30ff    	add.w	r0, r0, #0xffffffff
    957e: d1f5         	bne	0x956c <_malloc_r+0x41c> @ imm = #-0x16
    9580: 6873         	ldr	r3, [r6, #0x4]
    9582: ea23 030c    	bic.w	r3, r3, r12
    9586: 6073         	str	r3, [r6, #0x4]
    9588: ea4f 0c4c    	lsl.w	r12, r12, #0x1
    958c: f10c 32ff    	add.w	r2, r12, #0xffffffff
    9590: 429a         	cmp	r2, r3
    9592: d304         	blo	0x959e <_malloc_r+0x44e> @ imm = #0x8
    9594: e6a3         	b	0x92de <_malloc_r+0x18e> @ imm = #-0x2ba
    9596: ea4f 0c4c    	lsl.w	r12, r12, #0x1
    959a: f109 0904    	add.w	r9, r9, #0x4
    959e: ea1c 0f03    	tst.w	r12, r3
    95a2: d0f8         	beq	0x9596 <_malloc_r+0x446> @ imm = #-0x10
    95a4: 4648         	mov	r0, r9
    95a6: e670         	b	0x928a <_malloc_r+0x13a> @ imm = #-0x320
    95a8: 1092         	asrs	r2, r2, #0x2
    95aa: f04f 0c01    	mov.w	r12, #0x1
    95ae: fa0c f202    	lsl.w	r2, r12, r2
    95b2: ea4e 0e02    	orr.w	lr, lr, r2
    95b6: f8c6 e004    	str.w	lr, [r6, #0x4]
    95ba: e766         	b	0x948a <_malloc_r+0x33a> @ imm = #-0x134
    95bc: eb0a 0208    	add.w	r2, r10, r8
    95c0: 4638         	mov	r0, r7
    95c2: ea02 020c    	and.w	r2, r2, r12
    95c6: ebab 0b02    	sub.w	r11, r11, r2
    95ca: ea0b 0b0c    	and.w	r11, r11, r12
    95ce: 4659         	mov	r1, r11
    95d0: f003 f834    	bl	0xc63c <_sbrk_r>        @ imm = #0x3068
    95d4: 1c43         	adds	r3, r0, #0x1
    95d6: 9b01         	ldr	r3, [sp, #0x4]
    95d8: f47f aedb    	bne.w	0x9392 <_malloc_r+0x242> @ imm = #-0x24a
    95dc: f8dd b000    	ldr.w	r11, [sp]
    95e0: e6db         	b	0x939a <_malloc_r+0x24a> @ imm = #-0x24a
    95e2: 2a54         	cmp	r2, #0x54
    95e4: d82a         	bhi	0x963c <_malloc_r+0x4ec> @ imm = #0x54
    95e6: ea4f 321c    	lsr.w	r2, r12, #0xc
    95ea: f102 036f    	add.w	r3, r2, #0x6f
    95ee: 326e         	adds	r2, #0x6e
    95f0: 00db         	lsls	r3, r3, #0x3
    95f2: e72d         	b	0x9450 <_malloc_r+0x300> @ imm = #-0x1a6
    95f4: f5b3 7faa    	cmp.w	r3, #0x154
    95f8: d82a         	bhi	0x9650 <_malloc_r+0x500> @ imm = #0x54
    95fa: 0beb         	lsrs	r3, r5, #0xf
    95fc: f103 0078    	add.w	r0, r3, #0x78
    9600: f103 0e77    	add.w	lr, r3, #0x77
    9604: 00c3         	lsls	r3, r0, #0x3
    9606: e5e9         	b	0x91dc <_malloc_r+0x8c> @ imm = #-0x42e
    9608: 4b2e         	ldr	r3, [pc, #0xb8]         @ 0x96c4 <_malloc_r+0x574>
    960a: f10b 3cff    	add.w	r12, r11, #0xffffffff
    960e: 6818         	ldr	r0, [r3]
    9610: 4440         	add	r0, r8
    9612: 6018         	str	r0, [r3]
    9614: e69b         	b	0x934e <_malloc_r+0x1fe> @ imm = #-0x2ca
    9616: ea1a 0f0c    	tst.w	r10, r12
    961a: f47f ae98    	bne.w	0x934e <_malloc_r+0x1fe> @ imm = #-0x2d0
    961e: 44c8         	add	r8, r9
    9620: f8d6 a008    	ldr.w	r10, [r6, #0x8]
    9624: f048 0201    	orr	r2, r8, #0x1
    9628: f8ca 2004    	str.w	r2, [r10, #0x4]
    962c: e6d8         	b	0x93e0 <_malloc_r+0x290> @ imm = #-0x250
    962e: f8c2 a000    	str.w	r10, [r2]
    9632: e696         	b	0x9362 <_malloc_r+0x212> @ imm = #-0x2d4
    9634: 2301         	movs	r3, #0x1
    9636: f8ca 3004    	str.w	r3, [r10, #0x4]
    963a: e78d         	b	0x9558 <_malloc_r+0x408> @ imm = #-0xe6
    963c: f5b2 7faa    	cmp.w	r2, #0x154
    9640: d824         	bhi	0x968c <_malloc_r+0x53c> @ imm = #0x48
    9642: ea4f 32dc    	lsr.w	r2, r12, #0xf
    9646: f102 0378    	add.w	r3, r2, #0x78
    964a: 3277         	adds	r2, #0x77
    964c: 00db         	lsls	r3, r3, #0x3
    964e: e6ff         	b	0x9450 <_malloc_r+0x300> @ imm = #-0x202
    9650: f240 5254    	movw	r2, #0x554
    9654: 4293         	cmp	r3, r2
    9656: d824         	bhi	0x96a2 <_malloc_r+0x552> @ imm = #0x48
    9658: 0cab         	lsrs	r3, r5, #0x12
    965a: f103 007d    	add.w	r0, r3, #0x7d
    965e: f103 0e7c    	add.w	lr, r3, #0x7c
    9662: 00c3         	lsls	r3, r0, #0x3
    9664: e5ba         	b	0x91dc <_malloc_r+0x8c> @ imm = #-0x48c
    9666: 9a00         	ldr	r2, [sp]
    9668: f04f 0b00    	mov.w	r11, #0x0
    966c: 3a08         	subs	r2, #0x8
    966e: 4490         	add	r8, r2
    9670: eba8 080a    	sub.w	r8, r8, r10
    9674: e691         	b	0x939a <_malloc_r+0x24a> @ imm = #-0x2de
    9676: 4638         	mov	r0, r7
    9678: f104 0108    	add.w	r1, r4, #0x8
    967c: 9300         	str	r3, [sp]
    967e: f004 f8cf    	bl	0xd820 <_free_r>        @ imm = #0x419e
    9682: 9b00         	ldr	r3, [sp]
    9684: f8d6 a008    	ldr.w	r10, [r6, #0x8]
    9688: 6818         	ldr	r0, [r3]
    968a: e6a7         	b	0x93dc <_malloc_r+0x28c> @ imm = #-0x2b2
    968c: f240 5354    	movw	r3, #0x554
    9690: 429a         	cmp	r2, r3
    9692: d80c         	bhi	0x96ae <_malloc_r+0x55e> @ imm = #0x18
    9694: ea4f 429c    	lsr.w	r2, r12, #0x12
    9698: f102 037d    	add.w	r3, r2, #0x7d
    969c: 327c         	adds	r2, #0x7c
    969e: 00db         	lsls	r3, r3, #0x3
    96a0: e6d6         	b	0x9450 <_malloc_r+0x300> @ imm = #-0x254
    96a2: f44f 737e    	mov.w	r3, #0x3f8
    96a6: 207f         	movs	r0, #0x7f
    96a8: f04f 0e7e    	mov.w	lr, #0x7e
    96ac: e596         	b	0x91dc <_malloc_r+0x8c> @ imm = #-0x4d4
    96ae: f44f 737e    	mov.w	r3, #0x3f8
    96b2: 227e         	movs	r2, #0x7e
    96b4: e6cc         	b	0x9450 <_malloc_r+0x300> @ imm = #-0x268
    96b6: 6873         	ldr	r3, [r6, #0x4]
    96b8: e766         	b	0x9588 <_malloc_r+0x438> @ imm = #-0x134
    96ba: 08e8         	lsrs	r0, r5, #0x3
    96bc: f105 0308    	add.w	r3, r5, #0x8
    96c0: e556         	b	0x9170 <_malloc_r+0x20> @ imm = #-0x554
    96c2: bf00         	nop
    96c4: 10 18 00 20  	.word	0x20001810

000096c8 <_vfprintf_r>:
; _vfprintf_r():
    96c8: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    96cc: ed2d 8b04    	vpush	{d8, d9}
    96d0: b0d1         	sub	sp, #0x144
    96d2: 461c         	mov	r4, r3
    96d4: 4683         	mov	r11, r0
    96d6: 9104         	str	r1, [sp, #0x10]
    96d8: f10d 0980    	add.w	r9, sp, #0x80
    96dc: 9207         	str	r2, [sp, #0x1c]
    96de: 930b         	str	r3, [sp, #0x2c]
    96e0: f002 ff6a    	bl	0xc5b8 <_localeconv_r>  @ imm = #0x2ed4
    96e4: 6803         	ldr	r3, [r0]
    96e6: 4618         	mov	r0, r3
    96e8: 9312         	str	r3, [sp, #0x48]
    96ea: f7ff fc95    	bl	0x9018 <strlen>         @ imm = #-0x6d6
    96ee: 2208         	movs	r2, #0x8
    96f0: 9011         	str	r0, [sp, #0x44]
    96f2: 2100         	movs	r1, #0x0
    96f4: 4648         	mov	r0, r9
    96f6: f7ff fb57    	bl	0x8da8 <memset>         @ imm = #-0x952
    96fa: f1bb 0f00    	cmp.w	r11, #0x0
    96fe: d004         	beq	0x970a <_vfprintf_r+0x42> @ imm = #0x8
    9700: f8db 3034    	ldr.w	r3, [r11, #0x34]
    9704: 2b00         	cmp	r3, #0x0
    9706: f001 8194    	beq.w	0xaa32 <_vfprintf_r+0x136a> @ imm = #0x1328
    970a: 9b04         	ldr	r3, [sp, #0x10]
    970c: 6e5a         	ldr	r2, [r3, #0x64]
    970e: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    9712: 07d0         	lsls	r0, r2, #0x1f
    9714: f140 8137    	bpl.w	0x9986 <_vfprintf_r+0x2be> @ imm = #0x26e
    9718: 0499         	lsls	r1, r3, #0x12
    971a: f100 8735    	bmi.w	0xa588 <_vfprintf_r+0xec0> @ imm = #0xe6a
    971e: f443 5300    	orr	r3, r3, #0x2000
    9722: 9904         	ldr	r1, [sp, #0x10]
    9724: f422 5200    	bic	r2, r2, #0x2000
    9728: 818b         	strh	r3, [r1, #0xc]
    972a: b21b         	sxth	r3, r3
    972c: 664a         	str	r2, [r1, #0x64]
    972e: 071e         	lsls	r6, r3, #0x1c
    9730: f140 80b2    	bpl.w	0x9898 <_vfprintf_r+0x1d0> @ imm = #0x164
    9734: 9a04         	ldr	r2, [sp, #0x10]
    9736: 6912         	ldr	r2, [r2, #0x10]
    9738: 2a00         	cmp	r2, #0x0
    973a: f000 80ad    	beq.w	0x9898 <_vfprintf_r+0x1d0> @ imm = #0x15a
    973e: f003 021a    	and	r2, r3, #0x1a
    9742: 2a0a         	cmp	r2, #0xa
    9744: f000 80b7    	beq.w	0x98b6 <_vfprintf_r+0x1ee> @ imm = #0x16e
    9748: aa27         	add	r2, sp, #0x9c
    974a: 2300         	movs	r3, #0x0
    974c: ed9f 8b98    	vldr	d8, [pc, #608]          @ 0x99b0 <_vfprintf_r+0x2e8>
    9750: 4617         	mov	r7, r2
    9752: 930f         	str	r3, [sp, #0x3c]
    9754: 9224         	str	r2, [sp, #0x90]
    9756: 9313         	str	r3, [sp, #0x4c]
    9758: 9316         	str	r3, [sp, #0x58]
    975a: 9308         	str	r3, [sp, #0x20]
    975c: e9cd 3325    	strd	r3, r3, [sp, #148]
    9760: e9cd 3314    	strd	r3, r3, [sp, #80]
    9764: 9d07         	ldr	r5, [sp, #0x1c]
    9766: 4b94         	ldr	r3, [pc, #0x250]        @ 0x99b8 <_vfprintf_r+0x2f0>
    9768: f8d3 40e4    	ldr.w	r4, [r3, #0xe4]
    976c: f002 ff1e    	bl	0xc5ac <__locale_mb_cur_max> @ imm = #0x2e3c
    9770: 462a         	mov	r2, r5
    9772: 4603         	mov	r3, r0
    9774: a91c         	add	r1, sp, #0x70
    9776: 4658         	mov	r0, r11
    9778: f8cd 9000    	str.w	r9, [sp]
    977c: 47a0         	blx	r4
    977e: 2800         	cmp	r0, #0x0
    9780: 4603         	mov	r3, r0
    9782: f000 80b9    	beq.w	0x98f8 <_vfprintf_r+0x230> @ imm = #0x172
    9786: f2c0 80af    	blt.w	0x98e8 <_vfprintf_r+0x220> @ imm = #0x15e
    978a: 9a1c         	ldr	r2, [sp, #0x70]
    978c: 2a25         	cmp	r2, #0x25
    978e: d001         	beq	0x9794 <_vfprintf_r+0xcc> @ imm = #0x2
    9790: 441d         	add	r5, r3
    9792: e7e8         	b	0x9766 <_vfprintf_r+0x9e> @ imm = #-0x30
    9794: 9b07         	ldr	r3, [sp, #0x1c]
    9796: 4604         	mov	r4, r0
    9798: 1aee         	subs	r6, r5, r3
    979a: f040 80b1    	bne.w	0x9900 <_vfprintf_r+0x238> @ imm = #0x162
    979e: 1c6a         	adds	r2, r5, #0x1
    97a0: 2300         	movs	r3, #0x0
    97a2: 786c         	ldrb	r4, [r5, #0x1]
    97a4: f04f 31ff    	mov.w	r1, #0xffffffff
    97a8: 4615         	mov	r5, r2
    97aa: f88d 3067    	strb.w	r3, [sp, #0x67]
    97ae: 9309         	str	r3, [sp, #0x24]
    97b0: 9106         	str	r1, [sp, #0x18]
    97b2: 9303         	str	r3, [sp, #0xc]
    97b4: 3501         	adds	r5, #0x1
    97b6: f1a4 0320    	sub.w	r3, r4, #0x20
    97ba: 2b5a         	cmp	r3, #0x5a
    97bc: f200 80fe    	bhi.w	0x99bc <_vfprintf_r+0x2f4> @ imm = #0x1fc
    97c0: e8df f013    	tbh	[pc, r3, lsl #1]
    97c4: 7e 04 fc 00  	.word	0x00fc047e
    97c8: fc 00 77 04  	.word	0x047700fc
    97cc: fc 00 fc 00  	.word	0x00fc00fc
    97d0: fc 00 57 04  	.word	0x045700fc
    97d4: fc 00 fc 00  	.word	0x00fc00fc
    97d8: 43 03 54 03  	.word	0x03540343
    97dc: fc 00 4e 03  	.word	0x034e00fc
    97e0: 90 04 fc 00  	.word	0x00fc0490
    97e4: 89 04 5b 00  	.word	0x005b0489
    97e8: 5b 00 5b 00  	.word	0x005b005b
    97ec: 5b 00 5b 00  	.word	0x005b005b
    97f0: 5b 00 5b 00  	.word	0x005b005b
    97f4: 5b 00 5b 00  	.word	0x005b005b
    97f8: fc 00 fc 00  	.word	0x00fc00fc
    97fc: fc 00 fc 00  	.word	0x00fc00fc
    9800: fc 00 fc 00  	.word	0x00fc00fc
    9804: fc 00 71 01  	.word	0x017100fc
    9808: fc 00 86 02  	.word	0x028600fc
    980c: 02 04 71 01  	.word	0x01710402
    9810: 71 01 71 01  	.word	0x01710171
    9814: fc 00 fc 00  	.word	0x00fc00fc
    9818: fc 00 fc 00  	.word	0x00fc00fc
    981c: fb 03 fc 00  	.word	0x00fc03fb
    9820: fc 00 c4 03  	.word	0x03c400fc
    9824: fc 00 fc 00  	.word	0x00fc00fc
    9828: fc 00 a3 02  	.word	0x02a300fc
    982c: fc 00 38 04  	.word	0x043800fc
    9830: fc 00 fc 00  	.word	0x00fc00fc
    9834: 2c 08 fc 00  	.word	0x00fc082c
    9838: fc 00 fc 00  	.word	0x00fc00fc
    983c: fc 00 fc 00  	.word	0x00fc00fc
    9840: fc 00 fc 00  	.word	0x00fc00fc
    9844: fc 00 71 01  	.word	0x017100fc
    9848: fc 00 86 02  	.word	0x028600fc
    984c: ac 01 71 01  	.word	0x017101ac
    9850: 71 01 71 01  	.word	0x01710171
    9854: 2e 04 ac 01  	.word	0x01ac042e
    9858: a6 01 fc 00  	.word	0x00fc01a6
    985c: 24 04 fc 00  	.word	0x00fc0424
    9860: b5 03 84 03  	.word	0x038403b5
    9864: 59 03 a6 01  	.word	0x01a60359
    9868: fc 00 a3 02  	.word	0x02a300fc
    986c: a4 01 fa 02  	.word	0x02fa01a4
    9870: fc 00 fc 00  	.word	0x00fc00fc
    9874: 5a 08 fc 00  	.word	0x00fc085a
    9878: a4 01        	.short	0x01a4
    987a: f1a4 0330    	sub.w	r3, r4, #0x30
    987e: 2200         	movs	r2, #0x0
    9880: eb02 0282    	add.w	r2, r2, r2, lsl #2
    9884: f815 4b01    	ldrb	r4, [r5], #1
    9888: eb03 0242    	add.w	r2, r3, r2, lsl #1
    988c: f1a4 0330    	sub.w	r3, r4, #0x30
    9890: 2b09         	cmp	r3, #0x9
    9892: d9f5         	bls	0x9880 <_vfprintf_r+0x1b8> @ imm = #-0x16
    9894: 9209         	str	r2, [sp, #0x24]
    9896: e78e         	b	0x97b6 <_vfprintf_r+0xee> @ imm = #-0xe4
    9898: 9d04         	ldr	r5, [sp, #0x10]
    989a: 4658         	mov	r0, r11
    989c: 4629         	mov	r1, r5
    989e: f002 fd55    	bl	0xc34c <__swsetup_r>    @ imm = #0x2aaa
    98a2: 2800         	cmp	r0, #0x0
    98a4: f041 873c    	bne.w	0xb720 <_vfprintf_r+0x2058> @ imm = #0x1e78
    98a8: f9b5 300c    	ldrsh.w	r3, [r5, #0xc]
    98ac: f003 021a    	and	r2, r3, #0x1a
    98b0: 2a0a         	cmp	r2, #0xa
    98b2: f47f af49    	bne.w	0x9748 <_vfprintf_r+0x80> @ imm = #-0x16e
    98b6: 9904         	ldr	r1, [sp, #0x10]
    98b8: f9b1 200e    	ldrsh.w	r2, [r1, #0xe]
    98bc: 2a00         	cmp	r2, #0x0
    98be: f6ff af43    	blt.w	0x9748 <_vfprintf_r+0x80> @ imm = #-0x17a
    98c2: 6e4a         	ldr	r2, [r1, #0x64]
    98c4: 07d0         	lsls	r0, r2, #0x1f
    98c6: d402         	bmi	0x98ce <_vfprintf_r+0x206> @ imm = #0x4
    98c8: 059a         	lsls	r2, r3, #0x16
    98ca: f141 82f3    	bpl.w	0xaeb4 <_vfprintf_r+0x17ec> @ imm = #0x15e6
    98ce: 4623         	mov	r3, r4
    98d0: 9a07         	ldr	r2, [sp, #0x1c]
    98d2: 9904         	ldr	r1, [sp, #0x10]
    98d4: 4658         	mov	r0, r11
    98d6: f001 ff8d    	bl	0xb7f4 <__sbprintf>     @ imm = #0x1f1a
    98da: 9008         	str	r0, [sp, #0x20]
    98dc: 9808         	ldr	r0, [sp, #0x20]
    98de: b051         	add	sp, #0x144
    98e0: ecbd 8b04    	vpop	{d8, d9}
    98e4: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    98e8: 2208         	movs	r2, #0x8
    98ea: 2100         	movs	r1, #0x0
    98ec: 4648         	mov	r0, r9
    98ee: f7ff fa5b    	bl	0x8da8 <memset>         @ imm = #-0xb4a
    98f2: 2301         	movs	r3, #0x1
    98f4: 441d         	add	r5, r3
    98f6: e736         	b	0x9766 <_vfprintf_r+0x9e> @ imm = #-0x194
    98f8: 9b07         	ldr	r3, [sp, #0x1c]
    98fa: 4604         	mov	r4, r0
    98fc: 1aee         	subs	r6, r5, r3
    98fe: d011         	beq	0x9924 <_vfprintf_r+0x25c> @ imm = #0x22
    9900: 9b07         	ldr	r3, [sp, #0x1c]
    9902: 9925         	ldr	r1, [sp, #0x94]
    9904: e9c7 3600    	strd	r3, r6, [r7]
    9908: 3101         	adds	r1, #0x1
    990a: 9b26         	ldr	r3, [sp, #0x98]
    990c: 2907         	cmp	r1, #0x7
    990e: 4433         	add	r3, r6
    9910: 9125         	str	r1, [sp, #0x94]
    9912: 9326         	str	r3, [sp, #0x98]
    9914: dc10         	bgt	0x9938 <_vfprintf_r+0x270> @ imm = #0x20
    9916: 3708         	adds	r7, #0x8
    9918: 9b08         	ldr	r3, [sp, #0x20]
    991a: 4433         	add	r3, r6
    991c: 9308         	str	r3, [sp, #0x20]
    991e: 2c00         	cmp	r4, #0x0
    9920: f47f af3d    	bne.w	0x979e <_vfprintf_r+0xd6> @ imm = #-0x186
    9924: 9b26         	ldr	r3, [sp, #0x98]
    9926: 2b00         	cmp	r3, #0x0
    9928: f041 82ba    	bne.w	0xaea0 <_vfprintf_r+0x17d8> @ imm = #0x1574
    992c: 2200         	movs	r2, #0x0
    992e: 9b04         	ldr	r3, [sp, #0x10]
    9930: 9225         	str	r2, [sp, #0x94]
    9932: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    9936: e018         	b	0x996a <_vfprintf_r+0x2a2> @ imm = #0x30
    9938: aa24         	add	r2, sp, #0x90
    993a: 9904         	ldr	r1, [sp, #0x10]
    993c: 4658         	mov	r0, r11
    993e: f002 fb31    	bl	0xbfa4 <__sprint_r>     @ imm = #0x2662
    9942: b978         	cbnz	r0, 0x9964 <_vfprintf_r+0x29c> @ imm = #0x1e
    9944: af27         	add	r7, sp, #0x9c
    9946: e7e7         	b	0x9918 <_vfprintf_r+0x250> @ imm = #-0x32
    9948: aa24         	add	r2, sp, #0x90
    994a: 9904         	ldr	r1, [sp, #0x10]
    994c: 4658         	mov	r0, r11
    994e: f002 fb29    	bl	0xbfa4 <__sprint_r>     @ imm = #0x2652
    9952: 2800         	cmp	r0, #0x0
    9954: f000 809d    	beq.w	0x9a92 <_vfprintf_r+0x3ca> @ imm = #0x13a
    9958: 9b0a         	ldr	r3, [sp, #0x28]
    995a: b11b         	cbz	r3, 0x9964 <_vfprintf_r+0x29c> @ imm = #0x6
    995c: 990a         	ldr	r1, [sp, #0x28]
    995e: 4658         	mov	r0, r11
    9960: f003 ff5e    	bl	0xd820 <_free_r>        @ imm = #0x3ebc
    9964: 9b04         	ldr	r3, [sp, #0x10]
    9966: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    996a: 9a04         	ldr	r2, [sp, #0x10]
    996c: 6e52         	ldr	r2, [r2, #0x64]
    996e: 07d4         	lsls	r4, r2, #0x1f
    9970: f140 80c2    	bpl.w	0x9af8 <_vfprintf_r+0x430> @ imm = #0x184
    9974: 065a         	lsls	r2, r3, #0x19
    9976: f100 821b    	bmi.w	0x9db0 <_vfprintf_r+0x6e8> @ imm = #0x436
    997a: 9808         	ldr	r0, [sp, #0x20]
    997c: b051         	add	sp, #0x144
    997e: ecbd 8b04    	vpop	{d8, d9}
    9982: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    9986: 059f         	lsls	r7, r3, #0x16
    9988: f140 8202    	bpl.w	0x9d90 <_vfprintf_r+0x6c8> @ imm = #0x404
    998c: 049e         	lsls	r6, r3, #0x12
    998e: f57f aec6    	bpl.w	0x971e <_vfprintf_r+0x56> @ imm = #-0x274
    9992: 0495         	lsls	r5, r2, #0x12
    9994: f57f aecb    	bpl.w	0x972e <_vfprintf_r+0x66> @ imm = #-0x26a
    9998: 9b04         	ldr	r3, [sp, #0x10]
    999a: 899b         	ldrh	r3, [r3, #0xc]
    999c: 059f         	lsls	r7, r3, #0x16
    999e: f100 8207    	bmi.w	0x9db0 <_vfprintf_r+0x6e8> @ imm = #0x40e
    99a2: 9b04         	ldr	r3, [sp, #0x10]
    99a4: 6d98         	ldr	r0, [r3, #0x58]
    99a6: f7ff fabf    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0xa82
    99aa: e201         	b	0x9db0 <_vfprintf_r+0x6e8> @ imm = #0x402
    99ac: f3af 8000    	nop.w
    99b0: 00 00 00 00  	.word	0x00000000
    99b4: 00 00 00 00  	.word	0x00000000
    99b8: 20 0b 00 20  	.word	0x20000b20
    99bc: 9507         	str	r5, [sp, #0x1c]
    99be: 2c00         	cmp	r4, #0x0
    99c0: d0b0         	beq	0x9924 <_vfprintf_r+0x25c> @ imm = #-0xa0
    99c2: 2300         	movs	r3, #0x0
    99c4: 2201         	movs	r2, #0x1
    99c6: ad37         	add	r5, sp, #0xdc
    99c8: f88d 40dc    	strb.w	r4, [sp, #0xdc]
    99cc: f88d 3067    	strb.w	r3, [sp, #0x67]
    99d0: 930a         	str	r3, [sp, #0x28]
    99d2: 920c         	str	r2, [sp, #0x30]
    99d4: 9306         	str	r3, [sp, #0x18]
    99d6: 9310         	str	r3, [sp, #0x40]
    99d8: 9205         	str	r2, [sp, #0x14]
    99da: e9cd 330d    	strd	r3, r3, [sp, #52]
    99de: 9903         	ldr	r1, [sp, #0xc]
    99e0: 9a26         	ldr	r2, [sp, #0x98]
    99e2: f011 0a84    	ands	r10, r1, #0x84
    99e6: 4696         	mov	lr, r2
    99e8: f000 80d2    	beq.w	0x9b90 <_vfprintf_r+0x4c8> @ imm = #0x1a4
    99ec: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    99f0: b30b         	cbz	r3, 0x9a36 <_vfprintf_r+0x36e> @ imm = #0x42
    99f2: f8dd c094    	ldr.w	r12, [sp, #0x94]
    99f6: 2600         	movs	r6, #0x0
    99f8: f10c 0301    	add.w	r3, r12, #0x1
    99fc: 2101         	movs	r1, #0x1
    99fe: 3201         	adds	r2, #0x1
    9a00: 6079         	str	r1, [r7, #0x4]
    9a02: 2b07         	cmp	r3, #0x7
    9a04: f10d 0167    	add.w	r1, sp, #0x67
    9a08: e9cd 3225    	strd	r3, r2, [sp, #148]
    9a0c: 6039         	str	r1, [r7]
    9a0e: f300 844c    	bgt.w	0xa2aa <_vfprintf_r+0xbe2> @ imm = #0x898
    9a12: 3708         	adds	r7, #0x8
    9a14: b17e         	cbz	r6, 0x9a36 <_vfprintf_r+0x36e> @ imm = #0x1e
    9a16: f8dd c094    	ldr.w	r12, [sp, #0x94]
    9a1a: f10c 0301    	add.w	r3, r12, #0x1
    9a1e: a91a         	add	r1, sp, #0x68
    9a20: 3202         	adds	r2, #0x2
    9a22: 6039         	str	r1, [r7]
    9a24: 2b07         	cmp	r3, #0x7
    9a26: f04f 0102    	mov.w	r1, #0x2
    9a2a: e9cd 3225    	strd	r3, r2, [sp, #148]
    9a2e: 6079         	str	r1, [r7, #0x4]
    9a30: f300 8447    	bgt.w	0xa2c2 <_vfprintf_r+0xbfa> @ imm = #0x88e
    9a34: 3708         	adds	r7, #0x8
    9a36: f1ba 0f80    	cmp.w	r10, #0x80
    9a3a: f000 836f    	beq.w	0xa11c <_vfprintf_r+0xa54> @ imm = #0x6de
    9a3e: 9b06         	ldr	r3, [sp, #0x18]
    9a40: 990c         	ldr	r1, [sp, #0x30]
    9a42: 1a5e         	subs	r6, r3, r1
    9a44: 2e00         	cmp	r6, #0x0
    9a46: f300 80b4    	bgt.w	0x9bb2 <_vfprintf_r+0x4ea> @ imm = #0x168
    9a4a: 9b03         	ldr	r3, [sp, #0xc]
    9a4c: 05de         	lsls	r6, r3, #0x17
    9a4e: f100 80ed    	bmi.w	0x9c2c <_vfprintf_r+0x564> @ imm = #0x1da
    9a52: 9b0c         	ldr	r3, [sp, #0x30]
    9a54: 603d         	str	r5, [r7]
    9a56: 441a         	add	r2, r3
    9a58: 607b         	str	r3, [r7, #0x4]
    9a5a: 9b25         	ldr	r3, [sp, #0x94]
    9a5c: 9226         	str	r2, [sp, #0x98]
    9a5e: 3301         	adds	r3, #0x1
    9a60: 2b07         	cmp	r3, #0x7
    9a62: 9325         	str	r3, [sp, #0x94]
    9a64: f300 83d7    	bgt.w	0xa216 <_vfprintf_r+0xb4e> @ imm = #0x7ae
    9a68: 3708         	adds	r7, #0x8
    9a6a: 9b03         	ldr	r3, [sp, #0xc]
    9a6c: 075d         	lsls	r5, r3, #0x1d
    9a6e: d505         	bpl	0x9a7c <_vfprintf_r+0x3b4> @ imm = #0xa
    9a70: 9b09         	ldr	r3, [sp, #0x24]
    9a72: 9905         	ldr	r1, [sp, #0x14]
    9a74: 1a5c         	subs	r4, r3, r1
    9a76: 2c00         	cmp	r4, #0x0
    9a78: f300 842f    	bgt.w	0xa2da <_vfprintf_r+0xc12> @ imm = #0x85e
    9a7c: 9805         	ldr	r0, [sp, #0x14]
    9a7e: e9dd 3108    	ldrd	r3, r1, [sp, #32]
    9a82: 4281         	cmp	r1, r0
    9a84: bfac         	ite	ge
    9a86: 185b         	addge	r3, r3, r1
    9a88: 181b         	addlt	r3, r3, r0
    9a8a: 9308         	str	r3, [sp, #0x20]
    9a8c: 2a00         	cmp	r2, #0x0
    9a8e: f47f af5b    	bne.w	0x9948 <_vfprintf_r+0x280> @ imm = #-0x14a
    9a92: 2300         	movs	r3, #0x0
    9a94: 9325         	str	r3, [sp, #0x94]
    9a96: 9b0a         	ldr	r3, [sp, #0x28]
    9a98: b11b         	cbz	r3, 0x9aa2 <_vfprintf_r+0x3da> @ imm = #0x6
    9a9a: 990a         	ldr	r1, [sp, #0x28]
    9a9c: 4658         	mov	r0, r11
    9a9e: f003 febf    	bl	0xd820 <_free_r>        @ imm = #0x3d7e
    9aa2: af27         	add	r7, sp, #0x9c
    9aa4: e65e         	b	0x9764 <_vfprintf_r+0x9c> @ imm = #-0x344
    9aa6: 9b0b         	ldr	r3, [sp, #0x2c]
    9aa8: 9507         	str	r5, [sp, #0x1c]
    9aaa: 3307         	adds	r3, #0x7
    9aac: f023 0307    	bic	r3, r3, #0x7
    9ab0: ecb3 8b02    	vldmia	r3!, {d8}
    9ab4: ed9f 7bb0    	vldr	d7, [pc, #704]          @ 0x9d78 <_vfprintf_r+0x6b0>
    9ab8: eeb0 6bc8    	<unknown>
    9abc: 930b         	str	r3, [sp, #0x2c]
    9abe: eeb4 6b47    	<unknown>
    9ac2: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    9ac6: f340 8598    	ble.w	0xa5fa <_vfprintf_r+0xf32> @ imm = #0xb30
    9aca: eeb5 8bc0    	<unknown>
    9ace: 9b03         	ldr	r3, [sp, #0xc]
    9ad0: f023 0380    	bic	r3, r3, #0x80
    9ad4: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    9ad8: 9303         	str	r3, [sp, #0xc]
    9ada: f101 834e    	bmi.w	0xb17a <_vfprintf_r+0x1ab2> @ imm = #0x169c
    9ade: 2c47         	cmp	r4, #0x47
    9ae0: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    9ae4: bfcc         	ite	gt
    9ae6: 4da6         	ldrgt	r5, [pc, #0x298]        @ 0x9d80 <_vfprintf_r+0x6b8>
    9ae8: 4da6         	ldrle	r5, [pc, #0x298]        @ 0x9d84 <_vfprintf_r+0x6bc>
    9aea: 2b00         	cmp	r3, #0x0
    9aec: f041 855a    	bne.w	0xb5a4 <_vfprintf_r+0x1edc> @ imm = #0x1ab4
    9af0: 2203         	movs	r2, #0x3
    9af2: 930a         	str	r3, [sp, #0x28]
    9af4: 920c         	str	r2, [sp, #0x30]
    9af6: e76d         	b	0x99d4 <_vfprintf_r+0x30c> @ imm = #-0x126
    9af8: 0599         	lsls	r1, r3, #0x16
    9afa: f53f af3b    	bmi.w	0x9974 <_vfprintf_r+0x2ac> @ imm = #-0x18a
    9afe: 9c04         	ldr	r4, [sp, #0x10]
    9b00: 6da0         	ldr	r0, [r4, #0x58]
    9b02: f7ff fa11    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0xbde
    9b06: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    9b0a: e733         	b	0x9974 <_vfprintf_r+0x2ac> @ imm = #-0x19a
    9b0c: 782c         	ldrb	r4, [r5]
    9b0e: e651         	b	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x35e
    9b10: 9b03         	ldr	r3, [sp, #0xc]
    9b12: 782c         	ldrb	r4, [r5]
    9b14: f043 0320    	orr	r3, r3, #0x20
    9b18: 9303         	str	r3, [sp, #0xc]
    9b1a: e64b         	b	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x36a
    9b1c: 9903         	ldr	r1, [sp, #0xc]
    9b1e: 9507         	str	r5, [sp, #0x1c]
    9b20: 0688         	lsls	r0, r1, #0x1a
    9b22: f140 865a    	bpl.w	0xa7da <_vfprintf_r+0x1112> @ imm = #0xcb4
    9b26: 9b0b         	ldr	r3, [sp, #0x2c]
    9b28: 9103         	str	r1, [sp, #0xc]
    9b2a: 3307         	adds	r3, #0x7
    9b2c: f023 0307    	bic	r3, r3, #0x7
    9b30: 461a         	mov	r2, r3
    9b32: 685b         	ldr	r3, [r3, #0x4]
    9b34: f852 6b08    	ldr	r6, [r2], #8
    9b38: 4698         	mov	r8, r3
    9b3a: 920b         	str	r2, [sp, #0x2c]
    9b3c: 2b00         	cmp	r3, #0x0
    9b3e: f2c0 8256    	blt.w	0x9fee <_vfprintf_r+0x926> @ imm = #0x4ac
    9b42: 9a06         	ldr	r2, [sp, #0x18]
    9b44: 2a00         	cmp	r2, #0x0
    9b46: f2c0 814d    	blt.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #0x29a
    9b4a: 9b03         	ldr	r3, [sp, #0xc]
    9b4c: f023 0380    	bic	r3, r3, #0x80
    9b50: 9303         	str	r3, [sp, #0xc]
    9b52: ea56 0308    	orrs.w	r3, r6, r8
    9b56: f040 8145    	bne.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #0x28a
    9b5a: 1e13         	subs	r3, r2, #0x0
    9b5c: bf18         	it	ne
    9b5e: 2301         	movne	r3, #0x1
    9b60: 2a00         	cmp	r2, #0x0
    9b62: f040 813f    	bne.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #0x27e
    9b66: 461a         	mov	r2, r3
    9b68: 930a         	str	r3, [sp, #0x28]
    9b6a: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    9b6e: ad50         	add	r5, sp, #0x140
    9b70: 9206         	str	r2, [sp, #0x18]
    9b72: 1e19         	subs	r1, r3, #0x0
    9b74: 920c         	str	r2, [sp, #0x30]
    9b76: 9210         	str	r2, [sp, #0x40]
    9b78: bf18         	it	ne
    9b7a: 2101         	movne	r1, #0x1
    9b7c: 9105         	str	r1, [sp, #0x14]
    9b7e: 9903         	ldr	r1, [sp, #0xc]
    9b80: e9cd 220d    	strd	r2, r2, [sp, #52]
    9b84: f011 0a84    	ands	r10, r1, #0x84
    9b88: 9a26         	ldr	r2, [sp, #0x98]
    9b8a: 4696         	mov	lr, r2
    9b8c: f47f af2e    	bne.w	0x99ec <_vfprintf_r+0x324> @ imm = #-0x1a4
    9b90: 9b09         	ldr	r3, [sp, #0x24]
    9b92: 9905         	ldr	r1, [sp, #0x14]
    9b94: 1a5e         	subs	r6, r3, r1
    9b96: 2e00         	cmp	r6, #0x0
    9b98: f300 8445    	bgt.w	0xa426 <_vfprintf_r+0xd5e> @ imm = #0x88a
    9b9c: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    9ba0: 2b00         	cmp	r3, #0x0
    9ba2: f47f af26    	bne.w	0x99f2 <_vfprintf_r+0x32a> @ imm = #-0x1b4
    9ba6: 9b06         	ldr	r3, [sp, #0x18]
    9ba8: 990c         	ldr	r1, [sp, #0x30]
    9baa: 1a5e         	subs	r6, r3, r1
    9bac: 2e00         	cmp	r6, #0x0
    9bae: f77f af4c    	ble.w	0x9a4a <_vfprintf_r+0x382> @ imm = #-0x168
    9bb2: 2e10         	cmp	r6, #0x10
    9bb4: 9b25         	ldr	r3, [sp, #0x94]
    9bb6: f8df 81d0    	ldr.w	r8, [pc, #0x1d0]        @ 0x9d88 <_vfprintf_r+0x6c0>
    9bba: dd28         	ble	0x9c0e <_vfprintf_r+0x546> @ imm = #0x50
    9bbc: 4628         	mov	r0, r5
    9bbe: f04f 0a10    	mov.w	r10, #0x10
    9bc2: 4625         	mov	r5, r4
    9bc4: 4619         	mov	r1, r3
    9bc6: 4634         	mov	r4, r6
    9bc8: 4606         	mov	r6, r0
    9bca: e002         	b	0x9bd2 <_vfprintf_r+0x50a> @ imm = #0x4
    9bcc: 3c10         	subs	r4, #0x10
    9bce: 2c10         	cmp	r4, #0x10
    9bd0: dd18         	ble	0x9c04 <_vfprintf_r+0x53c> @ imm = #0x30
    9bd2: 3101         	adds	r1, #0x1
    9bd4: 3210         	adds	r2, #0x10
    9bd6: 4b6c         	ldr	r3, [pc, #0x1b0]        @ 0x9d88 <_vfprintf_r+0x6c0>
    9bd8: 2907         	cmp	r1, #0x7
    9bda: e9c7 3a00    	strd	r3, r10, [r7]
    9bde: e9cd 1225    	strd	r1, r2, [sp, #148]
    9be2: f107 0708    	add.w	r7, r7, #0x8
    9be6: ddf1         	ble	0x9bcc <_vfprintf_r+0x504> @ imm = #-0x1e
    9be8: aa24         	add	r2, sp, #0x90
    9bea: 9904         	ldr	r1, [sp, #0x10]
    9bec: 4658         	mov	r0, r11
    9bee: af27         	add	r7, sp, #0x9c
    9bf0: f002 f9d8    	bl	0xbfa4 <__sprint_r>     @ imm = #0x23b0
    9bf4: 2800         	cmp	r0, #0x0
    9bf6: f47f aeaf    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x2a2
    9bfa: 3c10         	subs	r4, #0x10
    9bfc: 2c10         	cmp	r4, #0x10
    9bfe: e9dd 1225    	ldrd	r1, r2, [sp, #148]
    9c02: dce6         	bgt	0x9bd2 <_vfprintf_r+0x50a> @ imm = #-0x34
    9c04: 4630         	mov	r0, r6
    9c06: 460b         	mov	r3, r1
    9c08: 4626         	mov	r6, r4
    9c0a: 462c         	mov	r4, r5
    9c0c: 4605         	mov	r5, r0
    9c0e: 3301         	adds	r3, #0x1
    9c10: 4432         	add	r2, r6
    9c12: f8c7 8000    	str.w	r8, [r7]
    9c16: 2b07         	cmp	r3, #0x7
    9c18: 607e         	str	r6, [r7, #0x4]
    9c1a: e9cd 3225    	strd	r3, r2, [sp, #148]
    9c1e: f300 842b    	bgt.w	0xa478 <_vfprintf_r+0xdb0> @ imm = #0x856
    9c22: 9b03         	ldr	r3, [sp, #0xc]
    9c24: 3708         	adds	r7, #0x8
    9c26: 05de         	lsls	r6, r3, #0x17
    9c28: f57f af13    	bpl.w	0x9a52 <_vfprintf_r+0x38a> @ imm = #-0x1da
    9c2c: 2c65         	cmp	r4, #0x65
    9c2e: f340 82fd    	ble.w	0xa22c <_vfprintf_r+0xb64> @ imm = #0x5fa
    9c32: eeb5 8b40    	<unknown>
    9c36: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    9c3a: f040 82bd    	bne.w	0xa1b8 <_vfprintf_r+0xaf0> @ imm = #0x57a
    9c3e: 9b25         	ldr	r3, [sp, #0x94]
    9c40: 3201         	adds	r2, #0x1
    9c42: 4952         	ldr	r1, [pc, #0x148]        @ 0x9d8c <_vfprintf_r+0x6c4>
    9c44: 3301         	adds	r3, #0x1
    9c46: 9226         	str	r2, [sp, #0x98]
    9c48: 6039         	str	r1, [r7]
    9c4a: 2101         	movs	r1, #0x1
    9c4c: 2b07         	cmp	r3, #0x7
    9c4e: 9325         	str	r3, [sp, #0x94]
    9c50: 6079         	str	r1, [r7, #0x4]
    9c52: f300 86f3    	bgt.w	0xaa3c <_vfprintf_r+0x1374> @ imm = #0xde6
    9c56: 3708         	adds	r7, #0x8
    9c58: 9b1b         	ldr	r3, [sp, #0x6c]
    9c5a: 990f         	ldr	r1, [sp, #0x3c]
    9c5c: 428b         	cmp	r3, r1
    9c5e: f280 8497    	bge.w	0xa590 <_vfprintf_r+0xec8> @ imm = #0x92e
    9c62: 9b11         	ldr	r3, [sp, #0x44]
    9c64: 9912         	ldr	r1, [sp, #0x48]
    9c66: 441a         	add	r2, r3
    9c68: e9c7 1300    	strd	r1, r3, [r7]
    9c6c: 9b25         	ldr	r3, [sp, #0x94]
    9c6e: 9226         	str	r2, [sp, #0x98]
    9c70: 3301         	adds	r3, #0x1
    9c72: 2b07         	cmp	r3, #0x7
    9c74: 9325         	str	r3, [sp, #0x94]
    9c76: f300 8636    	bgt.w	0xa8e6 <_vfprintf_r+0x121e> @ imm = #0xc6c
    9c7a: 3708         	adds	r7, #0x8
    9c7c: 9b0f         	ldr	r3, [sp, #0x3c]
    9c7e: 1e5c         	subs	r4, r3, #0x1
    9c80: 2c00         	cmp	r4, #0x0
    9c82: f77f aef2    	ble.w	0x9a6a <_vfprintf_r+0x3a2> @ imm = #-0x21c
    9c86: 2c10         	cmp	r4, #0x10
    9c88: 9b25         	ldr	r3, [sp, #0x94]
    9c8a: f8df 80fc    	ldr.w	r8, [pc, #0xfc]         @ 0x9d88 <_vfprintf_r+0x6c0>
    9c8e: f340 8741    	ble.w	0xab14 <_vfprintf_r+0x144c> @ imm = #0xe82
    9c92: 4646         	mov	r6, r8
    9c94: 2510         	movs	r5, #0x10
    9c96: f8dd 8010    	ldr.w	r8, [sp, #0x10]
    9c9a: e003         	b	0x9ca4 <_vfprintf_r+0x5dc> @ imm = #0x6
    9c9c: 3c10         	subs	r4, #0x10
    9c9e: 2c10         	cmp	r4, #0x10
    9ca0: f340 8737    	ble.w	0xab12 <_vfprintf_r+0x144a> @ imm = #0xe6e
    9ca4: 3301         	adds	r3, #0x1
    9ca6: 3210         	adds	r2, #0x10
    9ca8: 2b07         	cmp	r3, #0x7
    9caa: e9c7 6500    	strd	r6, r5, [r7]
    9cae: e9cd 3225    	strd	r3, r2, [sp, #148]
    9cb2: f107 0708    	add.w	r7, r7, #0x8
    9cb6: ddf1         	ble	0x9c9c <_vfprintf_r+0x5d4> @ imm = #-0x1e
    9cb8: aa24         	add	r2, sp, #0x90
    9cba: 4641         	mov	r1, r8
    9cbc: 4658         	mov	r0, r11
    9cbe: f002 f971    	bl	0xbfa4 <__sprint_r>     @ imm = #0x22e2
    9cc2: 2800         	cmp	r0, #0x0
    9cc4: f47f ae48    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x370
    9cc8: af27         	add	r7, sp, #0x9c
    9cca: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    9cce: e7e5         	b	0x9c9c <_vfprintf_r+0x5d4> @ imm = #-0x36
    9cd0: 9b0b         	ldr	r3, [sp, #0x2c]
    9cd2: 2c43         	cmp	r4, #0x43
    9cd4: 9507         	str	r5, [sp, #0x1c]
    9cd6: f103 0604    	add.w	r6, r3, #0x4
    9cda: f000 8631    	beq.w	0xa940 <_vfprintf_r+0x1278> @ imm = #0xc62
    9cde: 9b03         	ldr	r3, [sp, #0xc]
    9ce0: 06db         	lsls	r3, r3, #0x1b
    9ce2: f100 862d    	bmi.w	0xa940 <_vfprintf_r+0x1278> @ imm = #0xc5a
    9ce6: 9b0b         	ldr	r3, [sp, #0x2c]
    9ce8: ad37         	add	r5, sp, #0xdc
    9cea: 681b         	ldr	r3, [r3]
    9cec: f88d 30dc    	strb.w	r3, [sp, #0xdc]
    9cf0: 2301         	movs	r3, #0x1
    9cf2: 9305         	str	r3, [sp, #0x14]
    9cf4: 930c         	str	r3, [sp, #0x30]
    9cf6: 2300         	movs	r3, #0x0
    9cf8: 960b         	str	r6, [sp, #0x2c]
    9cfa: f88d 3067    	strb.w	r3, [sp, #0x67]
    9cfe: 930a         	str	r3, [sp, #0x28]
    9d00: 9306         	str	r3, [sp, #0x18]
    9d02: 9310         	str	r3, [sp, #0x40]
    9d04: e9cd 330d    	strd	r3, r3, [sp, #52]
    9d08: e669         	b	0x99de <_vfprintf_r+0x316> @ imm = #-0x32e
    9d0a: f8dd 802c    	ldr.w	r8, [sp, #0x2c]
    9d0e: 2300         	movs	r3, #0x0
    9d10: 9507         	str	r5, [sp, #0x1c]
    9d12: f858 5b04    	ldr	r5, [r8], #4
    9d16: f88d 3067    	strb.w	r3, [sp, #0x67]
    9d1a: 2d00         	cmp	r5, #0x0
    9d1c: f000 85f6    	beq.w	0xa90c <_vfprintf_r+0x1244> @ imm = #0xbec
    9d20: 2c53         	cmp	r4, #0x53
    9d22: f000 8697    	beq.w	0xaa54 <_vfprintf_r+0x138c> @ imm = #0xd2e
    9d26: 9b03         	ldr	r3, [sp, #0xc]
    9d28: f013 0310    	ands	r3, r3, #0x10
    9d2c: 930d         	str	r3, [sp, #0x34]
    9d2e: f040 8691    	bne.w	0xaa54 <_vfprintf_r+0x138c> @ imm = #0xd22
    9d32: 9b06         	ldr	r3, [sp, #0x18]
    9d34: 2b00         	cmp	r3, #0x0
    9d36: f2c1 80a5    	blt.w	0xae84 <_vfprintf_r+0x17bc> @ imm = #0x114a
    9d3a: 461a         	mov	r2, r3
    9d3c: 990d         	ldr	r1, [sp, #0x34]
    9d3e: 4628         	mov	r0, r5
    9d40: f002 fcb0    	bl	0xc6a4 <memchr>         @ imm = #0x2960
    9d44: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    9d48: 900a         	str	r0, [sp, #0x28]
    9d4a: 2800         	cmp	r0, #0x0
    9d4c: f001 839a    	beq.w	0xb484 <_vfprintf_r+0x1dbc> @ imm = #0x1734
    9d50: 9a0a         	ldr	r2, [sp, #0x28]
    9d52: 1b52         	subs	r2, r2, r5
    9d54: 920c         	str	r2, [sp, #0x30]
    9d56: ea22 72e2    	bic.w	r2, r2, r2, asr #31
    9d5a: 9205         	str	r2, [sp, #0x14]
    9d5c: b10b         	cbz	r3, 0x9d62 <_vfprintf_r+0x69a> @ imm = #0x2
    9d5e: 3201         	adds	r2, #0x1
    9d60: 9205         	str	r2, [sp, #0x14]
    9d62: 9b0d         	ldr	r3, [sp, #0x34]
    9d64: 2473         	movs	r4, #0x73
    9d66: f8cd 802c    	str.w	r8, [sp, #0x2c]
    9d6a: 9306         	str	r3, [sp, #0x18]
    9d6c: 9310         	str	r3, [sp, #0x40]
    9d6e: 930e         	str	r3, [sp, #0x38]
    9d70: 930a         	str	r3, [sp, #0x28]
    9d72: e634         	b	0x99de <_vfprintf_r+0x316> @ imm = #-0x398
    9d74: f3af 8000    	nop.w
    9d78: ff ff ff ff  	.word	0xffffffff
    9d7c: ff ff ef 7f  	.word	0x7fefffff
    9d80: 34 1d 21 80  	.word	0x80211d34
    9d84: 30 1d 21 80  	.word	0x80211d30
    9d88: e8 1e 21 80  	.word	0x80211ee8
    9d8c: 70 1d 21 80  	.word	0x80211d70
    9d90: 9d04         	ldr	r5, [sp, #0x10]
    9d92: 6da8         	ldr	r0, [r5, #0x58]
    9d94: f7ff f8c6    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0xe74
    9d98: f9b5 300c    	ldrsh.w	r3, [r5, #0xc]
    9d9c: 6e6a         	ldr	r2, [r5, #0x64]
    9d9e: 0498         	lsls	r0, r3, #0x12
    9da0: f57f acbd    	bpl.w	0x971e <_vfprintf_r+0x56> @ imm = #-0x686
    9da4: 0491         	lsls	r1, r2, #0x12
    9da6: f57f acc2    	bpl.w	0x972e <_vfprintf_r+0x66> @ imm = #-0x67c
    9daa: 07d3         	lsls	r3, r2, #0x1f
    9dac: f57f adf4    	bpl.w	0x9998 <_vfprintf_r+0x2d0> @ imm = #-0x418
    9db0: f04f 33ff    	mov.w	r3, #0xffffffff
    9db4: 9308         	str	r3, [sp, #0x20]
    9db6: e5e0         	b	0x997a <_vfprintf_r+0x2b2> @ imm = #-0x440
    9db8: 9903         	ldr	r1, [sp, #0xc]
    9dba: 9507         	str	r5, [sp, #0x1c]
    9dbc: 068e         	lsls	r6, r1, #0x1a
    9dbe: f140 84da    	bpl.w	0xa776 <_vfprintf_r+0x10ae> @ imm = #0x9b4
    9dc2: 9b0b         	ldr	r3, [sp, #0x2c]
    9dc4: 2200         	movs	r2, #0x0
    9dc6: 3307         	adds	r3, #0x7
    9dc8: f88d 2067    	strb.w	r2, [sp, #0x67]
    9dcc: f023 0307    	bic	r3, r3, #0x7
    9dd0: f8d3 8004    	ldr.w	r8, [r3, #0x4]
    9dd4: f853 6b08    	ldr	r6, [r3], #8
    9dd8: 930b         	str	r3, [sp, #0x2c]
    9dda: 9b06         	ldr	r3, [sp, #0x18]
    9ddc: 4293         	cmp	r3, r2
    9dde: f280 83eb    	bge.w	0xa5b8 <_vfprintf_r+0xef0> @ imm = #0x7d6
    9de2: 9103         	str	r1, [sp, #0xc]
    9de4: 2e0a         	cmp	r6, #0xa
    9de6: f178 0300    	sbcs	r3, r8, #0x0
    9dea: f080 869f    	bhs.w	0xab2c <_vfprintf_r+0x1464> @ imm = #0xd3e
    9dee: 9b06         	ldr	r3, [sp, #0x18]
    9df0: 3630         	adds	r6, #0x30
    9df2: f04f 0e00    	mov.w	lr, #0x0
    9df6: f89d 0067    	ldrb.w	r0, [sp, #0x67]
    9dfa: 2b01         	cmp	r3, #0x1
    9dfc: f20d 153f    	addw	r5, sp, #0x13f
    9e00: f88d 613f    	strb.w	r6, [sp, #0x13f]
    9e04: bfb8         	it	lt
    9e06: 2301         	movlt	r3, #0x1
    9e08: 9305         	str	r3, [sp, #0x14]
    9e0a: 2301         	movs	r3, #0x1
    9e0c: e9cd 3e0c    	strd	r3, lr, [sp, #48]
    9e10: 2300         	movs	r3, #0x0
    9e12: 930a         	str	r3, [sp, #0x28]
    9e14: b110         	cbz	r0, 0x9e1c <_vfprintf_r+0x754> @ imm = #0x4
    9e16: 9b05         	ldr	r3, [sp, #0x14]
    9e18: 3301         	adds	r3, #0x1
    9e1a: 9305         	str	r3, [sp, #0x14]
    9e1c: 9b0d         	ldr	r3, [sp, #0x34]
    9e1e: 2b00         	cmp	r3, #0x0
    9e20: f001 84b4    	beq.w	0xb78c <_vfprintf_r+0x20c4> @ imm = #0x1968
    9e24: 9b05         	ldr	r3, [sp, #0x14]
    9e26: 9e03         	ldr	r6, [sp, #0xc]
    9e28: 3302         	adds	r3, #0x2
    9e2a: f016 0a84    	ands	r10, r6, #0x84
    9e2e: 9305         	str	r3, [sp, #0x14]
    9e30: e9dd c225    	ldrd	r12, r2, [sp, #148]
    9e34: 4696         	mov	lr, r2
    9e36: 4661         	mov	r1, r12
    9e38: f000 81af    	beq.w	0xa19a <_vfprintf_r+0xad2> @ imm = #0x35e
    9e3c: 2800         	cmp	r0, #0x0
    9e3e: f040 8286    	bne.w	0xa34e <_vfprintf_r+0xc86> @ imm = #0x50c
    9e42: 9010         	str	r0, [sp, #0x40]
    9e44: e9cd 000d    	strd	r0, r0, [sp, #52]
    9e48: e5e7         	b	0x9a1a <_vfprintf_r+0x352> @ imm = #-0x432
    9e4a: 9b0b         	ldr	r3, [sp, #0x2c]
    9e4c: f853 2b04    	ldr	r2, [r3], #4
    9e50: 2a00         	cmp	r2, #0x0
    9e52: 9209         	str	r2, [sp, #0x24]
    9e54: f280 83ac    	bge.w	0xa5b0 <_vfprintf_r+0xee8> @ imm = #0x758
    9e58: 9a09         	ldr	r2, [sp, #0x24]
    9e5a: 930b         	str	r3, [sp, #0x2c]
    9e5c: 4252         	rsbs	r2, r2, #0
    9e5e: 9209         	str	r2, [sp, #0x24]
    9e60: 9b03         	ldr	r3, [sp, #0xc]
    9e62: 782c         	ldrb	r4, [r5]
    9e64: f043 0304    	orr	r3, r3, #0x4
    9e68: 9303         	str	r3, [sp, #0xc]
    9e6a: e4a3         	b	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x6ba
    9e6c: 232b         	movs	r3, #0x2b
    9e6e: 782c         	ldrb	r4, [r5]
    9e70: f88d 3067    	strb.w	r3, [sp, #0x67]
    9e74: e49e         	b	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x6c4
    9e76: 2100         	movs	r1, #0x0
    9e78: 9a0b         	ldr	r2, [sp, #0x2c]
    9e7a: 9c06         	ldr	r4, [sp, #0x18]
    9e7c: f647 0330    	movw	r3, #0x7830
    9e80: f852 0b04    	ldr	r0, [r2], #4
    9e84: 428c         	cmp	r4, r1
    9e86: f8ad 3068    	strh.w	r3, [sp, #0x68]
    9e8a: 9507         	str	r5, [sp, #0x1c]
    9e8c: 4603         	mov	r3, r0
    9e8e: f88d 1067    	strb.w	r1, [sp, #0x67]
    9e92: f2c0 84f4    	blt.w	0xa87e <_vfprintf_r+0x11b6> @ imm = #0x9e8
    9e96: 9c03         	ldr	r4, [sp, #0xc]
    9e98: f024 0480    	bic	r4, r4, #0x80
    9e9c: f044 0402    	orr	r4, r4, #0x2
    9ea0: 9403         	str	r4, [sp, #0xc]
    9ea2: 2800         	cmp	r0, #0x0
    9ea4: f040 86ba    	bne.w	0xac1c <_vfprintf_r+0x1554> @ imm = #0xd74
    9ea8: 9806         	ldr	r0, [sp, #0x18]
    9eaa: 2800         	cmp	r0, #0x0
    9eac: f040 86b6    	bne.w	0xac1c <_vfprintf_r+0x1554> @ imm = #0xd6c
    9eb0: 2478         	movs	r4, #0x78
    9eb2: 920b         	str	r2, [sp, #0x2c]
    9eb4: 9a03         	ldr	r2, [sp, #0xc]
    9eb6: 2300         	movs	r3, #0x0
    9eb8: f89d 0067    	ldrb.w	r0, [sp, #0x67]
    9ebc: ad50         	add	r5, sp, #0x140
    9ebe: f002 0202    	and	r2, r2, #0x2
    9ec2: 9305         	str	r3, [sp, #0x14]
    9ec4: 930c         	str	r3, [sp, #0x30]
    9ec6: 920d         	str	r2, [sp, #0x34]
    9ec8: 9306         	str	r3, [sp, #0x18]
    9eca: e7a1         	b	0x9e10 <_vfprintf_r+0x748> @ imm = #-0xbe
    9ecc: 9803         	ldr	r0, [sp, #0xc]
    9ece: 9507         	str	r5, [sp, #0x1c]
    9ed0: 0681         	lsls	r1, r0, #0x1a
    9ed2: f140 8470    	bpl.w	0xa7b6 <_vfprintf_r+0x10ee> @ imm = #0x8e0
    9ed6: 9b0b         	ldr	r3, [sp, #0x2c]
    9ed8: 3307         	adds	r3, #0x7
    9eda: f023 0307    	bic	r3, r3, #0x7
    9ede: 461a         	mov	r2, r3
    9ee0: 6859         	ldr	r1, [r3, #0x4]
    9ee2: f852 3b08    	ldr	r3, [r2], #8
    9ee6: 920b         	str	r2, [sp, #0x2c]
    9ee8: 2200         	movs	r2, #0x0
    9eea: f88d 2067    	strb.w	r2, [sp, #0x67]
    9eee: 9a06         	ldr	r2, [sp, #0x18]
    9ef0: 2a00         	cmp	r2, #0x0
    9ef2: db3d         	blt	0x9f70 <_vfprintf_r+0x8a8> @ imm = #0x7a
    9ef4: f420 6290    	bic	r2, r0, #0x480
    9ef8: 9203         	str	r2, [sp, #0xc]
    9efa: 9a06         	ldr	r2, [sp, #0x18]
    9efc: 2a00         	cmp	r2, #0x0
    9efe: d13a         	bne	0x9f76 <_vfprintf_r+0x8ae> @ imm = #0x74
    9f00: ea53 0201    	orrs.w	r2, r3, r1
    9f04: bf14         	ite	ne
    9f06: 2201         	movne	r2, #0x1
    9f08: 2200         	moveq	r2, #0x0
    9f0a: d134         	bne	0x9f76 <_vfprintf_r+0x8ae> @ imm = #0x68
    9f0c: f010 0101    	ands	r1, r0, #0x1
    9f10: 9105         	str	r1, [sp, #0x14]
    9f12: f000 8343    	beq.w	0xa59c <_vfprintf_r+0xed4> @ imm = #0x686
    9f16: 2330         	movs	r3, #0x30
    9f18: f20d 153f    	addw	r5, sp, #0x13f
    9f1c: 9206         	str	r2, [sp, #0x18]
    9f1e: f88d 313f    	strb.w	r3, [sp, #0x13f]
    9f22: 910c         	str	r1, [sp, #0x30]
    9f24: 920a         	str	r2, [sp, #0x28]
    9f26: 9210         	str	r2, [sp, #0x40]
    9f28: e9cd 220d    	strd	r2, r2, [sp, #52]
    9f2c: e557         	b	0x99de <_vfprintf_r+0x316> @ imm = #-0x552
    9f2e: 9903         	ldr	r1, [sp, #0xc]
    9f30: 9a0b         	ldr	r2, [sp, #0x2c]
    9f32: 0688         	lsls	r0, r1, #0x1a
    9f34: 9507         	str	r5, [sp, #0x1c]
    9f36: f102 0304    	add.w	r3, r2, #0x4
    9f3a: f140 834d    	bpl.w	0xa5d8 <_vfprintf_r+0xf10> @ imm = #0x69a
    9f3e: 6812         	ldr	r2, [r2]
    9f40: 9908         	ldr	r1, [sp, #0x20]
    9f42: 6011         	str	r1, [r2]
    9f44: 17c9         	asrs	r1, r1, #0x1f
    9f46: 6051         	str	r1, [r2, #0x4]
    9f48: 930b         	str	r3, [sp, #0x2c]
    9f4a: e40b         	b	0x9764 <_vfprintf_r+0x9c> @ imm = #-0x7ea
    9f4c: 9b03         	ldr	r3, [sp, #0xc]
    9f4e: 9507         	str	r5, [sp, #0x1c]
    9f50: 069d         	lsls	r5, r3, #0x1a
    9f52: f043 0010    	orr	r0, r3, #0x10
    9f56: d4be         	bmi	0x9ed6 <_vfprintf_r+0x80e> @ imm = #-0x84
    9f58: 9b0b         	ldr	r3, [sp, #0x2c]
    9f5a: 1d1a         	adds	r2, r3, #0x4
    9f5c: 9b0b         	ldr	r3, [sp, #0x2c]
    9f5e: 2100         	movs	r1, #0x0
    9f60: 920b         	str	r2, [sp, #0x2c]
    9f62: 2200         	movs	r2, #0x0
    9f64: 681b         	ldr	r3, [r3]
    9f66: f88d 2067    	strb.w	r2, [sp, #0x67]
    9f6a: 9a06         	ldr	r2, [sp, #0x18]
    9f6c: 2a00         	cmp	r2, #0x0
    9f6e: dac1         	bge	0x9ef4 <_vfprintf_r+0x82c> @ imm = #-0x7e
    9f70: f420 6280    	bic	r2, r0, #0x400
    9f74: 9203         	str	r2, [sp, #0xc]
    9f76: ad50         	add	r5, sp, #0x140
    9f78: f003 0207    	and	r2, r3, #0x7
    9f7c: 08db         	lsrs	r3, r3, #0x3
    9f7e: 4628         	mov	r0, r5
    9f80: ea43 7341    	orr.w	r3, r3, r1, lsl #29
    9f84: 3230         	adds	r2, #0x30
    9f86: 08c9         	lsrs	r1, r1, #0x3
    9f88: f805 2d01    	strb	r2, [r5, #-1]!
    9f8c: ea53 0601    	orrs.w	r6, r3, r1
    9f90: d1f2         	bne	0x9f78 <_vfprintf_r+0x8b0> @ imm = #-0x1c
    9f92: 2a30         	cmp	r2, #0x30
    9f94: d003         	beq	0x9f9e <_vfprintf_r+0x8d6> @ imm = #0x6
    9f96: 9b03         	ldr	r3, [sp, #0xc]
    9f98: 07db         	lsls	r3, r3, #0x1f
    9f9a: f100 8430    	bmi.w	0xa7fe <_vfprintf_r+0x1136> @ imm = #0x860
    9f9e: ab50         	add	r3, sp, #0x140
    9fa0: 9a06         	ldr	r2, [sp, #0x18]
    9fa2: 1b5b         	subs	r3, r3, r5
    9fa4: 429a         	cmp	r2, r3
    9fa6: 930c         	str	r3, [sp, #0x30]
    9fa8: bfb8         	it	lt
    9faa: 461a         	movlt	r2, r3
    9fac: 9205         	str	r2, [sp, #0x14]
    9fae: 2300         	movs	r3, #0x0
    9fb0: 930a         	str	r3, [sp, #0x28]
    9fb2: 9310         	str	r3, [sp, #0x40]
    9fb4: e9cd 330d    	strd	r3, r3, [sp, #52]
    9fb8: e511         	b	0x99de <_vfprintf_r+0x316> @ imm = #-0x5de
    9fba: 9b03         	ldr	r3, [sp, #0xc]
    9fbc: 782c         	ldrb	r4, [r5]
    9fbe: f043 0308    	orr	r3, r3, #0x8
    9fc2: 9303         	str	r3, [sp, #0xc]
    9fc4: f7ff bbf6    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x814
    9fc8: 9b03         	ldr	r3, [sp, #0xc]
    9fca: 9507         	str	r5, [sp, #0x1c]
    9fcc: 069d         	lsls	r5, r3, #0x1a
    9fce: f043 0110    	orr	r1, r3, #0x10
    9fd2: f53f ada8    	bmi.w	0x9b26 <_vfprintf_r+0x45e> @ imm = #-0x4b0
    9fd6: 9b0b         	ldr	r3, [sp, #0x2c]
    9fd8: 1d1a         	adds	r2, r3, #0x4
    9fda: 9b0b         	ldr	r3, [sp, #0x2c]
    9fdc: 9103         	str	r1, [sp, #0xc]
    9fde: 681e         	ldr	r6, [r3]
    9fe0: 920b         	str	r2, [sp, #0x2c]
    9fe2: ea4f 78e6    	asr.w	r8, r6, #0x1f
    9fe6: 4643         	mov	r3, r8
    9fe8: 2b00         	cmp	r3, #0x0
    9fea: f6bf adaa    	bge.w	0x9b42 <_vfprintf_r+0x47a> @ imm = #-0x4ac
    9fee: 232d         	movs	r3, #0x2d
    9ff0: 4276         	rsbs	r6, r6, #0
    9ff2: f88d 3067    	strb.w	r3, [sp, #0x67]
    9ff6: eb68 0848    	sbc.w	r8, r8, r8, lsl #1
    9ffa: 9b06         	ldr	r3, [sp, #0x18]
    9ffc: 2b00         	cmp	r3, #0x0
    9ffe: f6ff aef1    	blt.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x21e
    a002: 9b03         	ldr	r3, [sp, #0xc]
    a004: f023 0380    	bic	r3, r3, #0x80
    a008: 9303         	str	r3, [sp, #0xc]
    a00a: e6eb         	b	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x22a
    a00c: 782c         	ldrb	r4, [r5]
    a00e: 9b03         	ldr	r3, [sp, #0xc]
    a010: 2c6c         	cmp	r4, #0x6c
    a012: f000 8461    	beq.w	0xa8d8 <_vfprintf_r+0x1210> @ imm = #0x8c2
    a016: f043 0310    	orr	r3, r3, #0x10
    a01a: 9303         	str	r3, [sp, #0xc]
    a01c: f7ff bbca    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x86c
    a020: 782c         	ldrb	r4, [r5]
    a022: 9b03         	ldr	r3, [sp, #0xc]
    a024: 2c68         	cmp	r4, #0x68
    a026: f000 846a    	beq.w	0xa8fe <_vfprintf_r+0x1236> @ imm = #0x8d4
    a02a: f043 0340    	orr	r3, r3, #0x40
    a02e: 9303         	str	r3, [sp, #0xc]
    a030: f7ff bbc0    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x880
    a034: 9b03         	ldr	r3, [sp, #0xc]
    a036: 9507         	str	r5, [sp, #0x1c]
    a038: f043 0110    	orr	r1, r3, #0x10
    a03c: 069b         	lsls	r3, r3, #0x1a
    a03e: f53f aec0    	bmi.w	0x9dc2 <_vfprintf_r+0x6fa> @ imm = #-0x280
    a042: 9b0b         	ldr	r3, [sp, #0x2c]
    a044: 1d1a         	adds	r2, r3, #0x4
    a046: f04f 0800    	mov.w	r8, #0x0
    a04a: 9b0b         	ldr	r3, [sp, #0x2c]
    a04c: 9806         	ldr	r0, [sp, #0x18]
    a04e: 681b         	ldr	r3, [r3]
    a050: 4540         	cmp	r0, r8
    a052: f88d 8067    	strb.w	r8, [sp, #0x67]
    a056: 461e         	mov	r6, r3
    a058: f2c1 808c    	blt.w	0xb174 <_vfprintf_r+0x1aac> @ imm = #0x1118
    a05c: f021 0180    	bic	r1, r1, #0x80
    a060: 920b         	str	r2, [sp, #0x2c]
    a062: 9103         	str	r1, [sp, #0xc]
    a064: 2b00         	cmp	r3, #0x0
    a066: f47f aebd    	bne.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x286
    a06a: 2800         	cmp	r0, #0x0
    a06c: f43f af22    	beq.w	0x9eb4 <_vfprintf_r+0x7ec> @ imm = #-0x1bc
    a070: e6b8         	b	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x290
    a072: 4658         	mov	r0, r11
    a074: f002 faa0    	bl	0xc5b8 <_localeconv_r>  @ imm = #0x2540
    a078: 6843         	ldr	r3, [r0, #0x4]
    a07a: 4618         	mov	r0, r3
    a07c: 9315         	str	r3, [sp, #0x54]
    a07e: f7fe ffcb    	bl	0x9018 <strlen>         @ imm = #-0x106a
    a082: 9014         	str	r0, [sp, #0x50]
    a084: 4606         	mov	r6, r0
    a086: 4658         	mov	r0, r11
    a088: f002 fa96    	bl	0xc5b8 <_localeconv_r>  @ imm = #0x252c
    a08c: 6883         	ldr	r3, [r0, #0x8]
    a08e: 782c         	ldrb	r4, [r5]
    a090: 9316         	str	r3, [sp, #0x58]
    a092: 2e00         	cmp	r6, #0x0
    a094: f43f ab8e    	beq.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x8e4
    a098: 2b00         	cmp	r3, #0x0
    a09a: f43f ab8b    	beq.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x8ea
    a09e: 781b         	ldrb	r3, [r3]
    a0a0: 2b00         	cmp	r3, #0x0
    a0a2: f43f ab87    	beq.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x8f2
    a0a6: 9b03         	ldr	r3, [sp, #0xc]
    a0a8: f443 6380    	orr	r3, r3, #0x400
    a0ac: 9303         	str	r3, [sp, #0xc]
    a0ae: f7ff bb81    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x8fe
    a0b2: 9b03         	ldr	r3, [sp, #0xc]
    a0b4: 782c         	ldrb	r4, [r5]
    a0b6: f043 0301    	orr	r3, r3, #0x1
    a0ba: 9303         	str	r3, [sp, #0xc]
    a0bc: f7ff bb7a    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x90c
    a0c0: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    a0c4: 782c         	ldrb	r4, [r5]
    a0c6: 2b00         	cmp	r3, #0x0
    a0c8: f47f ab74    	bne.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x918
    a0cc: 2320         	movs	r3, #0x20
    a0ce: f88d 3067    	strb.w	r3, [sp, #0x67]
    a0d2: f7ff bb6f    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x922
    a0d6: 9b03         	ldr	r3, [sp, #0xc]
    a0d8: 782c         	ldrb	r4, [r5]
    a0da: f043 0380    	orr	r3, r3, #0x80
    a0de: 9303         	str	r3, [sp, #0xc]
    a0e0: f7ff bb68    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x930
    a0e4: 4629         	mov	r1, r5
    a0e6: f811 4b01    	ldrb	r4, [r1], #1
    a0ea: 2c2a         	cmp	r4, #0x2a
    a0ec: f001 8331    	beq.w	0xb752 <_vfprintf_r+0x208a> @ imm = #0x1662
    a0f0: f1a4 0330    	sub.w	r3, r4, #0x30
    a0f4: 2b09         	cmp	r3, #0x9
    a0f6: f201 8130    	bhi.w	0xb35a <_vfprintf_r+0x1c92> @ imm = #0x1260
    a0fa: 2200         	movs	r2, #0x0
    a0fc: eb02 0282    	add.w	r2, r2, r2, lsl #2
    a100: f811 4b01    	ldrb	r4, [r1], #1
    a104: eb03 0242    	add.w	r2, r3, r2, lsl #1
    a108: f1a4 0330    	sub.w	r3, r4, #0x30
    a10c: 2b09         	cmp	r3, #0x9
    a10e: d9f5         	bls	0xa0fc <_vfprintf_r+0xa34> @ imm = #-0x16
    a110: ea42 73e2    	orr.w	r3, r2, r2, asr #31
    a114: 460d         	mov	r5, r1
    a116: 9306         	str	r3, [sp, #0x18]
    a118: f7ff bb4d    	b.w	0x97b6 <_vfprintf_r+0xee> @ imm = #-0x966
    a11c: 9b09         	ldr	r3, [sp, #0x24]
    a11e: 9905         	ldr	r1, [sp, #0x14]
    a120: 1a5e         	subs	r6, r3, r1
    a122: 2e00         	cmp	r6, #0x0
    a124: f77f ac8b    	ble.w	0x9a3e <_vfprintf_r+0x376> @ imm = #-0x6ea
    a128: 2e10         	cmp	r6, #0x10
    a12a: 9b25         	ldr	r3, [sp, #0x94]
    a12c: f8df 8364    	ldr.w	r8, [pc, #0x364]        @ 0xa494 <_vfprintf_r+0xdcc>
    a130: dd27         	ble	0xa182 <_vfprintf_r+0xaba> @ imm = #0x4e
    a132: 4619         	mov	r1, r3
    a134: 4643         	mov	r3, r8
    a136: f04f 0a10    	mov.w	r10, #0x10
    a13a: 46a8         	mov	r8, r5
    a13c: 4625         	mov	r5, r4
    a13e: 461c         	mov	r4, r3
    a140: e002         	b	0xa148 <_vfprintf_r+0xa80> @ imm = #0x4
    a142: 3e10         	subs	r6, #0x10
    a144: 2e10         	cmp	r6, #0x10
    a146: dd17         	ble	0xa178 <_vfprintf_r+0xab0> @ imm = #0x2e
    a148: 3101         	adds	r1, #0x1
    a14a: 3210         	adds	r2, #0x10
    a14c: 2907         	cmp	r1, #0x7
    a14e: e9c7 4a00    	strd	r4, r10, [r7]
    a152: e9cd 1225    	strd	r1, r2, [sp, #148]
    a156: f107 0708    	add.w	r7, r7, #0x8
    a15a: ddf2         	ble	0xa142 <_vfprintf_r+0xa7a> @ imm = #-0x1c
    a15c: aa24         	add	r2, sp, #0x90
    a15e: 9904         	ldr	r1, [sp, #0x10]
    a160: 4658         	mov	r0, r11
    a162: f001 ff1f    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1e3e
    a166: 2800         	cmp	r0, #0x0
    a168: f47f abf6    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x814
    a16c: 3e10         	subs	r6, #0x10
    a16e: af27         	add	r7, sp, #0x9c
    a170: 2e10         	cmp	r6, #0x10
    a172: e9dd 1225    	ldrd	r1, r2, [sp, #148]
    a176: dce7         	bgt	0xa148 <_vfprintf_r+0xa80> @ imm = #-0x32
    a178: 460b         	mov	r3, r1
    a17a: 4621         	mov	r1, r4
    a17c: 462c         	mov	r4, r5
    a17e: 4645         	mov	r5, r8
    a180: 4688         	mov	r8, r1
    a182: 3301         	adds	r3, #0x1
    a184: 4432         	add	r2, r6
    a186: f8c7 8000    	str.w	r8, [r7]
    a18a: 2b07         	cmp	r3, #0x7
    a18c: 607e         	str	r6, [r7, #0x4]
    a18e: e9cd 3225    	strd	r3, r2, [sp, #148]
    a192: f300 8395    	bgt.w	0xa8c0 <_vfprintf_r+0x11f8> @ imm = #0x72a
    a196: 3708         	adds	r7, #0x8
    a198: e451         	b	0x9a3e <_vfprintf_r+0x376> @ imm = #-0x75e
    a19a: 9e09         	ldr	r6, [sp, #0x24]
    a19c: 9b05         	ldr	r3, [sp, #0x14]
    a19e: 1af6         	subs	r6, r6, r3
    a1a0: 2e00         	cmp	r6, #0x0
    a1a2: f300 80db    	bgt.w	0xa35c <_vfprintf_r+0xc94> @ imm = #0x1b6
    a1a6: f8cd a040    	str.w	r10, [sp, #0x40]
    a1aa: e9cd aa0d    	strd	r10, r10, [sp, #52]
    a1ae: 2800         	cmp	r0, #0x0
    a1b0: f43f ac33    	beq.w	0x9a1a <_vfprintf_r+0x352> @ imm = #-0x79a
    a1b4: 2602         	movs	r6, #0x2
    a1b6: e41f         	b	0x99f8 <_vfprintf_r+0x330> @ imm = #-0x7c2
    a1b8: 991b         	ldr	r1, [sp, #0x6c]
    a1ba: 2900         	cmp	r1, #0x0
    a1bc: f300 816e    	bgt.w	0xa49c <_vfprintf_r+0xdd4> @ imm = #0x2dc
    a1c0: 9b25         	ldr	r3, [sp, #0x94]
    a1c2: 3201         	adds	r2, #0x1
    a1c4: 48b2         	ldr	r0, [pc, #0x2c8]        @ 0xa490 <_vfprintf_r+0xdc8>
    a1c6: 3301         	adds	r3, #0x1
    a1c8: 9226         	str	r2, [sp, #0x98]
    a1ca: 6038         	str	r0, [r7]
    a1cc: 2001         	movs	r0, #0x1
    a1ce: 2b07         	cmp	r3, #0x7
    a1d0: 9325         	str	r3, [sp, #0x94]
    a1d2: 6078         	str	r0, [r7, #0x4]
    a1d4: f300 87f4    	bgt.w	0xb1c0 <_vfprintf_r+0x1af8> @ imm = #0xfe8
    a1d8: 3708         	adds	r7, #0x8
    a1da: 9b0f         	ldr	r3, [sp, #0x3c]
    a1dc: 430b         	orrs	r3, r1
    a1de: f001 8025    	beq.w	0xb22c <_vfprintf_r+0x1b64> @ imm = #0x104a
    a1e2: 9b11         	ldr	r3, [sp, #0x44]
    a1e4: 9812         	ldr	r0, [sp, #0x48]
    a1e6: 441a         	add	r2, r3
    a1e8: e9c7 0300    	strd	r0, r3, [r7]
    a1ec: 9b25         	ldr	r3, [sp, #0x94]
    a1ee: 9226         	str	r2, [sp, #0x98]
    a1f0: 3301         	adds	r3, #0x1
    a1f2: 2b07         	cmp	r3, #0x7
    a1f4: 9325         	str	r3, [sp, #0x94]
    a1f6: f300 87f0    	bgt.w	0xb1da <_vfprintf_r+0x1b12> @ imm = #0xfe0
    a1fa: 3708         	adds	r7, #0x8
    a1fc: 2900         	cmp	r1, #0x0
    a1fe: f2c1 80bc    	blt.w	0xb37a <_vfprintf_r+0x1cb2> @ imm = #0x1178
    a202: 990f         	ldr	r1, [sp, #0x3c]
    a204: 3301         	adds	r3, #0x1
    a206: 603d         	str	r5, [r7]
    a208: 440a         	add	r2, r1
    a20a: 2b07         	cmp	r3, #0x7
    a20c: 6079         	str	r1, [r7, #0x4]
    a20e: e9cd 3225    	strd	r3, r2, [sp, #148]
    a212: f77f ac29    	ble.w	0x9a68 <_vfprintf_r+0x3a0> @ imm = #-0x7ae
    a216: aa24         	add	r2, sp, #0x90
    a218: 9904         	ldr	r1, [sp, #0x10]
    a21a: 4658         	mov	r0, r11
    a21c: f001 fec2    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1d84
    a220: 2800         	cmp	r0, #0x0
    a222: f47f ab99    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x8ce
    a226: 9a26         	ldr	r2, [sp, #0x98]
    a228: af27         	add	r7, sp, #0x9c
    a22a: e41e         	b	0x9a6a <_vfprintf_r+0x3a2> @ imm = #-0x7c4
    a22c: 980f         	ldr	r0, [sp, #0x3c]
    a22e: 3201         	adds	r2, #0x1
    a230: 9b25         	ldr	r3, [sp, #0x94]
    a232: f107 0108    	add.w	r1, r7, #0x8
    a236: 2801         	cmp	r0, #0x1
    a238: f103 0301    	add.w	r3, r3, #0x1
    a23c: f340 80db    	ble.w	0xa3f6 <_vfprintf_r+0xd2e> @ imm = #0x1b6
    a240: 2001         	movs	r0, #0x1
    a242: 2b07         	cmp	r3, #0x7
    a244: 603d         	str	r5, [r7]
    a246: 6078         	str	r0, [r7, #0x4]
    a248: e9cd 3225    	strd	r3, r2, [sp, #148]
    a24c: f300 83ab    	bgt.w	0xa9a6 <_vfprintf_r+0x12de> @ imm = #0x756
    a250: 9811         	ldr	r0, [sp, #0x44]
    a252: 3301         	adds	r3, #0x1
    a254: 9c12         	ldr	r4, [sp, #0x48]
    a256: 4402         	add	r2, r0
    a258: 2b07         	cmp	r3, #0x7
    a25a: e9c1 4000    	strd	r4, r0, [r1]
    a25e: e9cd 3225    	strd	r3, r2, [sp, #148]
    a262: f300 8394    	bgt.w	0xa98e <_vfprintf_r+0x12c6> @ imm = #0x728
    a266: 3108         	adds	r1, #0x8
    a268: eeb5 8b40    	<unknown>
    a26c: 980f         	ldr	r0, [sp, #0x3c]
    a26e: 1e46         	subs	r6, r0, #0x1
    a270: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    a274: f000 80d9    	beq.w	0xa42a <_vfprintf_r+0xd62> @ imm = #0x1b2
    a278: 3301         	adds	r3, #0x1
    a27a: 3501         	adds	r5, #0x1
    a27c: 4432         	add	r2, r6
    a27e: 604e         	str	r6, [r1, #0x4]
    a280: 2b07         	cmp	r3, #0x7
    a282: 600d         	str	r5, [r1]
    a284: e9cd 3225    	strd	r3, r2, [sp, #148]
    a288: f300 80c1    	bgt.w	0xa40e <_vfprintf_r+0xd46> @ imm = #0x182
    a28c: 3108         	adds	r1, #0x8
    a28e: 9813         	ldr	r0, [sp, #0x4c]
    a290: 3301         	adds	r3, #0x1
    a292: 4402         	add	r2, r0
    a294: 6048         	str	r0, [r1, #0x4]
    a296: 2b07         	cmp	r3, #0x7
    a298: a81e         	add	r0, sp, #0x78
    a29a: e9cd 3225    	strd	r3, r2, [sp, #148]
    a29e: 6008         	str	r0, [r1]
    a2a0: dcb9         	bgt	0xa216 <_vfprintf_r+0xb4e> @ imm = #-0x8e
    a2a2: f101 0708    	add.w	r7, r1, #0x8
    a2a6: f7ff bbe0    	b.w	0x9a6a <_vfprintf_r+0x3a2> @ imm = #-0x840
    a2aa: aa24         	add	r2, sp, #0x90
    a2ac: 9904         	ldr	r1, [sp, #0x10]
    a2ae: 4658         	mov	r0, r11
    a2b0: f001 fe78    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1cf0
    a2b4: 2800         	cmp	r0, #0x0
    a2b6: f47f ab4f    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x962
    a2ba: 9a26         	ldr	r2, [sp, #0x98]
    a2bc: af27         	add	r7, sp, #0x9c
    a2be: f7ff bba9    	b.w	0x9a14 <_vfprintf_r+0x34c> @ imm = #-0x8ae
    a2c2: aa24         	add	r2, sp, #0x90
    a2c4: 9904         	ldr	r1, [sp, #0x10]
    a2c6: 4658         	mov	r0, r11
    a2c8: f001 fe6c    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1cd8
    a2cc: 2800         	cmp	r0, #0x0
    a2ce: f47f ab43    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x97a
    a2d2: 9a26         	ldr	r2, [sp, #0x98]
    a2d4: af27         	add	r7, sp, #0x9c
    a2d6: f7ff bbae    	b.w	0x9a36 <_vfprintf_r+0x36e> @ imm = #-0x8a4
    a2da: 2c10         	cmp	r4, #0x10
    a2dc: 9b25         	ldr	r3, [sp, #0x94]
    a2de: f8df 81b8    	ldr.w	r8, [pc, #0x1b8]        @ 0xa498 <_vfprintf_r+0xdd0>
    a2e2: dd20         	ble	0xa326 <_vfprintf_r+0xc5e> @ imm = #0x40
    a2e4: 4646         	mov	r6, r8
    a2e6: 2510         	movs	r5, #0x10
    a2e8: f8dd 8010    	ldr.w	r8, [sp, #0x10]
    a2ec: e002         	b	0xa2f4 <_vfprintf_r+0xc2c> @ imm = #0x4
    a2ee: 3c10         	subs	r4, #0x10
    a2f0: 2c10         	cmp	r4, #0x10
    a2f2: dd17         	ble	0xa324 <_vfprintf_r+0xc5c> @ imm = #0x2e
    a2f4: 3301         	adds	r3, #0x1
    a2f6: 3210         	adds	r2, #0x10
    a2f8: 2b07         	cmp	r3, #0x7
    a2fa: e9c7 6500    	strd	r6, r5, [r7]
    a2fe: e9cd 3225    	strd	r3, r2, [sp, #148]
    a302: f107 0708    	add.w	r7, r7, #0x8
    a306: ddf2         	ble	0xa2ee <_vfprintf_r+0xc26> @ imm = #-0x1c
    a308: aa24         	add	r2, sp, #0x90
    a30a: 4641         	mov	r1, r8
    a30c: 4658         	mov	r0, r11
    a30e: f001 fe49    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1c92
    a312: 2800         	cmp	r0, #0x0
    a314: f47f ab20    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x9c0
    a318: 3c10         	subs	r4, #0x10
    a31a: af27         	add	r7, sp, #0x9c
    a31c: 2c10         	cmp	r4, #0x10
    a31e: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    a322: dce7         	bgt	0xa2f4 <_vfprintf_r+0xc2c> @ imm = #-0x32
    a324: 46b0         	mov	r8, r6
    a326: 3301         	adds	r3, #0x1
    a328: 4422         	add	r2, r4
    a32a: 2b07         	cmp	r3, #0x7
    a32c: e9c7 8400    	strd	r8, r4, [r7]
    a330: e9cd 3225    	strd	r3, r2, [sp, #148]
    a334: f77f aba2    	ble.w	0x9a7c <_vfprintf_r+0x3b4> @ imm = #-0x8bc
    a338: aa24         	add	r2, sp, #0x90
    a33a: 9904         	ldr	r1, [sp, #0x10]
    a33c: 4658         	mov	r0, r11
    a33e: f001 fe31    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1c62
    a342: 2800         	cmp	r0, #0x0
    a344: f47f ab08    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x9f0
    a348: 9a26         	ldr	r2, [sp, #0x98]
    a34a: f7ff bb97    	b.w	0x9a7c <_vfprintf_r+0x3b4> @ imm = #-0x8d2
    a34e: 2300         	movs	r3, #0x0
    a350: 2602         	movs	r6, #0x2
    a352: 9310         	str	r3, [sp, #0x40]
    a354: e9cd 330d    	strd	r3, r3, [sp, #52]
    a358: f7ff bb4e    	b.w	0x99f8 <_vfprintf_r+0x330> @ imm = #-0x964
    a35c: f8cd a040    	str.w	r10, [sp, #0x40]
    a360: e9cd aa0d    	strd	r10, r10, [sp, #52]
    a364: f04f 0a02    	mov.w	r10, #0x2
    a368: 2e10         	cmp	r6, #0x10
    a36a: 4672         	mov	r2, lr
    a36c: f8df 8128    	ldr.w	r8, [pc, #0x128]        @ 0xa498 <_vfprintf_r+0xdd0>
    a370: dd28         	ble	0xa3c4 <_vfprintf_r+0xcfc> @ imm = #0x50
    a372: 46bc         	mov	r12, r7
    a374: 2310         	movs	r3, #0x10
    a376: 462f         	mov	r7, r5
    a378: 4625         	mov	r5, r4
    a37a: 4644         	mov	r4, r8
    a37c: f8dd 8010    	ldr.w	r8, [sp, #0x10]
    a380: e002         	b	0xa388 <_vfprintf_r+0xcc0> @ imm = #0x4
    a382: 3e10         	subs	r6, #0x10
    a384: 2e10         	cmp	r6, #0x10
    a386: dd19         	ble	0xa3bc <_vfprintf_r+0xcf4> @ imm = #0x32
    a388: 3101         	adds	r1, #0x1
    a38a: 3210         	adds	r2, #0x10
    a38c: 2907         	cmp	r1, #0x7
    a38e: e9cc 4300    	strd	r4, r3, [r12]
    a392: e9cd 1225    	strd	r1, r2, [sp, #148]
    a396: f10c 0c08    	add.w	r12, r12, #0x8
    a39a: ddf2         	ble	0xa382 <_vfprintf_r+0xcba> @ imm = #-0x1c
    a39c: aa24         	add	r2, sp, #0x90
    a39e: 4641         	mov	r1, r8
    a3a0: 4658         	mov	r0, r11
    a3a2: f001 fdff    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1bfe
    a3a6: f10d 0c9c    	add.w	r12, sp, #0x9c
    a3aa: 2800         	cmp	r0, #0x0
    a3ac: f47f aad4    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0xa58
    a3b0: 3e10         	subs	r6, #0x10
    a3b2: 2310         	movs	r3, #0x10
    a3b4: 2e10         	cmp	r6, #0x10
    a3b6: e9dd 1225    	ldrd	r1, r2, [sp, #148]
    a3ba: dce5         	bgt	0xa388 <_vfprintf_r+0xcc0> @ imm = #-0x36
    a3bc: 46a0         	mov	r8, r4
    a3be: 462c         	mov	r4, r5
    a3c0: 463d         	mov	r5, r7
    a3c2: 4667         	mov	r7, r12
    a3c4: f101 0c01    	add.w	r12, r1, #0x1
    a3c8: 4432         	add	r2, r6
    a3ca: f8c7 8000    	str.w	r8, [r7]
    a3ce: f1bc 0f07    	cmp.w	r12, #0x7
    a3d2: 607e         	str	r6, [r7, #0x4]
    a3d4: e9cd c225    	strd	r12, r2, [sp, #148]
    a3d8: f300 82fc    	bgt.w	0xa9d4 <_vfprintf_r+0x130c> @ imm = #0x5f8
    a3dc: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    a3e0: 3708         	adds	r7, #0x8
    a3e2: 2b00         	cmp	r3, #0x0
    a3e4: f040 80f3    	bne.w	0xa5ce <_vfprintf_r+0xf06> @ imm = #0x1e6
    a3e8: f1ba 0f00    	cmp.w	r10, #0x0
    a3ec: f43f ab27    	beq.w	0x9a3e <_vfprintf_r+0x376> @ imm = #-0x9b2
    a3f0: 469a         	mov	r10, r3
    a3f2: f7ff bb12    	b.w	0x9a1a <_vfprintf_r+0x352> @ imm = #-0x9dc
    a3f6: 9803         	ldr	r0, [sp, #0xc]
    a3f8: 07c6         	lsls	r6, r0, #0x1f
    a3fa: f53f af21    	bmi.w	0xa240 <_vfprintf_r+0xb78> @ imm = #-0x1be
    a3fe: 2001         	movs	r0, #0x1
    a400: 2b07         	cmp	r3, #0x7
    a402: 603d         	str	r5, [r7]
    a404: 6078         	str	r0, [r7, #0x4]
    a406: e9cd 3225    	strd	r3, r2, [sp, #148]
    a40a: f77f af40    	ble.w	0xa28e <_vfprintf_r+0xbc6> @ imm = #-0x180
    a40e: aa24         	add	r2, sp, #0x90
    a410: 9904         	ldr	r1, [sp, #0x10]
    a412: 4658         	mov	r0, r11
    a414: f001 fdc6    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1b8c
    a418: 2800         	cmp	r0, #0x0
    a41a: f47f aa9d    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0xac6
    a41e: a927         	add	r1, sp, #0x9c
    a420: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    a424: e733         	b	0xa28e <_vfprintf_r+0xbc6> @ imm = #-0x19a
    a426: 9925         	ldr	r1, [sp, #0x94]
    a428: e79e         	b	0xa368 <_vfprintf_r+0xca0> @ imm = #-0xc4
    a42a: 980f         	ldr	r0, [sp, #0x3c]
    a42c: 2801         	cmp	r0, #0x1
    a42e: f77f af2e    	ble.w	0xa28e <_vfprintf_r+0xbc6> @ imm = #-0x1a4
    a432: 2811         	cmp	r0, #0x11
    a434: f8df 805c    	ldr.w	r8, [pc, #0x5c]         @ 0xa494 <_vfprintf_r+0xdcc>
    a438: f340 83fa    	ble.w	0xac30 <_vfprintf_r+0x1568> @ imm = #0x7f4
    a43c: 2410         	movs	r4, #0x10
    a43e: 9d04         	ldr	r5, [sp, #0x10]
    a440: 4647         	mov	r7, r8
    a442: e003         	b	0xa44c <_vfprintf_r+0xd84> @ imm = #0x6
    a444: 3e10         	subs	r6, #0x10
    a446: 2e10         	cmp	r6, #0x10
    a448: f340 83f1    	ble.w	0xac2e <_vfprintf_r+0x1566> @ imm = #0x7e2
    a44c: 3301         	adds	r3, #0x1
    a44e: 3210         	adds	r2, #0x10
    a450: 2b07         	cmp	r3, #0x7
    a452: e9c1 7400    	strd	r7, r4, [r1]
    a456: e9cd 3225    	strd	r3, r2, [sp, #148]
    a45a: f101 0108    	add.w	r1, r1, #0x8
    a45e: ddf1         	ble	0xa444 <_vfprintf_r+0xd7c> @ imm = #-0x1e
    a460: aa24         	add	r2, sp, #0x90
    a462: 4629         	mov	r1, r5
    a464: 4658         	mov	r0, r11
    a466: f001 fd9d    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1b3a
    a46a: 2800         	cmp	r0, #0x0
    a46c: f47f aa74    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0xb18
    a470: a927         	add	r1, sp, #0x9c
    a472: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    a476: e7e5         	b	0xa444 <_vfprintf_r+0xd7c> @ imm = #-0x36
    a478: aa24         	add	r2, sp, #0x90
    a47a: 9904         	ldr	r1, [sp, #0x10]
    a47c: 4658         	mov	r0, r11
    a47e: f001 fd91    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1b22
    a482: 2800         	cmp	r0, #0x0
    a484: f47f aa68    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0xb30
    a488: 9a26         	ldr	r2, [sp, #0x98]
    a48a: af27         	add	r7, sp, #0x9c
    a48c: f7ff badd    	b.w	0x9a4a <_vfprintf_r+0x382> @ imm = #-0xa46
    a490: 70 1d 21 80  	.word	0x80211d70
    a494: e8 1e 21 80  	.word	0x80211ee8
    a498: f8 1e 21 80  	.word	0x80211ef8
    a49c: 9e0d         	ldr	r6, [sp, #0x34]
    a49e: 9b0f         	ldr	r3, [sp, #0x3c]
    a4a0: 429e         	cmp	r6, r3
    a4a2: bfa8         	it	ge
    a4a4: 461e         	movge	r6, r3
    a4a6: 2e00         	cmp	r6, #0x0
    a4a8: dd0a         	ble	0xa4c0 <_vfprintf_r+0xdf8> @ imm = #0x14
    a4aa: 9b25         	ldr	r3, [sp, #0x94]
    a4ac: 4432         	add	r2, r6
    a4ae: 3301         	adds	r3, #0x1
    a4b0: 9226         	str	r2, [sp, #0x98]
    a4b2: 2b07         	cmp	r3, #0x7
    a4b4: 9325         	str	r3, [sp, #0x94]
    a4b6: e9c7 5600    	strd	r5, r6, [r7]
    a4ba: f300 869c    	bgt.w	0xb1f6 <_vfprintf_r+0x1b2e> @ imm = #0xd38
    a4be: 3708         	adds	r7, #0x8
    a4c0: 9c0d         	ldr	r4, [sp, #0x34]
    a4c2: 2e00         	cmp	r6, #0x0
    a4c4: bfa8         	it	ge
    a4c6: 1ba4         	subge	r4, r4, r6
    a4c8: 2c00         	cmp	r4, #0x0
    a4ca: f300 83c7    	bgt.w	0xac5c <_vfprintf_r+0x1594> @ imm = #0x78e
    a4ce: 9b0d         	ldr	r3, [sp, #0x34]
    a4d0: 442b         	add	r3, r5
    a4d2: 469a         	mov	r10, r3
    a4d4: 9b03         	ldr	r3, [sp, #0xc]
    a4d6: 0558         	lsls	r0, r3, #0x15
    a4d8: f100 85b6    	bmi.w	0xb048 <_vfprintf_r+0x1980> @ imm = #0xb6c
    a4dc: 9c1b         	ldr	r4, [sp, #0x6c]
    a4de: 9b0f         	ldr	r3, [sp, #0x3c]
    a4e0: 429c         	cmp	r4, r3
    a4e2: db03         	blt	0xa4ec <_vfprintf_r+0xe24> @ imm = #0x6
    a4e4: 9903         	ldr	r1, [sp, #0xc]
    a4e6: 07c9         	lsls	r1, r1, #0x1f
    a4e8: f140 84a6    	bpl.w	0xae38 <_vfprintf_r+0x1770> @ imm = #0x94c
    a4ec: 9b11         	ldr	r3, [sp, #0x44]
    a4ee: 9912         	ldr	r1, [sp, #0x48]
    a4f0: 441a         	add	r2, r3
    a4f2: e9c7 1300    	strd	r1, r3, [r7]
    a4f6: 9b25         	ldr	r3, [sp, #0x94]
    a4f8: 9226         	str	r2, [sp, #0x98]
    a4fa: 3301         	adds	r3, #0x1
    a4fc: 2b07         	cmp	r3, #0x7
    a4fe: 9325         	str	r3, [sp, #0x94]
    a500: f300 86f0    	bgt.w	0xb2e4 <_vfprintf_r+0x1c1c> @ imm = #0xde0
    a504: 3708         	adds	r7, #0x8
    a506: 9b0f         	ldr	r3, [sp, #0x3c]
    a508: 441d         	add	r5, r3
    a50a: 1b1c         	subs	r4, r3, r4
    a50c: eba5 050a    	sub.w	r5, r5, r10
    a510: 42a5         	cmp	r5, r4
    a512: bfa8         	it	ge
    a514: 4625         	movge	r5, r4
    a516: 2d00         	cmp	r5, #0x0
    a518: dd0b         	ble	0xa532 <_vfprintf_r+0xe6a> @ imm = #0x16
    a51a: 9b25         	ldr	r3, [sp, #0x94]
    a51c: 442a         	add	r2, r5
    a51e: f8c7 a000    	str.w	r10, [r7]
    a522: 3301         	adds	r3, #0x1
    a524: 607d         	str	r5, [r7, #0x4]
    a526: 9226         	str	r2, [sp, #0x98]
    a528: 2b07         	cmp	r3, #0x7
    a52a: 9325         	str	r3, [sp, #0x94]
    a52c: f300 8700    	bgt.w	0xb330 <_vfprintf_r+0x1c68> @ imm = #0xe00
    a530: 3708         	adds	r7, #0x8
    a532: 2d00         	cmp	r5, #0x0
    a534: bfa8         	it	ge
    a536: 1b64         	subge	r4, r4, r5
    a538: 2c00         	cmp	r4, #0x0
    a53a: f77f aa96    	ble.w	0x9a6a <_vfprintf_r+0x3a2> @ imm = #-0xad4
    a53e: 2c10         	cmp	r4, #0x10
    a540: 9b25         	ldr	r3, [sp, #0x94]
    a542: f8df 83f8    	ldr.w	r8, [pc, #0x3f8]        @ 0xa93c <_vfprintf_r+0x1274>
    a546: f340 82e5    	ble.w	0xab14 <_vfprintf_r+0x144c> @ imm = #0x5ca
    a54a: 4646         	mov	r6, r8
    a54c: 2510         	movs	r5, #0x10
    a54e: f8dd 8010    	ldr.w	r8, [sp, #0x10]
    a552: e003         	b	0xa55c <_vfprintf_r+0xe94> @ imm = #0x6
    a554: 3c10         	subs	r4, #0x10
    a556: 2c10         	cmp	r4, #0x10
    a558: f340 82db    	ble.w	0xab12 <_vfprintf_r+0x144a> @ imm = #0x5b6
    a55c: 3301         	adds	r3, #0x1
    a55e: 3210         	adds	r2, #0x10
    a560: 2b07         	cmp	r3, #0x7
    a562: e9c7 6500    	strd	r6, r5, [r7]
    a566: e9cd 3225    	strd	r3, r2, [sp, #148]
    a56a: f107 0708    	add.w	r7, r7, #0x8
    a56e: ddf1         	ble	0xa554 <_vfprintf_r+0xe8c> @ imm = #-0x1e
    a570: aa24         	add	r2, sp, #0x90
    a572: 4641         	mov	r1, r8
    a574: 4658         	mov	r0, r11
    a576: f001 fd15    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1a2a
    a57a: 2800         	cmp	r0, #0x0
    a57c: f47f a9ec    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0xc28
    a580: af27         	add	r7, sp, #0x9c
    a582: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    a586: e7e5         	b	0xa554 <_vfprintf_r+0xe8c> @ imm = #-0x36
    a588: 0492         	lsls	r2, r2, #0x12
    a58a: f57f a8d0    	bpl.w	0x972e <_vfprintf_r+0x66> @ imm = #-0xe60
    a58e: e40f         	b	0x9db0 <_vfprintf_r+0x6e8> @ imm = #-0x7e2
    a590: 9b03         	ldr	r3, [sp, #0xc]
    a592: 07dd         	lsls	r5, r3, #0x1f
    a594: f57f aa69    	bpl.w	0x9a6a <_vfprintf_r+0x3a2> @ imm = #-0xb2e
    a598: f7ff bb63    	b.w	0x9c62 <_vfprintf_r+0x59a> @ imm = #-0x93a
    a59c: 9a05         	ldr	r2, [sp, #0x14]
    a59e: ad50         	add	r5, sp, #0x140
    a5a0: 9206         	str	r2, [sp, #0x18]
    a5a2: 920c         	str	r2, [sp, #0x30]
    a5a4: 9210         	str	r2, [sp, #0x40]
    a5a6: 920a         	str	r2, [sp, #0x28]
    a5a8: e9cd 220d    	strd	r2, r2, [sp, #52]
    a5ac: f7ff ba17    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0xbd2
    a5b0: 782c         	ldrb	r4, [r5]
    a5b2: 930b         	str	r3, [sp, #0x2c]
    a5b4: f7ff b8fe    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0xe04
    a5b8: f021 0280    	bic	r2, r1, #0x80
    a5bc: 9203         	str	r2, [sp, #0xc]
    a5be: 2b00         	cmp	r3, #0x0
    a5c0: f47f ac10    	bne.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x7e0
    a5c4: ea56 0308    	orrs.w	r3, r6, r8
    a5c8: f43f ac74    	beq.w	0x9eb4 <_vfprintf_r+0x7ec> @ imm = #-0x718
    a5cc: e40a         	b	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x7ec
    a5ce: 4656         	mov	r6, r10
    a5d0: f04f 0a00    	mov.w	r10, #0x0
    a5d4: f7ff ba10    	b.w	0x99f8 <_vfprintf_r+0x330> @ imm = #-0xbe0
    a5d8: 9a03         	ldr	r2, [sp, #0xc]
    a5da: 06d1         	lsls	r1, r2, #0x1b
    a5dc: f100 8321    	bmi.w	0xac22 <_vfprintf_r+0x155a> @ imm = #0x642
    a5e0: 9a03         	ldr	r2, [sp, #0xc]
    a5e2: 0652         	lsls	r2, r2, #0x19
    a5e4: f100 8444    	bmi.w	0xae70 <_vfprintf_r+0x17a8> @ imm = #0x888
    a5e8: 9a03         	ldr	r2, [sp, #0xc]
    a5ea: 0596         	lsls	r6, r2, #0x16
    a5ec: f140 8319    	bpl.w	0xac22 <_vfprintf_r+0x155a> @ imm = #0x632
    a5f0: 9a0b         	ldr	r2, [sp, #0x2c]
    a5f2: 9908         	ldr	r1, [sp, #0x20]
    a5f4: 6812         	ldr	r2, [r2]
    a5f6: 7011         	strb	r1, [r2]
    a5f8: e4a6         	b	0x9f48 <_vfprintf_r+0x880> @ imm = #-0x6b4
    a5fa: eeb4 8b48    	<unknown>
    a5fe: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    a602: f180 87d4    	bvs.w	0xb5ae <_vfprintf_r+0x1ee6> @ imm = #0xfa8
    a606: f024 0620    	bic	r6, r4, #0x20
    a60a: 2e41         	cmp	r6, #0x41
    a60c: f040 8384    	bne.w	0xad18 <_vfprintf_r+0x1650> @ imm = #0x708
    a610: 2330         	movs	r3, #0x30
    a612: 2c61         	cmp	r4, #0x61
    a614: f88d 3068    	strb.w	r3, [sp, #0x68]
    a618: bf14         	ite	ne
    a61a: 2358         	movne	r3, #0x58
    a61c: 2378         	moveq	r3, #0x78
    a61e: f88d 3069    	strb.w	r3, [sp, #0x69]
    a622: 9b06         	ldr	r3, [sp, #0x18]
    a624: 2b63         	cmp	r3, #0x63
    a626: f300 8467    	bgt.w	0xaef8 <_vfprintf_r+0x1830> @ imm = #0x8ce
    a62a: ee18 3a90    	vmov	r3, s17
    a62e: 2b00         	cmp	r3, #0x0
    a630: f2c0 86ff    	blt.w	0xb432 <_vfprintf_r+0x1d6a> @ imm = #0xdfe
    a634: eeb0 0b48    	vmov.f64	d0, d8
    a638: f04f 0a00    	mov.w	r10, #0x0
    a63c: ad37         	add	r5, sp, #0xdc
    a63e: f8cd a028    	str.w	r10, [sp, #0x28]
    a642: a81b         	add	r0, sp, #0x6c
    a644: f002 f8e4    	bl	0xc810 <frexp>          @ imm = #0x21c8
    a648: eeb4 7b00    	<unknown>
    a64c: ee20 7b07    	<unknown>
    a650: eeb5 7b40    	<unknown>
    a654: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    a658: d101         	bne	0xa65e <_vfprintf_r+0xf96> @ imm = #0x2
    a65a: 2301         	movs	r3, #0x1
    a65c: 931b         	str	r3, [sp, #0x6c]
    a65e: 2c61         	cmp	r4, #0x61
    a660: 9b06         	ldr	r3, [sp, #0x18]
    a662: eeb3 4b00    	<unknown>
    a666: f103 32ff    	add.w	r2, r3, #0xffffffff
    a66a: bf0c         	ite	eq
    a66c: 48b0         	ldreq	r0, [pc, #0x2c0]        @ 0xa930 <_vfprintf_r+0x1268>
    a66e: 48b1         	ldrne	r0, [pc, #0x2c4]        @ 0xa934 <_vfprintf_r+0x126c>
    a670: 462b         	mov	r3, r5
    a672: e006         	b	0xa682 <_vfprintf_r+0xfba> @ imm = #0xc
    a674: eeb5 7b40    	<unknown>
    a678: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    a67c: f000 871a    	beq.w	0xb4b4 <_vfprintf_r+0x1dec> @ imm = #0xe34
    a680: 460a         	mov	r2, r1
    a682: ee27 7b04    	<unknown>
    a686: 469c         	mov	r12, r3
    a688: 1e51         	subs	r1, r2, #0x1
    a68a: eefd 6bc7    	<unknown>
    a68e: ee16 6a90    	vmov	r6, s13
    a692: eeb8 5be6    	<unknown>
    a696: 5d86         	ldrb	r6, [r0, r6]
    a698: ee37 7b45    	<unknown>
    a69c: f803 6b01    	strb	r6, [r3], #1
    a6a0: 1c56         	adds	r6, r2, #0x1
    a6a2: d1e7         	bne	0xa674 <_vfprintf_r+0xfac> @ imm = #-0x32
    a6a4: eeb6 5b00    	<unknown>
    a6a8: eeb4 7bc5    	<unknown>
    a6ac: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    a6b0: dc08         	bgt	0xa6c4 <_vfprintf_r+0xffc> @ imm = #0x10
    a6b2: eeb4 7b45    	<unknown>
    a6b6: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    a6ba: d11d         	bne	0xa6f8 <_vfprintf_r+0x1030> @ imm = #0x3a
    a6bc: ee16 2a90    	vmov	r2, s13
    a6c0: 07d6         	lsls	r6, r2, #0x1f
    a6c2: d519         	bpl	0xa6f8 <_vfprintf_r+0x1030> @ imm = #0x32
    a6c4: 7bc6         	ldrb	r6, [r0, #0xf]
    a6c6: 461a         	mov	r2, r3
    a6c8: f8cd c088    	str.w	r12, [sp, #0x88]
    a6cc: f813 1c01    	ldrb	r1, [r3, #-1]
    a6d0: 42b1         	cmp	r1, r6
    a6d2: d10a         	bne	0xa6ea <_vfprintf_r+0x1022> @ imm = #0x14
    a6d4: f04f 0c30    	mov.w	r12, #0x30
    a6d8: f802 cc01    	strb	r12, [r2, #-1]
    a6dc: 9a22         	ldr	r2, [sp, #0x88]
    a6de: 1e51         	subs	r1, r2, #0x1
    a6e0: 9122         	str	r1, [sp, #0x88]
    a6e2: f812 1c01    	ldrb	r1, [r2, #-1]
    a6e6: 42b1         	cmp	r1, r6
    a6e8: d0f6         	beq	0xa6d8 <_vfprintf_r+0x1010> @ imm = #-0x14
    a6ea: 2939         	cmp	r1, #0x39
    a6ec: f001 802e    	beq.w	0xb74c <_vfprintf_r+0x2084> @ imm = #0x105c
    a6f0: 3101         	adds	r1, #0x1
    a6f2: b2c9         	uxtb	r1, r1
    a6f4: f802 1c01    	strb	r1, [r2, #-1]
    a6f8: 9a03         	ldr	r2, [sp, #0xc]
    a6fa: 1b5b         	subs	r3, r3, r5
    a6fc: f042 0102    	orr	r1, r2, #0x2
    a700: 930f         	str	r3, [sp, #0x3c]
    a702: 9a1b         	ldr	r2, [sp, #0x6c]
    a704: f104 030f    	add.w	r3, r4, #0xf
    a708: f88d 3078    	strb.w	r3, [sp, #0x78]
    a70c: 1e53         	subs	r3, r2, #0x1
    a70e: 2b00         	cmp	r3, #0x0
    a710: 931b         	str	r3, [sp, #0x6c]
    a712: f2c0 8797    	blt.w	0xb644 <_vfprintf_r+0x1f7c> @ imm = #0xf2e
    a716: 222b         	movs	r2, #0x2b
    a718: 2b09         	cmp	r3, #0x9
    a71a: f88d 2079    	strb.w	r2, [sp, #0x79]
    a71e: f300 8430    	bgt.w	0xaf82 <_vfprintf_r+0x18ba> @ imm = #0x860
    a722: f10d 027a    	add.w	r2, sp, #0x7a
    a726: 3330         	adds	r3, #0x30
    a728: f802 3b01    	strb	r3, [r2], #1
    a72c: ab1e         	add	r3, sp, #0x78
    a72e: 1ad3         	subs	r3, r2, r3
    a730: 9313         	str	r3, [sp, #0x4c]
    a732: 9b0f         	ldr	r3, [sp, #0x3c]
    a734: 9a13         	ldr	r2, [sp, #0x4c]
    a736: 2b01         	cmp	r3, #0x1
    a738: 441a         	add	r2, r3
    a73a: 920c         	str	r2, [sp, #0x30]
    a73c: f340 8674    	ble.w	0xb428 <_vfprintf_r+0x1d60> @ imm = #0xce8
    a740: 9b0c         	ldr	r3, [sp, #0x30]
    a742: 9a11         	ldr	r2, [sp, #0x44]
    a744: 4413         	add	r3, r2
    a746: 930c         	str	r3, [sp, #0x30]
    a748: f421 6380    	bic	r3, r1, #0x400
    a74c: f001 0202    	and	r2, r1, #0x2
    a750: f443 7380    	orr	r3, r3, #0x100
    a754: 920d         	str	r2, [sp, #0x34]
    a756: 9303         	str	r3, [sp, #0xc]
    a758: 9b0c         	ldr	r3, [sp, #0x30]
    a75a: ea23 73e3    	bic.w	r3, r3, r3, asr #31
    a75e: 9305         	str	r3, [sp, #0x14]
    a760: f1ba 0f00    	cmp.w	r10, #0x0
    a764: f000 865a    	beq.w	0xb41c <_vfprintf_r+0x1d54> @ imm = #0xcb4
    a768: 202d         	movs	r0, #0x2d
    a76a: 2300         	movs	r3, #0x0
    a76c: f88d 0067    	strb.w	r0, [sp, #0x67]
    a770: 9306         	str	r3, [sp, #0x18]
    a772: f7ff bb50    	b.w	0x9e16 <_vfprintf_r+0x74e> @ imm = #-0x960
    a776: 9903         	ldr	r1, [sp, #0xc]
    a778: 9a0b         	ldr	r2, [sp, #0x2c]
    a77a: f011 0810    	ands	r8, r1, #0x10
    a77e: f852 3b04    	ldr	r3, [r2], #4
    a782: f47f ac60    	bne.w	0xa046 <_vfprintf_r+0x97e> @ imm = #-0x740
    a786: 9803         	ldr	r0, [sp, #0xc]
    a788: f010 0140    	ands	r1, r0, #0x40
    a78c: f000 828d    	beq.w	0xacaa <_vfprintf_r+0x15e2> @ imm = #0x51a
    a790: b29e         	uxth	r6, r3
    a792: 9b06         	ldr	r3, [sp, #0x18]
    a794: f88d 8067    	strb.w	r8, [sp, #0x67]
    a798: 2b00         	cmp	r3, #0x0
    a79a: f2c0 8366    	blt.w	0xae6a <_vfprintf_r+0x17a2> @ imm = #0x6cc
    a79e: f020 0180    	bic	r1, r0, #0x80
    a7a2: 920b         	str	r2, [sp, #0x2c]
    a7a4: 9103         	str	r1, [sp, #0xc]
    a7a6: 2b00         	cmp	r3, #0x0
    a7a8: f47f ab1c    	bne.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x9c8
    a7ac: 2e00         	cmp	r6, #0x0
    a7ae: f43f ab81    	beq.w	0x9eb4 <_vfprintf_r+0x7ec> @ imm = #-0x8fe
    a7b2: f7ff bb17    	b.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x9d2
    a7b6: 9903         	ldr	r1, [sp, #0xc]
    a7b8: 9a0b         	ldr	r2, [sp, #0x2c]
    a7ba: f011 0110    	ands	r1, r1, #0x10
    a7be: f852 3b04    	ldr	r3, [r2], #4
    a7c2: f040 87dd    	bne.w	0xb780 <_vfprintf_r+0x20b8> @ imm = #0xfba
    a7c6: 9d03         	ldr	r5, [sp, #0xc]
    a7c8: f015 0040    	ands	r0, r5, #0x40
    a7cc: f000 828e    	beq.w	0xacec <_vfprintf_r+0x1624> @ imm = #0x51c
    a7d0: b29b         	uxth	r3, r3
    a7d2: 4628         	mov	r0, r5
    a7d4: 920b         	str	r2, [sp, #0x2c]
    a7d6: f7ff bb87    	b.w	0x9ee8 <_vfprintf_r+0x820> @ imm = #-0x8f2
    a7da: 9b03         	ldr	r3, [sp, #0xc]
    a7dc: 9a0b         	ldr	r2, [sp, #0x2c]
    a7de: 06d9         	lsls	r1, r3, #0x1b
    a7e0: f852 6b04    	ldr	r6, [r2], #4
    a7e4: f100 87cf    	bmi.w	0xb786 <_vfprintf_r+0x20be> @ imm = #0xf9e
    a7e8: 9b03         	ldr	r3, [sp, #0xc]
    a7ea: 065b         	lsls	r3, r3, #0x19
    a7ec: f140 8289    	bpl.w	0xad02 <_vfprintf_r+0x163a> @ imm = #0x512
    a7f0: f346 38c0    	sbfx	r8, r6, #0xf, #0x1
    a7f4: 920b         	str	r2, [sp, #0x2c]
    a7f6: b236         	sxth	r6, r6
    a7f8: 4643         	mov	r3, r8
    a7fa: f7ff b99f    	b.w	0x9b3c <_vfprintf_r+0x474> @ imm = #-0xcc2
    a7fe: 2330         	movs	r3, #0x30
    a800: 3802         	subs	r0, #0x2
    a802: 9a06         	ldr	r2, [sp, #0x18]
    a804: f805 3c01    	strb	r3, [r5, #-1]
    a808: ab50         	add	r3, sp, #0x140
    a80a: 4605         	mov	r5, r0
    a80c: 1a1b         	subs	r3, r3, r0
    a80e: 429a         	cmp	r2, r3
    a810: 930c         	str	r3, [sp, #0x30]
    a812: bfb8         	it	lt
    a814: 461a         	movlt	r2, r3
    a816: 9205         	str	r2, [sp, #0x14]
    a818: f7ff bbc9    	b.w	0x9fae <_vfprintf_r+0x8e6> @ imm = #-0x86e
    a81c: 4e45         	ldr	r6, [pc, #0x114]        @ 0xa934 <_vfprintf_r+0x126c>
    a81e: 9507         	str	r5, [sp, #0x1c]
    a820: 9b03         	ldr	r3, [sp, #0xc]
    a822: 9a0b         	ldr	r2, [sp, #0x2c]
    a824: f013 0120    	ands	r1, r3, #0x20
    a828: f000 80a2    	beq.w	0xa970 <_vfprintf_r+0x12a8> @ imm = #0x144
    a82c: 3207         	adds	r2, #0x7
    a82e: f022 0207    	bic	r2, r2, #0x7
    a832: 6851         	ldr	r1, [r2, #0x4]
    a834: f852 3b08    	ldr	r3, [r2], #8
    a838: ea53 0001    	orrs.w	r0, r3, r1
    a83c: 9d03         	ldr	r5, [sp, #0xc]
    a83e: bf14         	ite	ne
    a840: 2001         	movne	r0, #0x1
    a842: 2000         	moveq	r0, #0x0
    a844: 07ed         	lsls	r5, r5, #0x1f
    a846: d502         	bpl	0xa84e <_vfprintf_r+0x1186> @ imm = #0x4
    a848: 2800         	cmp	r0, #0x0
    a84a: f040 80d8    	bne.w	0xa9fe <_vfprintf_r+0x1336> @ imm = #0x1b0
    a84e: 2500         	movs	r5, #0x0
    a850: f88d 5067    	strb.w	r5, [sp, #0x67]
    a854: 9d06         	ldr	r5, [sp, #0x18]
    a856: 2d00         	cmp	r5, #0x0
    a858: f2c0 80b1    	blt.w	0xa9be <_vfprintf_r+0x12f6> @ imm = #0x162
    a85c: 9d03         	ldr	r5, [sp, #0xc]
    a85e: f425 6590    	bic	r5, r5, #0x480
    a862: 9503         	str	r5, [sp, #0xc]
    a864: 9d06         	ldr	r5, [sp, #0x18]
    a866: 2d00         	cmp	r5, #0x0
    a868: f040 80db    	bne.w	0xaa22 <_vfprintf_r+0x135a> @ imm = #0x1b6
    a86c: 2800         	cmp	r0, #0x0
    a86e: f040 80d8    	bne.w	0xaa22 <_vfprintf_r+0x135a> @ imm = #0x1b0
    a872: 920b         	str	r2, [sp, #0x2c]
    a874: f7ff bb1e    	b.w	0x9eb4 <_vfprintf_r+0x7ec> @ imm = #-0x9c4
    a878: 4e2d         	ldr	r6, [pc, #0xb4]         @ 0xa930 <_vfprintf_r+0x1268>
    a87a: 9507         	str	r5, [sp, #0x1c]
    a87c: e7d0         	b	0xa820 <_vfprintf_r+0x1158> @ imm = #-0x60
    a87e: 9803         	ldr	r0, [sp, #0xc]
    a880: 2478         	movs	r4, #0x78
    a882: 920b         	str	r2, [sp, #0x2c]
    a884: 2202         	movs	r2, #0x2
    a886: f040 0002    	orr	r0, r0, #0x2
    a88a: 4e29         	ldr	r6, [pc, #0xa4]         @ 0xa930 <_vfprintf_r+0x1268>
    a88c: 920d         	str	r2, [sp, #0x34]
    a88e: 9003         	str	r0, [sp, #0xc]
    a890: 4608         	mov	r0, r1
    a892: ad50         	add	r5, sp, #0x140
    a894: f003 020f    	and	r2, r3, #0xf
    a898: 091b         	lsrs	r3, r3, #0x4
    a89a: 5cb2         	ldrb	r2, [r6, r2]
    a89c: ea43 7301    	orr.w	r3, r3, r1, lsl #28
    a8a0: 0909         	lsrs	r1, r1, #0x4
    a8a2: f805 2d01    	strb	r2, [r5, #-1]!
    a8a6: ea53 0201    	orrs.w	r2, r3, r1
    a8aa: d1f3         	bne	0xa894 <_vfprintf_r+0x11cc> @ imm = #-0x1a
    a8ac: ab50         	add	r3, sp, #0x140
    a8ae: 9a06         	ldr	r2, [sp, #0x18]
    a8b0: 1b5b         	subs	r3, r3, r5
    a8b2: 429a         	cmp	r2, r3
    a8b4: 930c         	str	r3, [sp, #0x30]
    a8b6: bfb8         	it	lt
    a8b8: 461a         	movlt	r2, r3
    a8ba: 9205         	str	r2, [sp, #0x14]
    a8bc: f7ff baa8    	b.w	0x9e10 <_vfprintf_r+0x748> @ imm = #-0xab0
    a8c0: aa24         	add	r2, sp, #0x90
    a8c2: 9904         	ldr	r1, [sp, #0x10]
    a8c4: 4658         	mov	r0, r11
    a8c6: f001 fb6d    	bl	0xbfa4 <__sprint_r>     @ imm = #0x16da
    a8ca: 2800         	cmp	r0, #0x0
    a8cc: f47f a844    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0xf78
    a8d0: 9a26         	ldr	r2, [sp, #0x98]
    a8d2: af27         	add	r7, sp, #0x9c
    a8d4: f7ff b8b3    	b.w	0x9a3e <_vfprintf_r+0x376> @ imm = #-0xe9a
    a8d8: f043 0320    	orr	r3, r3, #0x20
    a8dc: 786c         	ldrb	r4, [r5, #0x1]
    a8de: 3501         	adds	r5, #0x1
    a8e0: 9303         	str	r3, [sp, #0xc]
    a8e2: f7fe bf67    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x1132
    a8e6: aa24         	add	r2, sp, #0x90
    a8e8: 9904         	ldr	r1, [sp, #0x10]
    a8ea: 4658         	mov	r0, r11
    a8ec: f001 fb5a    	bl	0xbfa4 <__sprint_r>     @ imm = #0x16b4
    a8f0: 2800         	cmp	r0, #0x0
    a8f2: f47f a831    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0xf9e
    a8f6: 9a26         	ldr	r2, [sp, #0x98]
    a8f8: af27         	add	r7, sp, #0x9c
    a8fa: f7ff b9bf    	b.w	0x9c7c <_vfprintf_r+0x5b4> @ imm = #-0xc82
    a8fe: f443 7300    	orr	r3, r3, #0x200
    a902: 786c         	ldrb	r4, [r5, #0x1]
    a904: 3501         	adds	r5, #0x1
    a906: 9303         	str	r3, [sp, #0xc]
    a908: f7fe bf54    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x1158
    a90c: 9b06         	ldr	r3, [sp, #0x18]
    a90e: 462a         	mov	r2, r5
    a910: 9506         	str	r5, [sp, #0x18]
    a912: 2b06         	cmp	r3, #0x6
    a914: 950a         	str	r5, [sp, #0x28]
    a916: f8cd 802c    	str.w	r8, [sp, #0x2c]
    a91a: bf28         	it	hs
    a91c: 2306         	movhs	r3, #0x6
    a91e: 4d06         	ldr	r5, [pc, #0x18]         @ 0xa938 <_vfprintf_r+0x1270>
    a920: 9210         	str	r2, [sp, #0x40]
    a922: 9305         	str	r3, [sp, #0x14]
    a924: 930c         	str	r3, [sp, #0x30]
    a926: e9cd 220d    	strd	r2, r2, [sp, #52]
    a92a: f7ff b858    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0xf50
    a92e: bf00         	nop
    a930: 40 1d 21 80  	.word	0x80211d40
    a934: 54 1d 21 80  	.word	0x80211d54
    a938: 68 1d 21 80  	.word	0x80211d68
    a93c: e8 1e 21 80  	.word	0x80211ee8
    a940: 2208         	movs	r2, #0x8
    a942: 2100         	movs	r1, #0x0
    a944: a822         	add	r0, sp, #0x88
    a946: ad37         	add	r5, sp, #0xdc
    a948: f7fe fa2e    	bl	0x8da8 <memset>         @ imm = #-0x1ba4
    a94c: 9a0b         	ldr	r2, [sp, #0x2c]
    a94e: ab22         	add	r3, sp, #0x88
    a950: 4658         	mov	r0, r11
    a952: 6812         	ldr	r2, [r2]
    a954: 4629         	mov	r1, r5
    a956: f001 fee5    	bl	0xc724 <_wcrtomb_r>     @ imm = #0x1dca
    a95a: 4603         	mov	r3, r0
    a95c: 900c         	str	r0, [sp, #0x30]
    a95e: 3301         	adds	r3, #0x1
    a960: f000 86cf    	beq.w	0xb702 <_vfprintf_r+0x203a> @ imm = #0xd9e
    a964: 9b0c         	ldr	r3, [sp, #0x30]
    a966: ea23 73e3    	bic.w	r3, r3, r3, asr #31
    a96a: 9305         	str	r3, [sp, #0x14]
    a96c: f7ff b9c3    	b.w	0x9cf6 <_vfprintf_r+0x62e> @ imm = #-0xc7a
    a970: 9803         	ldr	r0, [sp, #0xc]
    a972: f852 3b04    	ldr	r3, [r2], #4
    a976: f010 0010    	ands	r0, r0, #0x10
    a97a: f47f af5d    	bne.w	0xa838 <_vfprintf_r+0x1170> @ imm = #-0x146
    a97e: 9903         	ldr	r1, [sp, #0xc]
    a980: f011 0540    	ands	r5, r1, #0x40
    a984: f000 81aa    	beq.w	0xacdc <_vfprintf_r+0x1614> @ imm = #0x354
    a988: b29b         	uxth	r3, r3
    a98a: 4601         	mov	r1, r0
    a98c: e754         	b	0xa838 <_vfprintf_r+0x1170> @ imm = #-0x158
    a98e: aa24         	add	r2, sp, #0x90
    a990: 9904         	ldr	r1, [sp, #0x10]
    a992: 4658         	mov	r0, r11
    a994: f001 fb06    	bl	0xbfa4 <__sprint_r>     @ imm = #0x160c
    a998: 2800         	cmp	r0, #0x0
    a99a: f47e afdd    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1046
    a99e: a927         	add	r1, sp, #0x9c
    a9a0: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    a9a4: e460         	b	0xa268 <_vfprintf_r+0xba0> @ imm = #-0x740
    a9a6: aa24         	add	r2, sp, #0x90
    a9a8: 9904         	ldr	r1, [sp, #0x10]
    a9aa: 4658         	mov	r0, r11
    a9ac: f001 fafa    	bl	0xbfa4 <__sprint_r>     @ imm = #0x15f4
    a9b0: 2800         	cmp	r0, #0x0
    a9b2: f47e afd1    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x105e
    a9b6: a927         	add	r1, sp, #0x9c
    a9b8: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    a9bc: e448         	b	0xa250 <_vfprintf_r+0xb88> @ imm = #-0x770
    a9be: 9803         	ldr	r0, [sp, #0xc]
    a9c0: f420 6080    	bic	r0, r0, #0x400
    a9c4: 9003         	str	r0, [sp, #0xc]
    a9c6: 920b         	str	r2, [sp, #0x2c]
    a9c8: 2000         	movs	r0, #0x0
    a9ca: 9a03         	ldr	r2, [sp, #0xc]
    a9cc: f002 0202    	and	r2, r2, #0x2
    a9d0: 920d         	str	r2, [sp, #0x34]
    a9d2: e75e         	b	0xa892 <_vfprintf_r+0x11ca> @ imm = #-0x144
    a9d4: aa24         	add	r2, sp, #0x90
    a9d6: 9904         	ldr	r1, [sp, #0x10]
    a9d8: 4658         	mov	r0, r11
    a9da: f001 fae3    	bl	0xbfa4 <__sprint_r>     @ imm = #0x15c6
    a9de: 2800         	cmp	r0, #0x0
    a9e0: f47e afba    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x108c
    a9e4: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    a9e8: 9a26         	ldr	r2, [sp, #0x98]
    a9ea: 2b00         	cmp	r3, #0x0
    a9ec: f000 812c    	beq.w	0xac48 <_vfprintf_r+0x1580> @ imm = #0x258
    a9f0: 4656         	mov	r6, r10
    a9f2: f8dd c094    	ldr.w	r12, [sp, #0x94]
    a9f6: 4682         	mov	r10, r0
    a9f8: af27         	add	r7, sp, #0x9c
    a9fa: f7fe bffd    	b.w	0x99f8 <_vfprintf_r+0x330> @ imm = #-0x1006
    a9fe: 2030         	movs	r0, #0x30
    aa00: f88d 4069    	strb.w	r4, [sp, #0x69]
    aa04: f88d 0068    	strb.w	r0, [sp, #0x68]
    aa08: 2000         	movs	r0, #0x0
    aa0a: f88d 0067    	strb.w	r0, [sp, #0x67]
    aa0e: 9806         	ldr	r0, [sp, #0x18]
    aa10: 2800         	cmp	r0, #0x0
    aa12: f2c0 82e8    	blt.w	0xafe6 <_vfprintf_r+0x191e> @ imm = #0x5d0
    aa16: 9803         	ldr	r0, [sp, #0xc]
    aa18: f420 6090    	bic	r0, r0, #0x480
    aa1c: f040 0002    	orr	r0, r0, #0x2
    aa20: 9003         	str	r0, [sp, #0xc]
    aa22: 920b         	str	r2, [sp, #0x2c]
    aa24: 9a03         	ldr	r2, [sp, #0xc]
    aa26: f89d 0067    	ldrb.w	r0, [sp, #0x67]
    aa2a: f002 0202    	and	r2, r2, #0x2
    aa2e: 920d         	str	r2, [sp, #0x34]
    aa30: e72f         	b	0xa892 <_vfprintf_r+0x11ca> @ imm = #-0x1a2
    aa32: 4658         	mov	r0, r11
    aa34: f7fe f98e    	bl	0x8d54 <__sinit>        @ imm = #-0x1ce4
    aa38: f7fe be67    	b.w	0x970a <_vfprintf_r+0x42> @ imm = #-0x1332
    aa3c: aa24         	add	r2, sp, #0x90
    aa3e: 9904         	ldr	r1, [sp, #0x10]
    aa40: 4658         	mov	r0, r11
    aa42: f001 faaf    	bl	0xbfa4 <__sprint_r>     @ imm = #0x155e
    aa46: 2800         	cmp	r0, #0x0
    aa48: f47e af86    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x10f4
    aa4c: 9a26         	ldr	r2, [sp, #0x98]
    aa4e: af27         	add	r7, sp, #0x9c
    aa50: f7ff b902    	b.w	0x9c58 <_vfprintf_r+0x590> @ imm = #-0xdfc
    aa54: f10d 0a88    	add.w	r10, sp, #0x88
    aa58: 2208         	movs	r2, #0x8
    aa5a: 2100         	movs	r1, #0x0
    aa5c: 951d         	str	r5, [sp, #0x74]
    aa5e: 4650         	mov	r0, r10
    aa60: f7fe f9a2    	bl	0x8da8 <memset>         @ imm = #-0x1cbc
    aa64: 9b06         	ldr	r3, [sp, #0x18]
    aa66: 2b00         	cmp	r3, #0x0
    aa68: f2c0 82c4    	blt.w	0xaff4 <_vfprintf_r+0x192c> @ imm = #0x588
    aa6c: 2600         	movs	r6, #0x0
    aa6e: 9705         	str	r7, [sp, #0x14]
    aa70: f8cd 8028    	str.w	r8, [sp, #0x28]
    aa74: 4698         	mov	r8, r3
    aa76: 4637         	mov	r7, r6
    aa78: e00e         	b	0xaa98 <_vfprintf_r+0x13d0> @ imm = #0x1c
    aa7a: a937         	add	r1, sp, #0xdc
    aa7c: 4658         	mov	r0, r11
    aa7e: f001 fe51    	bl	0xc724 <_wcrtomb_r>     @ imm = #0x1ca2
    aa82: 1c42         	adds	r2, r0, #0x1
    aa84: f106 0604    	add.w	r6, r6, #0x4
    aa88: 4438         	add	r0, r7
    aa8a: f000 84db    	beq.w	0xb444 <_vfprintf_r+0x1d7c> @ imm = #0x9b6
    aa8e: 4540         	cmp	r0, r8
    aa90: dc07         	bgt	0xaaa2 <_vfprintf_r+0x13da> @ imm = #0xe
    aa92: f000 84e2    	beq.w	0xb45a <_vfprintf_r+0x1d92> @ imm = #0x9c4
    aa96: 4607         	mov	r7, r0
    aa98: 9a1d         	ldr	r2, [sp, #0x74]
    aa9a: 4653         	mov	r3, r10
    aa9c: 5992         	ldr	r2, [r2, r6]
    aa9e: 2a00         	cmp	r2, #0x0
    aaa0: d1eb         	bne	0xaa7a <_vfprintf_r+0x13b2> @ imm = #-0x2a
    aaa2: 970c         	str	r7, [sp, #0x30]
    aaa4: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    aaa8: 9f05         	ldr	r7, [sp, #0x14]
    aaaa: 9b0c         	ldr	r3, [sp, #0x30]
    aaac: 2b00         	cmp	r3, #0x0
    aaae: f000 8377    	beq.w	0xb1a0 <_vfprintf_r+0x1ad8> @ imm = #0x6ee
    aab2: 2b63         	cmp	r3, #0x63
    aab4: f340 8481    	ble.w	0xb3ba <_vfprintf_r+0x1cf2> @ imm = #0x902
    aab8: 1c59         	adds	r1, r3, #0x1
    aaba: 4658         	mov	r0, r11
    aabc: f7fe fb48    	bl	0x9150 <_malloc_r>      @ imm = #-0x1970
    aac0: 4605         	mov	r5, r0
    aac2: 2800         	cmp	r0, #0x0
    aac4: f000 866d    	beq.w	0xb7a2 <_vfprintf_r+0x20da> @ imm = #0xcda
    aac8: 900a         	str	r0, [sp, #0x28]
    aaca: 2208         	movs	r2, #0x8
    aacc: 2100         	movs	r1, #0x0
    aace: 4650         	mov	r0, r10
    aad0: f7fe f96a    	bl	0x8da8 <memset>         @ imm = #-0x1d2c
    aad4: 9e0c         	ldr	r6, [sp, #0x30]
    aad6: aa1d         	add	r2, sp, #0x74
    aad8: 4629         	mov	r1, r5
    aada: 4633         	mov	r3, r6
    aadc: 4658         	mov	r0, r11
    aade: f8cd a000    	str.w	r10, [sp]
    aae2: f001 fe45    	bl	0xc770 <_wcsrtombs_r>   @ imm = #0x1c8a
    aae6: 4286         	cmp	r6, r0
    aae8: f040 8655    	bne.w	0xb796 <_vfprintf_r+0x20ce> @ imm = #0xcaa
    aaec: 990c         	ldr	r1, [sp, #0x30]
    aaee: 2300         	movs	r3, #0x0
    aaf0: 546b         	strb	r3, [r5, r1]
    aaf2: ea21 71e1    	bic.w	r1, r1, r1, asr #31
    aaf6: f89d 2067    	ldrb.w	r2, [sp, #0x67]
    aafa: 9105         	str	r1, [sp, #0x14]
    aafc: 2a00         	cmp	r2, #0x0
    aafe: f040 8431    	bne.w	0xb364 <_vfprintf_r+0x1c9c> @ imm = #0x862
    ab02: 9206         	str	r2, [sp, #0x18]
    ab04: f8cd 802c    	str.w	r8, [sp, #0x2c]
    ab08: 9210         	str	r2, [sp, #0x40]
    ab0a: e9cd 220d    	strd	r2, r2, [sp, #52]
    ab0e: f7fe bf66    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1134
    ab12: 46b0         	mov	r8, r6
    ab14: 3301         	adds	r3, #0x1
    ab16: 4422         	add	r2, r4
    ab18: f8c7 8000    	str.w	r8, [r7]
    ab1c: 2b07         	cmp	r3, #0x7
    ab1e: 607c         	str	r4, [r7, #0x4]
    ab20: e9cd 3225    	strd	r3, r2, [sp, #148]
    ab24: f77e afa0    	ble.w	0x9a68 <_vfprintf_r+0x3a0> @ imm = #-0x10c0
    ab28: f7ff bb75    	b.w	0xa216 <_vfprintf_r+0xb4e> @ imm = #-0x916
    ab2c: 9b03         	ldr	r3, [sp, #0xc]
    ab2e: 2200         	movs	r2, #0x0
    ab30: 940a         	str	r4, [sp, #0x28]
    ab32: a950         	add	r1, sp, #0x140
    ab34: f403 6380    	and	r3, r3, #0x400
    ab38: f8cd b030    	str.w	r11, [sp, #0x30]
    ab3c: f8df a3b0    	ldr.w	r10, [pc, #0x3b0]       @ 0xaef0 <_vfprintf_r+0x1828>
    ab40: 4694         	mov	r12, r2
    ab42: 461c         	mov	r4, r3
    ab44: f8dd b058    	ldr.w	r11, [sp, #0x58]
    ab48: 9705         	str	r7, [sp, #0x14]
    ab4a: e024         	b	0xab96 <_vfprintf_r+0x14ce> @ imm = #0x48
    ab4c: eb16 0308    	adds.w	r3, r6, r8
    ab50: 46b6         	mov	lr, r6
    ab52: 4640         	mov	r0, r8
    ab54: 4629         	mov	r1, r5
    ab56: f143 0300    	adc	r3, r3, #0x0
    ab5a: fbaa 2703    	umull	r2, r7, r10, r3
    ab5e: f027 0203    	bic	r2, r7, #0x3
    ab62: eb02 0297    	add.w	r2, r2, r7, lsr #2
    ab66: 1a9b         	subs	r3, r3, r2
    ab68: f04f 32cc    	mov.w	r2, #0xcccccccc
    ab6c: 1af3         	subs	r3, r6, r3
    ab6e: f168 0800    	sbc	r8, r8, #0x0
    ab72: fb02 f203    	mul	r2, r2, r3
    ab76: f1be 0f0a    	cmp.w	lr, #0xa
    ab7a: fba3 630a    	umull	r6, r3, r3, r10
    ab7e: fb0a 2208    	mla	r2, r10, r8, r2
    ab82: ea4f 0656    	lsr.w	r6, r6, #0x1
    ab86: f170 0000    	sbcs	r0, r0, #0x0
    ab8a: 4413         	add	r3, r2
    ab8c: ea46 76c3    	orr.w	r6, r6, r3, lsl #31
    ab90: ea4f 0853    	lsr.w	r8, r3, #0x1
    ab94: d32c         	blo	0xabf0 <_vfprintf_r+0x1528> @ imm = #0x58
    ab96: eb16 0308    	adds.w	r3, r6, r8
    ab9a: f10c 0c01    	add.w	r12, r12, #0x1
    ab9e: f101 35ff    	add.w	r5, r1, #0xffffffff
    aba2: f143 0300    	adc	r3, r3, #0x0
    aba6: fbaa 2003    	umull	r2, r0, r10, r3
    abaa: f020 0203    	bic	r2, r0, #0x3
    abae: eb02 0290    	add.w	r2, r2, r0, lsr #2
    abb2: 1a9b         	subs	r3, r3, r2
    abb4: 1af3         	subs	r3, r6, r3
    abb6: fba3 320a    	umull	r3, r2, r3, r10
    abba: f168 0000    	sbc	r0, r8, #0x0
    abbe: 085b         	lsrs	r3, r3, #0x1
    abc0: fb0a 2200    	mla	r2, r10, r0, r2
    abc4: ea43 73c2    	orr.w	r3, r3, r2, lsl #31
    abc8: eb03 0383    	add.w	r3, r3, r3, lsl #2
    abcc: eba6 0343    	sub.w	r3, r6, r3, lsl #1
    abd0: 3330         	adds	r3, #0x30
    abd2: f801 3c01    	strb	r3, [r1, #-1]
    abd6: 2c00         	cmp	r4, #0x0
    abd8: d0b8         	beq	0xab4c <_vfprintf_r+0x1484> @ imm = #-0x90
    abda: f89b 3000    	ldrb.w	r3, [r11]
    abde: 2bff         	cmp	r3, #0xff
    abe0: d0b4         	beq	0xab4c <_vfprintf_r+0x1484> @ imm = #-0x98
    abe2: 4563         	cmp	r3, r12
    abe4: d1b2         	bne	0xab4c <_vfprintf_r+0x1484> @ imm = #-0x9c
    abe6: 2e0a         	cmp	r6, #0xa
    abe8: f178 0300    	sbcs	r3, r8, #0x0
    abec: f080 8330    	bhs.w	0xb250 <_vfprintf_r+0x1b88> @ imm = #0x660
    abf0: 2200         	movs	r2, #0x0
    abf2: ab50         	add	r3, sp, #0x140
    abf4: 9f05         	ldr	r7, [sp, #0x14]
    abf6: 1b5b         	subs	r3, r3, r5
    abf8: 920d         	str	r2, [sp, #0x34]
    abfa: 9a06         	ldr	r2, [sp, #0x18]
    abfc: f8cd b058    	str.w	r11, [sp, #0x58]
    ac00: 429a         	cmp	r2, r3
    ac02: f8dd b030    	ldr.w	r11, [sp, #0x30]
    ac06: 9c0a         	ldr	r4, [sp, #0x28]
    ac08: bfb8         	it	lt
    ac0a: 461a         	movlt	r2, r3
    ac0c: f89d 0067    	ldrb.w	r0, [sp, #0x67]
    ac10: f8cd c03c    	str.w	r12, [sp, #0x3c]
    ac14: 930c         	str	r3, [sp, #0x30]
    ac16: 9205         	str	r2, [sp, #0x14]
    ac18: f7ff b8fa    	b.w	0x9e10 <_vfprintf_r+0x748> @ imm = #-0xe0c
    ac1c: 4eb3         	ldr	r6, [pc, #0x2cc]        @ 0xaeec <_vfprintf_r+0x1824>
    ac1e: 2478         	movs	r4, #0x78
    ac20: e6ff         	b	0xaa22 <_vfprintf_r+0x135a> @ imm = #-0x202
    ac22: 9a0b         	ldr	r2, [sp, #0x2c]
    ac24: 9908         	ldr	r1, [sp, #0x20]
    ac26: 6812         	ldr	r2, [r2]
    ac28: 6011         	str	r1, [r2]
    ac2a: f7ff b98d    	b.w	0x9f48 <_vfprintf_r+0x880> @ imm = #-0xce6
    ac2e: 46b8         	mov	r8, r7
    ac30: 3301         	adds	r3, #0x1
    ac32: 4432         	add	r2, r6
    ac34: f8c1 8000    	str.w	r8, [r1]
    ac38: 2b07         	cmp	r3, #0x7
    ac3a: 604e         	str	r6, [r1, #0x4]
    ac3c: e9cd 3225    	strd	r3, r2, [sp, #148]
    ac40: f77f ab24    	ble.w	0xa28c <_vfprintf_r+0xbc4> @ imm = #-0x9b8
    ac44: f7ff bbe3    	b.w	0xa40e <_vfprintf_r+0xd46> @ imm = #-0x83a
    ac48: f1ba 0f00    	cmp.w	r10, #0x0
    ac4c: f000 80fd    	beq.w	0xae4a <_vfprintf_r+0x1782> @ imm = #0x1fa
    ac50: 469a         	mov	r10, r3
    ac52: f8dd c094    	ldr.w	r12, [sp, #0x94]
    ac56: af27         	add	r7, sp, #0x9c
    ac58: f7fe bedf    	b.w	0x9a1a <_vfprintf_r+0x352> @ imm = #-0x1242
    ac5c: 2c10         	cmp	r4, #0x10
    ac5e: 9b25         	ldr	r3, [sp, #0x94]
    ac60: f8df 8290    	ldr.w	r8, [pc, #0x290]        @ 0xaef4 <_vfprintf_r+0x182c>
    ac64: f340 80dc    	ble.w	0xae20 <_vfprintf_r+0x1758> @ imm = #0x1b8
    ac68: 4641         	mov	r1, r8
    ac6a: 2610         	movs	r6, #0x10
    ac6c: 46a8         	mov	r8, r5
    ac6e: f8dd a010    	ldr.w	r10, [sp, #0x10]
    ac72: 460d         	mov	r5, r1
    ac74: e003         	b	0xac7e <_vfprintf_r+0x15b6> @ imm = #0x6
    ac76: 3c10         	subs	r4, #0x10
    ac78: 2c10         	cmp	r4, #0x10
    ac7a: f340 80ce    	ble.w	0xae1a <_vfprintf_r+0x1752> @ imm = #0x19c
    ac7e: 3301         	adds	r3, #0x1
    ac80: 3210         	adds	r2, #0x10
    ac82: 2b07         	cmp	r3, #0x7
    ac84: e9c7 5600    	strd	r5, r6, [r7]
    ac88: e9cd 3225    	strd	r3, r2, [sp, #148]
    ac8c: f107 0708    	add.w	r7, r7, #0x8
    ac90: ddf1         	ble	0xac76 <_vfprintf_r+0x15ae> @ imm = #-0x1e
    ac92: aa24         	add	r2, sp, #0x90
    ac94: 4651         	mov	r1, r10
    ac96: 4658         	mov	r0, r11
    ac98: f001 f984    	bl	0xbfa4 <__sprint_r>     @ imm = #0x1308
    ac9c: 2800         	cmp	r0, #0x0
    ac9e: f47e ae5b    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x134a
    aca2: af27         	add	r7, sp, #0x9c
    aca4: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    aca8: e7e5         	b	0xac76 <_vfprintf_r+0x15ae> @ imm = #-0x36
    acaa: 9803         	ldr	r0, [sp, #0xc]
    acac: f410 7800    	ands	r8, r0, #0x200
    acb0: f040 80d3    	bne.w	0xae5a <_vfprintf_r+0x1792> @ imm = #0x1a6
    acb4: 9906         	ldr	r1, [sp, #0x18]
    acb6: 461e         	mov	r6, r3
    acb8: f88d 8067    	strb.w	r8, [sp, #0x67]
    acbc: 2900         	cmp	r1, #0x0
    acbe: f2c0 80d4    	blt.w	0xae6a <_vfprintf_r+0x17a2> @ imm = #0x1a8
    acc2: 9803         	ldr	r0, [sp, #0xc]
    acc4: 920b         	str	r2, [sp, #0x2c]
    acc6: f020 0080    	bic	r0, r0, #0x80
    acca: 9003         	str	r0, [sp, #0xc]
    accc: 2b00         	cmp	r3, #0x0
    acce: f47f a889    	bne.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0xeee
    acd2: 2900         	cmp	r1, #0x0
    acd4: f43f a8ee    	beq.w	0x9eb4 <_vfprintf_r+0x7ec> @ imm = #-0xe24
    acd8: f7ff b884    	b.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0xef8
    acdc: 9903         	ldr	r1, [sp, #0xc]
    acde: f411 7100    	ands	r1, r1, #0x200
    ace2: f43f ada9    	beq.w	0xa838 <_vfprintf_r+0x1170> @ imm = #-0x4ae
    ace6: b2db         	uxtb	r3, r3
    ace8: 4629         	mov	r1, r5
    acea: e5a5         	b	0xa838 <_vfprintf_r+0x1170> @ imm = #-0x4b6
    acec: 9d03         	ldr	r5, [sp, #0xc]
    acee: f415 7100    	ands	r1, r5, #0x200
    acf2: f000 80c3    	beq.w	0xae7c <_vfprintf_r+0x17b4> @ imm = #0x186
    acf6: 4601         	mov	r1, r0
    acf8: b2db         	uxtb	r3, r3
    acfa: 4628         	mov	r0, r5
    acfc: 920b         	str	r2, [sp, #0x2c]
    acfe: f7ff b8f3    	b.w	0x9ee8 <_vfprintf_r+0x820> @ imm = #-0xe1a
    ad02: 9b03         	ldr	r3, [sp, #0xc]
    ad04: 920b         	str	r2, [sp, #0x2c]
    ad06: 059d         	lsls	r5, r3, #0x16
    ad08: f140 80a2    	bpl.w	0xae50 <_vfprintf_r+0x1788> @ imm = #0x144
    ad0c: f346 18c0    	sbfx	r8, r6, #0x7, #0x1
    ad10: b276         	sxtb	r6, r6
    ad12: 4643         	mov	r3, r8
    ad14: f7fe bf12    	b.w	0x9b3c <_vfprintf_r+0x474> @ imm = #-0x11dc
    ad18: 9a06         	ldr	r2, [sp, #0x18]
    ad1a: 9b03         	ldr	r3, [sp, #0xc]
    ad1c: 1c51         	adds	r1, r2, #0x1
    ad1e: f443 7880    	orr	r8, r3, #0x100
    ad22: ee18 3a90    	vmov	r3, s17
    ad26: f000 80d6    	beq.w	0xaed6 <_vfprintf_r+0x180e> @ imm = #0x1ac
    ad2a: b912         	cbnz	r2, 0xad32 <_vfprintf_r+0x166a> @ imm = #0x4
    ad2c: 2e47         	cmp	r6, #0x47
    ad2e: f000 8474    	beq.w	0xb61a <_vfprintf_r+0x1f52> @ imm = #0x8e8
    ad32: 2b00         	cmp	r3, #0x0
    ad34: f2c0 8452    	blt.w	0xb5dc <_vfprintf_r+0x1f14> @ imm = #0x8a4
    ad38: eeb0 9b48    	vmov.f64	d9, d8
    ad3c: f04f 0a00    	mov.w	r10, #0x0
    ad40: 2c65         	cmp	r4, #0x65
    ad42: f000 82dc    	beq.w	0xb2fe <_vfprintf_r+0x1c36> @ imm = #0x5b8
    ad46: f300 80eb    	bgt.w	0xaf20 <_vfprintf_r+0x1858> @ imm = #0x1d6
    ad4a: 2c45         	cmp	r4, #0x45
    ad4c: f000 82d7    	beq.w	0xb2fe <_vfprintf_r+0x1c36> @ imm = #0x5ae
    ad50: 2c46         	cmp	r4, #0x46
    ad52: f040 80e8    	bne.w	0xaf26 <_vfprintf_r+0x185e> @ imm = #0x1d0
    ad56: 9b06         	ldr	r3, [sp, #0x18]
    ad58: 2103         	movs	r1, #0x3
    ad5a: 930f         	str	r3, [sp, #0x3c]
    ad5c: ab22         	add	r3, sp, #0x88
    ad5e: eeb0 0b49    	vmov.f64	d0, d9
    ad62: 9a0f         	ldr	r2, [sp, #0x3c]
    ad64: 4658         	mov	r0, r11
    ad66: 9301         	str	r3, [sp, #0x4]
    ad68: ab1d         	add	r3, sp, #0x74
    ad6a: 9300         	str	r3, [sp]
    ad6c: ab1b         	add	r3, sp, #0x6c
    ad6e: f001 fe27    	bl	0xc9c0 <_dtoa_r>        @ imm = #0x1c4e
    ad72: 9b0f         	ldr	r3, [sp, #0x3c]
    ad74: 2e46         	cmp	r6, #0x46
    ad76: 4605         	mov	r5, r0
    ad78: eb00 0103    	add.w	r1, r0, r3
    ad7c: f040 8401    	bne.w	0xb582 <_vfprintf_r+0x1eba> @ imm = #0x802
    ad80: 782b         	ldrb	r3, [r5]
    ad82: 2b30         	cmp	r3, #0x30
    ad84: f000 83f1    	beq.w	0xb56a <_vfprintf_r+0x1ea2> @ imm = #0x7e2
    ad88: 9b1b         	ldr	r3, [sp, #0x6c]
    ad8a: eeb5 9b40    	<unknown>
    ad8e: 4419         	add	r1, r3
    ad90: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    ad94: f000 8428    	beq.w	0xb5e8 <_vfprintf_r+0x1f20> @ imm = #0x850
    ad98: 9b22         	ldr	r3, [sp, #0x88]
    ad9a: 4299         	cmp	r1, r3
    ad9c: f240 8508    	bls.w	0xb7b0 <_vfprintf_r+0x20e8> @ imm = #0xa10
    ada0: 2030         	movs	r0, #0x30
    ada2: 1c5a         	adds	r2, r3, #0x1
    ada4: 9222         	str	r2, [sp, #0x88]
    ada6: 7018         	strb	r0, [r3]
    ada8: 9b22         	ldr	r3, [sp, #0x88]
    adaa: 428b         	cmp	r3, r1
    adac: d3f9         	blo	0xada2 <_vfprintf_r+0x16da> @ imm = #-0xe
    adae: 9a1b         	ldr	r2, [sp, #0x6c]
    adb0: 1b5b         	subs	r3, r3, r5
    adb2: 2e47         	cmp	r6, #0x47
    adb4: 920d         	str	r2, [sp, #0x34]
    adb6: 930f         	str	r3, [sp, #0x3c]
    adb8: f000 80cb    	beq.w	0xaf52 <_vfprintf_r+0x188a> @ imm = #0x196
    adbc: 2e46         	cmp	r6, #0x46
    adbe: f040 80cf    	bne.w	0xaf60 <_vfprintf_r+0x1898> @ imm = #0x19e
    adc2: 9b03         	ldr	r3, [sp, #0xc]
    adc4: 990d         	ldr	r1, [sp, #0x34]
    adc6: f003 0301    	and	r3, r3, #0x1
    adca: 9a06         	ldr	r2, [sp, #0x18]
    adcc: 2900         	cmp	r1, #0x0
    adce: ea43 0302    	orr.w	r3, r3, r2
    add2: f340 8480    	ble.w	0xb6d6 <_vfprintf_r+0x200e> @ imm = #0x900
    add6: 2b00         	cmp	r3, #0x0
    add8: f040 840c    	bne.w	0xb5f4 <_vfprintf_r+0x1f2c> @ imm = #0x818
    addc: 9b0d         	ldr	r3, [sp, #0x34]
    adde: 2466         	movs	r4, #0x66
    ade0: 930c         	str	r3, [sp, #0x30]
    ade2: 9b03         	ldr	r3, [sp, #0xc]
    ade4: 055b         	lsls	r3, r3, #0x15
    ade6: f100 8375    	bmi.w	0xb4d4 <_vfprintf_r+0x1e0c> @ imm = #0x6ea
    adea: 9b0c         	ldr	r3, [sp, #0x30]
    adec: ea23 73e3    	bic.w	r3, r3, r3, asr #31
    adf0: 9305         	str	r3, [sp, #0x14]
    adf2: f1ba 0f00    	cmp.w	r10, #0x0
    adf6: f000 8287    	beq.w	0xb308 <_vfprintf_r+0x1c40> @ imm = #0x50e
    adfa: 9b05         	ldr	r3, [sp, #0x14]
    adfc: f8cd 800c    	str.w	r8, [sp, #0xc]
    ae00: 3301         	adds	r3, #0x1
    ae02: 9305         	str	r3, [sp, #0x14]
    ae04: 2300         	movs	r3, #0x0
    ae06: 461a         	mov	r2, r3
    ae08: 930a         	str	r3, [sp, #0x28]
    ae0a: 232d         	movs	r3, #0x2d
    ae0c: 9206         	str	r2, [sp, #0x18]
    ae0e: f88d 3067    	strb.w	r3, [sp, #0x67]
    ae12: 9210         	str	r2, [sp, #0x40]
    ae14: 920e         	str	r2, [sp, #0x38]
    ae16: f7fe bde2    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x143c
    ae1a: 4629         	mov	r1, r5
    ae1c: 4645         	mov	r5, r8
    ae1e: 4688         	mov	r8, r1
    ae20: 3301         	adds	r3, #0x1
    ae22: 4422         	add	r2, r4
    ae24: f8c7 8000    	str.w	r8, [r7]
    ae28: 2b07         	cmp	r3, #0x7
    ae2a: 607c         	str	r4, [r7, #0x4]
    ae2c: e9cd 3225    	strd	r3, r2, [sp, #148]
    ae30: dc45         	bgt	0xaebe <_vfprintf_r+0x17f6> @ imm = #0x8a
    ae32: 3708         	adds	r7, #0x8
    ae34: f7ff bb4b    	b.w	0xa4ce <_vfprintf_r+0xe06> @ imm = #-0x96a
    ae38: 441d         	add	r5, r3
    ae3a: 1b1c         	subs	r4, r3, r4
    ae3c: eba5 050a    	sub.w	r5, r5, r10
    ae40: 42a5         	cmp	r5, r4
    ae42: bfa8         	it	ge
    ae44: 4625         	movge	r5, r4
    ae46: f7ff bb74    	b.w	0xa532 <_vfprintf_r+0xe6a> @ imm = #-0x918
    ae4a: af27         	add	r7, sp, #0x9c
    ae4c: f7fe bdf7    	b.w	0x9a3e <_vfprintf_r+0x376> @ imm = #-0x1412
    ae50: ea4f 78e6    	asr.w	r8, r6, #0x1f
    ae54: 4643         	mov	r3, r8
    ae56: f7fe be71    	b.w	0x9b3c <_vfprintf_r+0x474> @ imm = #-0x131e
    ae5a: b2de         	uxtb	r6, r3
    ae5c: 9b06         	ldr	r3, [sp, #0x18]
    ae5e: 4688         	mov	r8, r1
    ae60: f88d 1067    	strb.w	r1, [sp, #0x67]
    ae64: 2b00         	cmp	r3, #0x0
    ae66: f6bf ac9a    	bge.w	0xa79e <_vfprintf_r+0x10d6> @ imm = #-0x6cc
    ae6a: 920b         	str	r2, [sp, #0x2c]
    ae6c: f7fe bfba    	b.w	0x9de4 <_vfprintf_r+0x71c> @ imm = #-0x108c
    ae70: 9a0b         	ldr	r2, [sp, #0x2c]
    ae72: 9908         	ldr	r1, [sp, #0x20]
    ae74: 6812         	ldr	r2, [r2]
    ae76: 8011         	strh	r1, [r2]
    ae78: f7ff b866    	b.w	0x9f48 <_vfprintf_r+0x880> @ imm = #-0xf34
    ae7c: 9803         	ldr	r0, [sp, #0xc]
    ae7e: 920b         	str	r2, [sp, #0x2c]
    ae80: f7ff b832    	b.w	0x9ee8 <_vfprintf_r+0x820> @ imm = #-0xf9c
    ae84: 4628         	mov	r0, r5
    ae86: f7fe f8c7    	bl	0x9018 <strlen>         @ imm = #-0x1e72
    ae8a: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    ae8e: ea20 72e0    	bic.w	r2, r0, r0, asr #31
    ae92: 900c         	str	r0, [sp, #0x30]
    ae94: 9205         	str	r2, [sp, #0x14]
    ae96: 2b00         	cmp	r3, #0x0
    ae98: f43e af63    	beq.w	0x9d62 <_vfprintf_r+0x69a> @ imm = #-0x113a
    ae9c: f7fe bf5f    	b.w	0x9d5e <_vfprintf_r+0x696> @ imm = #-0x1142
    aea0: aa24         	add	r2, sp, #0x90
    aea2: 9904         	ldr	r1, [sp, #0x10]
    aea4: 4658         	mov	r0, r11
    aea6: f001 f87d    	bl	0xbfa4 <__sprint_r>     @ imm = #0x10fa
    aeaa: 2800         	cmp	r0, #0x0
    aeac: f43e ad3e    	beq.w	0x992c <_vfprintf_r+0x264> @ imm = #-0x1584
    aeb0: f7fe bd58    	b.w	0x9964 <_vfprintf_r+0x29c> @ imm = #-0x1550
    aeb4: 6d88         	ldr	r0, [r1, #0x58]
    aeb6: f7fe f837    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x1f92
    aeba: f7fe bd08    	b.w	0x98ce <_vfprintf_r+0x206> @ imm = #-0x15f0
    aebe: aa24         	add	r2, sp, #0x90
    aec0: 9904         	ldr	r1, [sp, #0x10]
    aec2: 4658         	mov	r0, r11
    aec4: f001 f86e    	bl	0xbfa4 <__sprint_r>     @ imm = #0x10dc
    aec8: 2800         	cmp	r0, #0x0
    aeca: f47e ad45    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1576
    aece: 9a26         	ldr	r2, [sp, #0x98]
    aed0: af27         	add	r7, sp, #0x9c
    aed2: f7ff bafc    	b.w	0xa4ce <_vfprintf_r+0xe06> @ imm = #-0xa08
    aed6: 2b00         	cmp	r3, #0x0
    aed8: f2c0 83d0    	blt.w	0xb67c <_vfprintf_r+0x1fb4> @ imm = #0x7a0
    aedc: 2306         	movs	r3, #0x6
    aede: eeb0 9b48    	vmov.f64	d9, d8
    aee2: f04f 0a00    	mov.w	r10, #0x0
    aee6: 9306         	str	r3, [sp, #0x18]
    aee8: e72a         	b	0xad40 <_vfprintf_r+0x1678> @ imm = #-0x1ac
    aeea: bf00         	nop
    aeec: 40 1d 21 80  	.word	0x80211d40
    aef0: cd cc cc cc  	.word	0xcccccccd
    aef4: e8 1e 21 80  	.word	0x80211ee8
    aef8: 1c59         	adds	r1, r3, #0x1
    aefa: 4658         	mov	r0, r11
    aefc: f7fe f928    	bl	0x9150 <_malloc_r>      @ imm = #-0x1db0
    af00: 4605         	mov	r5, r0
    af02: 2800         	cmp	r0, #0x0
    af04: f000 83fd    	beq.w	0xb702 <_vfprintf_r+0x203a> @ imm = #0x7fa
    af08: ee18 3a90    	vmov	r3, s17
    af0c: 2b00         	cmp	r3, #0x0
    af0e: f2c0 83cc    	blt.w	0xb6aa <_vfprintf_r+0x1fe2> @ imm = #0x798
    af12: eeb0 0b48    	vmov.f64	d0, d8
    af16: f04f 0a00    	mov.w	r10, #0x0
    af1a: 900a         	str	r0, [sp, #0x28]
    af1c: f7ff bb91    	b.w	0xa642 <_vfprintf_r+0xf7a> @ imm = #-0x8de
    af20: 2c66         	cmp	r4, #0x66
    af22: f43f af18    	beq.w	0xad56 <_vfprintf_r+0x168e> @ imm = #-0x1d0
    af26: ab22         	add	r3, sp, #0x88
    af28: 2102         	movs	r1, #0x2
    af2a: eeb0 0b49    	vmov.f64	d0, d9
    af2e: 9a06         	ldr	r2, [sp, #0x18]
    af30: 9301         	str	r3, [sp, #0x4]
    af32: ab1d         	add	r3, sp, #0x74
    af34: 4658         	mov	r0, r11
    af36: 9300         	str	r3, [sp]
    af38: ab1b         	add	r3, sp, #0x6c
    af3a: f001 fd41    	bl	0xc9c0 <_dtoa_r>        @ imm = #0x1a82
    af3e: 9b03         	ldr	r3, [sp, #0xc]
    af40: 4605         	mov	r5, r0
    af42: 07d9         	lsls	r1, r3, #0x1f
    af44: f100 8247    	bmi.w	0xb3d6 <_vfprintf_r+0x1d0e> @ imm = #0x48e
    af48: 9b22         	ldr	r3, [sp, #0x88]
    af4a: 1a1b         	subs	r3, r3, r0
    af4c: 930f         	str	r3, [sp, #0x3c]
    af4e: 9b1b         	ldr	r3, [sp, #0x6c]
    af50: 930d         	str	r3, [sp, #0x34]
    af52: 9b0d         	ldr	r3, [sp, #0x34]
    af54: 1cda         	adds	r2, r3, #0x3
    af56: db02         	blt	0xaf5e <_vfprintf_r+0x1896> @ imm = #0x4
    af58: 9a06         	ldr	r2, [sp, #0x18]
    af5a: 4293         	cmp	r3, r2
    af5c: dd59         	ble	0xb012 <_vfprintf_r+0x194a> @ imm = #0xb2
    af5e: 3c02         	subs	r4, #0x2
    af60: 9b0d         	ldr	r3, [sp, #0x34]
    af62: f88d 4078    	strb.w	r4, [sp, #0x78]
    af66: 3b01         	subs	r3, #0x1
    af68: 2b00         	cmp	r3, #0x0
    af6a: 931b         	str	r3, [sp, #0x6c]
    af6c: f2c0 82e8    	blt.w	0xb540 <_vfprintf_r+0x1e78> @ imm = #0x5d0
    af70: 222b         	movs	r2, #0x2b
    af72: 2b09         	cmp	r3, #0x9
    af74: f88d 2079    	strb.w	r2, [sp, #0x79]
    af78: f340 82eb    	ble.w	0xb552 <_vfprintf_r+0x1e8a> @ imm = #0x5d6
    af7c: 2200         	movs	r2, #0x0
    af7e: 9903         	ldr	r1, [sp, #0xc]
    af80: 920a         	str	r2, [sp, #0x28]
    af82: f10d 0e8f    	add.w	lr, sp, #0x8f
    af86: f8df 84f0    	ldr.w	r8, [pc, #0x4f0]        @ 0xb478 <_vfprintf_r+0x1db0>
    af8a: 9103         	str	r1, [sp, #0xc]
    af8c: 4676         	mov	r6, lr
    af8e: fba8 2103    	umull	r2, r1, r8, r3
    af92: 469c         	mov	r12, r3
    af94: 4630         	mov	r0, r6
    af96: 3e01         	subs	r6, #0x1
    af98: 08c9         	lsrs	r1, r1, #0x3
    af9a: f1bc 0f63    	cmp.w	r12, #0x63
    af9e: eb01 0281    	add.w	r2, r1, r1, lsl #2
    afa2: eba3 0242    	sub.w	r2, r3, r2, lsl #1
    afa6: 460b         	mov	r3, r1
    afa8: f102 0230    	add.w	r2, r2, #0x30
    afac: f800 2c01    	strb	r2, [r0, #-1]
    afb0: dced         	bgt	0xaf8e <_vfprintf_r+0x18c6> @ imm = #-0x26
    afb2: 3330         	adds	r3, #0x30
    afb4: 9903         	ldr	r1, [sp, #0xc]
    afb6: f806 3c01    	strb	r3, [r6, #-1]
    afba: 1e83         	subs	r3, r0, #0x2
    afbc: 4573         	cmp	r3, lr
    afbe: f080 839c    	bhs.w	0xb6fa <_vfprintf_r+0x2032> @ imm = #0x738
    afc2: f10d 0279    	add.w	r2, sp, #0x79
    afc6: f813 6b01    	ldrb	r6, [r3], #1
    afca: 4573         	cmp	r3, lr
    afcc: f802 6f01    	strb	r6, [r2, #1]!
    afd0: d1f9         	bne	0xafc6 <_vfprintf_r+0x18fe> @ imm = #-0xe
    afd2: f503 73a0    	add.w	r3, r3, #0x140
    afd6: aa1e         	add	r2, sp, #0x78
    afd8: 446b         	add	r3, sp, r3
    afda: 3bc4         	subs	r3, #0xc4
    afdc: 1a1b         	subs	r3, r3, r0
    afde: 1a9b         	subs	r3, r3, r2
    afe0: 9313         	str	r3, [sp, #0x4c]
    afe2: f7ff bba6    	b.w	0xa732 <_vfprintf_r+0x106a> @ imm = #-0x8b4
    afe6: 9803         	ldr	r0, [sp, #0xc]
    afe8: f420 6080    	bic	r0, r0, #0x400
    afec: f040 0002    	orr	r0, r0, #0x2
    aff0: 9003         	str	r0, [sp, #0xc]
    aff2: e4e8         	b	0xa9c6 <_vfprintf_r+0x12fe> @ imm = #-0x630
    aff4: 2300         	movs	r3, #0x0
    aff6: aa1d         	add	r2, sp, #0x74
    aff8: 4658         	mov	r0, r11
    affa: f8cd a000    	str.w	r10, [sp]
    affe: 4619         	mov	r1, r3
    b000: f001 fbb6    	bl	0xc770 <_wcsrtombs_r>   @ imm = #0x176c
    b004: 4603         	mov	r3, r0
    b006: 900c         	str	r0, [sp, #0x30]
    b008: 3301         	adds	r3, #0x1
    b00a: f000 821b    	beq.w	0xb444 <_vfprintf_r+0x1d7c> @ imm = #0x436
    b00e: 951d         	str	r5, [sp, #0x74]
    b010: e54b         	b	0xaaaa <_vfprintf_r+0x13e2> @ imm = #-0x56a
    b012: 9b0d         	ldr	r3, [sp, #0x34]
    b014: 9a0f         	ldr	r2, [sp, #0x3c]
    b016: 4293         	cmp	r3, r2
    b018: f2c0 81d4    	blt.w	0xb3c4 <_vfprintf_r+0x1cfc> @ imm = #0x3a8
    b01c: 9b03         	ldr	r3, [sp, #0xc]
    b01e: f013 0f01    	tst.w	r3, #0x1
    b022: 9b0d         	ldr	r3, [sp, #0x34]
    b024: f000 829f    	beq.w	0xb566 <_vfprintf_r+0x1e9e> @ imm = #0x53e
    b028: 9a11         	ldr	r2, [sp, #0x44]
    b02a: 4413         	add	r3, r2
    b02c: 930c         	str	r3, [sp, #0x30]
    b02e: 9b03         	ldr	r3, [sp, #0xc]
    b030: 055c         	lsls	r4, r3, #0x15
    b032: d503         	bpl	0xb03c <_vfprintf_r+0x1974> @ imm = #0x6
    b034: 9b0d         	ldr	r3, [sp, #0x34]
    b036: 2b00         	cmp	r3, #0x0
    b038: f300 824b    	bgt.w	0xb4d2 <_vfprintf_r+0x1e0a> @ imm = #0x496
    b03c: 9b0c         	ldr	r3, [sp, #0x30]
    b03e: 2467         	movs	r4, #0x67
    b040: ea23 73e3    	bic.w	r3, r3, r3, asr #31
    b044: 9305         	str	r3, [sp, #0x14]
    b046: e6d4         	b	0xadf2 <_vfprintf_r+0x172a> @ imm = #-0x258
    b048: 9b0e         	ldr	r3, [sp, #0x38]
    b04a: 9810         	ldr	r0, [sp, #0x40]
    b04c: 4303         	orrs	r3, r0
    b04e: 9b0f         	ldr	r3, [sp, #0x3c]
    b050: 442b         	add	r3, r5
    b052: f000 83c6    	beq.w	0xb7e2 <_vfprintf_r+0x211a> @ imm = #0x78c
    b056: 4656         	mov	r6, r10
    b058: 4639         	mov	r1, r7
    b05a: f8df 8424    	ldr.w	r8, [pc, #0x424]        @ 0xb480 <_vfprintf_r+0x1db8>
    b05e: 4607         	mov	r7, r0
    b060: f8dd a058    	ldr.w	r10, [sp, #0x58]
    b064: 9517         	str	r5, [sp, #0x5c]
    b066: 2f00         	cmp	r7, #0x0
    b068: dc32         	bgt	0xb0d0 <_vfprintf_r+0x1a08> @ imm = #0x64
    b06a: 980e         	ldr	r0, [sp, #0x38]
    b06c: f10a 3aff    	add.w	r10, r10, #0xffffffff
    b070: 3801         	subs	r0, #0x1
    b072: 900e         	str	r0, [sp, #0x38]
    b074: 9814         	ldr	r0, [sp, #0x50]
    b076: 9c15         	ldr	r4, [sp, #0x54]
    b078: 4402         	add	r2, r0
    b07a: e9c1 4000    	strd	r4, r0, [r1]
    b07e: 9825         	ldr	r0, [sp, #0x94]
    b080: 9226         	str	r2, [sp, #0x98]
    b082: 3001         	adds	r0, #0x1
    b084: 2807         	cmp	r0, #0x7
    b086: 9025         	str	r0, [sp, #0x94]
    b088: dc48         	bgt	0xb11c <_vfprintf_r+0x1a54> @ imm = #0x90
    b08a: 3108         	adds	r1, #0x8
    b08c: 1b9d         	subs	r5, r3, r6
    b08e: f89a 0000    	ldrb.w	r0, [r10]
    b092: 9306         	str	r3, [sp, #0x18]
    b094: 4285         	cmp	r5, r0
    b096: bfa8         	it	ge
    b098: 4605         	movge	r5, r0
    b09a: 2d00         	cmp	r5, #0x0
    b09c: dd0b         	ble	0xb0b6 <_vfprintf_r+0x19ee> @ imm = #0x16
    b09e: 9825         	ldr	r0, [sp, #0x94]
    b0a0: 442a         	add	r2, r5
    b0a2: 3001         	adds	r0, #0x1
    b0a4: 9226         	str	r2, [sp, #0x98]
    b0a6: 2807         	cmp	r0, #0x7
    b0a8: 9025         	str	r0, [sp, #0x94]
    b0aa: e9c1 6500    	strd	r6, r5, [r1]
    b0ae: dc52         	bgt	0xb156 <_vfprintf_r+0x1a8e> @ imm = #0xa4
    b0b0: 3108         	adds	r1, #0x8
    b0b2: f89a 0000    	ldrb.w	r0, [r10]
    b0b6: 2d00         	cmp	r5, #0x0
    b0b8: bfac         	ite	ge
    b0ba: 1b44         	subge	r4, r0, r5
    b0bc: 4604         	movlt	r4, r0
    b0be: 2c00         	cmp	r4, #0x0
    b0c0: dc08         	bgt	0xb0d4 <_vfprintf_r+0x1a0c> @ imm = #0x10
    b0c2: 4406         	add	r6, r0
    b0c4: 980e         	ldr	r0, [sp, #0x38]
    b0c6: 2800         	cmp	r0, #0x0
    b0c8: dccd         	bgt	0xb066 <_vfprintf_r+0x199e> @ imm = #-0x66
    b0ca: 2f00         	cmp	r7, #0x0
    b0cc: f340 829a    	ble.w	0xb604 <_vfprintf_r+0x1f3c> @ imm = #0x534
    b0d0: 3f01         	subs	r7, #0x1
    b0d2: e7cf         	b	0xb074 <_vfprintf_r+0x19ac> @ imm = #-0x62
    b0d4: 2c10         	cmp	r4, #0x10
    b0d6: 9825         	ldr	r0, [sp, #0x94]
    b0d8: f340 82d8    	ble.w	0xb68c <_vfprintf_r+0x1fc4> @ imm = #0x5b0
    b0dc: 960c         	str	r6, [sp, #0x30]
    b0de: 2510         	movs	r5, #0x10
    b0e0: 9e04         	ldr	r6, [sp, #0x10]
    b0e2: f8cd 8034    	str.w	r8, [sp, #0x34]
    b0e6: 9310         	str	r3, [sp, #0x40]
    b0e8: e002         	b	0xb0f0 <_vfprintf_r+0x1a28> @ imm = #0x4
    b0ea: 3c10         	subs	r4, #0x10
    b0ec: 2c10         	cmp	r4, #0x10
    b0ee: dd22         	ble	0xb136 <_vfprintf_r+0x1a6e> @ imm = #0x44
    b0f0: 3001         	adds	r0, #0x1
    b0f2: 3210         	adds	r2, #0x10
    b0f4: 2807         	cmp	r0, #0x7
    b0f6: e9c1 8500    	strd	r8, r5, [r1]
    b0fa: e9cd 0225    	strd	r0, r2, [sp, #148]
    b0fe: f101 0108    	add.w	r1, r1, #0x8
    b102: ddf2         	ble	0xb0ea <_vfprintf_r+0x1a22> @ imm = #-0x1c
    b104: aa24         	add	r2, sp, #0x90
    b106: 4631         	mov	r1, r6
    b108: 4658         	mov	r0, r11
    b10a: f000 ff4b    	bl	0xbfa4 <__sprint_r>     @ imm = #0xe96
    b10e: 2800         	cmp	r0, #0x0
    b110: f47e ac22    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x17bc
    b114: a927         	add	r1, sp, #0x9c
    b116: e9dd 0225    	ldrd	r0, r2, [sp, #148]
    b11a: e7e6         	b	0xb0ea <_vfprintf_r+0x1a22> @ imm = #-0x34
    b11c: aa24         	add	r2, sp, #0x90
    b11e: 9904         	ldr	r1, [sp, #0x10]
    b120: 4658         	mov	r0, r11
    b122: 9306         	str	r3, [sp, #0x18]
    b124: f000 ff3e    	bl	0xbfa4 <__sprint_r>     @ imm = #0xe7c
    b128: 2800         	cmp	r0, #0x0
    b12a: f47e ac15    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x17d6
    b12e: 9a26         	ldr	r2, [sp, #0x98]
    b130: a927         	add	r1, sp, #0x9c
    b132: 9b06         	ldr	r3, [sp, #0x18]
    b134: e7aa         	b	0xb08c <_vfprintf_r+0x19c4> @ imm = #-0xac
    b136: e9dd 6c0c    	ldrd	r6, r12, [sp, #48]
    b13a: 9b10         	ldr	r3, [sp, #0x40]
    b13c: 3001         	adds	r0, #0x1
    b13e: 4422         	add	r2, r4
    b140: f8c1 c000    	str.w	r12, [r1]
    b144: 2807         	cmp	r0, #0x7
    b146: 604c         	str	r4, [r1, #0x4]
    b148: e9cd 0225    	strd	r0, r2, [sp, #148]
    b14c: dc5f         	bgt	0xb20e <_vfprintf_r+0x1b46> @ imm = #0xbe
    b14e: 3108         	adds	r1, #0x8
    b150: f89a 0000    	ldrb.w	r0, [r10]
    b154: e7b5         	b	0xb0c2 <_vfprintf_r+0x19fa> @ imm = #-0x96
    b156: aa24         	add	r2, sp, #0x90
    b158: 9904         	ldr	r1, [sp, #0x10]
    b15a: 4658         	mov	r0, r11
    b15c: 930c         	str	r3, [sp, #0x30]
    b15e: f000 ff21    	bl	0xbfa4 <__sprint_r>     @ imm = #0xe42
    b162: 2800         	cmp	r0, #0x0
    b164: f47e abf8    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1810
    b168: f89a 0000    	ldrb.w	r0, [r10]
    b16c: a927         	add	r1, sp, #0x9c
    b16e: 9a26         	ldr	r2, [sp, #0x98]
    b170: 9b0c         	ldr	r3, [sp, #0x30]
    b172: e7a0         	b	0xb0b6 <_vfprintf_r+0x19ee> @ imm = #-0xc0
    b174: 920b         	str	r2, [sp, #0x2c]
    b176: f7fe be34    	b.w	0x9de2 <_vfprintf_r+0x71a> @ imm = #-0x1398
    b17a: 232d         	movs	r3, #0x2d
    b17c: 2c47         	cmp	r4, #0x47
    b17e: f88d 3067    	strb.w	r3, [sp, #0x67]
    b182: f300 80e4    	bgt.w	0xb34e <_vfprintf_r+0x1c86> @ imm = #0x1c8
    b186: 2300         	movs	r3, #0x0
    b188: 2203         	movs	r2, #0x3
    b18a: 4dba         	ldr	r5, [pc, #0x2e8]        @ 0xb474 <_vfprintf_r+0x1dac>
    b18c: 930a         	str	r3, [sp, #0x28]
    b18e: 920c         	str	r2, [sp, #0x30]
    b190: 2204         	movs	r2, #0x4
    b192: 9310         	str	r3, [sp, #0x40]
    b194: e9cd 2305    	strd	r2, r3, [sp, #20]
    b198: e9cd 330d    	strd	r3, r3, [sp, #52]
    b19c: f7fe bc1f    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x17c2
    b1a0: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    b1a4: f8cd 802c    	str.w	r8, [sp, #0x2c]
    b1a8: 3b00         	subs	r3, #0x0
    b1aa: bf18         	it	ne
    b1ac: 2301         	movne	r3, #0x1
    b1ae: 9305         	str	r3, [sp, #0x14]
    b1b0: 9b0c         	ldr	r3, [sp, #0x30]
    b1b2: 9306         	str	r3, [sp, #0x18]
    b1b4: 9310         	str	r3, [sp, #0x40]
    b1b6: 930a         	str	r3, [sp, #0x28]
    b1b8: e9cd 330d    	strd	r3, r3, [sp, #52]
    b1bc: f7fe bc0f    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x17e2
    b1c0: aa24         	add	r2, sp, #0x90
    b1c2: 9904         	ldr	r1, [sp, #0x10]
    b1c4: 4658         	mov	r0, r11
    b1c6: f000 feed    	bl	0xbfa4 <__sprint_r>     @ imm = #0xdda
    b1ca: 2800         	cmp	r0, #0x0
    b1cc: f47e abc4    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1878
    b1d0: 991b         	ldr	r1, [sp, #0x6c]
    b1d2: af27         	add	r7, sp, #0x9c
    b1d4: 9a26         	ldr	r2, [sp, #0x98]
    b1d6: f7ff b800    	b.w	0xa1da <_vfprintf_r+0xb12> @ imm = #-0x1000
    b1da: aa24         	add	r2, sp, #0x90
    b1dc: 9904         	ldr	r1, [sp, #0x10]
    b1de: 4658         	mov	r0, r11
    b1e0: f000 fee0    	bl	0xbfa4 <__sprint_r>     @ imm = #0xdc0
    b1e4: 2800         	cmp	r0, #0x0
    b1e6: f47e abb7    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1892
    b1ea: 991b         	ldr	r1, [sp, #0x6c]
    b1ec: af27         	add	r7, sp, #0x9c
    b1ee: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    b1f2: f7ff b803    	b.w	0xa1fc <_vfprintf_r+0xb34> @ imm = #-0xffa
    b1f6: aa24         	add	r2, sp, #0x90
    b1f8: 9904         	ldr	r1, [sp, #0x10]
    b1fa: 4658         	mov	r0, r11
    b1fc: f000 fed2    	bl	0xbfa4 <__sprint_r>     @ imm = #0xda4
    b200: 2800         	cmp	r0, #0x0
    b202: f47e aba9    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x18ae
    b206: 9a26         	ldr	r2, [sp, #0x98]
    b208: af27         	add	r7, sp, #0x9c
    b20a: f7ff b959    	b.w	0xa4c0 <_vfprintf_r+0xdf8> @ imm = #-0xd4e
    b20e: aa24         	add	r2, sp, #0x90
    b210: 9904         	ldr	r1, [sp, #0x10]
    b212: 4658         	mov	r0, r11
    b214: 930c         	str	r3, [sp, #0x30]
    b216: f000 fec5    	bl	0xbfa4 <__sprint_r>     @ imm = #0xd8a
    b21a: 2800         	cmp	r0, #0x0
    b21c: f47e ab9c    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x18c8
    b220: f89a 0000    	ldrb.w	r0, [r10]
    b224: a927         	add	r1, sp, #0x9c
    b226: 9a26         	ldr	r2, [sp, #0x98]
    b228: 9b0c         	ldr	r3, [sp, #0x30]
    b22a: e74a         	b	0xb0c2 <_vfprintf_r+0x19fa> @ imm = #-0x16c
    b22c: 9b03         	ldr	r3, [sp, #0xc]
    b22e: 07dc         	lsls	r4, r3, #0x1f
    b230: f57e ac1b    	bpl.w	0x9a6a <_vfprintf_r+0x3a2> @ imm = #-0x17ca
    b234: 9b11         	ldr	r3, [sp, #0x44]
    b236: 9912         	ldr	r1, [sp, #0x48]
    b238: 441a         	add	r2, r3
    b23a: e9c7 1300    	strd	r1, r3, [r7]
    b23e: 9b25         	ldr	r3, [sp, #0x94]
    b240: 9226         	str	r2, [sp, #0x98]
    b242: 3301         	adds	r3, #0x1
    b244: 2b07         	cmp	r3, #0x7
    b246: 9325         	str	r3, [sp, #0x94]
    b248: dcc7         	bgt	0xb1da <_vfprintf_r+0x1b12> @ imm = #-0x72
    b24a: 3708         	adds	r7, #0x8
    b24c: f7fe bfd9    	b.w	0xa202 <_vfprintf_r+0xb3a> @ imm = #-0x104e
    b250: 9a14         	ldr	r2, [sp, #0x50]
    b252: 9915         	ldr	r1, [sp, #0x54]
    b254: 1aaf         	subs	r7, r5, r2
    b256: 4638         	mov	r0, r7
    b258: f001 f976    	bl	0xc548 <strncpy>        @ imm = #0x12ec
    b25c: f89b 3001    	ldrb.w	r3, [r11, #0x1]
    b260: b10b         	cbz	r3, 0xb266 <_vfprintf_r+0x1b9e> @ imm = #0x2
    b262: f10b 0b01    	add.w	r11, r11, #0x1
    b266: eb16 0308    	adds.w	r3, r6, r8
    b26a: 4a83         	ldr	r2, [pc, #0x20c]        @ 0xb478 <_vfprintf_r+0x1db0>
    b26c: f04f 31cc    	mov.w	r1, #0xcccccccc
    b270: f04f 0c01    	mov.w	r12, #0x1
    b274: f143 0300    	adc	r3, r3, #0x0
    b278: 1e7d         	subs	r5, r7, #0x1
    b27a: fba2 0e03    	umull	r0, lr, r2, r3
    b27e: f02e 0003    	bic	r0, lr, #0x3
    b282: eb00 009e    	add.w	r0, r0, lr, lsr #2
    b286: 1a1b         	subs	r3, r3, r0
    b288: 1af3         	subs	r3, r6, r3
    b28a: f168 0800    	sbc	r8, r8, #0x0
    b28e: fb03 f101    	mul	r1, r3, r1
    b292: fba3 3002    	umull	r3, r0, r3, r2
    b296: fb02 1108    	mla	r1, r2, r8, r1
    b29a: fa23 f30c    	lsr.w	r3, r3, r12
    b29e: 4401         	add	r1, r0
    b2a0: ea43 76c1    	orr.w	r6, r3, r1, lsl #31
    b2a4: fa21 f80c    	lsr.w	r8, r1, r12
    b2a8: eb16 0308    	adds.w	r3, r6, r8
    b2ac: f143 0300    	adc	r3, r3, #0x0
    b2b0: fba2 1003    	umull	r1, r0, r2, r3
    b2b4: f020 0103    	bic	r1, r0, #0x3
    b2b8: eb01 0190    	add.w	r1, r1, r0, lsr #2
    b2bc: 1a5b         	subs	r3, r3, r1
    b2be: 1af3         	subs	r3, r6, r3
    b2c0: fba3 3102    	umull	r3, r1, r3, r2
    b2c4: f168 0000    	sbc	r0, r8, #0x0
    b2c8: fa23 f30c    	lsr.w	r3, r3, r12
    b2cc: fb02 1200    	mla	r2, r2, r0, r1
    b2d0: ea43 73c2    	orr.w	r3, r3, r2, lsl #31
    b2d4: eb03 0383    	add.w	r3, r3, r3, lsl #2
    b2d8: eba6 0343    	sub.w	r3, r6, r3, lsl #1
    b2dc: 3330         	adds	r3, #0x30
    b2de: f807 3c01    	strb	r3, [r7, #-1]
    b2e2: e47a         	b	0xabda <_vfprintf_r+0x1512> @ imm = #-0x70c
    b2e4: aa24         	add	r2, sp, #0x90
    b2e6: 9904         	ldr	r1, [sp, #0x10]
    b2e8: 4658         	mov	r0, r11
    b2ea: f000 fe5b    	bl	0xbfa4 <__sprint_r>     @ imm = #0xcb6
    b2ee: 2800         	cmp	r0, #0x0
    b2f0: f47e ab32    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x199c
    b2f4: 9c1b         	ldr	r4, [sp, #0x6c]
    b2f6: af27         	add	r7, sp, #0x9c
    b2f8: 9a26         	ldr	r2, [sp, #0x98]
    b2fa: f7ff b904    	b.w	0xa506 <_vfprintf_r+0xe3e> @ imm = #-0xdf8
    b2fe: 9b06         	ldr	r3, [sp, #0x18]
    b300: 2102         	movs	r1, #0x2
    b302: 3301         	adds	r3, #0x1
    b304: 930f         	str	r3, [sp, #0x3c]
    b306: e529         	b	0xad5c <_vfprintf_r+0x1694> @ imm = #-0x5ae
    b308: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    b30c: 2b00         	cmp	r3, #0x0
    b30e: f000 81c0    	beq.w	0xb692 <_vfprintf_r+0x1fca> @ imm = #0x380
    b312: 9a05         	ldr	r2, [sp, #0x14]
    b314: f8cd a028    	str.w	r10, [sp, #0x28]
    b318: 3201         	adds	r2, #0x1
    b31a: f8cd 800c    	str.w	r8, [sp, #0xc]
    b31e: f8cd a018    	str.w	r10, [sp, #0x18]
    b322: 9205         	str	r2, [sp, #0x14]
    b324: f8cd a040    	str.w	r10, [sp, #0x40]
    b328: f8cd a038    	str.w	r10, [sp, #0x38]
    b32c: f7fe bb57    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1952
    b330: aa24         	add	r2, sp, #0x90
    b332: 9904         	ldr	r1, [sp, #0x10]
    b334: 4658         	mov	r0, r11
    b336: f000 fe35    	bl	0xbfa4 <__sprint_r>     @ imm = #0xc6a
    b33a: 2800         	cmp	r0, #0x0
    b33c: f47e ab0c    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x19e8
    b340: 9c1b         	ldr	r4, [sp, #0x6c]
    b342: af27         	add	r7, sp, #0x9c
    b344: 9b0f         	ldr	r3, [sp, #0x3c]
    b346: 9a26         	ldr	r2, [sp, #0x98]
    b348: 1b1c         	subs	r4, r3, r4
    b34a: f7ff b8f2    	b.w	0xa532 <_vfprintf_r+0xe6a> @ imm = #-0xe1c
    b34e: 2300         	movs	r3, #0x0
    b350: 2203         	movs	r2, #0x3
    b352: 4d4a         	ldr	r5, [pc, #0x128]        @ 0xb47c <_vfprintf_r+0x1db4>
    b354: 930a         	str	r3, [sp, #0x28]
    b356: 920c         	str	r2, [sp, #0x30]
    b358: e71a         	b	0xb190 <_vfprintf_r+0x1ac8> @ imm = #-0x1cc
    b35a: 2300         	movs	r3, #0x0
    b35c: 460d         	mov	r5, r1
    b35e: 9306         	str	r3, [sp, #0x18]
    b360: f7fe ba29    	b.w	0x97b6 <_vfprintf_r+0xee> @ imm = #-0x1bae
    b364: 9a05         	ldr	r2, [sp, #0x14]
    b366: 9306         	str	r3, [sp, #0x18]
    b368: 3201         	adds	r2, #0x1
    b36a: f8cd 802c    	str.w	r8, [sp, #0x2c]
    b36e: 9310         	str	r3, [sp, #0x40]
    b370: 9205         	str	r2, [sp, #0x14]
    b372: e9cd 330d    	strd	r3, r3, [sp, #52]
    b376: f7fe bb32    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x199c
    b37a: 424c         	rsbs	r4, r1, #0
    b37c: 3110         	adds	r1, #0x10
    b37e: f8df 8100    	ldr.w	r8, [pc, #0x100]        @ 0xb480 <_vfprintf_r+0x1db8>
    b382: da34         	bge	0xb3ee <_vfprintf_r+0x1d26> @ imm = #0x68
    b384: 2610         	movs	r6, #0x10
    b386: e002         	b	0xb38e <_vfprintf_r+0x1cc6> @ imm = #0x4
    b388: 3c10         	subs	r4, #0x10
    b38a: 2c10         	cmp	r4, #0x10
    b38c: dd2f         	ble	0xb3ee <_vfprintf_r+0x1d26> @ imm = #0x5e
    b38e: 3301         	adds	r3, #0x1
    b390: 3210         	adds	r2, #0x10
    b392: 2b07         	cmp	r3, #0x7
    b394: e9c7 8600    	strd	r8, r6, [r7]
    b398: e9cd 3225    	strd	r3, r2, [sp, #148]
    b39c: f107 0708    	add.w	r7, r7, #0x8
    b3a0: ddf2         	ble	0xb388 <_vfprintf_r+0x1cc0> @ imm = #-0x1c
    b3a2: aa24         	add	r2, sp, #0x90
    b3a4: 9904         	ldr	r1, [sp, #0x10]
    b3a6: 4658         	mov	r0, r11
    b3a8: f000 fdfc    	bl	0xbfa4 <__sprint_r>     @ imm = #0xbf8
    b3ac: 2800         	cmp	r0, #0x0
    b3ae: f47e aad3    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1a5a
    b3b2: af27         	add	r7, sp, #0x9c
    b3b4: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    b3b8: e7e6         	b	0xb388 <_vfprintf_r+0x1cc0> @ imm = #-0x34
    b3ba: 2300         	movs	r3, #0x0
    b3bc: ad37         	add	r5, sp, #0xdc
    b3be: 930a         	str	r3, [sp, #0x28]
    b3c0: f7ff bb83    	b.w	0xaaca <_vfprintf_r+0x1402> @ imm = #-0x8fa
    b3c4: 9b0f         	ldr	r3, [sp, #0x3c]
    b3c6: 9a11         	ldr	r2, [sp, #0x44]
    b3c8: 189a         	adds	r2, r3, r2
    b3ca: 9b0d         	ldr	r3, [sp, #0x34]
    b3cc: 2b00         	cmp	r3, #0x0
    b3ce: 920c         	str	r2, [sp, #0x30]
    b3d0: dd67         	ble	0xb4a2 <_vfprintf_r+0x1dda> @ imm = #0xce
    b3d2: 2467         	movs	r4, #0x67
    b3d4: e505         	b	0xade2 <_vfprintf_r+0x171a> @ imm = #-0x5f6
    b3d6: eeb5 9b40    	<unknown>
    b3da: 9b06         	ldr	r3, [sp, #0x18]
    b3dc: 18c1         	adds	r1, r0, r3
    b3de: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    b3e2: d041         	beq	0xb468 <_vfprintf_r+0x1da0> @ imm = #0x82
    b3e4: 9b22         	ldr	r3, [sp, #0x88]
    b3e6: 4299         	cmp	r1, r3
    b3e8: f63f acda    	bhi.w	0xada0 <_vfprintf_r+0x16d8> @ imm = #-0x64c
    b3ec: e4df         	b	0xadae <_vfprintf_r+0x16e6> @ imm = #-0x642
    b3ee: 3301         	adds	r3, #0x1
    b3f0: 4422         	add	r2, r4
    b3f2: f8c7 8000    	str.w	r8, [r7]
    b3f6: 2b07         	cmp	r3, #0x7
    b3f8: 607c         	str	r4, [r7, #0x4]
    b3fa: e9cd 3225    	strd	r3, r2, [sp, #148]
    b3fe: f77f af24    	ble.w	0xb24a <_vfprintf_r+0x1b82> @ imm = #-0x1b8
    b402: aa24         	add	r2, sp, #0x90
    b404: 9904         	ldr	r1, [sp, #0x10]
    b406: 4658         	mov	r0, r11
    b408: f000 fdcc    	bl	0xbfa4 <__sprint_r>     @ imm = #0xb98
    b40c: 2800         	cmp	r0, #0x0
    b40e: f47e aaa3    	bne.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1aba
    b412: af27         	add	r7, sp, #0x9c
    b414: e9dd 3225    	ldrd	r3, r2, [sp, #148]
    b418: f7fe bef3    	b.w	0xa202 <_vfprintf_r+0xb3a> @ imm = #-0x121a
    b41c: f89d 0067    	ldrb.w	r0, [sp, #0x67]
    b420: f8cd a018    	str.w	r10, [sp, #0x18]
    b424: f7fe bcf6    	b.w	0x9e14 <_vfprintf_r+0x74c> @ imm = #-0x1614
    b428: 07ce         	lsls	r6, r1, #0x1f
    b42a: f57f a98d    	bpl.w	0xa748 <_vfprintf_r+0x1080> @ imm = #-0xce6
    b42e: f7ff b987    	b.w	0xa740 <_vfprintf_r+0x1078> @ imm = #-0xcf2
    b432: 2300         	movs	r3, #0x0
    b434: eeb1 0b48    	<unknown>
    b438: f04f 0a2d    	mov.w	r10, #0x2d
    b43c: ad37         	add	r5, sp, #0xdc
    b43e: 930a         	str	r3, [sp, #0x28]
    b440: f7ff b8ff    	b.w	0xa642 <_vfprintf_r+0xf7a> @ imm = #-0xe02
    b444: 9b04         	ldr	r3, [sp, #0x10]
    b446: 2200         	movs	r2, #0x0
    b448: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    b44c: 920a         	str	r2, [sp, #0x28]
    b44e: f043 0340    	orr	r3, r3, #0x40
    b452: 9a04         	ldr	r2, [sp, #0x10]
    b454: 8193         	strh	r3, [r2, #0xc]
    b456: f7fe ba7f    	b.w	0x9958 <_vfprintf_r+0x290> @ imm = #-0x1b02
    b45a: 9b06         	ldr	r3, [sp, #0x18]
    b45c: 9f05         	ldr	r7, [sp, #0x14]
    b45e: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    b462: 930c         	str	r3, [sp, #0x30]
    b464: f7ff bb21    	b.w	0xaaaa <_vfprintf_r+0x13e2> @ imm = #-0x9be
    b468: 9b1b         	ldr	r3, [sp, #0x6c]
    b46a: 930d         	str	r3, [sp, #0x34]
    b46c: 9b06         	ldr	r3, [sp, #0x18]
    b46e: 930f         	str	r3, [sp, #0x3c]
    b470: e56f         	b	0xaf52 <_vfprintf_r+0x188a> @ imm = #-0x522
    b472: bf00         	nop
    b474: 30 1d 21 80  	.word	0x80211d30
    b478: cd cc cc cc  	.word	0xcccccccd
    b47c: 34 1d 21 80  	.word	0x80211d34
    b480: e8 1e 21 80  	.word	0x80211ee8
    b484: f8cd 802c    	str.w	r8, [sp, #0x2c]
    b488: 2b00         	cmp	r3, #0x0
    b48a: f000 80d1    	beq.w	0xb630 <_vfprintf_r+0x1f68> @ imm = #0x1a2
    b48e: 9b06         	ldr	r3, [sp, #0x18]
    b490: 2473         	movs	r4, #0x73
    b492: 9006         	str	r0, [sp, #0x18]
    b494: 1c5a         	adds	r2, r3, #0x1
    b496: 930c         	str	r3, [sp, #0x30]
    b498: 9010         	str	r0, [sp, #0x40]
    b49a: 9205         	str	r2, [sp, #0x14]
    b49c: 900e         	str	r0, [sp, #0x38]
    b49e: f7fe ba9e    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1ac4
    b4a2: f1c3 0301    	rsb.w	r3, r3, #0x1
    b4a6: 2467         	movs	r4, #0x67
    b4a8: 441a         	add	r2, r3
    b4aa: ea22 73e2    	bic.w	r3, r2, r2, asr #31
    b4ae: 920c         	str	r2, [sp, #0x30]
    b4b0: 9305         	str	r3, [sp, #0x14]
    b4b2: e49e         	b	0xadf2 <_vfprintf_r+0x172a> @ imm = #-0x6c4
    b4b4: 2a00         	cmp	r2, #0x0
    b4b6: f6ff a91f    	blt.w	0xa6f8 <_vfprintf_r+0x1030> @ imm = #-0xdc2
    b4ba: 1c50         	adds	r0, r2, #0x1
    b4bc: 4619         	mov	r1, r3
    b4be: 2630         	movs	r6, #0x30
    b4c0: 4418         	add	r0, r3
    b4c2: f801 6b01    	strb	r6, [r1], #1
    b4c6: 4281         	cmp	r1, r0
    b4c8: d1fb         	bne	0xb4c2 <_vfprintf_r+0x1dfa> @ imm = #-0xa
    b4ca: 441a         	add	r2, r3
    b4cc: 1c53         	adds	r3, r2, #0x1
    b4ce: f7ff b913    	b.w	0xa6f8 <_vfprintf_r+0x1030> @ imm = #-0xdda
    b4d2: 2467         	movs	r4, #0x67
    b4d4: 9916         	ldr	r1, [sp, #0x58]
    b4d6: 780b         	ldrb	r3, [r1]
    b4d8: 2bff         	cmp	r3, #0xff
    b4da: f000 814d    	beq.w	0xb778 <_vfprintf_r+0x20b0> @ imm = #0x29a
    b4de: 2600         	movs	r6, #0x0
    b4e0: 9a0d         	ldr	r2, [sp, #0x34]
    b4e2: 4630         	mov	r0, r6
    b4e4: e003         	b	0xb4ee <_vfprintf_r+0x1e26> @ imm = #0x6
    b4e6: 3001         	adds	r0, #0x1
    b4e8: 3101         	adds	r1, #0x1
    b4ea: 2bff         	cmp	r3, #0xff
    b4ec: d008         	beq	0xb500 <_vfprintf_r+0x1e38> @ imm = #0x10
    b4ee: 4293         	cmp	r3, r2
    b4f0: da06         	bge	0xb500 <_vfprintf_r+0x1e38> @ imm = #0xc
    b4f2: 1ad2         	subs	r2, r2, r3
    b4f4: 784b         	ldrb	r3, [r1, #0x1]
    b4f6: 2b00         	cmp	r3, #0x0
    b4f8: d1f5         	bne	0xb4e6 <_vfprintf_r+0x1e1e> @ imm = #-0x16
    b4fa: 780b         	ldrb	r3, [r1]
    b4fc: 3601         	adds	r6, #0x1
    b4fe: e7f4         	b	0xb4ea <_vfprintf_r+0x1e22> @ imm = #-0x18
    b500: 920d         	str	r2, [sp, #0x34]
    b502: 9116         	str	r1, [sp, #0x58]
    b504: 900e         	str	r0, [sp, #0x38]
    b506: 9610         	str	r6, [sp, #0x40]
    b508: 9a10         	ldr	r2, [sp, #0x40]
    b50a: 9b0e         	ldr	r3, [sp, #0x38]
    b50c: 9914         	ldr	r1, [sp, #0x50]
    b50e: 4413         	add	r3, r2
    b510: 9a0c         	ldr	r2, [sp, #0x30]
    b512: fb01 2303    	mla	r3, r1, r3, r2
    b516: 930c         	str	r3, [sp, #0x30]
    b518: ea23 73e3    	bic.w	r3, r3, r3, asr #31
    b51c: 9305         	str	r3, [sp, #0x14]
    b51e: f1ba 0f00    	cmp.w	r10, #0x0
    b522: f000 80c9    	beq.w	0xb6b8 <_vfprintf_r+0x1ff0> @ imm = #0x192
    b526: 9b05         	ldr	r3, [sp, #0x14]
    b528: f8cd 800c    	str.w	r8, [sp, #0xc]
    b52c: 3301         	adds	r3, #0x1
    b52e: 9305         	str	r3, [sp, #0x14]
    b530: 232d         	movs	r3, #0x2d
    b532: f88d 3067    	strb.w	r3, [sp, #0x67]
    b536: 2300         	movs	r3, #0x0
    b538: 930a         	str	r3, [sp, #0x28]
    b53a: 9306         	str	r3, [sp, #0x18]
    b53c: f7fe ba4f    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1b62
    b540: 9b0d         	ldr	r3, [sp, #0x34]
    b542: 222d         	movs	r2, #0x2d
    b544: f1c3 0301    	rsb.w	r3, r3, #0x1
    b548: f88d 2079    	strb.w	r2, [sp, #0x79]
    b54c: 2b09         	cmp	r3, #0x9
    b54e: f73f ad15    	bgt.w	0xaf7c <_vfprintf_r+0x18b4> @ imm = #-0x5d6
    b552: 2230         	movs	r2, #0x30
    b554: 9903         	ldr	r1, [sp, #0xc]
    b556: f88d 207a    	strb.w	r2, [sp, #0x7a]
    b55a: 2200         	movs	r2, #0x0
    b55c: 920a         	str	r2, [sp, #0x28]
    b55e: f10d 027b    	add.w	r2, sp, #0x7b
    b562: f7ff b8e0    	b.w	0xa726 <_vfprintf_r+0x105e> @ imm = #-0xe40
    b566: 930c         	str	r3, [sp, #0x30]
    b568: e561         	b	0xb02e <_vfprintf_r+0x1966> @ imm = #-0x53e
    b56a: eeb5 9b40    	<unknown>
    b56e: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    b572: f040 80e5    	bne.w	0xb740 <_vfprintf_r+0x2078> @ imm = #0x1ca
    b576: 9b1b         	ldr	r3, [sp, #0x6c]
    b578: 4419         	add	r1, r3
    b57a: 930d         	str	r3, [sp, #0x34]
    b57c: 1b4b         	subs	r3, r1, r5
    b57e: 930f         	str	r3, [sp, #0x3c]
    b580: e41f         	b	0xadc2 <_vfprintf_r+0x16fa> @ imm = #-0x7c2
    b582: eeb5 9b40    	<unknown>
    b586: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    b58a: d005         	beq	0xb598 <_vfprintf_r+0x1ed0> @ imm = #0xa
    b58c: 9b22         	ldr	r3, [sp, #0x88]
    b58e: 4299         	cmp	r1, r3
    b590: f63f ac06    	bhi.w	0xada0 <_vfprintf_r+0x16d8> @ imm = #-0x7f4
    b594: 1b5b         	subs	r3, r3, r5
    b596: 930f         	str	r3, [sp, #0x3c]
    b598: 9b1b         	ldr	r3, [sp, #0x6c]
    b59a: 2e47         	cmp	r6, #0x47
    b59c: 930d         	str	r3, [sp, #0x34]
    b59e: f47f acdf    	bne.w	0xaf60 <_vfprintf_r+0x1898> @ imm = #-0x642
    b5a2: e4d6         	b	0xaf52 <_vfprintf_r+0x188a> @ imm = #-0x654
    b5a4: 2300         	movs	r3, #0x0
    b5a6: 2203         	movs	r2, #0x3
    b5a8: 930a         	str	r3, [sp, #0x28]
    b5aa: 920c         	str	r2, [sp, #0x30]
    b5ac: e5f0         	b	0xb190 <_vfprintf_r+0x1ac8> @ imm = #-0x420
    b5ae: 9b03         	ldr	r3, [sp, #0xc]
    b5b0: f023 0380    	bic	r3, r3, #0x80
    b5b4: 9303         	str	r3, [sp, #0xc]
    b5b6: ee18 3a90    	vmov	r3, s17
    b5ba: f013 4300    	ands	r3, r3, #0x80000000
    b5be: 930d         	str	r3, [sp, #0x34]
    b5c0: d04a         	beq	0xb658 <_vfprintf_r+0x1f90> @ imm = #0x94
    b5c2: 232d         	movs	r3, #0x2d
    b5c4: 2203         	movs	r2, #0x3
    b5c6: 2c47         	cmp	r4, #0x47
    b5c8: f88d 3067    	strb.w	r3, [sp, #0x67]
    b5cc: f04f 0300    	mov.w	r3, #0x0
    b5d0: 920c         	str	r2, [sp, #0x30]
    b5d2: 930a         	str	r3, [sp, #0x28]
    b5d4: f340 80b2    	ble.w	0xb73c <_vfprintf_r+0x2074> @ imm = #0x164
    b5d8: 4d83         	ldr	r5, [pc, #0x20c]        @ 0xb7e8 <_vfprintf_r+0x2120>
    b5da: e5d9         	b	0xb190 <_vfprintf_r+0x1ac8> @ imm = #-0x44e
    b5dc: eeb1 9b48    	<unknown>
    b5e0: f04f 0a2d    	mov.w	r10, #0x2d
    b5e4: f7ff bbac    	b.w	0xad40 <_vfprintf_r+0x1678> @ imm = #-0x8a8
    b5e8: 1b4b         	subs	r3, r1, r5
    b5ea: 930f         	str	r3, [sp, #0x3c]
    b5ec: 9b1b         	ldr	r3, [sp, #0x6c]
    b5ee: 930d         	str	r3, [sp, #0x34]
    b5f0: f7ff bbe7    	b.w	0xadc2 <_vfprintf_r+0x16fa> @ imm = #-0x832
    b5f4: 4613         	mov	r3, r2
    b5f6: 9a11         	ldr	r2, [sp, #0x44]
    b5f8: 2466         	movs	r4, #0x66
    b5fa: 4413         	add	r3, r2
    b5fc: 440b         	add	r3, r1
    b5fe: 930c         	str	r3, [sp, #0x30]
    b600: f7ff bbef    	b.w	0xade2 <_vfprintf_r+0x171a> @ imm = #-0x822
    b604: f8cd a058    	str.w	r10, [sp, #0x58]
    b608: 460f         	mov	r7, r1
    b60a: 9d17         	ldr	r5, [sp, #0x5c]
    b60c: 46b2         	mov	r10, r6
    b60e: 9b06         	ldr	r3, [sp, #0x18]
    b610: 459a         	cmp	r10, r3
    b612: bf28         	it	hs
    b614: 469a         	movhs	r10, r3
    b616: f7fe bf61    	b.w	0xa4dc <_vfprintf_r+0xe14> @ imm = #-0x113e
    b61a: 2b00         	cmp	r3, #0x0
    b61c: f2c0 80a4    	blt.w	0xb768 <_vfprintf_r+0x20a0> @ imm = #0x148
    b620: 2301         	movs	r3, #0x1
    b622: eeb0 9b48    	vmov.f64	d9, d8
    b626: f04f 0a00    	mov.w	r10, #0x0
    b62a: 9306         	str	r3, [sp, #0x18]
    b62c: f7ff bb88    	b.w	0xad40 <_vfprintf_r+0x1678> @ imm = #-0x8f0
    b630: 9b06         	ldr	r3, [sp, #0x18]
    b632: 2473         	movs	r4, #0x73
    b634: 930c         	str	r3, [sp, #0x30]
    b636: 9305         	str	r3, [sp, #0x14]
    b638: 9b0a         	ldr	r3, [sp, #0x28]
    b63a: 9310         	str	r3, [sp, #0x40]
    b63c: 930e         	str	r3, [sp, #0x38]
    b63e: 9306         	str	r3, [sp, #0x18]
    b640: f7fe b9cd    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1c66
    b644: f1c2 0301    	rsb.w	r3, r2, #0x1
    b648: 222d         	movs	r2, #0x2d
    b64a: 2b09         	cmp	r3, #0x9
    b64c: f88d 2079    	strb.w	r2, [sp, #0x79]
    b650: f73f ac97    	bgt.w	0xaf82 <_vfprintf_r+0x18ba> @ imm = #-0x6d2
    b654: f7ff b865    	b.w	0xa722 <_vfprintf_r+0x105a> @ imm = #-0xf36
    b658: 2c47         	cmp	r4, #0x47
    b65a: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    b65e: bfcc         	ite	gt
    b660: 4d61         	ldrgt	r5, [pc, #0x184]        @ 0xb7e8 <_vfprintf_r+0x2120>
    b662: 4d62         	ldrle	r5, [pc, #0x188]        @ 0xb7ec <_vfprintf_r+0x2124>
    b664: 2b00         	cmp	r3, #0x0
    b666: f040 80b1    	bne.w	0xb7cc <_vfprintf_r+0x2104> @ imm = #0x162
    b66a: 2203         	movs	r2, #0x3
    b66c: 9306         	str	r3, [sp, #0x18]
    b66e: 9310         	str	r3, [sp, #0x40]
    b670: 920c         	str	r2, [sp, #0x30]
    b672: 930e         	str	r3, [sp, #0x38]
    b674: 930a         	str	r3, [sp, #0x28]
    b676: 9205         	str	r2, [sp, #0x14]
    b678: f7fe b9b1    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1c9e
    b67c: 2306         	movs	r3, #0x6
    b67e: eeb1 9b48    	<unknown>
    b682: f04f 0a2d    	mov.w	r10, #0x2d
    b686: 9306         	str	r3, [sp, #0x18]
    b688: f7ff bb5a    	b.w	0xad40 <_vfprintf_r+0x1678> @ imm = #-0x94c
    b68c: f8df c160    	ldr.w	r12, [pc, #0x160]       @ 0xb7f0 <_vfprintf_r+0x2128>
    b690: e554         	b	0xb13c <_vfprintf_r+0x1a74> @ imm = #-0x558
    b692: f8cd a028    	str.w	r10, [sp, #0x28]
    b696: f8cd 800c    	str.w	r8, [sp, #0xc]
    b69a: f8cd a018    	str.w	r10, [sp, #0x18]
    b69e: f8cd a040    	str.w	r10, [sp, #0x40]
    b6a2: f8cd a038    	str.w	r10, [sp, #0x38]
    b6a6: f7fe b99a    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1ccc
    b6aa: eeb1 0b48    	<unknown>
    b6ae: f04f 0a2d    	mov.w	r10, #0x2d
    b6b2: 900a         	str	r0, [sp, #0x28]
    b6b4: f7fe bfc5    	b.w	0xa642 <_vfprintf_r+0xf7a> @ imm = #-0x1076
    b6b8: f89d 3067    	ldrb.w	r3, [sp, #0x67]
    b6bc: 2b00         	cmp	r3, #0x0
    b6be: d07d         	beq	0xb7bc <_vfprintf_r+0x20f4> @ imm = #0xfa
    b6c0: 9b05         	ldr	r3, [sp, #0x14]
    b6c2: f8cd a028    	str.w	r10, [sp, #0x28]
    b6c6: 3301         	adds	r3, #0x1
    b6c8: f8cd 800c    	str.w	r8, [sp, #0xc]
    b6cc: f8cd a018    	str.w	r10, [sp, #0x18]
    b6d0: 9305         	str	r3, [sp, #0x14]
    b6d2: f7fe b984    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1cf8
    b6d6: b92b         	cbnz	r3, 0xb6e4 <_vfprintf_r+0x201c> @ imm = #0xa
    b6d8: 2301         	movs	r3, #0x1
    b6da: 2466         	movs	r4, #0x66
    b6dc: 9305         	str	r3, [sp, #0x14]
    b6de: 930c         	str	r3, [sp, #0x30]
    b6e0: f7ff bb87    	b.w	0xadf2 <_vfprintf_r+0x172a> @ imm = #-0x8f2
    b6e4: 9b11         	ldr	r3, [sp, #0x44]
    b6e6: 2466         	movs	r4, #0x66
    b6e8: 9a06         	ldr	r2, [sp, #0x18]
    b6ea: 3301         	adds	r3, #0x1
    b6ec: 441a         	add	r2, r3
    b6ee: ea22 73e2    	bic.w	r3, r2, r2, asr #31
    b6f2: 920c         	str	r2, [sp, #0x30]
    b6f4: 9305         	str	r3, [sp, #0x14]
    b6f6: f7ff bb7c    	b.w	0xadf2 <_vfprintf_r+0x172a> @ imm = #-0x908
    b6fa: 2302         	movs	r3, #0x2
    b6fc: 9313         	str	r3, [sp, #0x4c]
    b6fe: f7ff b818    	b.w	0xa732 <_vfprintf_r+0x106a> @ imm = #-0xfd0
    b702: 9804         	ldr	r0, [sp, #0x10]
    b704: f9b0 300c    	ldrsh.w	r3, [r0, #0xc]
    b708: 6e42         	ldr	r2, [r0, #0x64]
    b70a: f043 0140    	orr	r1, r3, #0x40
    b70e: 8181         	strh	r1, [r0, #0xc]
    b710: 07d0         	lsls	r0, r2, #0x1f
    b712: f53e ab4d    	bmi.w	0x9db0 <_vfprintf_r+0x6e8> @ imm = #-0x1966
    b716: 0598         	lsls	r0, r3, #0x16
    b718: f53e ab4a    	bmi.w	0x9db0 <_vfprintf_r+0x6e8> @ imm = #-0x196c
    b71c: f7fe b9ef    	b.w	0x9afe <_vfprintf_r+0x436> @ imm = #-0x1c22
    b720: 9a04         	ldr	r2, [sp, #0x10]
    b722: 6e53         	ldr	r3, [r2, #0x64]
    b724: 07dd         	lsls	r5, r3, #0x1f
    b726: f53e ab43    	bmi.w	0x9db0 <_vfprintf_r+0x6e8> @ imm = #-0x197a
    b72a: 8993         	ldrh	r3, [r2, #0xc]
    b72c: 059c         	lsls	r4, r3, #0x16
    b72e: f53e ab3f    	bmi.w	0x9db0 <_vfprintf_r+0x6e8> @ imm = #-0x1982
    b732: 6d90         	ldr	r0, [r2, #0x58]
    b734: f7fd fbf8    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x2810
    b738: f7fe bb3a    	b.w	0x9db0 <_vfprintf_r+0x6e8> @ imm = #-0x198c
    b73c: 4d2b         	ldr	r5, [pc, #0xac]         @ 0xb7ec <_vfprintf_r+0x2124>
    b73e: e527         	b	0xb190 <_vfprintf_r+0x1ac8> @ imm = #-0x5b2
    b740: 9b0f         	ldr	r3, [sp, #0x3c]
    b742: f1c3 0301    	rsb.w	r3, r3, #0x1
    b746: 931b         	str	r3, [sp, #0x6c]
    b748: f7ff bb1f    	b.w	0xad8a <_vfprintf_r+0x16c2> @ imm = #-0x9c2
    b74c: 7a81         	ldrb	r1, [r0, #0xa]
    b74e: f7fe bfd1    	b.w	0xa6f4 <_vfprintf_r+0x102c> @ imm = #-0x105e
    b752: 9b0b         	ldr	r3, [sp, #0x2c]
    b754: 786c         	ldrb	r4, [r5, #0x1]
    b756: 460d         	mov	r5, r1
    b758: f853 2b04    	ldr	r2, [r3], #4
    b75c: ea42 72e2    	orr.w	r2, r2, r2, asr #31
    b760: 930b         	str	r3, [sp, #0x2c]
    b762: 9206         	str	r2, [sp, #0x18]
    b764: f7fe b826    	b.w	0x97b4 <_vfprintf_r+0xec> @ imm = #-0x1fb4
    b768: 2301         	movs	r3, #0x1
    b76a: eeb1 9b48    	<unknown>
    b76e: f04f 0a2d    	mov.w	r10, #0x2d
    b772: 9306         	str	r3, [sp, #0x18]
    b774: f7ff bae4    	b.w	0xad40 <_vfprintf_r+0x1678> @ imm = #-0xa38
    b778: 2300         	movs	r3, #0x0
    b77a: 9310         	str	r3, [sp, #0x40]
    b77c: 930e         	str	r3, [sp, #0x38]
    b77e: e6c3         	b	0xb508 <_vfprintf_r+0x1e40> @ imm = #-0x27a
    b780: 9803         	ldr	r0, [sp, #0xc]
    b782: f7fe bbeb    	b.w	0x9f5c <_vfprintf_r+0x894> @ imm = #-0x182a
    b786: 4619         	mov	r1, r3
    b788: f7fe bc27    	b.w	0x9fda <_vfprintf_r+0x912> @ imm = #-0x17b2
    b78c: 9b0d         	ldr	r3, [sp, #0x34]
    b78e: 9310         	str	r3, [sp, #0x40]
    b790: 930e         	str	r3, [sp, #0x38]
    b792: f7fe b924    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1db8
    b796: 9b04         	ldr	r3, [sp, #0x10]
    b798: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    b79c: f043 0340    	orr	r3, r3, #0x40
    b7a0: e657         	b	0xb452 <_vfprintf_r+0x1d8a> @ imm = #-0x352
    b7a2: 9b04         	ldr	r3, [sp, #0x10]
    b7a4: 900a         	str	r0, [sp, #0x28]
    b7a6: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    b7aa: f043 0340    	orr	r3, r3, #0x40
    b7ae: e650         	b	0xb452 <_vfprintf_r+0x1d8a> @ imm = #-0x360
    b7b0: 1b5b         	subs	r3, r3, r5
    b7b2: 930f         	str	r3, [sp, #0x3c]
    b7b4: 9b1b         	ldr	r3, [sp, #0x6c]
    b7b6: 930d         	str	r3, [sp, #0x34]
    b7b8: f7ff bb03    	b.w	0xadc2 <_vfprintf_r+0x16fa> @ imm = #-0x9fa
    b7bc: f8cd a028    	str.w	r10, [sp, #0x28]
    b7c0: f8cd 800c    	str.w	r8, [sp, #0xc]
    b7c4: f8cd a018    	str.w	r10, [sp, #0x18]
    b7c8: f7fe b909    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1dee
    b7cc: 2203         	movs	r2, #0x3
    b7ce: 2300         	movs	r3, #0x0
    b7d0: 920c         	str	r2, [sp, #0x30]
    b7d2: 2204         	movs	r2, #0x4
    b7d4: 9306         	str	r3, [sp, #0x18]
    b7d6: 9205         	str	r2, [sp, #0x14]
    b7d8: 9310         	str	r3, [sp, #0x40]
    b7da: 930e         	str	r3, [sp, #0x38]
    b7dc: 930a         	str	r3, [sp, #0x28]
    b7de: f7fe b8fe    	b.w	0x99de <_vfprintf_r+0x316> @ imm = #-0x1e04
    b7e2: 9306         	str	r3, [sp, #0x18]
    b7e4: e713         	b	0xb60e <_vfprintf_r+0x1f46> @ imm = #-0x1da
    b7e6: bf00         	nop
    b7e8: 3c 1d 21 80  	.word	0x80211d3c
    b7ec: 38 1d 21 80  	.word	0x80211d38
    b7f0: e8 1e 21 80  	.word	0x80211ee8

0000b7f4 <__sbprintf>:
; __sbprintf():
    b7f4: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    b7f8: 4698         	mov	r8, r3
    b7fa: 898b         	ldrh	r3, [r1, #0xc]
    b7fc: f5ad 6d8d    	sub.w	sp, sp, #0x468
    b800: 4616         	mov	r6, r2
    b802: f023 0302    	bic	r3, r3, #0x2
    b806: 4607         	mov	r7, r0
    b808: a816         	add	r0, sp, #0x58
    b80a: 460d         	mov	r5, r1
    b80c: f8ad 300c    	strh.w	r3, [sp, #0xc]
    b810: ab1a         	add	r3, sp, #0x68
    b812: 466c         	mov	r4, sp
    b814: 9300         	str	r3, [sp]
    b816: 9304         	str	r3, [sp, #0x10]
    b818: f44f 6380    	mov.w	r3, #0x400
    b81c: 9302         	str	r3, [sp, #0x8]
    b81e: 9305         	str	r3, [sp, #0x14]
    b820: 6e4b         	ldr	r3, [r1, #0x64]
    b822: 9319         	str	r3, [sp, #0x64]
    b824: 89cb         	ldrh	r3, [r1, #0xe]
    b826: f8ad 300e    	strh.w	r3, [sp, #0xe]
    b82a: 69cb         	ldr	r3, [r1, #0x1c]
    b82c: 9307         	str	r3, [sp, #0x1c]
    b82e: 6a4b         	ldr	r3, [r1, #0x24]
    b830: 9309         	str	r3, [sp, #0x24]
    b832: 2300         	movs	r3, #0x0
    b834: 9306         	str	r3, [sp, #0x18]
    b836: f7fd fb71    	bl	0x8f1c <__retarget_lock_init_recursive> @ imm = #-0x291e
    b83a: 4632         	mov	r2, r6
    b83c: 4643         	mov	r3, r8
    b83e: 4669         	mov	r1, sp
    b840: 4638         	mov	r0, r7
    b842: f7fd ff41    	bl	0x96c8 <_vfprintf_r>    @ imm = #-0x217e
    b846: 1e06         	subs	r6, r0, #0x0
    b848: db07         	blt	0xb85a <__sbprintf+0x66> @ imm = #0xe
    b84a: 4669         	mov	r1, sp
    b84c: 4638         	mov	r0, r7
    b84e: f000 fcb3    	bl	0xc1b8 <_fflush_r>      @ imm = #0x966
    b852: 2800         	cmp	r0, #0x0
    b854: bf18         	it	ne
    b856: f04f 36ff    	movne.w	r6, #0xffffffff
    b85a: 89a3         	ldrh	r3, [r4, #0xc]
    b85c: 065b         	lsls	r3, r3, #0x19
    b85e: d503         	bpl	0xb868 <__sbprintf+0x74> @ imm = #0x6
    b860: 89ab         	ldrh	r3, [r5, #0xc]
    b862: f043 0340    	orr	r3, r3, #0x40
    b866: 81ab         	strh	r3, [r5, #0xc]
    b868: 6da0         	ldr	r0, [r4, #0x58]
    b86a: f7fd fb59    	bl	0x8f20 <__retarget_lock_close_recursive> @ imm = #-0x294e
    b86e: 4630         	mov	r0, r6
    b870: f50d 6d8d    	add.w	sp, sp, #0x468
    b874: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}

0000b878 <__sfvwrite_r>:
; __sfvwrite_r():
    b878: 6893         	ldr	r3, [r2, #0x8]
    b87a: 2b00         	cmp	r3, #0x0
    b87c: f000 80b7    	beq.w	0xb9ee <__sfvwrite_r+0x176> @ imm = #0x16e
    b880: f9b1 c00c    	ldrsh.w	r12, [r1, #0xc]
    b884: f01c 0f08    	tst.w	r12, #0x8
    b888: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    b88c: 4617         	mov	r7, r2
    b88e: b083         	sub	sp, #0xc
    b890: 4680         	mov	r8, r0
    b892: 460c         	mov	r4, r1
    b894: d027         	beq	0xb8e6 <__sfvwrite_r+0x6e> @ imm = #0x4e
    b896: 690b         	ldr	r3, [r1, #0x10]
    b898: b32b         	cbz	r3, 0xb8e6 <__sfvwrite_r+0x6e> @ imm = #0x4a
    b89a: f01c 0302    	ands	r3, r12, #0x2
    b89e: 683d         	ldr	r5, [r7]
    b8a0: d02d         	beq	0xb8fe <__sfvwrite_r+0x86> @ imm = #0x5a
    b8a2: f04f 0a00    	mov.w	r10, #0x0
    b8a6: f8df b2b0    	ldr.w	r11, [pc, #0x2b0]       @ 0xbb58 <__sfvwrite_r+0x2e0>
    b8aa: 46b9         	mov	r9, r7
    b8ac: 4656         	mov	r6, r10
    b8ae: 455e         	cmp	r6, r11
    b8b0: 4633         	mov	r3, r6
    b8b2: 4652         	mov	r2, r10
    b8b4: 4640         	mov	r0, r8
    b8b6: bf28         	it	hs
    b8b8: 465b         	movhs	r3, r11
    b8ba: 2e00         	cmp	r6, #0x0
    b8bc: f000 8086    	beq.w	0xb9cc <__sfvwrite_r+0x154> @ imm = #0x10c
    b8c0: 69e1         	ldr	r1, [r4, #0x1c]
    b8c2: 6a67         	ldr	r7, [r4, #0x24]
    b8c4: 47b8         	blx	r7
    b8c6: 2800         	cmp	r0, #0x0
    b8c8: f340 8089    	ble.w	0xb9de <__sfvwrite_r+0x166> @ imm = #0x112
    b8cc: f8d9 3008    	ldr.w	r3, [r9, #0x8]
    b8d0: 4482         	add	r10, r0
    b8d2: 1a36         	subs	r6, r6, r0
    b8d4: 1a1b         	subs	r3, r3, r0
    b8d6: f8c9 3008    	str.w	r3, [r9, #0x8]
    b8da: 2b00         	cmp	r3, #0x0
    b8dc: d1e7         	bne	0xb8ae <__sfvwrite_r+0x36> @ imm = #-0x32
    b8de: 2000         	movs	r0, #0x0
    b8e0: b003         	add	sp, #0xc
    b8e2: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    b8e6: 4621         	mov	r1, r4
    b8e8: 4640         	mov	r0, r8
    b8ea: f000 fd2f    	bl	0xc34c <__swsetup_r>    @ imm = #0xa5e
    b8ee: 2800         	cmp	r0, #0x0
    b8f0: d17a         	bne	0xb9e8 <__sfvwrite_r+0x170> @ imm = #0xf4
    b8f2: f9b4 c00c    	ldrsh.w	r12, [r4, #0xc]
    b8f6: 683d         	ldr	r5, [r7]
    b8f8: f01c 0302    	ands	r3, r12, #0x2
    b8fc: d1d1         	bne	0xb8a2 <__sfvwrite_r+0x2a> @ imm = #-0x5e
    b8fe: f01c 0901    	ands	r9, r12, #0x1
    b902: d176         	bne	0xb9f2 <__sfvwrite_r+0x17a> @ imm = #0xec
    b904: 464e         	mov	r6, r9
    b906: 9700         	str	r7, [sp]
    b908: 2e00         	cmp	r6, #0x0
    b90a: d05b         	beq	0xb9c4 <__sfvwrite_r+0x14c> @ imm = #0xb6
    b90c: f41c 7f00    	tst.w	r12, #0x200
    b910: 6820         	ldr	r0, [r4]
    b912: f8d4 b008    	ldr.w	r11, [r4, #0x8]
    b916: f000 80b2    	beq.w	0xba7e <__sfvwrite_r+0x206> @ imm = #0x164
    b91a: 45b3         	cmp	r11, r6
    b91c: 465a         	mov	r2, r11
    b91e: f200 80e0    	bhi.w	0xbae2 <__sfvwrite_r+0x26a> @ imm = #0x1c0
    b922: f41c 6f90    	tst.w	r12, #0x480
    b926: d033         	beq	0xb990 <__sfvwrite_r+0x118> @ imm = #0x66
    b928: 6963         	ldr	r3, [r4, #0x14]
    b92a: 6921         	ldr	r1, [r4, #0x10]
    b92c: eb13 0343    	adds.w	r3, r3, r3, lsl #1
    b930: eba0 0b01    	sub.w	r11, r0, r1
    b934: bf48         	it	mi
    b936: 3301         	addmi	r3, #0x1
    b938: ea4f 0a63    	asr.w	r10, r3, #0x1
    b93c: f10b 0301    	add.w	r3, r11, #0x1
    b940: 4433         	add	r3, r6
    b942: 4652         	mov	r2, r10
    b944: 4553         	cmp	r3, r10
    b946: d901         	bls	0xb94c <__sfvwrite_r+0xd4> @ imm = #0x2
    b948: 469a         	mov	r10, r3
    b94a: 461a         	mov	r2, r3
    b94c: f41c 6f80    	tst.w	r12, #0x400
    b950: f000 80e5    	beq.w	0xbb1e <__sfvwrite_r+0x2a6> @ imm = #0x1ca
    b954: 4611         	mov	r1, r2
    b956: 4640         	mov	r0, r8
    b958: f7fd fbfa    	bl	0x9150 <_malloc_r>      @ imm = #-0x280c
    b95c: 2800         	cmp	r0, #0x0
    b95e: f000 80f4    	beq.w	0xbb4a <__sfvwrite_r+0x2d2> @ imm = #0x1e8
    b962: 465a         	mov	r2, r11
    b964: 6921         	ldr	r1, [r4, #0x10]
    b966: 9001         	str	r0, [sp, #0x4]
    b968: f7fd fae0    	bl	0x8f2c <memcpy>         @ imm = #-0x2a40
    b96c: 89a2         	ldrh	r2, [r4, #0xc]
    b96e: 9b01         	ldr	r3, [sp, #0x4]
    b970: f422 6290    	bic	r2, r2, #0x480
    b974: f042 0280    	orr	r2, r2, #0x80
    b978: 81a2         	strh	r2, [r4, #0xc]
    b97a: eb03 000b    	add.w	r0, r3, r11
    b97e: 6123         	str	r3, [r4, #0x10]
    b980: 4632         	mov	r2, r6
    b982: ebaa 030b    	sub.w	r3, r10, r11
    b986: 46b3         	mov	r11, r6
    b988: f8c4 a014    	str.w	r10, [r4, #0x14]
    b98c: 60a3         	str	r3, [r4, #0x8]
    b98e: 6020         	str	r0, [r4]
    b990: 4649         	mov	r1, r9
    b992: 9201         	str	r2, [sp, #0x4]
    b994: f000 fd5a    	bl	0xc44c <memmove>        @ imm = #0xab4
    b998: 68a3         	ldr	r3, [r4, #0x8]
    b99a: 9a01         	ldr	r2, [sp, #0x4]
    b99c: 46b2         	mov	r10, r6
    b99e: eba3 010b    	sub.w	r1, r3, r11
    b9a2: 6823         	ldr	r3, [r4]
    b9a4: 2600         	movs	r6, #0x0
    b9a6: 4413         	add	r3, r2
    b9a8: 60a1         	str	r1, [r4, #0x8]
    b9aa: 6023         	str	r3, [r4]
    b9ac: 9a00         	ldr	r2, [sp]
    b9ae: 44d1         	add	r9, r10
    b9b0: 6893         	ldr	r3, [r2, #0x8]
    b9b2: eba3 030a    	sub.w	r3, r3, r10
    b9b6: 6093         	str	r3, [r2, #0x8]
    b9b8: 2b00         	cmp	r3, #0x0
    b9ba: d090         	beq	0xb8de <__sfvwrite_r+0x66> @ imm = #-0xe0
    b9bc: f9b4 c00c    	ldrsh.w	r12, [r4, #0xc]
    b9c0: 2e00         	cmp	r6, #0x0
    b9c2: d1a3         	bne	0xb90c <__sfvwrite_r+0x94> @ imm = #-0xba
    b9c4: e9d5 9600    	ldrd	r9, r6, [r5]
    b9c8: 3508         	adds	r5, #0x8
    b9ca: e79d         	b	0xb908 <__sfvwrite_r+0x90> @ imm = #-0xc6
    b9cc: e9d5 a600    	ldrd	r10, r6, [r5]
    b9d0: 3508         	adds	r5, #0x8
    b9d2: e76c         	b	0xb8ae <__sfvwrite_r+0x36> @ imm = #-0x128
    b9d4: 4621         	mov	r1, r4
    b9d6: 4640         	mov	r0, r8
    b9d8: f000 fbee    	bl	0xc1b8 <_fflush_r>      @ imm = #0x7dc
    b9dc: b370         	cbz	r0, 0xba3c <__sfvwrite_r+0x1c4> @ imm = #0x5c
    b9de: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    b9e2: f043 0340    	orr	r3, r3, #0x40
    b9e6: 81a3         	strh	r3, [r4, #0xc]
    b9e8: f04f 30ff    	mov.w	r0, #0xffffffff
    b9ec: e778         	b	0xb8e0 <__sfvwrite_r+0x68> @ imm = #-0x110
    b9ee: 2000         	movs	r0, #0x0
    b9f0: 4770         	bx	lr
    b9f2: 461e         	mov	r6, r3
    b9f4: 46ba         	mov	r10, r7
    b9f6: 4699         	mov	r9, r3
    b9f8: 4618         	mov	r0, r3
    b9fa: 461f         	mov	r7, r3
    b9fc: 9500         	str	r5, [sp]
    b9fe: b35e         	cbz	r6, 0xba58 <__sfvwrite_r+0x1e0> @ imm = #0x56
    ba00: 2800         	cmp	r0, #0x0
    ba02: d031         	beq	0xba68 <__sfvwrite_r+0x1f0> @ imm = #0x62
    ba04: 464a         	mov	r2, r9
    ba06: 68a1         	ldr	r1, [r4, #0x8]
    ba08: 42b2         	cmp	r2, r6
    ba0a: 6963         	ldr	r3, [r4, #0x14]
    ba0c: 6820         	ldr	r0, [r4]
    ba0e: bf28         	it	hs
    ba10: 4632         	movhs	r2, r6
    ba12: eb03 0b01    	add.w	r11, r3, r1
    ba16: 6921         	ldr	r1, [r4, #0x10]
    ba18: 4288         	cmp	r0, r1
    ba1a: d901         	bls	0xba20 <__sfvwrite_r+0x1a8> @ imm = #0x2
    ba1c: 455a         	cmp	r2, r11
    ba1e: dc70         	bgt	0xbb02 <__sfvwrite_r+0x28a> @ imm = #0xe0
    ba20: 4293         	cmp	r3, r2
    ba22: dc61         	bgt	0xbae8 <__sfvwrite_r+0x270> @ imm = #0xc2
    ba24: 463a         	mov	r2, r7
    ba26: 69e1         	ldr	r1, [r4, #0x1c]
    ba28: 4640         	mov	r0, r8
    ba2a: 6a65         	ldr	r5, [r4, #0x24]
    ba2c: 47a8         	blx	r5
    ba2e: f1b0 0b00    	subs.w	r11, r0, #0x0
    ba32: ddd4         	ble	0xb9de <__sfvwrite_r+0x166> @ imm = #-0x58
    ba34: ebb9 090b    	subs.w	r9, r9, r11
    ba38: d0cc         	beq	0xb9d4 <__sfvwrite_r+0x15c> @ imm = #-0x68
    ba3a: 2001         	movs	r0, #0x1
    ba3c: f8da 3008    	ldr.w	r3, [r10, #0x8]
    ba40: 445f         	add	r7, r11
    ba42: eba6 060b    	sub.w	r6, r6, r11
    ba46: eba3 030b    	sub.w	r3, r3, r11
    ba4a: f8ca 3008    	str.w	r3, [r10, #0x8]
    ba4e: 2b00         	cmp	r3, #0x0
    ba50: f43f af45    	beq.w	0xb8de <__sfvwrite_r+0x66> @ imm = #-0x176
    ba54: 2e00         	cmp	r6, #0x0
    ba56: d1d3         	bne	0xba00 <__sfvwrite_r+0x188> @ imm = #-0x5a
    ba58: 9a00         	ldr	r2, [sp]
    ba5a: 6856         	ldr	r6, [r2, #0x4]
    ba5c: 4613         	mov	r3, r2
    ba5e: 3208         	adds	r2, #0x8
    ba60: 9200         	str	r2, [sp]
    ba62: 2e00         	cmp	r6, #0x0
    ba64: d0f8         	beq	0xba58 <__sfvwrite_r+0x1e0> @ imm = #-0x10
    ba66: 681f         	ldr	r7, [r3]
    ba68: 4632         	mov	r2, r6
    ba6a: 210a         	movs	r1, #0xa
    ba6c: 4638         	mov	r0, r7
    ba6e: f000 fe19    	bl	0xc6a4 <memchr>         @ imm = #0xc32
    ba72: 2800         	cmp	r0, #0x0
    ba74: d066         	beq	0xbb44 <__sfvwrite_r+0x2cc> @ imm = #0xcc
    ba76: 3001         	adds	r0, #0x1
    ba78: eba0 0907    	sub.w	r9, r0, r7
    ba7c: e7c2         	b	0xba04 <__sfvwrite_r+0x18c> @ imm = #-0x7c
    ba7e: 6923         	ldr	r3, [r4, #0x10]
    ba80: 4283         	cmp	r3, r0
    ba82: d316         	blo	0xbab2 <__sfvwrite_r+0x23a> @ imm = #0x2c
    ba84: 6962         	ldr	r2, [r4, #0x14]
    ba86: 42b2         	cmp	r2, r6
    ba88: d813         	bhi	0xbab2 <__sfvwrite_r+0x23a> @ imm = #0x26
    ba8a: f06f 4300    	mvn	r3, #0x80000000
    ba8e: 69e1         	ldr	r1, [r4, #0x1c]
    ba90: 4640         	mov	r0, r8
    ba92: 6a67         	ldr	r7, [r4, #0x24]
    ba94: 42b3         	cmp	r3, r6
    ba96: bf28         	it	hs
    ba98: 4633         	movhs	r3, r6
    ba9a: fb93 f3f2    	sdiv	r3, r3, r2
    ba9e: fb02 f303    	mul	r3, r2, r3
    baa2: 464a         	mov	r2, r9
    baa4: 47b8         	blx	r7
    baa6: f1b0 0a00    	subs.w	r10, r0, #0x0
    baaa: dd98         	ble	0xb9de <__sfvwrite_r+0x166> @ imm = #-0xd0
    baac: eba6 060a    	sub.w	r6, r6, r10
    bab0: e77c         	b	0xb9ac <__sfvwrite_r+0x134> @ imm = #-0x108
    bab2: 45b3         	cmp	r11, r6
    bab4: 46da         	mov	r10, r11
    bab6: 4649         	mov	r1, r9
    bab8: bf28         	it	hs
    baba: 46b2         	movhs	r10, r6
    babc: 4652         	mov	r2, r10
    babe: f000 fcc5    	bl	0xc44c <memmove>        @ imm = #0x98a
    bac2: 68a3         	ldr	r3, [r4, #0x8]
    bac4: 6822         	ldr	r2, [r4]
    bac6: eba3 030a    	sub.w	r3, r3, r10
    baca: 4452         	add	r2, r10
    bacc: 60a3         	str	r3, [r4, #0x8]
    bace: 6022         	str	r2, [r4]
    bad0: 2b00         	cmp	r3, #0x0
    bad2: d1eb         	bne	0xbaac <__sfvwrite_r+0x234> @ imm = #-0x2a
    bad4: 4621         	mov	r1, r4
    bad6: 4640         	mov	r0, r8
    bad8: f000 fb6e    	bl	0xc1b8 <_fflush_r>      @ imm = #0x6dc
    badc: 2800         	cmp	r0, #0x0
    bade: d0e5         	beq	0xbaac <__sfvwrite_r+0x234> @ imm = #-0x36
    bae0: e77d         	b	0xb9de <__sfvwrite_r+0x166> @ imm = #-0x106
    bae2: 46b3         	mov	r11, r6
    bae4: 4632         	mov	r2, r6
    bae6: e753         	b	0xb990 <__sfvwrite_r+0x118> @ imm = #-0x15a
    bae8: 4639         	mov	r1, r7
    baea: 9201         	str	r2, [sp, #0x4]
    baec: f000 fcae    	bl	0xc44c <memmove>        @ imm = #0x95c
    baf0: 9a01         	ldr	r2, [sp, #0x4]
    baf2: 68a3         	ldr	r3, [r4, #0x8]
    baf4: 4693         	mov	r11, r2
    baf6: 1a9b         	subs	r3, r3, r2
    baf8: 60a3         	str	r3, [r4, #0x8]
    bafa: 6823         	ldr	r3, [r4]
    bafc: 4413         	add	r3, r2
    bafe: 6023         	str	r3, [r4]
    bb00: e798         	b	0xba34 <__sfvwrite_r+0x1bc> @ imm = #-0xd0
    bb02: 4639         	mov	r1, r7
    bb04: 465a         	mov	r2, r11
    bb06: f000 fca1    	bl	0xc44c <memmove>        @ imm = #0x942
    bb0a: 6823         	ldr	r3, [r4]
    bb0c: 4621         	mov	r1, r4
    bb0e: 4640         	mov	r0, r8
    bb10: 445b         	add	r3, r11
    bb12: 6023         	str	r3, [r4]
    bb14: f000 fb50    	bl	0xc1b8 <_fflush_r>      @ imm = #0x6a0
    bb18: 2800         	cmp	r0, #0x0
    bb1a: d08b         	beq	0xba34 <__sfvwrite_r+0x1bc> @ imm = #-0xea
    bb1c: e75f         	b	0xb9de <__sfvwrite_r+0x166> @ imm = #-0x142
    bb1e: 4640         	mov	r0, r8
    bb20: f000 f84a    	bl	0xbbb8 <_realloc_r>     @ imm = #0x94
    bb24: 4603         	mov	r3, r0
    bb26: 2800         	cmp	r0, #0x0
    bb28: f47f af27    	bne.w	0xb97a <__sfvwrite_r+0x102> @ imm = #-0x1b2
    bb2c: 6921         	ldr	r1, [r4, #0x10]
    bb2e: 4640         	mov	r0, r8
    bb30: f001 fe76    	bl	0xd820 <_free_r>        @ imm = #0x1cec
    bb34: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    bb38: 220c         	movs	r2, #0xc
    bb3a: f023 0380    	bic	r3, r3, #0x80
    bb3e: f8c8 2000    	str.w	r2, [r8]
    bb42: e74e         	b	0xb9e2 <__sfvwrite_r+0x16a> @ imm = #-0x164
    bb44: 1c72         	adds	r2, r6, #0x1
    bb46: 4691         	mov	r9, r2
    bb48: e75d         	b	0xba06 <__sfvwrite_r+0x18e> @ imm = #-0x146
    bb4a: 220c         	movs	r2, #0xc
    bb4c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    bb50: f8c8 2000    	str.w	r2, [r8]
    bb54: e745         	b	0xb9e2 <__sfvwrite_r+0x16a> @ imm = #-0x176
    bb56: bf00         	nop
    bb58: 00 fc ff 7f  	.word	0x7ffffc00

0000bb5c <__malloc_lock>:
; __malloc_lock():
    bb5c: 4801         	ldr	r0, [pc, #0x4]          @ 0xbb64 <__malloc_lock+0x8>
    bb5e: f7fd b9e1    	b.w	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0x2c3e
    bb62: bf00         	nop
    bb64: 00 18 00 20  	.word	0x20001800

0000bb68 <__malloc_unlock>:
; __malloc_unlock():
    bb68: 4801         	ldr	r0, [pc, #0x4]          @ 0xbb70 <__malloc_unlock+0x8>
    bb6a: f7fd b9dd    	b.w	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x2c46
    bb6e: bf00         	nop
    bb70: 00 18 00 20  	.word	0x20001800

0000bb74 <_fwalk_sglue>:
; _fwalk_sglue():
    bb74: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
    bb78: f04f 0900    	mov.w	r9, #0x0
    bb7c: 4607         	mov	r7, r0
    bb7e: 4688         	mov	r8, r1
    bb80: 4616         	mov	r6, r2
    bb82: e9d6 5401    	ldrd	r5, r4, [r6, #4]
    bb86: 3d01         	subs	r5, #0x1
    bb88: d40f         	bmi	0xbbaa <_fwalk_sglue+0x36> @ imm = #0x1e
    bb8a: 89a3         	ldrh	r3, [r4, #0xc]
    bb8c: 2b01         	cmp	r3, #0x1
    bb8e: d908         	bls	0xbba2 <_fwalk_sglue+0x2e> @ imm = #0x10
    bb90: f9b4 300e    	ldrsh.w	r3, [r4, #0xe]
    bb94: 4621         	mov	r1, r4
    bb96: 4638         	mov	r0, r7
    bb98: 3301         	adds	r3, #0x1
    bb9a: d002         	beq	0xbba2 <_fwalk_sglue+0x2e> @ imm = #0x4
    bb9c: 47c0         	blx	r8
    bb9e: ea49 0900    	orr.w	r9, r9, r0
    bba2: 3d01         	subs	r5, #0x1
    bba4: 3468         	adds	r4, #0x68
    bba6: 1c6b         	adds	r3, r5, #0x1
    bba8: d1ef         	bne	0xbb8a <_fwalk_sglue+0x16> @ imm = #-0x22
    bbaa: 6836         	ldr	r6, [r6]
    bbac: 2e00         	cmp	r6, #0x0
    bbae: d1e8         	bne	0xbb82 <_fwalk_sglue+0xe> @ imm = #-0x30
    bbb0: 4648         	mov	r0, r9
    bbb2: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
    bbb6: bf00         	nop

0000bbb8 <_realloc_r>:
; _realloc_r():
    bbb8: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    bbbc: 4616         	mov	r6, r2
    bbbe: b083         	sub	sp, #0xc
    bbc0: 2900         	cmp	r1, #0x0
    bbc2: f000 809e    	beq.w	0xbd02 <_realloc_r+0x14a> @ imm = #0x13c
    bbc6: 460c         	mov	r4, r1
    bbc8: f106 050b    	add.w	r5, r6, #0xb
    bbcc: 4680         	mov	r8, r0
    bbce: f7ff ffc5    	bl	0xbb5c <__malloc_lock>  @ imm = #-0x76
    bbd2: f854 0c04    	ldr	r0, [r4, #-4]
    bbd6: 2d16         	cmp	r5, #0x16
    bbd8: f1a4 0908    	sub.w	r9, r4, #0x8
    bbdc: f020 0703    	bic	r7, r0, #0x3
    bbe0: d862         	bhi	0xbca8 <_realloc_r+0xf0> @ imm = #0xc4
    bbe2: 2210         	movs	r2, #0x10
    bbe4: 2300         	movs	r3, #0x0
    bbe6: 4615         	mov	r5, r2
    bbe8: 42b5         	cmp	r5, r6
    bbea: f0c0 80a2    	blo.w	0xbd32 <_realloc_r+0x17a> @ imm = #0x144
    bbee: 2b00         	cmp	r3, #0x0
    bbf0: f040 809f    	bne.w	0xbd32 <_realloc_r+0x17a> @ imm = #0x13e
    bbf4: 4297         	cmp	r7, r2
    bbf6: da61         	bge	0xbcbc <_realloc_r+0x104> @ imm = #0xc2
    bbf8: f8df b32c    	ldr.w	r11, [pc, #0x32c]       @ 0xbf28 <_realloc_r+0x370>
    bbfc: eb09 0107    	add.w	r1, r9, r7
    bc00: f8db 3008    	ldr.w	r3, [r11, #0x8]
    bc04: f8d1 c004    	ldr.w	r12, [r1, #0x4]
    bc08: 428b         	cmp	r3, r1
    bc0a: f000 809a    	beq.w	0xbd42 <_realloc_r+0x18a> @ imm = #0x134
    bc0e: f02c 0301    	bic	r3, r12, #0x1
    bc12: 440b         	add	r3, r1
    bc14: 685b         	ldr	r3, [r3, #0x4]
    bc16: 07db         	lsls	r3, r3, #0x1f
    bc18: d468         	bmi	0xbcec <_realloc_r+0x134> @ imm = #0xd0
    bc1a: f02c 0c03    	bic	r12, r12, #0x3
    bc1e: eb07 030c    	add.w	r3, r7, r12
    bc22: 4293         	cmp	r3, r2
    bc24: da45         	bge	0xbcb2 <_realloc_r+0xfa> @ imm = #0x8a
    bc26: 07c3         	lsls	r3, r0, #0x1f
    bc28: d412         	bmi	0xbc50 <_realloc_r+0x98> @ imm = #0x24
    bc2a: f854 3c08    	ldr	r3, [r4, #-8]
    bc2e: eba9 0a03    	sub.w	r10, r9, r3
    bc32: f8da 3004    	ldr.w	r3, [r10, #0x4]
    bc36: f023 0003    	bic	r0, r3, #0x3
    bc3a: 4484         	add	r12, r0
    bc3c: eb0c 0b07    	add.w	r11, r12, r7
    bc40: 455a         	cmp	r2, r11
    bc42: f340 8101    	ble.w	0xbe48 <_realloc_r+0x290> @ imm = #0x202
    bc46: eb07 0b00    	add.w	r11, r7, r0
    bc4a: 455a         	cmp	r2, r11
    bc4c: f340 80d7    	ble.w	0xbdfe <_realloc_r+0x246> @ imm = #0x1ae
    bc50: 4631         	mov	r1, r6
    bc52: 4640         	mov	r0, r8
    bc54: f7fd fa7c    	bl	0x9150 <_malloc_r>      @ imm = #-0x2b08
    bc58: 4606         	mov	r6, r0
    bc5a: 2800         	cmp	r0, #0x0
    bc5c: f000 812c    	beq.w	0xbeb8 <_realloc_r+0x300> @ imm = #0x258
    bc60: f854 3c04    	ldr	r3, [r4, #-4]
    bc64: f1a0 0208    	sub.w	r2, r0, #0x8
    bc68: f023 0301    	bic	r3, r3, #0x1
    bc6c: 444b         	add	r3, r9
    bc6e: 4293         	cmp	r3, r2
    bc70: f000 80b4    	beq.w	0xbddc <_realloc_r+0x224> @ imm = #0x168
    bc74: 1f3a         	subs	r2, r7, #0x4
    bc76: 2a24         	cmp	r2, #0x24
    bc78: f200 80e2    	bhi.w	0xbe40 <_realloc_r+0x288> @ imm = #0x1c4
    bc7c: 2a13         	cmp	r2, #0x13
    bc7e: f200 80b3    	bhi.w	0xbde8 <_realloc_r+0x230> @ imm = #0x166
    bc82: 4603         	mov	r3, r0
    bc84: 4622         	mov	r2, r4
    bc86: 6811         	ldr	r1, [r2]
    bc88: 6019         	str	r1, [r3]
    bc8a: 6851         	ldr	r1, [r2, #0x4]
    bc8c: 6059         	str	r1, [r3, #0x4]
    bc8e: 6892         	ldr	r2, [r2, #0x8]
    bc90: 609a         	str	r2, [r3, #0x8]
    bc92: 4621         	mov	r1, r4
    bc94: 4640         	mov	r0, r8
    bc96: f001 fdc3    	bl	0xd820 <_free_r>        @ imm = #0x1b86
    bc9a: 4640         	mov	r0, r8
    bc9c: f7ff ff64    	bl	0xbb68 <__malloc_unlock> @ imm = #-0x138
    bca0: 4630         	mov	r0, r6
    bca2: b003         	add	sp, #0xc
    bca4: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    bca8: f025 0507    	bic	r5, r5, #0x7
    bcac: 462a         	mov	r2, r5
    bcae: 0feb         	lsrs	r3, r5, #0x1f
    bcb0: e79a         	b	0xbbe8 <_realloc_r+0x30> @ imm = #-0xcc
    bcb2: 461f         	mov	r7, r3
    bcb4: e9d1 2302    	ldrd	r2, r3, [r1, #8]
    bcb8: 60d3         	str	r3, [r2, #0xc]
    bcba: 609a         	str	r2, [r3, #0x8]
    bcbc: 1b78         	subs	r0, r7, r5
    bcbe: f8d9 3004    	ldr.w	r3, [r9, #0x4]
    bcc2: eb09 0207    	add.w	r2, r9, r7
    bcc6: 280f         	cmp	r0, #0xf
    bcc8: f003 0301    	and	r3, r3, #0x1
    bccc: d81f         	bhi	0xbd0e <_realloc_r+0x156> @ imm = #0x3e
    bcce: 433b         	orrs	r3, r7
    bcd0: f8c9 3004    	str.w	r3, [r9, #0x4]
    bcd4: 6853         	ldr	r3, [r2, #0x4]
    bcd6: f043 0301    	orr	r3, r3, #0x1
    bcda: 6053         	str	r3, [r2, #0x4]
    bcdc: 4626         	mov	r6, r4
    bcde: 4640         	mov	r0, r8
    bce0: f7ff ff42    	bl	0xbb68 <__malloc_unlock> @ imm = #-0x17c
    bce4: 4630         	mov	r0, r6
    bce6: b003         	add	sp, #0xc
    bce8: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    bcec: 07c3         	lsls	r3, r0, #0x1f
    bcee: d4af         	bmi	0xbc50 <_realloc_r+0x98> @ imm = #-0xa2
    bcf0: f854 3c08    	ldr	r3, [r4, #-8]
    bcf4: eba9 0a03    	sub.w	r10, r9, r3
    bcf8: f8da 3004    	ldr.w	r3, [r10, #0x4]
    bcfc: f023 0003    	bic	r0, r3, #0x3
    bd00: e7a1         	b	0xbc46 <_realloc_r+0x8e> @ imm = #-0xbe
    bd02: 4611         	mov	r1, r2
    bd04: b003         	add	sp, #0xc
    bd06: e8bd 4ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    bd0a: f7fd ba21    	b.w	0x9150 <_malloc_r>      @ imm = #-0x2bbe
    bd0e: 432b         	orrs	r3, r5
    bd10: eb09 0105    	add.w	r1, r9, r5
    bd14: f040 0001    	orr	r0, r0, #0x1
    bd18: f8c9 3004    	str.w	r3, [r9, #0x4]
    bd1c: 3108         	adds	r1, #0x8
    bd1e: f841 0c04    	str	r0, [r1, #-4]
    bd22: 4640         	mov	r0, r8
    bd24: 6853         	ldr	r3, [r2, #0x4]
    bd26: f043 0301    	orr	r3, r3, #0x1
    bd2a: 6053         	str	r3, [r2, #0x4]
    bd2c: f001 fd78    	bl	0xd820 <_free_r>        @ imm = #0x1af0
    bd30: e7d4         	b	0xbcdc <_realloc_r+0x124> @ imm = #-0x58
    bd32: 230c         	movs	r3, #0xc
    bd34: f8c8 3000    	str.w	r3, [r8]
    bd38: 2600         	movs	r6, #0x0
    bd3a: 4630         	mov	r0, r6
    bd3c: b003         	add	sp, #0xc
    bd3e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    bd42: f02c 0c03    	bic	r12, r12, #0x3
    bd46: f105 0110    	add.w	r1, r5, #0x10
    bd4a: eb0c 0307    	add.w	r3, r12, r7
    bd4e: 428b         	cmp	r3, r1
    bd50: f280 8092    	bge.w	0xbe78 <_realloc_r+0x2c0> @ imm = #0x124
    bd54: 07c0         	lsls	r0, r0, #0x1f
    bd56: f53f af7b    	bmi.w	0xbc50 <_realloc_r+0x98> @ imm = #-0x10a
    bd5a: f854 3c08    	ldr	r3, [r4, #-8]
    bd5e: eba9 0a03    	sub.w	r10, r9, r3
    bd62: f8da 3004    	ldr.w	r3, [r10, #0x4]
    bd66: f023 0003    	bic	r0, r3, #0x3
    bd6a: 4484         	add	r12, r0
    bd6c: eb0c 0307    	add.w	r3, r12, r7
    bd70: 4299         	cmp	r1, r3
    bd72: f73f af68    	bgt.w	0xbc46 <_realloc_r+0x8e> @ imm = #-0x130
    bd76: 1f3a         	subs	r2, r7, #0x4
    bd78: 4656         	mov	r6, r10
    bd7a: f8da 100c    	ldr.w	r1, [r10, #0xc]
    bd7e: f856 0f08    	ldr	r0, [r6, #8]!
    bd82: 2a24         	cmp	r2, #0x24
    bd84: 60c1         	str	r1, [r0, #0xc]
    bd86: 6088         	str	r0, [r1, #0x8]
    bd88: f200 80b0    	bhi.w	0xbeec <_realloc_r+0x334> @ imm = #0x160
    bd8c: 2a13         	cmp	r2, #0x13
    bd8e: f240 80ab    	bls.w	0xbee8 <_realloc_r+0x330> @ imm = #0x156
    bd92: 6821         	ldr	r1, [r4]
    bd94: 2a1b         	cmp	r2, #0x1b
    bd96: f8ca 1008    	str.w	r1, [r10, #0x8]
    bd9a: 6861         	ldr	r1, [r4, #0x4]
    bd9c: f8ca 100c    	str.w	r1, [r10, #0xc]
    bda0: f200 80ab    	bhi.w	0xbefa <_realloc_r+0x342> @ imm = #0x156
    bda4: 3408         	adds	r4, #0x8
    bda6: f10a 0210    	add.w	r2, r10, #0x10
    bdaa: 6821         	ldr	r1, [r4]
    bdac: 6011         	str	r1, [r2]
    bdae: 6861         	ldr	r1, [r4, #0x4]
    bdb0: 6051         	str	r1, [r2, #0x4]
    bdb2: 68a1         	ldr	r1, [r4, #0x8]
    bdb4: 6091         	str	r1, [r2, #0x8]
    bdb6: 1b5b         	subs	r3, r3, r5
    bdb8: eb0a 0205    	add.w	r2, r10, r5
    bdbc: 4640         	mov	r0, r8
    bdbe: f043 0301    	orr	r3, r3, #0x1
    bdc2: f8cb 2008    	str.w	r2, [r11, #0x8]
    bdc6: 6053         	str	r3, [r2, #0x4]
    bdc8: f8da 3004    	ldr.w	r3, [r10, #0x4]
    bdcc: f003 0301    	and	r3, r3, #0x1
    bdd0: 432b         	orrs	r3, r5
    bdd2: f8ca 3004    	str.w	r3, [r10, #0x4]
    bdd6: f7ff fec7    	bl	0xbb68 <__malloc_unlock> @ imm = #-0x272
    bdda: e783         	b	0xbce4 <_realloc_r+0x12c> @ imm = #-0xfa
    bddc: f850 3c04    	ldr	r3, [r0, #-4]
    bde0: f023 0303    	bic	r3, r3, #0x3
    bde4: 441f         	add	r7, r3
    bde6: e769         	b	0xbcbc <_realloc_r+0x104> @ imm = #-0x12e
    bde8: 6823         	ldr	r3, [r4]
    bdea: 2a1b         	cmp	r2, #0x1b
    bdec: 6003         	str	r3, [r0]
    bdee: 6863         	ldr	r3, [r4, #0x4]
    bdf0: 6043         	str	r3, [r0, #0x4]
    bdf2: d836         	bhi	0xbe62 <_realloc_r+0x2aa> @ imm = #0x6c
    bdf4: f104 0208    	add.w	r2, r4, #0x8
    bdf8: f100 0308    	add.w	r3, r0, #0x8
    bdfc: e743         	b	0xbc86 <_realloc_r+0xce> @ imm = #-0x17a
    bdfe: 1f3a         	subs	r2, r7, #0x4
    be00: 4656         	mov	r6, r10
    be02: f8da 300c    	ldr.w	r3, [r10, #0xc]
    be06: 2a24         	cmp	r2, #0x24
    be08: f856 1f08    	ldr	r1, [r6, #8]!
    be0c: 60cb         	str	r3, [r1, #0xc]
    be0e: 6099         	str	r1, [r3, #0x8]
    be10: d822         	bhi	0xbe58 <_realloc_r+0x2a0> @ imm = #0x44
    be12: 2a13         	cmp	r2, #0x13
    be14: d91e         	bls	0xbe54 <_realloc_r+0x29c> @ imm = #0x3c
    be16: 6823         	ldr	r3, [r4]
    be18: 2a1b         	cmp	r2, #0x1b
    be1a: f8ca 3008    	str.w	r3, [r10, #0x8]
    be1e: 6863         	ldr	r3, [r4, #0x4]
    be20: f8ca 300c    	str.w	r3, [r10, #0xc]
    be24: d83c         	bhi	0xbea0 <_realloc_r+0x2e8> @ imm = #0x78
    be26: 3408         	adds	r4, #0x8
    be28: f10a 0310    	add.w	r3, r10, #0x10
    be2c: 6822         	ldr	r2, [r4]
    be2e: 601a         	str	r2, [r3]
    be30: 6862         	ldr	r2, [r4, #0x4]
    be32: 605a         	str	r2, [r3, #0x4]
    be34: 68a2         	ldr	r2, [r4, #0x8]
    be36: 609a         	str	r2, [r3, #0x8]
    be38: 4634         	mov	r4, r6
    be3a: 465f         	mov	r7, r11
    be3c: 46d1         	mov	r9, r10
    be3e: e73d         	b	0xbcbc <_realloc_r+0x104> @ imm = #-0x186
    be40: 4621         	mov	r1, r4
    be42: f000 fb03    	bl	0xc44c <memmove>        @ imm = #0x606
    be46: e724         	b	0xbc92 <_realloc_r+0xda> @ imm = #-0x1b8
    be48: e9d1 1302    	ldrd	r1, r3, [r1, #8]
    be4c: 1f3a         	subs	r2, r7, #0x4
    be4e: 60cb         	str	r3, [r1, #0xc]
    be50: 6099         	str	r1, [r3, #0x8]
    be52: e7d5         	b	0xbe00 <_realloc_r+0x248> @ imm = #-0x56
    be54: 4633         	mov	r3, r6
    be56: e7e9         	b	0xbe2c <_realloc_r+0x274> @ imm = #-0x2e
    be58: 4621         	mov	r1, r4
    be5a: 4630         	mov	r0, r6
    be5c: f000 faf6    	bl	0xc44c <memmove>        @ imm = #0x5ec
    be60: e7ea         	b	0xbe38 <_realloc_r+0x280> @ imm = #-0x2c
    be62: 68a3         	ldr	r3, [r4, #0x8]
    be64: 2a24         	cmp	r2, #0x24
    be66: 6083         	str	r3, [r0, #0x8]
    be68: 68e3         	ldr	r3, [r4, #0xc]
    be6a: 60c3         	str	r3, [r0, #0xc]
    be6c: d028         	beq	0xbec0 <_realloc_r+0x308> @ imm = #0x50
    be6e: f104 0210    	add.w	r2, r4, #0x10
    be72: f100 0310    	add.w	r3, r0, #0x10
    be76: e706         	b	0xbc86 <_realloc_r+0xce> @ imm = #-0x1f4
    be78: 1b5b         	subs	r3, r3, r5
    be7a: eb09 0205    	add.w	r2, r9, r5
    be7e: 4640         	mov	r0, r8
    be80: 4626         	mov	r6, r4
    be82: f043 0301    	orr	r3, r3, #0x1
    be86: f8cb 2008    	str.w	r2, [r11, #0x8]
    be8a: 6053         	str	r3, [r2, #0x4]
    be8c: f854 3c04    	ldr	r3, [r4, #-4]
    be90: f003 0301    	and	r3, r3, #0x1
    be94: 432b         	orrs	r3, r5
    be96: f844 3c04    	str	r3, [r4, #-4]
    be9a: f7ff fe65    	bl	0xbb68 <__malloc_unlock> @ imm = #-0x336
    be9e: e721         	b	0xbce4 <_realloc_r+0x12c> @ imm = #-0x1be
    bea0: 68a3         	ldr	r3, [r4, #0x8]
    bea2: 2a24         	cmp	r2, #0x24
    bea4: f8ca 3010    	str.w	r3, [r10, #0x10]
    bea8: 68e3         	ldr	r3, [r4, #0xc]
    beaa: f8ca 3014    	str.w	r3, [r10, #0x14]
    beae: d010         	beq	0xbed2 <_realloc_r+0x31a> @ imm = #0x20
    beb0: 3410         	adds	r4, #0x10
    beb2: f10a 0318    	add.w	r3, r10, #0x18
    beb6: e7b9         	b	0xbe2c <_realloc_r+0x274> @ imm = #-0x8e
    beb8: 4640         	mov	r0, r8
    beba: f7ff fe55    	bl	0xbb68 <__malloc_unlock> @ imm = #-0x356
    bebe: e73b         	b	0xbd38 <_realloc_r+0x180> @ imm = #-0x18a
    bec0: 6923         	ldr	r3, [r4, #0x10]
    bec2: f104 0218    	add.w	r2, r4, #0x18
    bec6: 6103         	str	r3, [r0, #0x10]
    bec8: 6963         	ldr	r3, [r4, #0x14]
    beca: 6143         	str	r3, [r0, #0x14]
    becc: f100 0318    	add.w	r3, r0, #0x18
    bed0: e6d9         	b	0xbc86 <_realloc_r+0xce> @ imm = #-0x24e
    bed2: 6923         	ldr	r3, [r4, #0x10]
    bed4: 3418         	adds	r4, #0x18
    bed6: f8ca 3018    	str.w	r3, [r10, #0x18]
    beda: f854 3c04    	ldr	r3, [r4, #-4]
    bede: f8ca 301c    	str.w	r3, [r10, #0x1c]
    bee2: f10a 0320    	add.w	r3, r10, #0x20
    bee6: e7a1         	b	0xbe2c <_realloc_r+0x274> @ imm = #-0xbe
    bee8: 4632         	mov	r2, r6
    beea: e75e         	b	0xbdaa <_realloc_r+0x1f2> @ imm = #-0x144
    beec: 4621         	mov	r1, r4
    beee: 4630         	mov	r0, r6
    bef0: 9301         	str	r3, [sp, #0x4]
    bef2: f000 faab    	bl	0xc44c <memmove>        @ imm = #0x556
    bef6: 9b01         	ldr	r3, [sp, #0x4]
    bef8: e75d         	b	0xbdb6 <_realloc_r+0x1fe> @ imm = #-0x146
    befa: 68a1         	ldr	r1, [r4, #0x8]
    befc: 2a24         	cmp	r2, #0x24
    befe: f8ca 1010    	str.w	r1, [r10, #0x10]
    bf02: 68e1         	ldr	r1, [r4, #0xc]
    bf04: f8ca 1014    	str.w	r1, [r10, #0x14]
    bf08: d003         	beq	0xbf12 <_realloc_r+0x35a> @ imm = #0x6
    bf0a: 3410         	adds	r4, #0x10
    bf0c: f10a 0218    	add.w	r2, r10, #0x18
    bf10: e74b         	b	0xbdaa <_realloc_r+0x1f2> @ imm = #-0x16a
    bf12: 6922         	ldr	r2, [r4, #0x10]
    bf14: 3418         	adds	r4, #0x18
    bf16: f8ca 2018    	str.w	r2, [r10, #0x18]
    bf1a: f854 2c04    	ldr	r2, [r4, #-4]
    bf1e: f8ca 201c    	str.w	r2, [r10, #0x1c]
    bf22: f10a 0220    	add.w	r2, r10, #0x20
    bf26: e740         	b	0xbdaa <_realloc_r+0x1f2> @ imm = #-0x180
    bf28: 18 07 00 20  	.word	0x20000718

0000bf2c <_putc_r>:
; _putc_r():
    bf2c: b570         	push	{r4, r5, r6, lr}
    bf2e: 460e         	mov	r6, r1
    bf30: 4605         	mov	r5, r0
    bf32: 4614         	mov	r4, r2
    bf34: b110         	cbz	r0, 0xbf3c <_putc_r+0x10> @ imm = #0x4
    bf36: 6b43         	ldr	r3, [r0, #0x34]
    bf38: 2b00         	cmp	r3, #0x0
    bf3a: d02f         	beq	0xbf9c <_putc_r+0x70>   @ imm = #0x5e
    bf3c: 6e63         	ldr	r3, [r4, #0x64]
    bf3e: 07d8         	lsls	r0, r3, #0x1f
    bf40: d402         	bmi	0xbf48 <_putc_r+0x1c>   @ imm = #0x4
    bf42: 89a3         	ldrh	r3, [r4, #0xc]
    bf44: 0599         	lsls	r1, r3, #0x16
    bf46: d520         	bpl	0xbf8a <_putc_r+0x5e>   @ imm = #0x40
    bf48: 68a3         	ldr	r3, [r4, #0x8]
    bf4a: 3b01         	subs	r3, #0x1
    bf4c: 2b00         	cmp	r3, #0x0
    bf4e: 60a3         	str	r3, [r4, #0x8]
    bf50: da19         	bge	0xbf86 <_putc_r+0x5a>   @ imm = #0x32
    bf52: 69a2         	ldr	r2, [r4, #0x18]
    bf54: 4293         	cmp	r3, r2
    bf56: db0f         	blt	0xbf78 <_putc_r+0x4c>   @ imm = #0x1e
    bf58: b2f0         	uxtb	r0, r6
    bf5a: 280a         	cmp	r0, #0xa
    bf5c: d00c         	beq	0xbf78 <_putc_r+0x4c>   @ imm = #0x18
    bf5e: 6823         	ldr	r3, [r4]
    bf60: 4605         	mov	r5, r0
    bf62: 1c5a         	adds	r2, r3, #0x1
    bf64: 6022         	str	r2, [r4]
    bf66: 701e         	strb	r6, [r3]
    bf68: 6e63         	ldr	r3, [r4, #0x64]
    bf6a: 07da         	lsls	r2, r3, #0x1f
    bf6c: d402         	bmi	0xbf74 <_putc_r+0x48>   @ imm = #0x4
    bf6e: 89a3         	ldrh	r3, [r4, #0xc]
    bf70: 059b         	lsls	r3, r3, #0x16
    bf72: d50e         	bpl	0xbf92 <_putc_r+0x66>   @ imm = #0x1c
    bf74: 4628         	mov	r0, r5
    bf76: bd70         	pop	{r4, r5, r6, pc}
    bf78: 4628         	mov	r0, r5
    bf7a: 4622         	mov	r2, r4
    bf7c: 4631         	mov	r1, r6
    bf7e: f000 f98f    	bl	0xc2a0 <__swbuf_r>      @ imm = #0x31e
    bf82: 4605         	mov	r5, r0
    bf84: e7f0         	b	0xbf68 <_putc_r+0x3c>   @ imm = #-0x20
    bf86: b2f0         	uxtb	r0, r6
    bf88: e7e9         	b	0xbf5e <_putc_r+0x32>   @ imm = #-0x2e
    bf8a: 6da0         	ldr	r0, [r4, #0x58]
    bf8c: f7fc ffca    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0x306c
    bf90: e7da         	b	0xbf48 <_putc_r+0x1c>   @ imm = #-0x4c
    bf92: 6da0         	ldr	r0, [r4, #0x58]
    bf94: f7fc ffc8    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x3070
    bf98: 4628         	mov	r0, r5
    bf9a: bd70         	pop	{r4, r5, r6, pc}
    bf9c: f7fc feda    	bl	0x8d54 <__sinit>        @ imm = #-0x324c
    bfa0: e7cc         	b	0xbf3c <_putc_r+0x10>   @ imm = #-0x68
    bfa2: bf00         	nop

0000bfa4 <__sprint_r>:
; __sprint_r():
    bfa4: 6893         	ldr	r3, [r2, #0x8]
    bfa6: b510         	push	{r4, lr}
    bfa8: 4614         	mov	r4, r2
    bfaa: b91b         	cbnz	r3, 0xbfb4 <__sprint_r+0x10> @ imm = #0x6
    bfac: 4618         	mov	r0, r3
    bfae: 2300         	movs	r3, #0x0
    bfb0: 6063         	str	r3, [r4, #0x4]
    bfb2: bd10         	pop	{r4, pc}
    bfb4: f7ff fc60    	bl	0xb878 <__sfvwrite_r>   @ imm = #-0x740
    bfb8: 2300         	movs	r3, #0x0
    bfba: 60a3         	str	r3, [r4, #0x8]
    bfbc: 2300         	movs	r3, #0x0
    bfbe: 6063         	str	r3, [r4, #0x4]
    bfc0: bd10         	pop	{r4, pc}
    bfc2: bf00         	nop

0000bfc4 <_fclose_r>:
; _fclose_r():
    bfc4: b570         	push	{r4, r5, r6, lr}
    bfc6: 2900         	cmp	r1, #0x0
    bfc8: d03f         	beq	0xc04a <_fclose_r+0x86> @ imm = #0x7e
    bfca: 4606         	mov	r6, r0
    bfcc: 460c         	mov	r4, r1
    bfce: b110         	cbz	r0, 0xbfd6 <_fclose_r+0x12> @ imm = #0x4
    bfd0: 6b43         	ldr	r3, [r0, #0x34]
    bfd2: 2b00         	cmp	r3, #0x0
    bfd4: d03c         	beq	0xc050 <_fclose_r+0x8c> @ imm = #0x78
    bfd6: 6e63         	ldr	r3, [r4, #0x64]
    bfd8: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
    bfdc: 07dd         	lsls	r5, r3, #0x1f
    bfde: d432         	bmi	0xc046 <_fclose_r+0x82> @ imm = #0x64
    bfe0: 0590         	lsls	r0, r2, #0x16
    bfe2: d538         	bpl	0xc056 <_fclose_r+0x92> @ imm = #0x70
    bfe4: 4621         	mov	r1, r4
    bfe6: 4630         	mov	r0, r6
    bfe8: f000 f84c    	bl	0xc084 <__sflush_r>     @ imm = #0x98
    bfec: 6ae3         	ldr	r3, [r4, #0x2c]
    bfee: 4605         	mov	r5, r0
    bff0: b133         	cbz	r3, 0xc000 <_fclose_r+0x3c> @ imm = #0xc
    bff2: 69e1         	ldr	r1, [r4, #0x1c]
    bff4: 4630         	mov	r0, r6
    bff6: 4798         	blx	r3
    bff8: 2800         	cmp	r0, #0x0
    bffa: bfb8         	it	lt
    bffc: f04f 35ff    	movlt.w	r5, #0xffffffff
    c000: 89a3         	ldrh	r3, [r4, #0xc]
    c002: 061a         	lsls	r2, r3, #0x18
    c004: d439         	bmi	0xc07a <_fclose_r+0xb6> @ imm = #0x72
    c006: 6b21         	ldr	r1, [r4, #0x30]
    c008: b141         	cbz	r1, 0xc01c <_fclose_r+0x58> @ imm = #0x10
    c00a: f104 0340    	add.w	r3, r4, #0x40
    c00e: 4299         	cmp	r1, r3
    c010: d002         	beq	0xc018 <_fclose_r+0x54> @ imm = #0x4
    c012: 4630         	mov	r0, r6
    c014: f001 fc04    	bl	0xd820 <_free_r>        @ imm = #0x1808
    c018: 2300         	movs	r3, #0x0
    c01a: 6323         	str	r3, [r4, #0x30]
    c01c: 6c61         	ldr	r1, [r4, #0x44]
    c01e: b121         	cbz	r1, 0xc02a <_fclose_r+0x66> @ imm = #0x8
    c020: 4630         	mov	r0, r6
    c022: f001 fbfd    	bl	0xd820 <_free_r>        @ imm = #0x17fa
    c026: 2300         	movs	r3, #0x0
    c028: 6463         	str	r3, [r4, #0x44]
    c02a: f7fc feb1    	bl	0x8d90 <__sfp_lock_acquire> @ imm = #-0x329e
    c02e: 6e63         	ldr	r3, [r4, #0x64]
    c030: 2200         	movs	r2, #0x0
    c032: 07db         	lsls	r3, r3, #0x1f
    c034: 81a2         	strh	r2, [r4, #0xc]
    c036: d51c         	bpl	0xc072 <_fclose_r+0xae> @ imm = #0x38
    c038: 6da0         	ldr	r0, [r4, #0x58]
    c03a: f7fc ff71    	bl	0x8f20 <__retarget_lock_close_recursive> @ imm = #-0x311e
    c03e: f7fc fead    	bl	0x8d9c <__sfp_lock_release> @ imm = #-0x32a6
    c042: 4628         	mov	r0, r5
    c044: bd70         	pop	{r4, r5, r6, pc}
    c046: 2a00         	cmp	r2, #0x0
    c048: d1cc         	bne	0xbfe4 <_fclose_r+0x20> @ imm = #-0x68
    c04a: 2500         	movs	r5, #0x0
    c04c: 4628         	mov	r0, r5
    c04e: bd70         	pop	{r4, r5, r6, pc}
    c050: f7fc fe80    	bl	0x8d54 <__sinit>        @ imm = #-0x3300
    c054: e7bf         	b	0xbfd6 <_fclose_r+0x12> @ imm = #-0x82
    c056: 6da0         	ldr	r0, [r4, #0x58]
    c058: f7fc ff64    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0x3138
    c05c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c060: 2b00         	cmp	r3, #0x0
    c062: d1bf         	bne	0xbfe4 <_fclose_r+0x20> @ imm = #-0x82
    c064: 6e63         	ldr	r3, [r4, #0x64]
    c066: 07d9         	lsls	r1, r3, #0x1f
    c068: d4ef         	bmi	0xc04a <_fclose_r+0x86> @ imm = #-0x22
    c06a: 6da0         	ldr	r0, [r4, #0x58]
    c06c: f7fc ff5c    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x3148
    c070: e7eb         	b	0xc04a <_fclose_r+0x86> @ imm = #-0x2a
    c072: 6da0         	ldr	r0, [r4, #0x58]
    c074: f7fc ff58    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x3150
    c078: e7de         	b	0xc038 <_fclose_r+0x74> @ imm = #-0x44
    c07a: 6921         	ldr	r1, [r4, #0x10]
    c07c: 4630         	mov	r0, r6
    c07e: f001 fbcf    	bl	0xd820 <_free_r>        @ imm = #0x179e
    c082: e7c0         	b	0xc006 <_fclose_r+0x42> @ imm = #-0x80

0000c084 <__sflush_r>:
; __sflush_r():
    c084: f9b1 200c    	ldrsh.w	r2, [r1, #0xc]
    c088: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    c08c: 0715         	lsls	r5, r2, #0x1c
    c08e: 460c         	mov	r4, r1
    c090: 4680         	mov	r8, r0
    c092: d44e         	bmi	0xc132 <__sflush_r+0xae> @ imm = #0x9c
    c094: 6849         	ldr	r1, [r1, #0x4]
    c096: f442 6300    	orr	r3, r2, #0x800
    c09a: 2900         	cmp	r1, #0x0
    c09c: 81a3         	strh	r3, [r4, #0xc]
    c09e: dd63         	ble	0xc168 <__sflush_r+0xe4> @ imm = #0xc6
    c0a0: 6aa6         	ldr	r6, [r4, #0x28]
    c0a2: 2e00         	cmp	r6, #0x0
    c0a4: d042         	beq	0xc12c <__sflush_r+0xa8> @ imm = #0x84
    c0a6: 2100         	movs	r1, #0x0
    c0a8: f412 5280    	ands	r2, r2, #0x1000
    c0ac: f8d8 5000    	ldr.w	r5, [r8]
    c0b0: f8c8 1000    	str.w	r1, [r8]
    c0b4: d165         	bne	0xc182 <__sflush_r+0xfe> @ imm = #0xca
    c0b6: 2301         	movs	r3, #0x1
    c0b8: 69e1         	ldr	r1, [r4, #0x1c]
    c0ba: 4640         	mov	r0, r8
    c0bc: 47b0         	blx	r6
    c0be: 4602         	mov	r2, r0
    c0c0: 1c50         	adds	r0, r2, #0x1
    c0c2: d06c         	beq	0xc19e <__sflush_r+0x11a> @ imm = #0xd8
    c0c4: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c0c8: 6aa6         	ldr	r6, [r4, #0x28]
    c0ca: 0759         	lsls	r1, r3, #0x1d
    c0cc: d505         	bpl	0xc0da <__sflush_r+0x56> @ imm = #0xa
    c0ce: 6863         	ldr	r3, [r4, #0x4]
    c0d0: 1ad2         	subs	r2, r2, r3
    c0d2: 6b23         	ldr	r3, [r4, #0x30]
    c0d4: b10b         	cbz	r3, 0xc0da <__sflush_r+0x56> @ imm = #0x2
    c0d6: 6be3         	ldr	r3, [r4, #0x3c]
    c0d8: 1ad2         	subs	r2, r2, r3
    c0da: 2300         	movs	r3, #0x0
    c0dc: 69e1         	ldr	r1, [r4, #0x1c]
    c0de: 4640         	mov	r0, r8
    c0e0: 47b0         	blx	r6
    c0e2: 1c42         	adds	r2, r0, #0x1
    c0e4: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c0e8: d14d         	bne	0xc186 <__sflush_r+0x102> @ imm = #0x9a
    c0ea: f8d8 1000    	ldr.w	r1, [r8]
    c0ee: 291d         	cmp	r1, #0x1d
    c0f0: d840         	bhi	0xc174 <__sflush_r+0xf0> @ imm = #0x80
    c0f2: 4a30         	ldr	r2, [pc, #0xc0]         @ 0xc1b4 <__sflush_r+0x130>
    c0f4: 40ca         	lsrs	r2, r1
    c0f6: 07d7         	lsls	r7, r2, #0x1f
    c0f8: d53c         	bpl	0xc174 <__sflush_r+0xf0> @ imm = #0x78
    c0fa: f423 6200    	bic	r2, r3, #0x800
    c0fe: 04de         	lsls	r6, r3, #0x13
    c100: 81a2         	strh	r2, [r4, #0xc]
    c102: f04f 0200    	mov.w	r2, #0x0
    c106: 6062         	str	r2, [r4, #0x4]
    c108: 6922         	ldr	r2, [r4, #0x10]
    c10a: 6022         	str	r2, [r4]
    c10c: d501         	bpl	0xc112 <__sflush_r+0x8e> @ imm = #0x2
    c10e: 2900         	cmp	r1, #0x0
    c110: d043         	beq	0xc19a <__sflush_r+0x116> @ imm = #0x86
    c112: 6b21         	ldr	r1, [r4, #0x30]
    c114: f8c8 5000    	str.w	r5, [r8]
    c118: b141         	cbz	r1, 0xc12c <__sflush_r+0xa8> @ imm = #0x10
    c11a: f104 0340    	add.w	r3, r4, #0x40
    c11e: 4299         	cmp	r1, r3
    c120: d002         	beq	0xc128 <__sflush_r+0xa4> @ imm = #0x4
    c122: 4640         	mov	r0, r8
    c124: f001 fb7c    	bl	0xd820 <_free_r>        @ imm = #0x16f8
    c128: 2300         	movs	r3, #0x0
    c12a: 6323         	str	r3, [r4, #0x30]
    c12c: 2000         	movs	r0, #0x0
    c12e: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
    c132: 690e         	ldr	r6, [r1, #0x10]
    c134: 2e00         	cmp	r6, #0x0
    c136: d0f9         	beq	0xc12c <__sflush_r+0xa8> @ imm = #-0xe
    c138: 0792         	lsls	r2, r2, #0x1e
    c13a: 680d         	ldr	r5, [r1]
    c13c: 600e         	str	r6, [r1]
    c13e: bf0c         	ite	eq
    c140: 694b         	ldreq	r3, [r1, #0x14]
    c142: 2300         	movne	r3, #0x0
    c144: 1bad         	subs	r5, r5, r6
    c146: 608b         	str	r3, [r1, #0x8]
    c148: e00b         	b	0xc162 <__sflush_r+0xde> @ imm = #0x16
    c14a: 462b         	mov	r3, r5
    c14c: 4632         	mov	r2, r6
    c14e: 69e1         	ldr	r1, [r4, #0x1c]
    c150: 4640         	mov	r0, r8
    c152: 6a67         	ldr	r7, [r4, #0x24]
    c154: 47b8         	blx	r7
    c156: f1b0 0c00    	subs.w	r12, r0, #0x0
    c15a: eba5 050c    	sub.w	r5, r5, r12
    c15e: 4466         	add	r6, r12
    c160: dd06         	ble	0xc170 <__sflush_r+0xec> @ imm = #0xc
    c162: 2d00         	cmp	r5, #0x0
    c164: dcf1         	bgt	0xc14a <__sflush_r+0xc6> @ imm = #-0x1e
    c166: e7e1         	b	0xc12c <__sflush_r+0xa8> @ imm = #-0x3e
    c168: 6be1         	ldr	r1, [r4, #0x3c]
    c16a: 2900         	cmp	r1, #0x0
    c16c: dc98         	bgt	0xc0a0 <__sflush_r+0x1c> @ imm = #-0xd0
    c16e: e7dd         	b	0xc12c <__sflush_r+0xa8> @ imm = #-0x46
    c170: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c174: f043 0340    	orr	r3, r3, #0x40
    c178: f04f 30ff    	mov.w	r0, #0xffffffff
    c17c: 81a3         	strh	r3, [r4, #0xc]
    c17e: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
    c182: 6d22         	ldr	r2, [r4, #0x50]
    c184: e7a1         	b	0xc0ca <__sflush_r+0x46> @ imm = #-0xbe
    c186: f423 6200    	bic	r2, r3, #0x800
    c18a: 04db         	lsls	r3, r3, #0x13
    c18c: 81a2         	strh	r2, [r4, #0xc]
    c18e: f04f 0200    	mov.w	r2, #0x0
    c192: 6062         	str	r2, [r4, #0x4]
    c194: 6922         	ldr	r2, [r4, #0x10]
    c196: 6022         	str	r2, [r4]
    c198: d5bb         	bpl	0xc112 <__sflush_r+0x8e> @ imm = #-0x8a
    c19a: 6520         	str	r0, [r4, #0x50]
    c19c: e7b9         	b	0xc112 <__sflush_r+0x8e> @ imm = #-0x8e
    c19e: f8d8 3000    	ldr.w	r3, [r8]
    c1a2: 2b00         	cmp	r3, #0x0
    c1a4: d08e         	beq	0xc0c4 <__sflush_r+0x40> @ imm = #-0xe4
    c1a6: 2b1d         	cmp	r3, #0x1d
    c1a8: d001         	beq	0xc1ae <__sflush_r+0x12a> @ imm = #0x2
    c1aa: 2b16         	cmp	r3, #0x16
    c1ac: d1e0         	bne	0xc170 <__sflush_r+0xec> @ imm = #-0x40
    c1ae: f8c8 5000    	str.w	r5, [r8]
    c1b2: e7bb         	b	0xc12c <__sflush_r+0xa8> @ imm = #-0x8a
    c1b4: 01 00 40 20  	.word	0x20400001

0000c1b8 <_fflush_r>:
; _fflush_r():
    c1b8: b538         	push	{r3, r4, r5, lr}
    c1ba: 4605         	mov	r5, r0
    c1bc: 460c         	mov	r4, r1
    c1be: b108         	cbz	r0, 0xc1c4 <_fflush_r+0xc> @ imm = #0x2
    c1c0: 6b43         	ldr	r3, [r0, #0x34]
    c1c2: b303         	cbz	r3, 0xc206 <_fflush_r+0x4e> @ imm = #0x40
    c1c4: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
    c1c8: b188         	cbz	r0, 0xc1ee <_fflush_r+0x36> @ imm = #0x22
    c1ca: 6e63         	ldr	r3, [r4, #0x64]
    c1cc: 07db         	lsls	r3, r3, #0x1f
    c1ce: d401         	bmi	0xc1d4 <_fflush_r+0x1c> @ imm = #0x2
    c1d0: 0581         	lsls	r1, r0, #0x16
    c1d2: d50f         	bpl	0xc1f4 <_fflush_r+0x3c> @ imm = #0x1e
    c1d4: 4628         	mov	r0, r5
    c1d6: 4621         	mov	r1, r4
    c1d8: f7ff ff54    	bl	0xc084 <__sflush_r>     @ imm = #-0x158
    c1dc: 6e63         	ldr	r3, [r4, #0x64]
    c1de: 4605         	mov	r5, r0
    c1e0: 07da         	lsls	r2, r3, #0x1f
    c1e2: d402         	bmi	0xc1ea <_fflush_r+0x32> @ imm = #0x4
    c1e4: 89a3         	ldrh	r3, [r4, #0xc]
    c1e6: 059b         	lsls	r3, r3, #0x16
    c1e8: d508         	bpl	0xc1fc <_fflush_r+0x44> @ imm = #0x10
    c1ea: 4628         	mov	r0, r5
    c1ec: bd38         	pop	{r3, r4, r5, pc}
    c1ee: 4605         	mov	r5, r0
    c1f0: 4628         	mov	r0, r5
    c1f2: bd38         	pop	{r3, r4, r5, pc}
    c1f4: 6da0         	ldr	r0, [r4, #0x58]
    c1f6: f7fc fe95    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0x32d6
    c1fa: e7eb         	b	0xc1d4 <_fflush_r+0x1c> @ imm = #-0x2a
    c1fc: 6da0         	ldr	r0, [r4, #0x58]
    c1fe: f7fc fe93    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x32da
    c202: 4628         	mov	r0, r5
    c204: bd38         	pop	{r3, r4, r5, pc}
    c206: f7fc fda5    	bl	0x8d54 <__sinit>        @ imm = #-0x34b6
    c20a: e7db         	b	0xc1c4 <_fflush_r+0xc>  @ imm = #-0x4a

0000c20c <__sread>:
; __sread():
    c20c: b510         	push	{r4, lr}
    c20e: 460c         	mov	r4, r1
    c210: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
    c214: f000 f9fc    	bl	0xc610 <_read_r>        @ imm = #0x3f8
    c218: 2800         	cmp	r0, #0x0
    c21a: db03         	blt	0xc224 <__sread+0x18>   @ imm = #0x6
    c21c: 6d23         	ldr	r3, [r4, #0x50]
    c21e: 4403         	add	r3, r0
    c220: 6523         	str	r3, [r4, #0x50]
    c222: bd10         	pop	{r4, pc}
    c224: 89a3         	ldrh	r3, [r4, #0xc]
    c226: f423 5380    	bic	r3, r3, #0x1000
    c22a: 81a3         	strh	r3, [r4, #0xc]
    c22c: bd10         	pop	{r4, pc}
    c22e: bf00         	nop

0000c230 <__swrite>:
; __swrite():
    c230: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    c234: 460c         	mov	r4, r1
    c236: f9b1 100c    	ldrsh.w	r1, [r1, #0xc]
    c23a: 461f         	mov	r7, r3
    c23c: 4605         	mov	r5, r0
    c23e: 05cb         	lsls	r3, r1, #0x17
    c240: 4616         	mov	r6, r2
    c242: d40b         	bmi	0xc25c <__swrite+0x2c>  @ imm = #0x16
    c244: f421 5180    	bic	r1, r1, #0x1000
    c248: 463b         	mov	r3, r7
    c24a: 4632         	mov	r2, r6
    c24c: 4628         	mov	r0, r5
    c24e: 81a1         	strh	r1, [r4, #0xc]
    c250: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
    c254: e8bd 41f0    	pop.w	{r4, r5, r6, r7, r8, lr}
    c258: f7f6 bd04    	b.w	0x2c64 <_write_r>       @ imm = #-0x95f8
    c25c: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
    c260: 2302         	movs	r3, #0x2
    c262: 2200         	movs	r2, #0x0
    c264: f000 f9be    	bl	0xc5e4 <_lseek_r>       @ imm = #0x37c
    c268: f9b4 100c    	ldrsh.w	r1, [r4, #0xc]
    c26c: e7ea         	b	0xc244 <__swrite+0x14>  @ imm = #-0x2c
    c26e: bf00         	nop

0000c270 <__sseek>:
; __sseek():
    c270: b510         	push	{r4, lr}
    c272: 460c         	mov	r4, r1
    c274: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
    c278: f000 f9b4    	bl	0xc5e4 <_lseek_r>       @ imm = #0x368
    c27c: 1c42         	adds	r2, r0, #0x1
    c27e: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c282: d004         	beq	0xc28e <__sseek+0x1e>   @ imm = #0x8
    c284: f443 5380    	orr	r3, r3, #0x1000
    c288: 6520         	str	r0, [r4, #0x50]
    c28a: 81a3         	strh	r3, [r4, #0xc]
    c28c: bd10         	pop	{r4, pc}
    c28e: f423 5380    	bic	r3, r3, #0x1000
    c292: 81a3         	strh	r3, [r4, #0xc]
    c294: bd10         	pop	{r4, pc}
    c296: bf00         	nop

0000c298 <__sclose>:
; __sclose():
    c298: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
    c29c: f000 b990    	b.w	0xc5c0 <_close_r>       @ imm = #0x320

0000c2a0 <__swbuf_r>:
; __swbuf_r():
    c2a0: b5f8         	push	{r3, r4, r5, r6, r7, lr}
    c2a2: 460d         	mov	r5, r1
    c2a4: 4606         	mov	r6, r0
    c2a6: 4614         	mov	r4, r2
    c2a8: b110         	cbz	r0, 0xc2b0 <__swbuf_r+0x10> @ imm = #0x4
    c2aa: 6b43         	ldr	r3, [r0, #0x34]
    c2ac: 2b00         	cmp	r3, #0x0
    c2ae: d04a         	beq	0xc346 <__swbuf_r+0xa6> @ imm = #0x94
    c2b0: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c2b4: 69a2         	ldr	r2, [r4, #0x18]
    c2b6: 0718         	lsls	r0, r3, #0x1c
    c2b8: 60a2         	str	r2, [r4, #0x8]
    c2ba: d51f         	bpl	0xc2fc <__swbuf_r+0x5c> @ imm = #0x3e
    c2bc: 6922         	ldr	r2, [r4, #0x10]
    c2be: b1ea         	cbz	r2, 0xc2fc <__swbuf_r+0x5c> @ imm = #0x3a
    c2c0: b2ed         	uxtb	r5, r5
    c2c2: 0499         	lsls	r1, r3, #0x12
    c2c4: 6e62         	ldr	r2, [r4, #0x64]
    c2c6: 462f         	mov	r7, r5
    c2c8: d524         	bpl	0xc314 <__swbuf_r+0x74> @ imm = #0x48
    c2ca: 0492         	lsls	r2, r2, #0x12
    c2cc: d42f         	bmi	0xc32e <__swbuf_r+0x8e> @ imm = #0x5e
    c2ce: 6822         	ldr	r2, [r4]
    c2d0: 6923         	ldr	r3, [r4, #0x10]
    c2d2: 6961         	ldr	r1, [r4, #0x14]
    c2d4: 1ad3         	subs	r3, r2, r3
    c2d6: 4299         	cmp	r1, r3
    c2d8: dd2c         	ble	0xc334 <__swbuf_r+0x94> @ imm = #0x58
    c2da: 3301         	adds	r3, #0x1
    c2dc: 68a1         	ldr	r1, [r4, #0x8]
    c2de: 3901         	subs	r1, #0x1
    c2e0: 60a1         	str	r1, [r4, #0x8]
    c2e2: 1c51         	adds	r1, r2, #0x1
    c2e4: 6021         	str	r1, [r4]
    c2e6: 7015         	strb	r5, [r2]
    c2e8: 6962         	ldr	r2, [r4, #0x14]
    c2ea: 429a         	cmp	r2, r3
    c2ec: d019         	beq	0xc322 <__swbuf_r+0x82> @ imm = #0x32
    c2ee: 2d0a         	cmp	r5, #0xa
    c2f0: d102         	bne	0xc2f8 <__swbuf_r+0x58> @ imm = #0x4
    c2f2: 89a3         	ldrh	r3, [r4, #0xc]
    c2f4: 07db         	lsls	r3, r3, #0x1f
    c2f6: d414         	bmi	0xc322 <__swbuf_r+0x82> @ imm = #0x28
    c2f8: 4638         	mov	r0, r7
    c2fa: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
    c2fc: 4621         	mov	r1, r4
    c2fe: 4630         	mov	r0, r6
    c300: f000 f824    	bl	0xc34c <__swsetup_r>    @ imm = #0x48
    c304: b998         	cbnz	r0, 0xc32e <__swbuf_r+0x8e> @ imm = #0x26
    c306: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c30a: b2ed         	uxtb	r5, r5
    c30c: 6e62         	ldr	r2, [r4, #0x64]
    c30e: 0499         	lsls	r1, r3, #0x12
    c310: 462f         	mov	r7, r5
    c312: d4da         	bmi	0xc2ca <__swbuf_r+0x2a> @ imm = #-0x4c
    c314: f443 5300    	orr	r3, r3, #0x2000
    c318: f422 5200    	bic	r2, r2, #0x2000
    c31c: 81a3         	strh	r3, [r4, #0xc]
    c31e: 6662         	str	r2, [r4, #0x64]
    c320: e7d5         	b	0xc2ce <__swbuf_r+0x2e> @ imm = #-0x56
    c322: 4621         	mov	r1, r4
    c324: 4630         	mov	r0, r6
    c326: f7ff ff47    	bl	0xc1b8 <_fflush_r>      @ imm = #-0x172
    c32a: 2800         	cmp	r0, #0x0
    c32c: d0e4         	beq	0xc2f8 <__swbuf_r+0x58> @ imm = #-0x38
    c32e: f04f 37ff    	mov.w	r7, #0xffffffff
    c332: e7e1         	b	0xc2f8 <__swbuf_r+0x58> @ imm = #-0x3e
    c334: 4621         	mov	r1, r4
    c336: 4630         	mov	r0, r6
    c338: f7ff ff3e    	bl	0xc1b8 <_fflush_r>      @ imm = #-0x184
    c33c: 2800         	cmp	r0, #0x0
    c33e: d1f6         	bne	0xc32e <__swbuf_r+0x8e> @ imm = #-0x14
    c340: 6822         	ldr	r2, [r4]
    c342: 2301         	movs	r3, #0x1
    c344: e7ca         	b	0xc2dc <__swbuf_r+0x3c> @ imm = #-0x6c
    c346: f7fc fd05    	bl	0x8d54 <__sinit>        @ imm = #-0x35f6
    c34a: e7b1         	b	0xc2b0 <__swbuf_r+0x10> @ imm = #-0x9e

0000c34c <__swsetup_r>:
; __swsetup_r():
    c34c: b538         	push	{r3, r4, r5, lr}
    c34e: 4b3e         	ldr	r3, [pc, #0xf8]         @ 0xc448 <__swsetup_r+0xfc>
    c350: 4605         	mov	r5, r0
    c352: 460c         	mov	r4, r1
    c354: 681b         	ldr	r3, [r3]
    c356: b113         	cbz	r3, 0xc35e <__swsetup_r+0x12> @ imm = #0x4
    c358: 6b5a         	ldr	r2, [r3, #0x34]
    c35a: 2a00         	cmp	r2, #0x0
    c35c: d05b         	beq	0xc416 <__swsetup_r+0xca> @ imm = #0xb6
    c35e: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c362: 0719         	lsls	r1, r3, #0x1c
    c364: d50b         	bpl	0xc37e <__swsetup_r+0x32> @ imm = #0x16
    c366: 6922         	ldr	r2, [r4, #0x10]
    c368: b19a         	cbz	r2, 0xc392 <__swsetup_r+0x46> @ imm = #0x26
    c36a: f013 0201    	ands	r2, r3, #0x1
    c36e: d021         	beq	0xc3b4 <__swsetup_r+0x68> @ imm = #0x42
    c370: 6963         	ldr	r3, [r4, #0x14]
    c372: 2200         	movs	r2, #0x0
    c374: 425b         	rsbs	r3, r3, #0
    c376: 60a2         	str	r2, [r4, #0x8]
    c378: 61a3         	str	r3, [r4, #0x18]
    c37a: 2000         	movs	r0, #0x0
    c37c: bd38         	pop	{r3, r4, r5, pc}
    c37e: 06da         	lsls	r2, r3, #0x1b
    c380: d559         	bpl	0xc436 <__swsetup_r+0xea> @ imm = #0xb2
    c382: 0758         	lsls	r0, r3, #0x1d
    c384: d41b         	bmi	0xc3be <__swsetup_r+0x72> @ imm = #0x36
    c386: 6922         	ldr	r2, [r4, #0x10]
    c388: f043 0308    	orr	r3, r3, #0x8
    c38c: 81a3         	strh	r3, [r4, #0xc]
    c38e: 2a00         	cmp	r2, #0x0
    c390: d1eb         	bne	0xc36a <__swsetup_r+0x1e> @ imm = #-0x2a
    c392: 0599         	lsls	r1, r3, #0x16
    c394: d529         	bpl	0xc3ea <__swsetup_r+0x9e> @ imm = #0x52
    c396: 0618         	lsls	r0, r3, #0x18
    c398: f003 0180    	and	r1, r3, #0x80
    c39c: d425         	bmi	0xc3ea <__swsetup_r+0x9e> @ imm = #0x4a
    c39e: 07d8         	lsls	r0, r3, #0x1f
    c3a0: d442         	bmi	0xc428 <__swsetup_r+0xdc> @ imm = #0x84
    c3a2: 079d         	lsls	r5, r3, #0x1e
    c3a4: d53d         	bpl	0xc422 <__swsetup_r+0xd6> @ imm = #0x7a
    c3a6: 60a2         	str	r2, [r4, #0x8]
    c3a8: 2900         	cmp	r1, #0x0
    c3aa: d0e6         	beq	0xc37a <__swsetup_r+0x2e> @ imm = #-0x34
    c3ac: f043 0340    	orr	r3, r3, #0x40
    c3b0: 81a3         	strh	r3, [r4, #0xc]
    c3b2: e045         	b	0xc440 <__swsetup_r+0xf4> @ imm = #0x8a
    c3b4: 079b         	lsls	r3, r3, #0x1e
    c3b6: d416         	bmi	0xc3e6 <__swsetup_r+0x9a> @ imm = #0x2c
    c3b8: 6963         	ldr	r3, [r4, #0x14]
    c3ba: 60a3         	str	r3, [r4, #0x8]
    c3bc: e7dd         	b	0xc37a <__swsetup_r+0x2e> @ imm = #-0x46
    c3be: 6b21         	ldr	r1, [r4, #0x30]
    c3c0: b151         	cbz	r1, 0xc3d8 <__swsetup_r+0x8c> @ imm = #0x14
    c3c2: f104 0240    	add.w	r2, r4, #0x40
    c3c6: 4291         	cmp	r1, r2
    c3c8: d004         	beq	0xc3d4 <__swsetup_r+0x88> @ imm = #0x8
    c3ca: 4628         	mov	r0, r5
    c3cc: f001 fa28    	bl	0xd820 <_free_r>        @ imm = #0x1450
    c3d0: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c3d4: 2200         	movs	r2, #0x0
    c3d6: 6322         	str	r2, [r4, #0x30]
    c3d8: 2100         	movs	r1, #0x0
    c3da: 6922         	ldr	r2, [r4, #0x10]
    c3dc: f023 0324    	bic	r3, r3, #0x24
    c3e0: e9c4 2100    	strd	r2, r1, [r4]
    c3e4: e7d0         	b	0xc388 <__swsetup_r+0x3c> @ imm = #-0x60
    c3e6: 60a2         	str	r2, [r4, #0x8]
    c3e8: e7c7         	b	0xc37a <__swsetup_r+0x2e> @ imm = #-0x72
    c3ea: 4621         	mov	r1, r4
    c3ec: 4628         	mov	r0, r5
    c3ee: f001 fef9    	bl	0xe1e4 <__smakebuf_r>   @ imm = #0x1df2
    c3f2: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    c3f6: 6922         	ldr	r2, [r4, #0x10]
    c3f8: f013 0101    	ands	r1, r3, #0x1
    c3fc: d00f         	beq	0xc41e <__swsetup_r+0xd2> @ imm = #0x1e
    c3fe: 6961         	ldr	r1, [r4, #0x14]
    c400: 2000         	movs	r0, #0x0
    c402: 4249         	rsbs	r1, r1, #0
    c404: 60a0         	str	r0, [r4, #0x8]
    c406: 61a1         	str	r1, [r4, #0x18]
    c408: 2a00         	cmp	r2, #0x0
    c40a: d1b6         	bne	0xc37a <__swsetup_r+0x2e> @ imm = #-0x94
    c40c: f003 0180    	and	r1, r3, #0x80
    c410: 2900         	cmp	r1, #0x0
    c412: d0b2         	beq	0xc37a <__swsetup_r+0x2e> @ imm = #-0x9c
    c414: e7ca         	b	0xc3ac <__swsetup_r+0x60> @ imm = #-0x6c
    c416: 4618         	mov	r0, r3
    c418: f7fc fc9c    	bl	0x8d54 <__sinit>        @ imm = #-0x36c8
    c41c: e79f         	b	0xc35e <__swsetup_r+0x12> @ imm = #-0xc2
    c41e: 0798         	lsls	r0, r3, #0x1e
    c420: d400         	bmi	0xc424 <__swsetup_r+0xd8> @ imm = #0x0
    c422: 6961         	ldr	r1, [r4, #0x14]
    c424: 60a1         	str	r1, [r4, #0x8]
    c426: e7ef         	b	0xc408 <__swsetup_r+0xbc> @ imm = #-0x22
    c428: 6960         	ldr	r0, [r4, #0x14]
    c42a: 60a2         	str	r2, [r4, #0x8]
    c42c: 4240         	rsbs	r0, r0, #0
    c42e: 61a0         	str	r0, [r4, #0x18]
    c430: 2900         	cmp	r1, #0x0
    c432: d0a2         	beq	0xc37a <__swsetup_r+0x2e> @ imm = #-0xbc
    c434: e7ba         	b	0xc3ac <__swsetup_r+0x60> @ imm = #-0x8c
    c436: 2209         	movs	r2, #0x9
    c438: f043 0340    	orr	r3, r3, #0x40
    c43c: 602a         	str	r2, [r5]
    c43e: 81a3         	strh	r3, [r4, #0xc]
    c440: f04f 30ff    	mov.w	r0, #0xffffffff
    c444: bd38         	pop	{r3, r4, r5, pc}
    c446: bf00         	nop
    c448: c4 05 00 20  	.word	0x200005c4

0000c44c <memmove>:
; memmove():
    c44c: 4288         	cmp	r0, r1
    c44e: d90d         	bls	0xc46c <memmove+0x20>   @ imm = #0x1a
    c450: 188b         	adds	r3, r1, r2
    c452: 4283         	cmp	r3, r0
    c454: d90a         	bls	0xc46c <memmove+0x20>   @ imm = #0x14
    c456: eb00 0c02    	add.w	r12, r0, r2
    c45a: b35a         	cbz	r2, 0xc4b4 <memmove+0x68> @ imm = #0x56
    c45c: 4662         	mov	r2, r12
    c45e: f813 cd01    	ldrb	r12, [r3, #-1]!
    c462: 4299         	cmp	r1, r3
    c464: f802 cd01    	strb	r12, [r2, #-1]!
    c468: d1f9         	bne	0xc45e <memmove+0x12>   @ imm = #-0xe
    c46a: 4770         	bx	lr
    c46c: 2a0f         	cmp	r2, #0xf
    c46e: d80d         	bhi	0xc48c <memmove+0x40>   @ imm = #0x1a
    c470: f102 3cff    	add.w	r12, r2, #0xffffffff
    c474: b1f2         	cbz	r2, 0xc4b4 <memmove+0x68> @ imm = #0x3c
    c476: f10c 0c01    	add.w	r12, r12, #0x1
    c47a: 1e43         	subs	r3, r0, #0x1
    c47c: 448c         	add	r12, r1
    c47e: f811 2b01    	ldrb	r2, [r1], #1
    c482: 4561         	cmp	r1, r12
    c484: f803 2f01    	strb	r2, [r3, #1]!
    c488: d1f9         	bne	0xc47e <memmove+0x32>   @ imm = #-0xe
    c48a: 4770         	bx	lr
    c48c: ea40 0301    	orr.w	r3, r0, r1
    c490: 079b         	lsls	r3, r3, #0x1e
    c492: b5f0         	push	{r4, r5, r6, r7, lr}
    c494: 460c         	mov	r4, r1
    c496: d00e         	beq	0xc4b6 <memmove+0x6a>   @ imm = #0x1c
    c498: f102 3cff    	add.w	r12, r2, #0xffffffff
    c49c: 4603         	mov	r3, r0
    c49e: f10c 0c01    	add.w	r12, r12, #0x1
    c4a2: 3b01         	subs	r3, #0x1
    c4a4: 448c         	add	r12, r1
    c4a6: f811 2b01    	ldrb	r2, [r1], #1
    c4aa: 4561         	cmp	r1, r12
    c4ac: f803 2f01    	strb	r2, [r3, #1]!
    c4b0: d1f9         	bne	0xc4a6 <memmove+0x5a>   @ imm = #-0xe
    c4b2: bdf0         	pop	{r4, r5, r6, r7, pc}
    c4b4: 4770         	bx	lr
    c4b6: f1a2 0510    	sub.w	r5, r2, #0x10
    c4ba: f101 0e20    	add.w	lr, r1, #0x20
    c4be: f101 0310    	add.w	r3, r1, #0x10
    c4c2: f100 0c10    	add.w	r12, r0, #0x10
    c4c6: f025 050f    	bic	r5, r5, #0xf
    c4ca: 44ae         	add	lr, r5
    c4cc: f853 6c10    	ldr	r6, [r3, #-16]
    c4d0: 3310         	adds	r3, #0x10
    c4d2: f10c 0c10    	add.w	r12, r12, #0x10
    c4d6: f84c 6c20    	str	r6, [r12, #-32]
    c4da: f853 6c1c    	ldr	r6, [r3, #-28]
    c4de: f84c 6c1c    	str	r6, [r12, #-28]
    c4e2: f853 6c18    	ldr	r6, [r3, #-24]
    c4e6: 4573         	cmp	r3, lr
    c4e8: f84c 6c18    	str	r6, [r12, #-24]
    c4ec: f853 6c14    	ldr	r6, [r3, #-20]
    c4f0: f84c 6c14    	str	r6, [r12, #-20]
    c4f4: d1ea         	bne	0xc4cc <memmove+0x80>   @ imm = #-0x2c
    c4f6: eb01 0c05    	add.w	r12, r1, r5
    c4fa: f012 0f0c    	tst.w	r2, #0xc
    c4fe: 4405         	add	r5, r0
    c500: f10c 0110    	add.w	r1, r12, #0x10
    c504: f105 0310    	add.w	r3, r5, #0x10
    c508: f002 050f    	and	r5, r2, #0xf
    c50c: 460e         	mov	r6, r1
    c50e: d018         	beq	0xc542 <memmove+0xf6>   @ imm = #0x30
    c510: 3d04         	subs	r5, #0x4
    c512: eba0 0e04    	sub.w	lr, r0, r4
    c516: f025 0403    	bic	r4, r5, #0x3
    c51a: 44a4         	add	r12, r4
    c51c: f10c 0c14    	add.w	r12, r12, #0x14
    c520: 680f         	ldr	r7, [r1]
    c522: eb01 050e    	add.w	r5, r1, lr
    c526: 3104         	adds	r1, #0x4
    c528: 602f         	str	r7, [r5]
    c52a: 4561         	cmp	r1, r12
    c52c: d1f8         	bne	0xc520 <memmove+0xd4>   @ imm = #-0x10
    c52e: 3404         	adds	r4, #0x4
    c530: f002 0203    	and	r2, r2, #0x3
    c534: 19a1         	adds	r1, r4, r6
    c536: 4423         	add	r3, r4
    c538: f102 3cff    	add.w	r12, r2, #0xffffffff
    c53c: 2a00         	cmp	r2, #0x0
    c53e: d1ae         	bne	0xc49e <memmove+0x52>   @ imm = #-0xa4
    c540: bdf0         	pop	{r4, r5, r6, r7, pc}
    c542: 462a         	mov	r2, r5
    c544: e7f8         	b	0xc538 <memmove+0xec>   @ imm = #-0x10
    c546: bf00         	nop

0000c548 <strncpy>:
; strncpy():
    c548: ea40 0301    	orr.w	r3, r0, r1
    c54c: 079b         	lsls	r3, r3, #0x1e
    c54e: b530         	push	{r4, r5, lr}
    c550: d101         	bne	0xc556 <strncpy+0xe>    @ imm = #0x2
    c552: 2a03         	cmp	r2, #0x3
    c554: d817         	bhi	0xc586 <strncpy+0x3e>   @ imm = #0x2e
    c556: 4684         	mov	r12, r0
    c558: f101 3eff    	add.w	lr, r1, #0xffffffff
    c55c: e007         	b	0xc56e <strncpy+0x26>   @ imm = #0xe
    c55e: f81e 1f01    	ldrb	r1, [lr, #1]!
    c562: 1e54         	subs	r4, r2, #0x1
    c564: f803 1b01    	strb	r1, [r3], #1
    c568: b129         	cbz	r1, 0xc576 <strncpy+0x2e> @ imm = #0xa
    c56a: 4622         	mov	r2, r4
    c56c: 469c         	mov	r12, r3
    c56e: 4663         	mov	r3, r12
    c570: 2a00         	cmp	r2, #0x0
    c572: d1f4         	bne	0xc55e <strncpy+0x16>   @ imm = #-0x18
    c574: bd30         	pop	{r4, r5, pc}
    c576: 2c00         	cmp	r4, #0x0
    c578: d0fc         	beq	0xc574 <strncpy+0x2c>   @ imm = #-0x8
    c57a: 4494         	add	r12, r2
    c57c: f803 1b01    	strb	r1, [r3], #1
    c580: 4563         	cmp	r3, r12
    c582: d1fb         	bne	0xc57c <strncpy+0x34>   @ imm = #-0xa
    c584: bd30         	pop	{r4, r5, pc}
    c586: 460c         	mov	r4, r1
    c588: 4684         	mov	r12, r0
    c58a: 6825         	ldr	r5, [r4]
    c58c: 4621         	mov	r1, r4
    c58e: 3404         	adds	r4, #0x4
    c590: f1a5 3301    	sub.w	r3, r5, #0x1010101
    c594: ea23 0305    	bic.w	r3, r3, r5
    c598: f013 3f80    	tst.w	r3, #0x80808080
    c59c: d1dc         	bne	0xc558 <strncpy+0x10>   @ imm = #-0x48
    c59e: 3a04         	subs	r2, #0x4
    c5a0: f84c 5b04    	str	r5, [r12], #4
    c5a4: 2a03         	cmp	r2, #0x3
    c5a6: d8f0         	bhi	0xc58a <strncpy+0x42>   @ imm = #-0x20
    c5a8: 4621         	mov	r1, r4
    c5aa: e7d5         	b	0xc558 <strncpy+0x10>   @ imm = #-0x56

0000c5ac <__locale_mb_cur_max>:
; __locale_mb_cur_max():
    c5ac: 4b01         	ldr	r3, [pc, #0x4]          @ 0xc5b4 <__locale_mb_cur_max+0x8>
    c5ae: f893 0128    	ldrb.w	r0, [r3, #0x128]
    c5b2: 4770         	bx	lr
    c5b4: 20 0b 00 20  	.word	0x20000b20

0000c5b8 <_localeconv_r>:
; _localeconv_r():
    c5b8: 4800         	ldr	r0, [pc, #0x0]          @ 0xc5bc <_localeconv_r+0x4>
    c5ba: 4770         	bx	lr
    c5bc: 10 0c 00 20  	.word	0x20000c10

0000c5c0 <_close_r>:
; _close_r():
    c5c0: b538         	push	{r3, r4, r5, lr}
    c5c2: 2200         	movs	r2, #0x0
    c5c4: 4d06         	ldr	r5, [pc, #0x18]         @ 0xc5e0 <_close_r+0x20>
    c5c6: 4604         	mov	r4, r0
    c5c8: 4608         	mov	r0, r1
    c5ca: 602a         	str	r2, [r5]
    c5cc: f003 f8ca    	bl	0xf764 <_close>         @ imm = #0x3194
    c5d0: 1c43         	adds	r3, r0, #0x1
    c5d2: d000         	beq	0xc5d6 <_close_r+0x16>  @ imm = #0x0
    c5d4: bd38         	pop	{r3, r4, r5, pc}
    c5d6: 682b         	ldr	r3, [r5]
    c5d8: 2b00         	cmp	r3, #0x0
    c5da: d0fb         	beq	0xc5d4 <_close_r+0x14>  @ imm = #-0xa
    c5dc: 6023         	str	r3, [r4]
    c5de: bd38         	pop	{r3, r4, r5, pc}
    c5e0: 44 18 00 20  	.word	0x20001844

0000c5e4 <_lseek_r>:
; _lseek_r():
    c5e4: b538         	push	{r3, r4, r5, lr}
    c5e6: 460c         	mov	r4, r1
    c5e8: 4684         	mov	r12, r0
    c5ea: 4611         	mov	r1, r2
    c5ec: 4d07         	ldr	r5, [pc, #0x1c]         @ 0xc60c <_lseek_r+0x28>
    c5ee: 461a         	mov	r2, r3
    c5f0: 2300         	movs	r3, #0x0
    c5f2: 4620         	mov	r0, r4
    c5f4: 4664         	mov	r4, r12
    c5f6: 602b         	str	r3, [r5]
    c5f8: f003 f8dc    	bl	0xf7b4 <_lseek>         @ imm = #0x31b8
    c5fc: 1c43         	adds	r3, r0, #0x1
    c5fe: d000         	beq	0xc602 <_lseek_r+0x1e>  @ imm = #0x0
    c600: bd38         	pop	{r3, r4, r5, pc}
    c602: 682b         	ldr	r3, [r5]
    c604: 2b00         	cmp	r3, #0x0
    c606: d0fb         	beq	0xc600 <_lseek_r+0x1c>  @ imm = #-0xa
    c608: 6023         	str	r3, [r4]
    c60a: bd38         	pop	{r3, r4, r5, pc}
    c60c: 44 18 00 20  	.word	0x20001844

0000c610 <_read_r>:
; _read_r():
    c610: b538         	push	{r3, r4, r5, lr}
    c612: 460c         	mov	r4, r1
    c614: 4684         	mov	r12, r0
    c616: 4611         	mov	r1, r2
    c618: 4d07         	ldr	r5, [pc, #0x1c]         @ 0xc638 <_read_r+0x28>
    c61a: 461a         	mov	r2, r3
    c61c: 2300         	movs	r3, #0x0
    c61e: 4620         	mov	r0, r4
    c620: 4664         	mov	r4, r12
    c622: 602b         	str	r3, [r5]
    c624: f003 f8ce    	bl	0xf7c4 <_read>          @ imm = #0x319c
    c628: 1c43         	adds	r3, r0, #0x1
    c62a: d000         	beq	0xc62e <_read_r+0x1e>   @ imm = #0x0
    c62c: bd38         	pop	{r3, r4, r5, pc}
    c62e: 682b         	ldr	r3, [r5]
    c630: 2b00         	cmp	r3, #0x0
    c632: d0fb         	beq	0xc62c <_read_r+0x1c>   @ imm = #-0xa
    c634: 6023         	str	r3, [r4]
    c636: bd38         	pop	{r3, r4, r5, pc}
    c638: 44 18 00 20  	.word	0x20001844

0000c63c <_sbrk_r>:
; _sbrk_r():
    c63c: b538         	push	{r3, r4, r5, lr}
    c63e: 2200         	movs	r2, #0x0
    c640: 4d06         	ldr	r5, [pc, #0x18]         @ 0xc65c <_sbrk_r+0x20>
    c642: 4604         	mov	r4, r0
    c644: 4608         	mov	r0, r1
    c646: 602a         	str	r2, [r5]
    c648: f003 f8c4    	bl	0xf7d4 <_sbrk>          @ imm = #0x3188
    c64c: 1c43         	adds	r3, r0, #0x1
    c64e: d000         	beq	0xc652 <_sbrk_r+0x16>   @ imm = #0x0
    c650: bd38         	pop	{r3, r4, r5, pc}
    c652: 682b         	ldr	r3, [r5]
    c654: 2b00         	cmp	r3, #0x0
    c656: d0fb         	beq	0xc650 <_sbrk_r+0x14>   @ imm = #-0xa
    c658: 6023         	str	r3, [r4]
    c65a: bd38         	pop	{r3, r4, r5, pc}
    c65c: 44 18 00 20  	.word	0x20001844

0000c660 <sysconf>:
; sysconf():
    c660: 2808         	cmp	r0, #0x8
    c662: d102         	bne	0xc66a <sysconf+0xa>    @ imm = #0x4
    c664: f44f 5080    	mov.w	r0, #0x1000
    c668: 4770         	bx	lr
    c66a: b508         	push	{r3, lr}
    c66c: f001 fe58    	bl	0xe320 <__errno>        @ imm = #0x1cb0
    c670: 2216         	movs	r2, #0x16
    c672: 4603         	mov	r3, r0
    c674: f04f 30ff    	mov.w	r0, #0xffffffff
    c678: 601a         	str	r2, [r3]
    c67a: bd08         	pop	{r3, pc}

0000c67c <__libc_fini_array>:
; __libc_fini_array():
    c67c: b538         	push	{r3, r4, r5, lr}
    c67e: 4d07         	ldr	r5, [pc, #0x1c]         @ 0xc69c <__libc_fini_array+0x20>
    c680: 4c07         	ldr	r4, [pc, #0x1c]         @ 0xc6a0 <__libc_fini_array+0x24>
    c682: 1b2c         	subs	r4, r5, r4
    c684: 10a4         	asrs	r4, r4, #0x2
    c686: d005         	beq	0xc694 <__libc_fini_array+0x18> @ imm = #0xa
    c688: 3c01         	subs	r4, #0x1
    c68a: f855 3d04    	ldr	r3, [r5, #-4]!
    c68e: 4798         	blx	r3
    c690: 2c00         	cmp	r4, #0x0
    c692: d1f9         	bne	0xc688 <__libc_fini_array+0xc> @ imm = #-0xe
    c694: e8bd 4038    	pop.w	{r3, r4, r5, lr}
    c698: f003 b8b6    	b.w	0xf808 <___fini_veneer> @ imm = #0x316c
    c69c: 0c 18 21 80  	.word	0x8021180c
    c6a0: 08 18 21 80  	.word	0x80211808

0000c6a4 <memchr>:
; memchr():
    c6a4: b530         	push	{r4, r5, lr}
    c6a6: 4686         	mov	lr, r0
    c6a8: 0780         	lsls	r0, r0, #0x1e
    c6aa: b2cc         	uxtb	r4, r1
    c6ac: d015         	beq	0xc6da <memchr+0x36>    @ imm = #0x2a
    c6ae: eb0e 0502    	add.w	r5, lr, r2
    c6b2: 46f4         	mov	r12, lr
    c6b4: e006         	b	0xc6c4 <memchr+0x20>    @ imm = #0xc
    c6b6: f813 1b01    	ldrb	r1, [r3], #1
    c6ba: 42a1         	cmp	r1, r4
    c6bc: d007         	beq	0xc6ce <memchr+0x2a>    @ imm = #0xe
    c6be: 0799         	lsls	r1, r3, #0x1e
    c6c0: d006         	beq	0xc6d0 <memchr+0x2c>    @ imm = #0xc
    c6c2: 469c         	mov	r12, r3
    c6c4: 4565         	cmp	r5, r12
    c6c6: 4663         	mov	r3, r12
    c6c8: 4660         	mov	r0, r12
    c6ca: d1f4         	bne	0xc6b6 <memchr+0x12>    @ imm = #-0x18
    c6cc: 2000         	movs	r0, #0x0
    c6ce: bd30         	pop	{r4, r5, pc}
    c6d0: 3a01         	subs	r2, #0x1
    c6d2: 4472         	add	r2, lr
    c6d4: 469e         	mov	lr, r3
    c6d6: eba2 020c    	sub.w	r2, r2, r12
    c6da: 2a03         	cmp	r2, #0x3
    c6dc: d80c         	bhi	0xc6f8 <memchr+0x54>    @ imm = #0x18
    c6de: 2a00         	cmp	r2, #0x0
    c6e0: d0f4         	beq	0xc6cc <memchr+0x28>    @ imm = #-0x18
    c6e2: 4673         	mov	r3, lr
    c6e4: 4472         	add	r2, lr
    c6e6: e001         	b	0xc6ec <memchr+0x48>    @ imm = #0x2
    c6e8: 429a         	cmp	r2, r3
    c6ea: d0ef         	beq	0xc6cc <memchr+0x28>    @ imm = #-0x22
    c6ec: 4618         	mov	r0, r3
    c6ee: f813 1b01    	ldrb	r1, [r3], #1
    c6f2: 42a1         	cmp	r1, r4
    c6f4: d1f8         	bne	0xc6e8 <memchr+0x44>    @ imm = #-0x10
    c6f6: bd30         	pop	{r4, r5, pc}
    c6f8: eb04 2504    	add.w	r5, r4, r4, lsl #8
    c6fc: 4671         	mov	r1, lr
    c6fe: eb05 4505    	add.w	r5, r5, r5, lsl #16
    c702: 468e         	mov	lr, r1
    c704: f851 3b04    	ldr	r3, [r1], #4
    c708: 406b         	eors	r3, r5
    c70a: f1a3 3001    	sub.w	r0, r3, #0x1010101
    c70e: ea20 0303    	bic.w	r3, r0, r3
    c712: f013 3f80    	tst.w	r3, #0x80808080
    c716: d1e4         	bne	0xc6e2 <memchr+0x3e>    @ imm = #-0x38
    c718: 3a04         	subs	r2, #0x4
    c71a: 2a03         	cmp	r2, #0x3
    c71c: d8f1         	bhi	0xc702 <memchr+0x5e>    @ imm = #-0x1e
    c71e: 468e         	mov	lr, r1
    c720: e7dd         	b	0xc6de <memchr+0x3a>    @ imm = #-0x46
    c722: bf00         	nop

0000c724 <_wcrtomb_r>:
; _wcrtomb_r():
    c724: b570         	push	{r4, r5, r6, lr}
    c726: 4605         	mov	r5, r0
    c728: b084         	sub	sp, #0x10
    c72a: b15b         	cbz	r3, 0xc744 <_wcrtomb_r+0x20> @ imm = #0x16
    c72c: 461c         	mov	r4, r3
    c72e: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0xc76c <_wcrtomb_r+0x48>
    c730: f8d3 60e0    	ldr.w	r6, [r3, #0xe0]
    c734: 4623         	mov	r3, r4
    c736: b169         	cbz	r1, 0xc754 <_wcrtomb_r+0x30> @ imm = #0x1a
    c738: 4628         	mov	r0, r5
    c73a: 47b0         	blx	r6
    c73c: 1c43         	adds	r3, r0, #0x1
    c73e: d00f         	beq	0xc760 <_wcrtomb_r+0x3c> @ imm = #0x1e
    c740: b004         	add	sp, #0x10
    c742: bd70         	pop	{r4, r5, r6, pc}
    c744: 4b09         	ldr	r3, [pc, #0x24]         @ 0xc76c <_wcrtomb_r+0x48>
    c746: f500 7482    	add.w	r4, r0, #0x104
    c74a: f8d3 60e0    	ldr.w	r6, [r3, #0xe0]
    c74e: 4623         	mov	r3, r4
    c750: 2900         	cmp	r1, #0x0
    c752: d1f1         	bne	0xc738 <_wcrtomb_r+0x14> @ imm = #-0x1e
    c754: 460a         	mov	r2, r1
    c756: 4628         	mov	r0, r5
    c758: a901         	add	r1, sp, #0x4
    c75a: 47b0         	blx	r6
    c75c: 1c43         	adds	r3, r0, #0x1
    c75e: d1ef         	bne	0xc740 <_wcrtomb_r+0x1c> @ imm = #-0x22
    c760: 2200         	movs	r2, #0x0
    c762: 238a         	movs	r3, #0x8a
    c764: 6022         	str	r2, [r4]
    c766: 602b         	str	r3, [r5]
    c768: b004         	add	sp, #0x10
    c76a: bd70         	pop	{r4, r5, r6, pc}
    c76c: 20 0b 00 20  	.word	0x20000b20

0000c770 <_wcsrtombs_r>:
; _wcsrtombs_r():
    c770: b510         	push	{r4, lr}
    c772: b082         	sub	sp, #0x8
    c774: 9c04         	ldr	r4, [sp, #0x10]
    c776: 9300         	str	r3, [sp]
    c778: f04f 33ff    	mov.w	r3, #0xffffffff
    c77c: 9401         	str	r4, [sp, #0x4]
    c77e: f001 fe4f    	bl	0xe420 <_wcsnrtombs_r>  @ imm = #0x1c9e
    c782: b002         	add	sp, #0x8
    c784: bd10         	pop	{r4, pc}
    c786: bf00         	nop

0000c788 <__register_exitproc>:
; __register_exitproc():
    c788: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
    c78c: 4d1c         	ldr	r5, [pc, #0x70]         @ 0xc800 <__register_exitproc+0x78>
    c78e: 4606         	mov	r6, r0
    c790: 4698         	mov	r8, r3
    c792: 460f         	mov	r7, r1
    c794: 6828         	ldr	r0, [r5]
    c796: 4691         	mov	r9, r2
    c798: f7fc fbc4    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0x3878
    c79c: 4b19         	ldr	r3, [pc, #0x64]         @ 0xc804 <__register_exitproc+0x7c>
    c79e: 681c         	ldr	r4, [r3]
    c7a0: b32c         	cbz	r4, 0xc7ee <__register_exitproc+0x66> @ imm = #0x4a
    c7a2: 6828         	ldr	r0, [r5]
    c7a4: 6865         	ldr	r5, [r4, #0x4]
    c7a6: 2d1f         	cmp	r5, #0x1f
    c7a8: dc24         	bgt	0xc7f4 <__register_exitproc+0x6c> @ imm = #0x48
    c7aa: b94e         	cbnz	r6, 0xc7c0 <__register_exitproc+0x38> @ imm = #0x12
    c7ac: 1c6b         	adds	r3, r5, #0x1
    c7ae: 3502         	adds	r5, #0x2
    c7b0: 6063         	str	r3, [r4, #0x4]
    c7b2: f844 7025    	str.w	r7, [r4, r5, lsl #2]
    c7b6: f7fc fbb7    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x3892
    c7ba: 2000         	movs	r0, #0x0
    c7bc: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
    c7c0: eb04 0185    	add.w	r1, r4, r5, lsl #2
    c7c4: 2301         	movs	r3, #0x1
    c7c6: 2e02         	cmp	r6, #0x2
    c7c8: f8c1 9088    	str.w	r9, [r1, #0x88]
    c7cc: fa03 f305    	lsl.w	r3, r3, r5
    c7d0: f8d4 2188    	ldr.w	r2, [r4, #0x188]
    c7d4: ea42 0203    	orr.w	r2, r2, r3
    c7d8: f8c4 2188    	str.w	r2, [r4, #0x188]
    c7dc: f8c1 8108    	str.w	r8, [r1, #0x108]
    c7e0: d1e4         	bne	0xc7ac <__register_exitproc+0x24> @ imm = #-0x38
    c7e2: f8d4 218c    	ldr.w	r2, [r4, #0x18c]
    c7e6: 431a         	orrs	r2, r3
    c7e8: f8c4 218c    	str.w	r2, [r4, #0x18c]
    c7ec: e7de         	b	0xc7ac <__register_exitproc+0x24> @ imm = #-0x44
    c7ee: 4c06         	ldr	r4, [pc, #0x18]         @ 0xc808 <__register_exitproc+0x80>
    c7f0: 601c         	str	r4, [r3]
    c7f2: e7d6         	b	0xc7a2 <__register_exitproc+0x1a> @ imm = #-0x54
    c7f4: f7fc fb98    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x38d0
    c7f8: f04f 30ff    	mov.w	r0, #0xffffffff
    c7fc: e7de         	b	0xc7bc <__register_exitproc+0x34> @ imm = #-0x44
    c7fe: bf00         	nop
    c800: 08 07 00 20  	.word	0x20000708
    c804: 0c 18 00 20  	.word	0x2000180c
    c808: 48 18 00 20  	.word	0x20001848
    c80c: 00 00 00 00  	.word	0x00000000

0000c810 <frexp>:
; frexp():
    c810: b430         	push	{r4, r5}
    c812: b082         	sub	sp, #0x8
    c814: 4c1a         	ldr	r4, [pc, #0x68]         @ 0xc880 <frexp+0x70>
    c816: 2100         	movs	r1, #0x0
    c818: ed8d 0b00    	vstr	d0, [sp]
    c81c: 9a01         	ldr	r2, [sp, #0x4]
    c81e: 6001         	str	r1, [r0]
    c820: f022 4300    	bic	r3, r2, #0x80000000
    c824: 42a3         	cmp	r3, r4
    c826: d81f         	bhi	0xc868 <frexp+0x58>     @ imm = #0x3e
    c828: 9c00         	ldr	r4, [sp]
    c82a: 431c         	orrs	r4, r3
    c82c: d01c         	beq	0xc868 <frexp+0x58>     @ imm = #0x38
    c82e: 4c15         	ldr	r4, [pc, #0x54]         @ 0xc884 <frexp+0x74>
    c830: 4014         	ands	r4, r2
    c832: b954         	cbnz	r4, 0xc84a <frexp+0x3a> @ imm = #0x14
    c834: f06f 0135    	mvn	r1, #0x35
    c838: ed9f 7b0f    	vldr	d7, [pc, #60]           @ 0xc878 <frexp+0x68>
    c83c: ee20 7b07    	<unknown>
    c840: ed8d 7b00    	vstr	d7, [sp]
    c844: 9a01         	ldr	r2, [sp, #0x4]
    c846: f022 4300    	bic	r3, r2, #0x80000000
    c84a: f36f 521e    	bfc	r2, #20, #11
    c84e: 151b         	asrs	r3, r3, #0x14
    c850: e9dd 4500    	ldrd	r4, r5, [sp]
    c854: f2a3 33fe    	subw	r3, r3, #0x3fe
    c858: f042 557f    	orr	r5, r2, #0x3fc00000
    c85c: 440b         	add	r3, r1
    c85e: f445 1500    	orr	r5, r5, #0x200000
    c862: 6003         	str	r3, [r0]
    c864: e9cd 4500    	strd	r4, r5, [sp]
    c868: ed9d 0b00    	vldr	d0, [sp]
    c86c: b002         	add	sp, #0x8
    c86e: bc30         	pop	{r4, r5}
    c870: 4770         	bx	lr
    c872: bf00         	nop
    c874: f3af 8000    	nop.w
    c878: 00 00 00 00  	.word	0x00000000
    c87c: 00 00 50 43  	.word	0x43500000
    c880: ff ff ef 7f  	.word	0x7fefffff
    c884: 00 00 f0 7f  	.word	0x7ff00000

0000c888 <quorem>:
; quorem():
    c888: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    c88c: 6903         	ldr	r3, [r0, #0x10]
    c88e: b085         	sub	sp, #0x14
    c890: 690c         	ldr	r4, [r1, #0x10]
    c892: 42a3         	cmp	r3, r4
    c894: f2c0 8090    	blt.w	0xc9b8 <quorem+0x130>   @ imm = #0x120
    c898: 3c01         	subs	r4, #0x1
    c89a: f101 0514    	add.w	r5, r1, #0x14
    c89e: f100 0814    	add.w	r8, r0, #0x14
    c8a2: 4681         	mov	r9, r0
    c8a4: f855 3024    	ldr.w	r3, [r5, r4, lsl #2]
    c8a8: ea4f 0c84    	lsl.w	r12, r4, #0x2
    c8ac: f858 2024    	ldr.w	r2, [r8, r4, lsl #2]
    c8b0: eb05 0784    	add.w	r7, r5, r4, lsl #2
    c8b4: 3301         	adds	r3, #0x1
    c8b6: eb08 0b84    	add.w	r11, r8, r4, lsl #2
    c8ba: 429a         	cmp	r2, r3
    c8bc: fbb2 f6f3    	udiv	r6, r2, r3
    c8c0: d342         	blo	0xc948 <quorem+0xc0>    @ imm = #0x84
    c8c2: 2000         	movs	r0, #0x0
    c8c4: 46aa         	mov	r10, r5
    c8c6: 46c6         	mov	lr, r8
    c8c8: f8cd 800c    	str.w	r8, [sp, #0xc]
    c8cc: 4603         	mov	r3, r0
    c8ce: 4688         	mov	r8, r1
    c8d0: e9cd c501    	strd	r12, r5, [sp, #4]
    c8d4: 4605         	mov	r5, r0
    c8d6: f85a 2b04    	ldr	r2, [r10], #4
    c8da: f8de 1000    	ldr.w	r1, [lr]
    c8de: b290         	uxth	r0, r2
    c8e0: 4557         	cmp	r7, r10
    c8e2: ea4f 4c12    	lsr.w	r12, r2, #0x10
    c8e6: fb06 5000    	mla	r0, r6, r0, r5
    c8ea: b28a         	uxth	r2, r1
    c8ec: ea4f 4510    	lsr.w	r5, r0, #0x10
    c8f0: b280         	uxth	r0, r0
    c8f2: fb06 550c    	mla	r5, r6, r12, r5
    c8f6: eba2 0200    	sub.w	r2, r2, r0
    c8fa: 441a         	add	r2, r3
    c8fc: b2ab         	uxth	r3, r5
    c8fe: ea4f 4515    	lsr.w	r5, r5, #0x10
    c902: ebc3 4322    	rsb	r3, r3, r2, asr #16
    c906: b292         	uxth	r2, r2
    c908: eb03 4311    	add.w	r3, r3, r1, lsr #16
    c90c: ea42 4203    	orr.w	r2, r2, r3, lsl #16
    c910: ea4f 4323    	asr.w	r3, r3, #0x10
    c914: f84e 2b04    	str	r2, [lr], #4
    c918: d2dd         	bhs	0xc8d6 <quorem+0x4e>    @ imm = #-0x46
    c91a: 4641         	mov	r1, r8
    c91c: f8dd 800c    	ldr.w	r8, [sp, #0xc]
    c920: e9dd c501    	ldrd	r12, r5, [sp, #4]
    c924: f858 300c    	ldr.w	r3, [r8, r12]
    c928: b973         	cbnz	r3, 0xc948 <quorem+0xc0> @ imm = #0x1c
    c92a: f1ab 0b04    	sub.w	r11, r11, #0x4
    c92e: 45d8         	cmp	r8, r11
    c930: d304         	blo	0xc93c <quorem+0xb4>    @ imm = #0x8
    c932: e007         	b	0xc944 <quorem+0xbc>    @ imm = #0xe
    c934: 45d8         	cmp	r8, r11
    c936: f104 34ff    	add.w	r4, r4, #0xffffffff
    c93a: d203         	bhs	0xc944 <quorem+0xbc>    @ imm = #0x6
    c93c: f85b 3904    	ldr	r3, [r11], #-4
    c940: 2b00         	cmp	r3, #0x0
    c942: d0f7         	beq	0xc934 <quorem+0xac>    @ imm = #-0x12
    c944: f8c9 4010    	str.w	r4, [r9, #0x10]
    c948: 4648         	mov	r0, r9
    c94a: f001 fb13    	bl	0xdf74 <__mcmp>         @ imm = #0x1626
    c94e: 2800         	cmp	r0, #0x0
    c950: db2e         	blt	0xc9b0 <quorem+0x128>   @ imm = #0x5c
    c952: 2200         	movs	r2, #0x0
    c954: 4641         	mov	r1, r8
    c956: 4694         	mov	r12, r2
    c958: f855 0b04    	ldr	r0, [r5], #4
    c95c: 680b         	ldr	r3, [r1]
    c95e: fa1f fe80    	uxth.w	lr, r0
    c962: 42af         	cmp	r7, r5
    c964: b29a         	uxth	r2, r3
    c966: ea4f 4010    	lsr.w	r0, r0, #0x10
    c96a: eba2 020e    	sub.w	r2, r2, lr
    c96e: 4462         	add	r2, r12
    c970: ebc0 4022    	rsb	r0, r0, r2, asr #16
    c974: b292         	uxth	r2, r2
    c976: eb00 4013    	add.w	r0, r0, r3, lsr #16
    c97a: ea42 4200    	orr.w	r2, r2, r0, lsl #16
    c97e: ea4f 4c20    	asr.w	r12, r0, #0x10
    c982: f841 2b04    	str	r2, [r1], #4
    c986: d2e7         	bhs	0xc958 <quorem+0xd0>    @ imm = #-0x32
    c988: f858 2024    	ldr.w	r2, [r8, r4, lsl #2]
    c98c: eb08 0384    	add.w	r3, r8, r4, lsl #2
    c990: b96a         	cbnz	r2, 0xc9ae <quorem+0x126> @ imm = #0x1a
    c992: 3b04         	subs	r3, #0x4
    c994: 4543         	cmp	r3, r8
    c996: d804         	bhi	0xc9a2 <quorem+0x11a>   @ imm = #0x8
    c998: e007         	b	0xc9aa <quorem+0x122>   @ imm = #0xe
    c99a: 4598         	cmp	r8, r3
    c99c: f104 34ff    	add.w	r4, r4, #0xffffffff
    c9a0: d203         	bhs	0xc9aa <quorem+0x122>   @ imm = #0x6
    c9a2: f853 2904    	ldr	r2, [r3], #-4
    c9a6: 2a00         	cmp	r2, #0x0
    c9a8: d0f7         	beq	0xc99a <quorem+0x112>   @ imm = #-0x12
    c9aa: f8c9 4010    	str.w	r4, [r9, #0x10]
    c9ae: 3601         	adds	r6, #0x1
    c9b0: 4630         	mov	r0, r6
    c9b2: b005         	add	sp, #0x14
    c9b4: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    c9b8: 2000         	movs	r0, #0x0
    c9ba: b005         	add	sp, #0x14
    c9bc: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000c9c0 <_dtoa_r>:
; _dtoa_r():
    c9c0: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    c9c4: ed2d 8b02    	vpush	{d8}
    c9c8: b08f         	sub	sp, #0x3c
    c9ca: 4604         	mov	r4, r0
    c9cc: 4691         	mov	r9, r2
    c9ce: 9101         	str	r1, [sp, #0x4]
    c9d0: 6b81         	ldr	r1, [r0, #0x38]
    c9d2: 9d1a         	ldr	r5, [sp, #0x68]
    c9d4: 9306         	str	r3, [sp, #0x18]
    c9d6: ec57 6b10    	vmov	r6, r7, d0
    c9da: ed8d 0b02    	vstr	d0, [sp, #8]
    c9de: b141         	cbz	r1, 0xc9f2 <_dtoa_r+0x32> @ imm = #0x10
    c9e0: 6bc2         	ldr	r2, [r0, #0x3c]
    c9e2: 2301         	movs	r3, #0x1
    c9e4: 4093         	lsls	r3, r2
    c9e6: 604a         	str	r2, [r1, #0x4]
    c9e8: 608b         	str	r3, [r1, #0x8]
    c9ea: f001 f849    	bl	0xda80 <_Bfree>         @ imm = #0x1092
    c9ee: 2300         	movs	r3, #0x0
    c9f0: 63a3         	str	r3, [r4, #0x38]
    c9f2: f1b7 0800    	subs.w	r8, r7, #0x0
    c9f6: f2c0 8096    	blt.w	0xcb26 <_dtoa_r+0x166>  @ imm = #0x12c
    c9fa: 2300         	movs	r3, #0x0
    c9fc: 602b         	str	r3, [r5]
    c9fe: 4b6e         	ldr	r3, [pc, #0x1b8]        @ 0xcbb8 <_dtoa_r+0x1f8>
    ca00: ea33 0308    	bics.w	r3, r3, r8
    ca04: f000 809a    	beq.w	0xcb3c <_dtoa_r+0x17c>  @ imm = #0x134
    ca08: ed9d 8b02    	vldr	d8, [sp, #8]
    ca0c: eeb5 8b40    	<unknown>
    ca10: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    ca14: d10f         	bne	0xca36 <_dtoa_r+0x76>   @ imm = #0x1e
    ca16: 2301         	movs	r3, #0x1
    ca18: 9a06         	ldr	r2, [sp, #0x18]
    ca1a: 6013         	str	r3, [r2]
    ca1c: 9b1b         	ldr	r3, [sp, #0x6c]
    ca1e: b113         	cbz	r3, 0xca26 <_dtoa_r+0x66> @ imm = #0x4
    ca20: 4b66         	ldr	r3, [pc, #0x198]        @ 0xcbbc <_dtoa_r+0x1fc>
    ca22: 9a1b         	ldr	r2, [sp, #0x6c]
    ca24: 6013         	str	r3, [r2]
    ca26: f8df 81a0    	ldr.w	r8, [pc, #0x1a0]        @ 0xcbc8 <_dtoa_r+0x208>
    ca2a: 4640         	mov	r0, r8
    ca2c: b00f         	add	sp, #0x3c
    ca2e: ecbd 8b02    	vpop	{d8}
    ca32: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    ca36: aa0c         	add	r2, sp, #0x30
    ca38: eeb0 0b48    	vmov.f64	d0, d8
    ca3c: a90d         	add	r1, sp, #0x34
    ca3e: 4620         	mov	r0, r4
    ca40: f001 fb72    	bl	0xe128 <__d2b>          @ imm = #0x16e4
    ca44: 9a0c         	ldr	r2, [sp, #0x30]
    ca46: ea5f 5318    	lsrs.w	r3, r8, #0x14
    ca4a: 4605         	mov	r5, r0
    ca4c: f040 808f    	bne.w	0xcb6e <_dtoa_r+0x1ae>  @ imm = #0x11e
    ca50: 9b0d         	ldr	r3, [sp, #0x34]
    ca52: 4413         	add	r3, r2
    ca54: f203 4132    	addw	r1, r3, #0x432
    ca58: 2920         	cmp	r1, #0x20
    ca5a: f340 81a4    	ble.w	0xcda6 <_dtoa_r+0x3e6>  @ imm = #0x348
    ca5e: f1c1 0140    	rsb.w	r1, r1, #0x40
    ca62: fa08 f801    	lsl.w	r8, r8, r1
    ca66: f203 4112    	addw	r1, r3, #0x412
    ca6a: fa26 f101    	lsr.w	r1, r6, r1
    ca6e: ea48 0101    	orr.w	r1, r8, r1
    ca72: ee07 1a10    	vmov	s14, r1
    ca76: eeb8 7b47    	<unknown>
    ca7a: 2101         	movs	r1, #0x1
    ca7c: 3b01         	subs	r3, #0x1
    ca7e: 9105         	str	r1, [sp, #0x14]
    ca80: ee17 1a90    	vmov	r1, s15
    ca84: f1a1 71f8    	sub.w	r1, r1, #0x1f00000
    ca88: eeb7 2b08    	<unknown>
    ca8c: ee07 1a90    	vmov	s15, r1
    ca90: ee05 3a90    	vmov	s11, r3
    ca94: ee37 7b42    	<unknown>
    ca98: eeb8 4be5    	<unknown>
    ca9c: ed9f 3b40    	vldr	d3, [pc, #256]          @ 0xcba0 <_dtoa_r+0x1e0>
    caa0: ed9f 6b41    	vldr	d6, [pc, #260]          @ 0xcba8 <_dtoa_r+0x1e8>
    caa4: ed9f 5b42    	vldr	d5, [pc, #264]          @ 0xcbb0 <_dtoa_r+0x1f0>
    caa8: eea7 6b03    	<unknown>
    caac: eeb0 7b46    	vmov.f64	d7, d6
    cab0: eea4 7b05    	<unknown>
    cab4: eeb5 7bc0    	<unknown>
    cab8: eefd 6bc7    	<unknown>
    cabc: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    cac0: edcd 6a04    	vstr	s13, [sp, #16]
    cac4: f100 8156    	bmi.w	0xcd74 <_dtoa_r+0x3b4>  @ imm = #0x2ac
    cac8: 1ad3         	subs	r3, r2, r3
    caca: 9a04         	ldr	r2, [sp, #0x10]
    cacc: 2a16         	cmp	r2, #0x16
    cace: f103 36ff    	add.w	r6, r3, #0xffffffff
    cad2: f200 813e    	bhi.w	0xcd52 <_dtoa_r+0x392>  @ imm = #0x27c
    cad6: 493a         	ldr	r1, [pc, #0xe8]         @ 0xcbc0 <_dtoa_r+0x200>
    cad8: eb01 01c2    	add.w	r1, r1, r2, lsl #3
    cadc: ed91 7b00    	vldr	d7, [r1]
    cae0: eeb4 8bc7    	<unknown>
    cae4: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    cae8: f100 8157    	bmi.w	0xcd9a <_dtoa_r+0x3da>  @ imm = #0x2ae
    caec: 2b00         	cmp	r3, #0x0
    caee: f340 84f1    	ble.w	0xd4d4 <_dtoa_r+0xb14>  @ imm = #0x9e2
    caf2: 2300         	movs	r3, #0x0
    caf4: 4416         	add	r6, r2
    caf6: 469a         	mov	r10, r3
    caf8: e9cd 2308    	strd	r2, r3, [sp, #32]
    cafc: 2300         	movs	r3, #0x0
    cafe: 9307         	str	r3, [sp, #0x1c]
    cb00: 9b01         	ldr	r3, [sp, #0x4]
    cb02: 2b09         	cmp	r3, #0x9
    cb04: d866         	bhi	0xcbd4 <_dtoa_r+0x214>  @ imm = #0xcc
    cb06: 2b05         	cmp	r3, #0x5
    cb08: f340 8154    	ble.w	0xcdb4 <_dtoa_r+0x3f4>  @ imm = #0x2a8
    cb0c: 3b04         	subs	r3, #0x4
    cb0e: 2700         	movs	r7, #0x0
    cb10: 9301         	str	r3, [sp, #0x4]
    cb12: 9b01         	ldr	r3, [sp, #0x4]
    cb14: 3b02         	subs	r3, #0x2
    cb16: 2b03         	cmp	r3, #0x3
    cb18: d85e         	bhi	0xcbd8 <_dtoa_r+0x218>  @ imm = #0xbc
    cb1a: e8df f013    	tbh	[pc, r3, lsl #1]
    cb1e: 38 02 35 02  	.word	0x02350238
    cb22: 2a 02 4d 01  	.word	0x014d022a
    cb26: 2301         	movs	r3, #0x1
    cb28: f028 4800    	bic	r8, r8, #0x80000000
    cb2c: 602b         	str	r3, [r5]
    cb2e: 4b22         	ldr	r3, [pc, #0x88]         @ 0xcbb8 <_dtoa_r+0x1f8>
    cb30: f8cd 800c    	str.w	r8, [sp, #0xc]
    cb34: ea33 0308    	bics.w	r3, r3, r8
    cb38: f47f af66    	bne.w	0xca08 <_dtoa_r+0x48>   @ imm = #-0x134
    cb3c: f3c8 0813    	ubfx	r8, r8, #0x0, #0x14
    cb40: f242 730f    	movw	r3, #0x270f
    cb44: 9a06         	ldr	r2, [sp, #0x18]
    cb46: ea58 0806    	orrs.w	r8, r8, r6
    cb4a: 6013         	str	r3, [r2]
    cb4c: d01c         	beq	0xcb88 <_dtoa_r+0x1c8>  @ imm = #0x38
    cb4e: 9b1b         	ldr	r3, [sp, #0x6c]
    cb50: f8df 8078    	ldr.w	r8, [pc, #0x78]         @ 0xcbcc <_dtoa_r+0x20c>
    cb54: 2b00         	cmp	r3, #0x0
    cb56: f43f af68    	beq.w	0xca2a <_dtoa_r+0x6a>   @ imm = #-0x130
    cb5a: f108 0303    	add.w	r3, r8, #0x3
    cb5e: 9a1b         	ldr	r2, [sp, #0x6c]
    cb60: 4640         	mov	r0, r8
    cb62: 6013         	str	r3, [r2]
    cb64: b00f         	add	sp, #0x3c
    cb66: ecbd 8b02    	vpop	{d8}
    cb6a: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    cb6e: ee18 0a90    	vmov	r0, s17
    cb72: 4914         	ldr	r1, [pc, #0x50]         @ 0xcbc4 <_dtoa_r+0x204>
    cb74: eeb0 7b48    	vmov.f64	d7, d8
    cb78: f2a3 33ff    	subw	r3, r3, #0x3ff
    cb7c: f3c0 0013    	ubfx	r0, r0, #0x0, #0x14
    cb80: 4301         	orrs	r1, r0
    cb82: 2000         	movs	r0, #0x0
    cb84: 9005         	str	r0, [sp, #0x14]
    cb86: e77f         	b	0xca88 <_dtoa_r+0xc8>   @ imm = #-0x102
    cb88: 9b1b         	ldr	r3, [sp, #0x6c]
    cb8a: f8df 8044    	ldr.w	r8, [pc, #0x44]         @ 0xcbd0 <_dtoa_r+0x210>
    cb8e: 2b00         	cmp	r3, #0x0
    cb90: f43f af4b    	beq.w	0xca2a <_dtoa_r+0x6a>   @ imm = #-0x16a
    cb94: f108 0308    	add.w	r3, r8, #0x8
    cb98: e7e1         	b	0xcb5e <_dtoa_r+0x19e>  @ imm = #-0x3e
    cb9a: bf00         	nop
    cb9c: f3af 8000    	nop.w
    cba0: 61 43 6f 63  	.word	0x636f4361
    cba4: a7 87 d2 3f  	.word	0x3fd287a7
    cba8: b3 c8 60 8b  	.word	0x8b60c8b3
    cbac: 28 8a c6 3f  	.word	0x3fc68a28
    cbb0: fb 79 9f 50  	.word	0x509f79fb
    cbb4: 13 44 d3 3f  	.word	0x3fd34413
    cbb8: 00 00 f0 7f  	.word	0x7ff00000
    cbbc: 71 1d 21 80  	.word	0x80211d71
    cbc0: 40 20 21 80  	.word	0x80212040
    cbc4: 00 00 f0 3f  	.word	0x3ff00000
    cbc8: 70 1d 21 80  	.word	0x80211d70
    cbcc: c8 1d 21 80  	.word	0x80211dc8
    cbd0: bc 1d 21 80  	.word	0x80211dbc
    cbd4: 2300         	movs	r3, #0x0
    cbd6: 9301         	str	r3, [sp, #0x4]
    cbd8: 2100         	movs	r1, #0x0
    cbda: 4620         	mov	r0, r4
    cbdc: 63e1         	str	r1, [r4, #0x3c]
    cbde: f000 ff29    	bl	0xda34 <_Balloc>        @ imm = #0xe52
    cbe2: 4680         	mov	r8, r0
    cbe4: 2800         	cmp	r0, #0x0
    cbe6: f000 855a    	beq.w	0xd69e <_dtoa_r+0xcde>  @ imm = #0xab4
    cbea: 9b0d         	ldr	r3, [sp, #0x34]
    cbec: f8c4 8038    	str.w	r8, [r4, #0x38]
    cbf0: 2b00         	cmp	r3, #0x0
    cbf2: db03         	blt	0xcbfc <_dtoa_r+0x23c>  @ imm = #0x6
    cbf4: 9a04         	ldr	r2, [sp, #0x10]
    cbf6: 2a0e         	cmp	r2, #0xe
    cbf8: f340 84bd    	ble.w	0xd576 <_dtoa_r+0xbb6>  @ imm = #0x97a
    cbfc: f04f 3bff    	mov.w	r11, #0xffffffff
    cc00: f04f 0900    	mov.w	r9, #0x0
    cc04: f8cd b02c    	str.w	r11, [sp, #0x2c]
    cc08: 9a05         	ldr	r2, [sp, #0x14]
    cc0a: 2a00         	cmp	r2, #0x0
    cc0c: f040 821f    	bne.w	0xd04e <_dtoa_r+0x68e>  @ imm = #0x43e
    cc10: 9b0c         	ldr	r3, [sp, #0x30]
    cc12: f1c3 0336    	rsb.w	r3, r3, #0x36
    cc16: 441e         	add	r6, r3
    cc18: f8cd a028    	str.w	r10, [sp, #0x28]
    cc1c: 449a         	add	r10, r3
    cc1e: 9b07         	ldr	r3, [sp, #0x1c]
    cc20: 9305         	str	r3, [sp, #0x14]
    cc22: 2101         	movs	r1, #0x1
    cc24: 4620         	mov	r0, r4
    cc26: f000 fff1    	bl	0xdc0c <__i2b>          @ imm = #0xfe2
    cc2a: 9b0a         	ldr	r3, [sp, #0x28]
    cc2c: 4607         	mov	r7, r0
    cc2e: 2b00         	cmp	r3, #0x0
    cc30: f000 8459    	beq.w	0xd4e6 <_dtoa_r+0xb26>  @ imm = #0x8b2
    cc34: 2e00         	cmp	r6, #0x0
    cc36: f340 8456    	ble.w	0xd4e6 <_dtoa_r+0xb26>  @ imm = #0x8ac
    cc3a: 9a0a         	ldr	r2, [sp, #0x28]
    cc3c: 42b2         	cmp	r2, r6
    cc3e: 4613         	mov	r3, r2
    cc40: bfa8         	it	ge
    cc42: 4633         	movge	r3, r6
    cc44: 1ad2         	subs	r2, r2, r3
    cc46: ebaa 0a03    	sub.w	r10, r10, r3
    cc4a: 1af6         	subs	r6, r6, r3
    cc4c: 9b07         	ldr	r3, [sp, #0x1c]
    cc4e: 920a         	str	r2, [sp, #0x28]
    cc50: b1c3         	cbz	r3, 0xcc84 <_dtoa_r+0x2c4> @ imm = #0x30
    cc52: 9b05         	ldr	r3, [sp, #0x14]
    cc54: 2b00         	cmp	r3, #0x0
    cc56: f000 84ad    	beq.w	0xd5b4 <_dtoa_r+0xbf4>  @ imm = #0x95a
    cc5a: 461a         	mov	r2, r3
    cc5c: 4639         	mov	r1, r7
    cc5e: 4620         	mov	r0, r4
    cc60: f001 f8b6    	bl	0xddd0 <__pow5mult>     @ imm = #0x116c
    cc64: 4607         	mov	r7, r0
    cc66: 462a         	mov	r2, r5
    cc68: 4620         	mov	r0, r4
    cc6a: 4639         	mov	r1, r7
    cc6c: f000 fffc    	bl	0xdc68 <__multiply>     @ imm = #0xff8
    cc70: 4629         	mov	r1, r5
    cc72: 4605         	mov	r5, r0
    cc74: 4620         	mov	r0, r4
    cc76: f000 ff03    	bl	0xda80 <_Bfree>         @ imm = #0xe06
    cc7a: 9907         	ldr	r1, [sp, #0x1c]
    cc7c: 9b05         	ldr	r3, [sp, #0x14]
    cc7e: 1aca         	subs	r2, r1, r3
    cc80: f040 8463    	bne.w	0xd54a <_dtoa_r+0xb8a>  @ imm = #0x8c6
    cc84: 2301         	movs	r3, #0x1
    cc86: 9307         	str	r3, [sp, #0x1c]
    cc88: 2101         	movs	r1, #0x1
    cc8a: 4620         	mov	r0, r4
    cc8c: f000 ffbe    	bl	0xdc0c <__i2b>          @ imm = #0xf7c
    cc90: 9b08         	ldr	r3, [sp, #0x20]
    cc92: 9005         	str	r0, [sp, #0x14]
    cc94: 2b00         	cmp	r3, #0x0
    cc96: f040 8264    	bne.w	0xd162 <_dtoa_r+0x7a2>  @ imm = #0x4c8
    cc9a: 9b01         	ldr	r3, [sp, #0x4]
    cc9c: 2b01         	cmp	r3, #0x1
    cc9e: f340 829c    	ble.w	0xd1da <_dtoa_r+0x81a>  @ imm = #0x538
    cca2: 2301         	movs	r3, #0x1
    cca4: 4433         	add	r3, r6
    cca6: f013 031f    	ands	r3, r3, #0x1f
    ccaa: f000 8227    	beq.w	0xd0fc <_dtoa_r+0x73c>  @ imm = #0x44e
    ccae: f1c3 0220    	rsb.w	r2, r3, #0x20
    ccb2: 2a04         	cmp	r2, #0x4
    ccb4: f340 83e6    	ble.w	0xd484 <_dtoa_r+0xac4>  @ imm = #0x7cc
    ccb8: f1c3 031c    	rsb.w	r3, r3, #0x1c
    ccbc: 9a0a         	ldr	r2, [sp, #0x28]
    ccbe: 449a         	add	r10, r3
    ccc0: 441e         	add	r6, r3
    ccc2: 441a         	add	r2, r3
    ccc4: 920a         	str	r2, [sp, #0x28]
    ccc6: f1ba 0f00    	cmp.w	r10, #0x0
    ccca: dd05         	ble	0xccd8 <_dtoa_r+0x318>  @ imm = #0xa
    cccc: 4629         	mov	r1, r5
    ccce: 4652         	mov	r2, r10
    ccd0: 4620         	mov	r0, r4
    ccd2: f001 f8dd    	bl	0xde90 <__lshift>       @ imm = #0x11ba
    ccd6: 4605         	mov	r5, r0
    ccd8: 2e00         	cmp	r6, #0x0
    ccda: dd05         	ble	0xcce8 <_dtoa_r+0x328>  @ imm = #0xa
    ccdc: 4632         	mov	r2, r6
    ccde: 9905         	ldr	r1, [sp, #0x14]
    cce0: 4620         	mov	r0, r4
    cce2: f001 f8d5    	bl	0xde90 <__lshift>       @ imm = #0x11aa
    cce6: 9005         	str	r0, [sp, #0x14]
    cce8: 9b01         	ldr	r3, [sp, #0x4]
    ccea: 2b02         	cmp	r3, #0x2
    ccec: 9b09         	ldr	r3, [sp, #0x24]
    ccee: bfd4         	ite	le
    ccf0: 2600         	movle	r6, #0x0
    ccf2: 2601         	movgt	r6, #0x1
    ccf4: 2b00         	cmp	r3, #0x0
    ccf6: f040 824a    	bne.w	0xd18e <_dtoa_r+0x7ce>  @ imm = #0x494
    ccfa: f1bb 0f00    	cmp.w	r11, #0x0
    ccfe: f300 8149    	bgt.w	0xcf94 <_dtoa_r+0x5d4>  @ imm = #0x292
    cd02: 2e00         	cmp	r6, #0x0
    cd04: f000 8146    	beq.w	0xcf94 <_dtoa_r+0x5d4>  @ imm = #0x28c
    cd08: f1bb 0f00    	cmp.w	r11, #0x0
    cd0c: f040 821e    	bne.w	0xd14c <_dtoa_r+0x78c>  @ imm = #0x43c
    cd10: 465b         	mov	r3, r11
    cd12: 9905         	ldr	r1, [sp, #0x14]
    cd14: 2205         	movs	r2, #0x5
    cd16: 4620         	mov	r0, r4
    cd18: f000 febc    	bl	0xda94 <__multadd>      @ imm = #0xd78
    cd1c: 4601         	mov	r1, r0
    cd1e: 9005         	str	r0, [sp, #0x14]
    cd20: 4628         	mov	r0, r5
    cd22: f001 f927    	bl	0xdf74 <__mcmp>         @ imm = #0x124e
    cd26: 2800         	cmp	r0, #0x0
    cd28: f340 8210    	ble.w	0xd14c <_dtoa_r+0x78c>  @ imm = #0x420
    cd2c: 9e04         	ldr	r6, [sp, #0x10]
    cd2e: 46c3         	mov	r11, r8
    cd30: 2331         	movs	r3, #0x31
    cd32: 3601         	adds	r6, #0x1
    cd34: f80b 3b01    	strb	r3, [r11], #1
    cd38: 9905         	ldr	r1, [sp, #0x14]
    cd3a: 4620         	mov	r0, r4
    cd3c: 3601         	adds	r6, #0x1
    cd3e: f000 fe9f    	bl	0xda80 <_Bfree>         @ imm = #0xd3e
    cd42: 2f00         	cmp	r7, #0x0
    cd44: f000 8100    	beq.w	0xcf48 <_dtoa_r+0x588>  @ imm = #0x200
    cd48: 4639         	mov	r1, r7
    cd4a: 4620         	mov	r0, r4
    cd4c: f000 fe98    	bl	0xda80 <_Bfree>         @ imm = #0xd30
    cd50: e0fa         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #0x1f4
    cd52: 2201         	movs	r2, #0x1
    cd54: 9209         	str	r2, [sp, #0x24]
    cd56: 2e00         	cmp	r6, #0x0
    cd58: db1b         	blt	0xcd92 <_dtoa_r+0x3d2>  @ imm = #0x36
    cd5a: f04f 0a00    	mov.w	r10, #0x0
    cd5e: 9b04         	ldr	r3, [sp, #0x10]
    cd60: 2b00         	cmp	r3, #0x0
    cd62: da13         	bge	0xcd8c <_dtoa_r+0x3cc>  @ imm = #0x26
    cd64: 9b04         	ldr	r3, [sp, #0x10]
    cd66: ebaa 0a03    	sub.w	r10, r10, r3
    cd6a: 425b         	rsbs	r3, r3, #0
    cd6c: 9307         	str	r3, [sp, #0x1c]
    cd6e: 2300         	movs	r3, #0x0
    cd70: 9308         	str	r3, [sp, #0x20]
    cd72: e6c5         	b	0xcb00 <_dtoa_r+0x140>  @ imm = #-0x276
    cd74: eeb8 6be6    	<unknown>
    cd78: eeb4 6b47    	<unknown>
    cd7c: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    cd80: f43f aea2    	beq.w	0xcac8 <_dtoa_r+0x108>  @ imm = #-0x2bc
    cd84: 9904         	ldr	r1, [sp, #0x10]
    cd86: 3901         	subs	r1, #0x1
    cd88: 9104         	str	r1, [sp, #0x10]
    cd8a: e69d         	b	0xcac8 <_dtoa_r+0x108>  @ imm = #-0x2c6
    cd8c: 441e         	add	r6, r3
    cd8e: 9308         	str	r3, [sp, #0x20]
    cd90: e6b4         	b	0xcafc <_dtoa_r+0x13c>  @ imm = #-0x298
    cd92: f1c3 0a01    	rsb.w	r10, r3, #0x1
    cd96: 2600         	movs	r6, #0x0
    cd98: e7e1         	b	0xcd5e <_dtoa_r+0x39e>  @ imm = #-0x3e
    cd9a: 9a04         	ldr	r2, [sp, #0x10]
    cd9c: 3a01         	subs	r2, #0x1
    cd9e: 9204         	str	r2, [sp, #0x10]
    cda0: 2200         	movs	r2, #0x0
    cda2: 9209         	str	r2, [sp, #0x24]
    cda4: e7d7         	b	0xcd56 <_dtoa_r+0x396>  @ imm = #-0x52
    cda6: f1c1 0120    	rsb.w	r1, r1, #0x20
    cdaa: fa06 f101    	lsl.w	r1, r6, r1
    cdae: ee07 1a10    	vmov	s14, r1
    cdb2: e660         	b	0xca76 <_dtoa_r+0xb6>   @ imm = #-0x340
    cdb4: 2701         	movs	r7, #0x1
    cdb6: e6ac         	b	0xcb12 <_dtoa_r+0x152>  @ imm = #-0x2a8
    cdb8: 2301         	movs	r3, #0x1
    cdba: 930a         	str	r3, [sp, #0x28]
    cdbc: 9b04         	ldr	r3, [sp, #0x10]
    cdbe: 444b         	add	r3, r9
    cdc0: f103 0b01    	add.w	r11, r3, #0x1
    cdc4: 930b         	str	r3, [sp, #0x2c]
    cdc6: f1bb 0f01    	cmp.w	r11, #0x1
    cdca: 46dc         	mov	r12, r11
    cdcc: bfb8         	it	lt
    cdce: f04f 0c01    	movlt.w	r12, #0x1
    cdd2: f1bc 0f17    	cmp.w	r12, #0x17
    cdd6: f340 84b6    	ble.w	0xd746 <_dtoa_r+0xd86>  @ imm = #0x96c
    cdda: 2201         	movs	r2, #0x1
    cddc: 2304         	movs	r3, #0x4
    cdde: 005b         	lsls	r3, r3, #0x1
    cde0: 4611         	mov	r1, r2
    cde2: 3201         	adds	r2, #0x1
    cde4: f103 0014    	add.w	r0, r3, #0x14
    cde8: 4560         	cmp	r0, r12
    cdea: d9f8         	bls	0xcdde <_dtoa_r+0x41e>  @ imm = #-0x10
    cdec: 63e1         	str	r1, [r4, #0x3c]
    cdee: 4620         	mov	r0, r4
    cdf0: f000 fe20    	bl	0xda34 <_Balloc>        @ imm = #0xc40
    cdf4: 4680         	mov	r8, r0
    cdf6: 2800         	cmp	r0, #0x0
    cdf8: f000 8451    	beq.w	0xd69e <_dtoa_r+0xcde>  @ imm = #0x8a2
    cdfc: f1bb 0f0e    	cmp.w	r11, #0xe
    ce00: 63a0         	str	r0, [r4, #0x38]
    ce02: f200 814c    	bhi.w	0xd09e <_dtoa_r+0x6de>  @ imm = #0x298
    ce06: 2f00         	cmp	r7, #0x0
    ce08: f000 8149    	beq.w	0xd09e <_dtoa_r+0x6de>  @ imm = #0x292
    ce0c: 9a04         	ldr	r2, [sp, #0x10]
    ce0e: 2a00         	cmp	r2, #0x0
    ce10: f340 817a    	ble.w	0xd108 <_dtoa_r+0x748>  @ imm = #0x2f4
    ce14: f002 030f    	and	r3, r2, #0xf
    ce18: 49b9         	ldr	r1, [pc, #0x2e4]        @ 0xd100 <_dtoa_r+0x740>
    ce1a: eb01 03c3    	add.w	r3, r1, r3, lsl #3
    ce1e: ed93 7b00    	vldr	d7, [r3]
    ce22: 1113         	asrs	r3, r2, #0x4
    ce24: 05d2         	lsls	r2, r2, #0x17
    ce26: f140 81d4    	bpl.w	0xd1d2 <_dtoa_r+0x812>  @ imm = #0x3a8
    ce2a: 4ab6         	ldr	r2, [pc, #0x2d8]        @ 0xd104 <_dtoa_r+0x744>
    ce2c: f003 030f    	and	r3, r3, #0xf
    ce30: ed92 6b08    	vldr	d6, [r2, #32]
    ce34: 2203         	movs	r2, #0x3
    ce36: ee88 5b06    	<unknown>
    ce3a: b15b         	cbz	r3, 0xce54 <_dtoa_r+0x494> @ imm = #0x16
    ce3c: 49b1         	ldr	r1, [pc, #0x2c4]        @ 0xd104 <_dtoa_r+0x744>
    ce3e: 07df         	lsls	r7, r3, #0x1f
    ce40: f140 8108    	bpl.w	0xd054 <_dtoa_r+0x694>  @ imm = #0x210
    ce44: 105b         	asrs	r3, r3, #0x1
    ce46: f102 0201    	add.w	r2, r2, #0x1
    ce4a: ecb1 6b02    	vldmia	r1!, {d6}
    ce4e: ee27 7b06    	<unknown>
    ce52: d1f4         	bne	0xce3e <_dtoa_r+0x47e>  @ imm = #-0x18
    ce54: ee85 6b07    	<unknown>
    ce58: 9b09         	ldr	r3, [sp, #0x24]
    ce5a: b13b         	cbz	r3, 0xce6c <_dtoa_r+0x4ac> @ imm = #0xe
    ce5c: eeb7 7b00    	<unknown>
    ce60: eeb4 6bc7    	<unknown>
    ce64: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    ce68: f100 8315    	bmi.w	0xd496 <_dtoa_r+0xad6>  @ imm = #0x62a
    ce6c: ee07 2a90    	vmov	s15, r2
    ce70: eeb1 5b0c    	<unknown>
    ce74: eeb8 7be7    	<unknown>
    ce78: eea7 5b06    	<unknown>
    ce7c: ee15 1a90    	vmov	r1, s11
    ce80: ec53 2b15    	vmov	r2, r3, d5
    ce84: f1a1 7350    	sub.w	r3, r1, #0x3400000
    ce88: f1bb 0f00    	cmp.w	r11, #0x0
    ce8c: f000 80f3    	beq.w	0xd076 <_dtoa_r+0x6b6>  @ imm = #0x1e6
    ce90: f8dd e010    	ldr.w	lr, [sp, #0x10]
    ce94: 465f         	mov	r7, r11
    ce96: eefd 5bc6    	<unknown>
    ce9a: 4999         	ldr	r1, [pc, #0x264]        @ 0xd100 <_dtoa_r+0x740>
    ce9c: 980a         	ldr	r0, [sp, #0x28]
    ce9e: ec43 2b14    	vmov	d4, r2, r3
    cea2: ee15 2a90    	vmov	r2, s11
    cea6: eeb8 7be5    	<unknown>
    ceaa: eb01 03c7    	add.w	r3, r1, r7, lsl #3
    ceae: 3230         	adds	r2, #0x30
    ceb0: ee36 7b47    	<unknown>
    ceb4: b2d2         	uxtb	r2, r2
    ceb6: ed13 5b02    	vldr	d5, [r3, #-8]
    ceba: f888 2000    	strb.w	r2, [r8]
    cebe: f108 0301    	add.w	r3, r8, #0x1
    cec2: 2800         	cmp	r0, #0x0
    cec4: f000 81a9    	beq.w	0xd21a <_dtoa_r+0x85a>  @ imm = #0x352
    cec8: eeb6 3b00    	<unknown>
    cecc: ee83 6b05    	<unknown>
    ced0: ee36 6b44    	<unknown>
    ced4: eeb4 6bc7    	<unknown>
    ced8: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    cedc: f300 836c    	bgt.w	0xd5b8 <_dtoa_r+0xbf8>  @ imm = #0x6d8
    cee0: eeb7 2b00    	<unknown>
    cee4: 2000         	movs	r0, #0x0
    cee6: eeb2 4b04    	<unknown>
    ceea: e018         	b	0xcf1e <_dtoa_r+0x55e>  @ imm = #0x30
    ceec: 3001         	adds	r0, #0x1
    ceee: 42b8         	cmp	r0, r7
    cef0: f280 837f    	bge.w	0xd5f2 <_dtoa_r+0xc32>  @ imm = #0x6fe
    cef4: ee27 7b04    	<unknown>
    cef8: ee26 6b04    	<unknown>
    cefc: eefd 5bc7    	<unknown>
    cf00: eeb8 3be5    	<unknown>
    cf04: ee15 2a90    	vmov	r2, s11
    cf08: 3230         	adds	r2, #0x30
    cf0a: ee37 7b43    	<unknown>
    cf0e: f803 2b01    	strb	r2, [r3], #1
    cf12: eeb4 7bc6    	<unknown>
    cf16: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    cf1a: f100 834d    	bmi.w	0xd5b8 <_dtoa_r+0xbf8>  @ imm = #0x69a
    cf1e: ee32 5b47    	<unknown>
    cf22: eeb4 5bc6    	<unknown>
    cf26: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    cf2a: d5df         	bpl	0xceec <_dtoa_r+0x52c>  @ imm = #-0x42
    cf2c: e002         	b	0xcf34 <_dtoa_r+0x574>  @ imm = #0x4
    cf2e: 4543         	cmp	r3, r8
    cf30: f000 833c    	beq.w	0xd5ac <_dtoa_r+0xbec>  @ imm = #0x678
    cf34: 469b         	mov	r11, r3
    cf36: f813 1d01    	ldrb	r1, [r3, #-1]!
    cf3a: 2939         	cmp	r1, #0x39
    cf3c: d0f7         	beq	0xcf2e <_dtoa_r+0x56e>  @ imm = #-0x12
    cf3e: 3101         	adds	r1, #0x1
    cf40: b2c9         	uxtb	r1, r1
    cf42: 7019         	strb	r1, [r3]
    cf44: f10e 0601    	add.w	r6, lr, #0x1
    cf48: 4629         	mov	r1, r5
    cf4a: 4620         	mov	r0, r4
    cf4c: f000 fd98    	bl	0xda80 <_Bfree>         @ imm = #0xb30
    cf50: 2300         	movs	r3, #0x0
    cf52: f88b 3000    	strb.w	r3, [r11]
    cf56: 9b06         	ldr	r3, [sp, #0x18]
    cf58: 601e         	str	r6, [r3]
    cf5a: 9b1b         	ldr	r3, [sp, #0x6c]
    cf5c: 2b00         	cmp	r3, #0x0
    cf5e: f43f ad64    	beq.w	0xca2a <_dtoa_r+0x6a>   @ imm = #-0x538
    cf62: 4640         	mov	r0, r8
    cf64: f8c3 b000    	str.w	r11, [r3]
    cf68: b00f         	add	sp, #0x3c
    cf6a: ecbd 8b02    	vpop	{d8}
    cf6e: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    cf72: 2301         	movs	r3, #0x1
    cf74: 930a         	str	r3, [sp, #0x28]
    cf76: f1b9 0f00    	cmp.w	r9, #0x0
    cf7a: f340 80eb    	ble.w	0xd154 <_dtoa_r+0x794>  @ imm = #0x1d6
    cf7e: 46cb         	mov	r11, r9
    cf80: 46cc         	mov	r12, r9
    cf82: f8cd 902c    	str.w	r9, [sp, #0x2c]
    cf86: e724         	b	0xcdd2 <_dtoa_r+0x412>  @ imm = #-0x1b8
    cf88: 2300         	movs	r3, #0x0
    cf8a: 930a         	str	r3, [sp, #0x28]
    cf8c: e716         	b	0xcdbc <_dtoa_r+0x3fc>  @ imm = #-0x1d4
    cf8e: 2300         	movs	r3, #0x0
    cf90: 930a         	str	r3, [sp, #0x28]
    cf92: e7f0         	b	0xcf76 <_dtoa_r+0x5b6>  @ imm = #-0x20
    cf94: 9b07         	ldr	r3, [sp, #0x1c]
    cf96: 2b00         	cmp	r3, #0x0
    cf98: f040 81c0    	bne.w	0xd31c <_dtoa_r+0x95c>  @ imm = #0x380
    cf9c: 9e04         	ldr	r6, [sp, #0x10]
    cf9e: 3601         	adds	r6, #0x1
    cfa0: 46c2         	mov	r10, r8
    cfa2: f8cd 8004    	str.w	r8, [sp, #0x4]
    cfa6: f04f 0901    	mov.w	r9, #0x1
    cfaa: 46b0         	mov	r8, r6
    cfac: 4626         	mov	r6, r4
    cfae: 9c05         	ldr	r4, [sp, #0x14]
    cfb0: e008         	b	0xcfc4 <_dtoa_r+0x604>  @ imm = #0x10
    cfb2: 4629         	mov	r1, r5
    cfb4: 2300         	movs	r3, #0x0
    cfb6: 220a         	movs	r2, #0xa
    cfb8: 4630         	mov	r0, r6
    cfba: f000 fd6b    	bl	0xda94 <__multadd>      @ imm = #0xad6
    cfbe: f109 0901    	add.w	r9, r9, #0x1
    cfc2: 4605         	mov	r5, r0
    cfc4: 4621         	mov	r1, r4
    cfc6: 4628         	mov	r0, r5
    cfc8: f7ff fc5e    	bl	0xc888 <quorem>         @ imm = #-0x744
    cfcc: 45d9         	cmp	r9, r11
    cfce: f100 0330    	add.w	r3, r0, #0x30
    cfd2: f80a 3b01    	strb	r3, [r10], #1
    cfd6: dbec         	blt	0xcfb2 <_dtoa_r+0x5f2>  @ imm = #-0x28
    cfd8: 4634         	mov	r4, r6
    cfda: f1bb 0f00    	cmp.w	r11, #0x0
    cfde: 4646         	mov	r6, r8
    cfe0: f8dd 8004    	ldr.w	r8, [sp, #0x4]
    cfe4: f10b 39ff    	add.w	r9, r11, #0xffffffff
    cfe8: bfd8         	it	le
    cfea: f04f 0900    	movle.w	r9, #0x0
    cfee: f108 0201    	add.w	r2, r8, #0x1
    cff2: 4491         	add	r9, r2
    cff4: 2200         	movs	r2, #0x0
    cff6: 9201         	str	r2, [sp, #0x4]
    cff8: 4629         	mov	r1, r5
    cffa: 2201         	movs	r2, #0x1
    cffc: 4620         	mov	r0, r4
    cffe: 9302         	str	r3, [sp, #0x8]
    d000: f000 ff46    	bl	0xde90 <__lshift>       @ imm = #0xe8c
    d004: 9905         	ldr	r1, [sp, #0x14]
    d006: 4605         	mov	r5, r0
    d008: f000 ffb4    	bl	0xdf74 <__mcmp>         @ imm = #0xf68
    d00c: 2800         	cmp	r0, #0x0
    d00e: dc03         	bgt	0xd018 <_dtoa_r+0x658>  @ imm = #0x6
    d010: e2bc         	b	0xd58c <_dtoa_r+0xbcc>  @ imm = #0x578
    d012: 45c1         	cmp	r9, r8
    d014: f000 82c5    	beq.w	0xd5a2 <_dtoa_r+0xbe2>  @ imm = #0x58a
    d018: f819 3c01    	ldrb	r3, [r9, #-1]
    d01c: 46cb         	mov	r11, r9
    d01e: f109 39ff    	add.w	r9, r9, #0xffffffff
    d022: 2b39         	cmp	r3, #0x39
    d024: d0f5         	beq	0xd012 <_dtoa_r+0x652>  @ imm = #-0x16
    d026: 3301         	adds	r3, #0x1
    d028: f889 3000    	strb.w	r3, [r9]
    d02c: 9905         	ldr	r1, [sp, #0x14]
    d02e: 4620         	mov	r0, r4
    d030: f000 fd26    	bl	0xda80 <_Bfree>         @ imm = #0xa4c
    d034: 2f00         	cmp	r7, #0x0
    d036: d087         	beq	0xcf48 <_dtoa_r+0x588>  @ imm = #-0xf2
    d038: 9901         	ldr	r1, [sp, #0x4]
    d03a: 2900         	cmp	r1, #0x0
    d03c: f43f ae84    	beq.w	0xcd48 <_dtoa_r+0x388>  @ imm = #-0x2f8
    d040: 42b9         	cmp	r1, r7
    d042: f43f ae81    	beq.w	0xcd48 <_dtoa_r+0x388>  @ imm = #-0x2fe
    d046: 4620         	mov	r0, r4
    d048: f000 fd1a    	bl	0xda80 <_Bfree>         @ imm = #0xa34
    d04c: e67c         	b	0xcd48 <_dtoa_r+0x388>  @ imm = #-0x308
    d04e: f203 4333    	addw	r3, r3, #0x433
    d052: e5e0         	b	0xcc16 <_dtoa_r+0x256>  @ imm = #-0x440
    d054: 105b         	asrs	r3, r3, #0x1
    d056: 3108         	adds	r1, #0x8
    d058: e6f1         	b	0xce3e <_dtoa_r+0x47e>  @ imm = #-0x21e
    d05a: ee07 2a90    	vmov	s15, r2
    d05e: eeb1 5b0c    	<unknown>
    d062: eeb8 7be7    	<unknown>
    d066: eea7 5b06    	<unknown>
    d06a: ee15 1a90    	vmov	r1, s11
    d06e: ec53 2b15    	vmov	r2, r3, d5
    d072: f1a1 7350    	sub.w	r3, r1, #0x3400000
    d076: eeb1 7b04    	<unknown>
    d07a: ec43 2b15    	vmov	d5, r2, r3
    d07e: ee36 7b47    	<unknown>
    d082: eeb4 7bc5    	<unknown>
    d086: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d08a: f300 8232    	bgt.w	0xd4f2 <_dtoa_r+0xb32>  @ imm = #0x464
    d08e: eeb1 5b45    	<unknown>
    d092: eeb4 7bc5    	<unknown>
    d096: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d09a: f100 80b6    	bmi.w	0xd20a <_dtoa_r+0x84a>  @ imm = #0x16c
    d09e: 9b0d         	ldr	r3, [sp, #0x34]
    d0a0: 2b00         	cmp	r3, #0x0
    d0a2: db03         	blt	0xd0ac <_dtoa_r+0x6ec>  @ imm = #0x6
    d0a4: 9a04         	ldr	r2, [sp, #0x10]
    d0a6: 2a0e         	cmp	r2, #0xe
    d0a8: f340 8308    	ble.w	0xd6bc <_dtoa_r+0xcfc>  @ imm = #0x610
    d0ac: 9a0a         	ldr	r2, [sp, #0x28]
    d0ae: b98a         	cbnz	r2, 0xd0d4 <_dtoa_r+0x714> @ imm = #0x22
    d0b0: f1ba 0f00    	cmp.w	r10, #0x0
    d0b4: d007         	beq	0xd0c6 <_dtoa_r+0x706>  @ imm = #0xe
    d0b6: b136         	cbz	r6, 0xd0c6 <_dtoa_r+0x706> @ imm = #0xc
    d0b8: 45b2         	cmp	r10, r6
    d0ba: 4653         	mov	r3, r10
    d0bc: bfa8         	it	ge
    d0be: 4633         	movge	r3, r6
    d0c0: ebaa 0a03    	sub.w	r10, r10, r3
    d0c4: 1af6         	subs	r6, r6, r3
    d0c6: 9f07         	ldr	r7, [sp, #0x1c]
    d0c8: 2f00         	cmp	r7, #0x0
    d0ca: f040 821d    	bne.w	0xd508 <_dtoa_r+0xb48>  @ imm = #0x43a
    d0ce: f8cd a028    	str.w	r10, [sp, #0x28]
    d0d2: e5d9         	b	0xcc88 <_dtoa_r+0x2c8>  @ imm = #-0x44e
    d0d4: 9a01         	ldr	r2, [sp, #0x4]
    d0d6: 2a01         	cmp	r2, #0x1
    d0d8: f77f ad96    	ble.w	0xcc08 <_dtoa_r+0x248>  @ imm = #-0x4d4
    d0dc: f10b 32ff    	add.w	r2, r11, #0xffffffff
    d0e0: 9b07         	ldr	r3, [sp, #0x1c]
    d0e2: 4293         	cmp	r3, r2
    d0e4: f2c0 821d    	blt.w	0xd522 <_dtoa_r+0xb62>  @ imm = #0x43a
    d0e8: 1a9b         	subs	r3, r3, r2
    d0ea: f1bb 0f00    	cmp.w	r11, #0x0
    d0ee: 9305         	str	r3, [sp, #0x14]
    d0f0: f280 831a    	bge.w	0xd728 <_dtoa_r+0xd68>  @ imm = #0x634
    d0f4: ebaa 030b    	sub.w	r3, r10, r11
    d0f8: 930a         	str	r3, [sp, #0x28]
    d0fa: e592         	b	0xcc22 <_dtoa_r+0x262>  @ imm = #-0x4dc
    d0fc: 231c         	movs	r3, #0x1c
    d0fe: e5dd         	b	0xccbc <_dtoa_r+0x2fc>  @ imm = #-0x446
    d100: 40 20 21 80  	.word	0x80212040
    d104: 18 20 21 80  	.word	0x80212018
    d108: f000 81c1    	beq.w	0xd48e <_dtoa_r+0xace>  @ imm = #0x382
    d10c: 9b04         	ldr	r3, [sp, #0x10]
    d10e: 49b5         	ldr	r1, [pc, #0x2d4]        @ 0xd3e4 <_dtoa_r+0xa24>
    d110: 425b         	rsbs	r3, r3, #0
    d112: f003 020f    	and	r2, r3, #0xf
    d116: 111b         	asrs	r3, r3, #0x4
    d118: eb01 02c2    	add.w	r2, r1, r2, lsl #3
    d11c: ed92 6b00    	vldr	d6, [r2]
    d120: ee28 6b06    	<unknown>
    d124: f000 830c    	beq.w	0xd740 <_dtoa_r+0xd80>  @ imm = #0x618
    d128: 49af         	ldr	r1, [pc, #0x2bc]        @ 0xd3e8 <_dtoa_r+0xa28>
    d12a: 2202         	movs	r2, #0x2
    d12c: 07d8         	lsls	r0, r3, #0x1f
    d12e: d50a         	bpl	0xd146 <_dtoa_r+0x786>  @ imm = #0x14
    d130: 105b         	asrs	r3, r3, #0x1
    d132: f102 0201    	add.w	r2, r2, #0x1
    d136: ecb1 7b02    	vldmia	r1!, {d7}
    d13a: ee26 6b07    	<unknown>
    d13e: f43f ae8b    	beq.w	0xce58 <_dtoa_r+0x498>  @ imm = #-0x2ea
    d142: 07d8         	lsls	r0, r3, #0x1f
    d144: d4f4         	bmi	0xd130 <_dtoa_r+0x770>  @ imm = #-0x18
    d146: 105b         	asrs	r3, r3, #0x1
    d148: 3108         	adds	r1, #0x8
    d14a: e7ef         	b	0xd12c <_dtoa_r+0x76c>  @ imm = #-0x22
    d14c: ea6f 0609    	mvn.w	r6, r9
    d150: 46c3         	mov	r11, r8
    d152: e5f1         	b	0xcd38 <_dtoa_r+0x378>  @ imm = #-0x41e
    d154: 2301         	movs	r3, #0x1
    d156: 2100         	movs	r1, #0x0
    d158: 469b         	mov	r11, r3
    d15a: 4699         	mov	r9, r3
    d15c: 63e1         	str	r1, [r4, #0x3c]
    d15e: 930b         	str	r3, [sp, #0x2c]
    d160: e645         	b	0xcdee <_dtoa_r+0x42e>  @ imm = #-0x376
    d162: 461a         	mov	r2, r3
    d164: 4601         	mov	r1, r0
    d166: 4620         	mov	r0, r4
    d168: f000 fe32    	bl	0xddd0 <__pow5mult>     @ imm = #0xc64
    d16c: 9b01         	ldr	r3, [sp, #0x4]
    d16e: 9005         	str	r0, [sp, #0x14]
    d170: 2b01         	cmp	r3, #0x1
    d172: f340 81f3    	ble.w	0xd55c <_dtoa_r+0xb9c>  @ imm = #0x3e6
    d176: 2300         	movs	r3, #0x0
    d178: 9308         	str	r3, [sp, #0x20]
    d17a: 9a05         	ldr	r2, [sp, #0x14]
    d17c: 6913         	ldr	r3, [r2, #0x10]
    d17e: eb02 0383    	add.w	r3, r2, r3, lsl #2
    d182: 6918         	ldr	r0, [r3, #0x10]
    d184: f000 fcd8    	bl	0xdb38 <__hi0bits>      @ imm = #0x9b0
    d188: f1c0 0320    	rsb.w	r3, r0, #0x20
    d18c: e58a         	b	0xcca4 <_dtoa_r+0x2e4>  @ imm = #-0x4ec
    d18e: 9905         	ldr	r1, [sp, #0x14]
    d190: 4628         	mov	r0, r5
    d192: f000 feef    	bl	0xdf74 <__mcmp>         @ imm = #0xdde
    d196: 2800         	cmp	r0, #0x0
    d198: f6bf adaf    	bge.w	0xccfa <_dtoa_r+0x33a>  @ imm = #-0x4a2
    d19c: 4629         	mov	r1, r5
    d19e: 2300         	movs	r3, #0x0
    d1a0: 220a         	movs	r2, #0xa
    d1a2: 4620         	mov	r0, r4
    d1a4: 9d04         	ldr	r5, [sp, #0x10]
    d1a6: f000 fc75    	bl	0xda94 <__multadd>      @ imm = #0x8ea
    d1aa: 9b0b         	ldr	r3, [sp, #0x2c]
    d1ac: f105 3aff    	add.w	r10, r5, #0xffffffff
    d1b0: 4605         	mov	r5, r0
    d1b2: 2b00         	cmp	r3, #0x0
    d1b4: bfcc         	ite	gt
    d1b6: 2600         	movgt	r6, #0x0
    d1b8: f006 0601    	andle	r6, r6, #0x1
    d1bc: 9b07         	ldr	r3, [sp, #0x1c]
    d1be: 2b00         	cmp	r3, #0x0
    d1c0: f040 809e    	bne.w	0xd300 <_dtoa_r+0x940>  @ imm = #0x13c
    d1c4: 2e00         	cmp	r6, #0x0
    d1c6: f040 82a7    	bne.w	0xd718 <_dtoa_r+0xd58>  @ imm = #0x54e
    d1ca: 9e04         	ldr	r6, [sp, #0x10]
    d1cc: f8dd b02c    	ldr.w	r11, [sp, #0x2c]
    d1d0: e6e6         	b	0xcfa0 <_dtoa_r+0x5e0>  @ imm = #-0x234
    d1d2: eeb0 5b48    	vmov.f64	d5, d8
    d1d6: 2202         	movs	r2, #0x2
    d1d8: e62f         	b	0xce3a <_dtoa_r+0x47a>  @ imm = #-0x3a2
    d1da: 9b02         	ldr	r3, [sp, #0x8]
    d1dc: 2b00         	cmp	r3, #0x0
    d1de: f47f ad60    	bne.w	0xcca2 <_dtoa_r+0x2e2>  @ imm = #-0x540
    d1e2: 9b03         	ldr	r3, [sp, #0xc]
    d1e4: f3c3 0313    	ubfx	r3, r3, #0x0, #0x14
    d1e8: 2b00         	cmp	r3, #0x0
    d1ea: f47f ad5a    	bne.w	0xcca2 <_dtoa_r+0x2e2>  @ imm = #-0x54c
    d1ee: 9b03         	ldr	r3, [sp, #0xc]
    d1f0: f023 4300    	bic	r3, r3, #0x80000000
    d1f4: 0d1b         	lsrs	r3, r3, #0x14
    d1f6: 051b         	lsls	r3, r3, #0x14
    d1f8: 2b00         	cmp	r3, #0x0
    d1fa: f43f ad52    	beq.w	0xcca2 <_dtoa_r+0x2e2>  @ imm = #-0x55c
    d1fe: 2301         	movs	r3, #0x1
    d200: f10a 0a01    	add.w	r10, r10, #0x1
    d204: 3601         	adds	r6, #0x1
    d206: 9308         	str	r3, [sp, #0x20]
    d208: e54c         	b	0xcca4 <_dtoa_r+0x2e4>  @ imm = #-0x568
    d20a: 2100         	movs	r1, #0x0
    d20c: 4620         	mov	r0, r4
    d20e: f1c9 0600    	rsb.w	r6, r9, #0x0
    d212: 46c3         	mov	r11, r8
    d214: f000 fc34    	bl	0xda80 <_Bfree>         @ imm = #0x868
    d218: e696         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #-0x2d4
    d21a: 2f01         	cmp	r7, #0x1
    d21c: ee24 3b05    	<unknown>
    d220: f000 8280    	beq.w	0xd724 <_dtoa_r+0xd64>  @ imm = #0x500
    d224: eeb2 4b04    	<unknown>
    d228: eb08 0c07    	add.w	r12, r8, r7
    d22c: 4618         	mov	r0, r3
    d22e: ee27 7b04    	<unknown>
    d232: eefd 6bc7    	<unknown>
    d236: ee16 2a90    	vmov	r2, s13
    d23a: eeb8 5be6    	<unknown>
    d23e: 3230         	adds	r2, #0x30
    d240: ee37 7b45    	<unknown>
    d244: f800 2b01    	strb	r2, [r0], #1
    d248: 4584         	cmp	r12, r0
    d24a: d1f0         	bne	0xd22e <_dtoa_r+0x86e>  @ imm = #-0x20
    d24c: 1e58         	subs	r0, r3, #0x1
    d24e: 4438         	add	r0, r7
    d250: eeb6 6b00    	<unknown>
    d254: ee33 5b06    	<unknown>
    d258: eeb4 5bc7    	<unknown>
    d25c: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d260: f100 81ae    	bmi.w	0xd5c0 <_dtoa_r+0xc00>  @ imm = #0x35c
    d264: ee36 6b43    	<unknown>
    d268: eeb4 6bc7    	<unknown>
    d26c: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d270: dc3f         	bgt	0xd2f2 <_dtoa_r+0x932>  @ imm = #0x7e
    d272: 9a0d         	ldr	r2, [sp, #0x34]
    d274: 2a00         	cmp	r2, #0x0
    d276: f6ff af1b    	blt.w	0xd0b0 <_dtoa_r+0x6f0>  @ imm = #-0x1ca
    d27a: 9a04         	ldr	r2, [sp, #0x10]
    d27c: 2a0e         	cmp	r2, #0xe
    d27e: f73f af17    	bgt.w	0xd0b0 <_dtoa_r+0x6f0>  @ imm = #-0x1d2
    d282: 9a04         	ldr	r2, [sp, #0x10]
    d284: eb01 01c2    	add.w	r1, r1, r2, lsl #3
    d288: ed91 6b00    	vldr	d6, [r1]
    d28c: ee88 7b06    	<unknown>
    d290: f1bb 0f01    	cmp.w	r11, #0x1
    d294: eebd 7bc7    	<unknown>
    d298: ee17 2a10    	vmov	r2, s14
    d29c: eeb8 5bc7    	<unknown>
    d2a0: f102 0230    	add.w	r2, r2, #0x30
    d2a4: eea5 8b46    	<unknown>
    d2a8: f888 2000    	strb.w	r2, [r8]
    d2ac: f000 81e0    	beq.w	0xd670 <_dtoa_r+0xcb0>  @ imm = #0x3c0
    d2b0: f1c3 0101    	rsb.w	r1, r3, #0x1
    d2b4: eeb2 4b04    	<unknown>
    d2b8: e010         	b	0xd2dc <_dtoa_r+0x91c>  @ imm = #0x20
    d2ba: ee88 7b06    	<unknown>
    d2be: eebd 7bc7    	<unknown>
    d2c2: ee17 2a10    	vmov	r2, s14
    d2c6: eeb8 5bc7    	<unknown>
    d2ca: 3230         	adds	r2, #0x30
    d2cc: eea5 8b46    	<unknown>
    d2d0: f803 2b01    	strb	r2, [r3], #1
    d2d4: 185a         	adds	r2, r3, r1
    d2d6: 455a         	cmp	r2, r11
    d2d8: f000 81ca    	beq.w	0xd670 <_dtoa_r+0xcb0>  @ imm = #0x394
    d2dc: ee28 8b04    	<unknown>
    d2e0: eeb5 8b40    	<unknown>
    d2e4: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d2e8: d1e7         	bne	0xd2ba <_dtoa_r+0x8fa>  @ imm = #-0x32
    d2ea: 9e04         	ldr	r6, [sp, #0x10]
    d2ec: 469b         	mov	r11, r3
    d2ee: 3601         	adds	r6, #0x1
    d2f0: e62a         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #-0x3ac
    d2f2: f810 3c01    	ldrb	r3, [r0, #-1]
    d2f6: 4683         	mov	r11, r0
    d2f8: 3801         	subs	r0, #0x1
    d2fa: 2b30         	cmp	r3, #0x30
    d2fc: d0f9         	beq	0xd2f2 <_dtoa_r+0x932>  @ imm = #-0xe
    d2fe: e621         	b	0xcf44 <_dtoa_r+0x584>  @ imm = #-0x3be
    d300: 4639         	mov	r1, r7
    d302: 2300         	movs	r3, #0x0
    d304: 220a         	movs	r2, #0xa
    d306: 4620         	mov	r0, r4
    d308: f000 fbc4    	bl	0xda94 <__multadd>      @ imm = #0x788
    d30c: f8dd b02c    	ldr.w	r11, [sp, #0x2c]
    d310: 4607         	mov	r7, r0
    d312: f8cd a010    	str.w	r10, [sp, #0x10]
    d316: 2e00         	cmp	r6, #0x0
    d318: f47f acf6    	bne.w	0xcd08 <_dtoa_r+0x348>  @ imm = #-0x614
    d31c: 9b0a         	ldr	r3, [sp, #0x28]
    d31e: 2b00         	cmp	r3, #0x0
    d320: dd05         	ble	0xd32e <_dtoa_r+0x96e>  @ imm = #0xa
    d322: 4639         	mov	r1, r7
    d324: 461a         	mov	r2, r3
    d326: 4620         	mov	r0, r4
    d328: f000 fdb2    	bl	0xde90 <__lshift>       @ imm = #0xb64
    d32c: 4607         	mov	r7, r0
    d32e: 9b08         	ldr	r3, [sp, #0x20]
    d330: 2b00         	cmp	r3, #0x0
    d332: f040 8147    	bne.w	0xd5c4 <_dtoa_r+0xc04>  @ imm = #0x28e
    d336: 46ba         	mov	r10, r7
    d338: f108 33ff    	add.w	r3, r8, #0xffffffff
    d33c: 4646         	mov	r6, r8
    d33e: 445b         	add	r3, r11
    d340: 9308         	str	r3, [sp, #0x20]
    d342: 9b02         	ldr	r3, [sp, #0x8]
    d344: f003 0301    	and	r3, r3, #0x1
    d348: e9cd 3809    	strd	r3, r8, [sp, #36]
    d34c: 9905         	ldr	r1, [sp, #0x14]
    d34e: 4628         	mov	r0, r5
    d350: f7ff fa9a    	bl	0xc888 <quorem>         @ imm = #-0xacc
    d354: 4639         	mov	r1, r7
    d356: 4683         	mov	r11, r0
    d358: 4628         	mov	r0, r5
    d35a: f000 fe0b    	bl	0xdf74 <__mcmp>         @ imm = #0xc16
    d35e: 9905         	ldr	r1, [sp, #0x14]
    d360: 4681         	mov	r9, r0
    d362: 4652         	mov	r2, r10
    d364: 4620         	mov	r0, r4
    d366: f10b 0830    	add.w	r8, r11, #0x30
    d36a: f000 fe25    	bl	0xdfb8 <__mdiff>        @ imm = #0xc4a
    d36e: 68c3         	ldr	r3, [r0, #0xc]
    d370: 4601         	mov	r1, r0
    d372: 2b00         	cmp	r3, #0x0
    d374: d13a         	bne	0xd3ec <_dtoa_r+0xa2c>  @ imm = #0x74
    d376: 9007         	str	r0, [sp, #0x1c]
    d378: 4628         	mov	r0, r5
    d37a: f000 fdfb    	bl	0xdf74 <__mcmp>         @ imm = #0xbf6
    d37e: 9907         	ldr	r1, [sp, #0x1c]
    d380: 9007         	str	r0, [sp, #0x1c]
    d382: 4620         	mov	r0, r4
    d384: f000 fb7c    	bl	0xda80 <_Bfree>         @ imm = #0x6f8
    d388: 9b01         	ldr	r3, [sp, #0x4]
    d38a: 9a07         	ldr	r2, [sp, #0x1c]
    d38c: 4313         	orrs	r3, r2
    d38e: d162         	bne	0xd456 <_dtoa_r+0xa96>  @ imm = #0xc4
    d390: 9b09         	ldr	r3, [sp, #0x24]
    d392: 2b00         	cmp	r3, #0x0
    d394: f000 81b6    	beq.w	0xd704 <_dtoa_r+0xd44>  @ imm = #0x36c
    d398: f1b9 0f00    	cmp.w	r9, #0x0
    d39c: f2c0 81ae    	blt.w	0xd6fc <_dtoa_r+0xd3c>  @ imm = #0x35c
    d3a0: 9b08         	ldr	r3, [sp, #0x20]
    d3a2: 46b1         	mov	r9, r6
    d3a4: 42b3         	cmp	r3, r6
    d3a6: f809 8b01    	strb	r8, [r9], #1
    d3aa: f000 817f    	beq.w	0xd6ac <_dtoa_r+0xcec>  @ imm = #0x2fe
    d3ae: 4629         	mov	r1, r5
    d3b0: 2300         	movs	r3, #0x0
    d3b2: 220a         	movs	r2, #0xa
    d3b4: 4620         	mov	r0, r4
    d3b6: f000 fb6d    	bl	0xda94 <__multadd>      @ imm = #0x6da
    d3ba: 4557         	cmp	r7, r10
    d3bc: 4605         	mov	r5, r0
    d3be: 4639         	mov	r1, r7
    d3c0: f04f 0300    	mov.w	r3, #0x0
    d3c4: f04f 020a    	mov.w	r2, #0xa
    d3c8: 4620         	mov	r0, r4
    d3ca: d03e         	beq	0xd44a <_dtoa_r+0xa8a>  @ imm = #0x7c
    d3cc: f000 fb62    	bl	0xda94 <__multadd>      @ imm = #0x6c4
    d3d0: 4651         	mov	r1, r10
    d3d2: 4607         	mov	r7, r0
    d3d4: 2300         	movs	r3, #0x0
    d3d6: 220a         	movs	r2, #0xa
    d3d8: 4620         	mov	r0, r4
    d3da: f000 fb5b    	bl	0xda94 <__multadd>      @ imm = #0x6b6
    d3de: 464e         	mov	r6, r9
    d3e0: 4682         	mov	r10, r0
    d3e2: e7b3         	b	0xd34c <_dtoa_r+0x98c>  @ imm = #-0x9a
    d3e4: 40 20 21 80  	.word	0x80212040
    d3e8: 18 20 21 80  	.word	0x80212018
    d3ec: 4620         	mov	r0, r4
    d3ee: f8cd 801c    	str.w	r8, [sp, #0x1c]
    d3f2: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    d3f6: f000 fb43    	bl	0xda80 <_Bfree>         @ imm = #0x686
    d3fa: f1b9 0f00    	cmp.w	r9, #0x0
    d3fe: 9b07         	ldr	r3, [sp, #0x1c]
    d400: db08         	blt	0xd414 <_dtoa_r+0xa54>  @ imm = #0x10
    d402: 9a02         	ldr	r2, [sp, #0x8]
    d404: 9901         	ldr	r1, [sp, #0x4]
    d406: f002 0201    	and	r2, r2, #0x1
    d40a: ea49 0901    	orr.w	r9, r9, r1
    d40e: ea52 0209    	orrs.w	r2, r2, r9
    d412: d131         	bne	0xd478 <_dtoa_r+0xab8>  @ imm = #0x62
    d414: 4629         	mov	r1, r5
    d416: 2201         	movs	r2, #0x1
    d418: 4620         	mov	r0, r4
    d41a: 9301         	str	r3, [sp, #0x4]
    d41c: f000 fd38    	bl	0xde90 <__lshift>       @ imm = #0xa70
    d420: 9905         	ldr	r1, [sp, #0x14]
    d422: 4605         	mov	r5, r0
    d424: f000 fda6    	bl	0xdf74 <__mcmp>         @ imm = #0xb4c
    d428: 2800         	cmp	r0, #0x0
    d42a: 9b01         	ldr	r3, [sp, #0x4]
    d42c: f340 8182    	ble.w	0xd734 <_dtoa_r+0xd74>  @ imm = #0x304
    d430: 2b39         	cmp	r3, #0x39
    d432: f000 8145    	beq.w	0xd6c0 <_dtoa_r+0xd00>  @ imm = #0x28a
    d436: f10b 0331    	add.w	r3, r11, #0x31
    d43a: 46b3         	mov	r11, r6
    d43c: 9e04         	ldr	r6, [sp, #0x10]
    d43e: 9701         	str	r7, [sp, #0x4]
    d440: 4657         	mov	r7, r10
    d442: 3601         	adds	r6, #0x1
    d444: f80b 3b01    	strb	r3, [r11], #1
    d448: e5f0         	b	0xd02c <_dtoa_r+0x66c>  @ imm = #-0x420
    d44a: f000 fb23    	bl	0xda94 <__multadd>      @ imm = #0x646
    d44e: 464e         	mov	r6, r9
    d450: 4607         	mov	r7, r0
    d452: 4682         	mov	r10, r0
    d454: e77a         	b	0xd34c <_dtoa_r+0x98c>  @ imm = #-0x10c
    d456: f1b9 0f00    	cmp.w	r9, #0x0
    d45a: f2c0 813a    	blt.w	0xd6d2 <_dtoa_r+0xd12>  @ imm = #0x274
    d45e: 9b01         	ldr	r3, [sp, #0x4]
    d460: ea49 0903    	orr.w	r9, r9, r3
    d464: 9b09         	ldr	r3, [sp, #0x24]
    d466: ea53 0909    	orrs.w	r9, r3, r9
    d46a: f000 8132    	beq.w	0xd6d2 <_dtoa_r+0xd12>  @ imm = #0x264
    d46e: 2a00         	cmp	r2, #0x0
    d470: dd96         	ble	0xd3a0 <_dtoa_r+0x9e0>  @ imm = #-0xd4
    d472: 4643         	mov	r3, r8
    d474: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    d478: 2b39         	cmp	r3, #0x39
    d47a: f000 8121    	beq.w	0xd6c0 <_dtoa_r+0xd00>  @ imm = #0x242
    d47e: 46b3         	mov	r11, r6
    d480: 3301         	adds	r3, #0x1
    d482: e7db         	b	0xd43c <_dtoa_r+0xa7c>  @ imm = #-0x4a
    d484: f43f ac1f    	beq.w	0xccc6 <_dtoa_r+0x306>  @ imm = #-0x7c2
    d488: f1c3 033c    	rsb.w	r3, r3, #0x3c
    d48c: e416         	b	0xccbc <_dtoa_r+0x2fc>  @ imm = #-0x7d4
    d48e: eeb0 6b48    	vmov.f64	d6, d8
    d492: 2202         	movs	r2, #0x2
    d494: e4e0         	b	0xce58 <_dtoa_r+0x498>  @ imm = #-0x640
    d496: f1bb 0f00    	cmp.w	r11, #0x0
    d49a: f43f adde    	beq.w	0xd05a <_dtoa_r+0x69a>  @ imm = #-0x444
    d49e: 9f0b         	ldr	r7, [sp, #0x2c]
    d4a0: 2f00         	cmp	r7, #0x0
    d4a2: f77f adfc    	ble.w	0xd09e <_dtoa_r+0x6de>  @ imm = #-0x408
    d4a6: eeb2 4b04    	<unknown>
    d4aa: 3201         	adds	r2, #0x1
    d4ac: eeb1 5b0c    	<unknown>
    d4b0: 9b04         	ldr	r3, [sp, #0x10]
    d4b2: ee07 2a90    	vmov	s15, r2
    d4b6: ee26 6b04    	<unknown>
    d4ba: f103 3eff    	add.w	lr, r3, #0xffffffff
    d4be: eeb8 7be7    	<unknown>
    d4c2: eea6 5b07    	<unknown>
    d4c6: ee15 1a90    	vmov	r1, s11
    d4ca: ec53 2b15    	vmov	r2, r3, d5
    d4ce: f1a1 7350    	sub.w	r3, r1, #0x3400000
    d4d2: e4e0         	b	0xce96 <_dtoa_r+0x4d6>  @ imm = #-0x640
    d4d4: f1c3 0a01    	rsb.w	r10, r3, #0x1
    d4d8: 9b04         	ldr	r3, [sp, #0x10]
    d4da: 461e         	mov	r6, r3
    d4dc: 9308         	str	r3, [sp, #0x20]
    d4de: 2300         	movs	r3, #0x0
    d4e0: 9309         	str	r3, [sp, #0x24]
    d4e2: f7ff bb0b    	b.w	0xcafc <_dtoa_r+0x13c>  @ imm = #-0x9ea
    d4e6: 9b07         	ldr	r3, [sp, #0x1c]
    d4e8: 2b00         	cmp	r3, #0x0
    d4ea: f43f abcb    	beq.w	0xcc84 <_dtoa_r+0x2c4>  @ imm = #-0x86a
    d4ee: f7ff bbb0    	b.w	0xcc52 <_dtoa_r+0x292>  @ imm = #-0x8a0
    d4f2: 2331         	movs	r3, #0x31
    d4f4: 46c3         	mov	r11, r8
    d4f6: 2100         	movs	r1, #0x0
    d4f8: 4620         	mov	r0, r4
    d4fa: f80b 3b01    	strb	r3, [r11], #1
    d4fe: f000 fabf    	bl	0xda80 <_Bfree>         @ imm = #0x57e
    d502: 9e04         	ldr	r6, [sp, #0x10]
    d504: 3602         	adds	r6, #0x2
    d506: e51f         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #-0x5c2
    d508: 4629         	mov	r1, r5
    d50a: 9a07         	ldr	r2, [sp, #0x1c]
    d50c: 4620         	mov	r0, r4
    d50e: f000 fc5f    	bl	0xddd0 <__pow5mult>     @ imm = #0x8be
    d512: 2300         	movs	r3, #0x0
    d514: 4605         	mov	r5, r0
    d516: f8cd a028    	str.w	r10, [sp, #0x28]
    d51a: 461f         	mov	r7, r3
    d51c: 9307         	str	r3, [sp, #0x1c]
    d51e: f7ff bbb3    	b.w	0xcc88 <_dtoa_r+0x2c8>  @ imm = #-0x89a
    d522: 9b07         	ldr	r3, [sp, #0x1c]
    d524: 2101         	movs	r1, #0x1
    d526: 9205         	str	r2, [sp, #0x14]
    d528: 4620         	mov	r0, r4
    d52a: 1ad3         	subs	r3, r2, r3
    d52c: 9a08         	ldr	r2, [sp, #0x20]
    d52e: 445e         	add	r6, r11
    d530: 441a         	add	r2, r3
    d532: 9208         	str	r2, [sp, #0x20]
    d534: f000 fb6a    	bl	0xdc0c <__i2b>          @ imm = #0x6d4
    d538: 9a05         	ldr	r2, [sp, #0x14]
    d53a: 4607         	mov	r7, r0
    d53c: f1ba 0f00    	cmp.w	r10, #0x0
    d540: f040 8089    	bne.w	0xd656 <_dtoa_r+0xc96>  @ imm = #0x112
    d544: f8cd a028    	str.w	r10, [sp, #0x28]
    d548: 46da         	mov	r10, r11
    d54a: 4629         	mov	r1, r5
    d54c: 4620         	mov	r0, r4
    d54e: f000 fc3f    	bl	0xddd0 <__pow5mult>     @ imm = #0x87e
    d552: 2301         	movs	r3, #0x1
    d554: 4605         	mov	r5, r0
    d556: 9307         	str	r3, [sp, #0x1c]
    d558: f7ff bb96    	b.w	0xcc88 <_dtoa_r+0x2c8>  @ imm = #-0x8d4
    d55c: 9b02         	ldr	r3, [sp, #0x8]
    d55e: 2b00         	cmp	r3, #0x0
    d560: f47f ae09    	bne.w	0xd176 <_dtoa_r+0x7b6>  @ imm = #-0x3ee
    d564: e9dd 1202    	ldrd	r1, r2, [sp, #8]
    d568: f3c2 0313    	ubfx	r3, r2, #0x0, #0x14
    d56c: 2b00         	cmp	r3, #0x0
    d56e: f000 80b7    	beq.w	0xd6e0 <_dtoa_r+0xd20>  @ imm = #0x16e
    d572: 9108         	str	r1, [sp, #0x20]
    d574: e601         	b	0xd17a <_dtoa_r+0x7ba>  @ imm = #-0x3fe
    d576: 4b79         	ldr	r3, [pc, #0x1e4]        @ 0xd75c <_dtoa_r+0xd9c>
    d578: f04f 3bff    	mov.w	r11, #0xffffffff
    d57c: 9a04         	ldr	r2, [sp, #0x10]
    d57e: eb03 03c2    	add.w	r3, r3, r2, lsl #3
    d582: ed93 6b00    	vldr	d6, [r3]
    d586: f108 0301    	add.w	r3, r8, #0x1
    d58a: e67f         	b	0xd28c <_dtoa_r+0x8cc>  @ imm = #-0x302
    d58c: d103         	bne	0xd596 <_dtoa_r+0xbd6>  @ imm = #0x6
    d58e: 9b02         	ldr	r3, [sp, #0x8]
    d590: 07db         	lsls	r3, r3, #0x1f
    d592: f53f ad41    	bmi.w	0xd018 <_dtoa_r+0x658>  @ imm = #-0x57e
    d596: 46cb         	mov	r11, r9
    d598: f819 3d01    	ldrb	r3, [r9, #-1]!
    d59c: 2b30         	cmp	r3, #0x30
    d59e: d0fa         	beq	0xd596 <_dtoa_r+0xbd6>  @ imm = #-0xc
    d5a0: e544         	b	0xd02c <_dtoa_r+0x66c>  @ imm = #-0x578
    d5a2: 2331         	movs	r3, #0x31
    d5a4: 3601         	adds	r6, #0x1
    d5a6: f888 3000    	strb.w	r3, [r8]
    d5aa: e53f         	b	0xd02c <_dtoa_r+0x66c>  @ imm = #-0x582
    d5ac: f10e 0e01    	add.w	lr, lr, #0x1
    d5b0: 2131         	movs	r1, #0x31
    d5b2: e4c6         	b	0xcf42 <_dtoa_r+0x582>  @ imm = #-0x674
    d5b4: 9a07         	ldr	r2, [sp, #0x1c]
    d5b6: e7c8         	b	0xd54a <_dtoa_r+0xb8a>  @ imm = #-0x70
    d5b8: f10e 0601    	add.w	r6, lr, #0x1
    d5bc: 469b         	mov	r11, r3
    d5be: e4c3         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #-0x67a
    d5c0: 4603         	mov	r3, r0
    d5c2: e4b7         	b	0xcf34 <_dtoa_r+0x574>  @ imm = #-0x692
    d5c4: 6879         	ldr	r1, [r7, #0x4]
    d5c6: 4620         	mov	r0, r4
    d5c8: f000 fa34    	bl	0xda34 <_Balloc>        @ imm = #0x468
    d5cc: 4606         	mov	r6, r0
    d5ce: 2800         	cmp	r0, #0x0
    d5d0: f000 80bd    	beq.w	0xd74e <_dtoa_r+0xd8e>  @ imm = #0x17a
    d5d4: 693b         	ldr	r3, [r7, #0x10]
    d5d6: f107 010c    	add.w	r1, r7, #0xc
    d5da: 300c         	adds	r0, #0xc
    d5dc: 3302         	adds	r3, #0x2
    d5de: 009a         	lsls	r2, r3, #0x2
    d5e0: f7fb fca4    	bl	0x8f2c <memcpy>         @ imm = #-0x46b8
    d5e4: 4631         	mov	r1, r6
    d5e6: 2201         	movs	r2, #0x1
    d5e8: 4620         	mov	r0, r4
    d5ea: f000 fc51    	bl	0xde90 <__lshift>       @ imm = #0x8a2
    d5ee: 4682         	mov	r10, r0
    d5f0: e6a2         	b	0xd338 <_dtoa_r+0x978>  @ imm = #-0x2bc
    d5f2: 9b0d         	ldr	r3, [sp, #0x34]
    d5f4: 2b00         	cmp	r3, #0x0
    d5f6: f6ff ad6d    	blt.w	0xd0d4 <_dtoa_r+0x714>  @ imm = #-0x526
    d5fa: 9a04         	ldr	r2, [sp, #0x10]
    d5fc: 2a0e         	cmp	r2, #0xe
    d5fe: f73f ad69    	bgt.w	0xd0d4 <_dtoa_r+0x714>  @ imm = #-0x52e
    d602: 9b04         	ldr	r3, [sp, #0x10]
    d604: f1b9 0f00    	cmp.w	r9, #0x0
    d608: eb01 01c3    	add.w	r1, r1, r3, lsl #3
    d60c: ed91 6b00    	vldr	d6, [r1]
    d610: dab9         	bge	0xd586 <_dtoa_r+0xbc6>  @ imm = #-0x8e
    d612: f1bb 0f00    	cmp.w	r11, #0x0
    d616: dcb6         	bgt	0xd586 <_dtoa_r+0xbc6>  @ imm = #-0x94
    d618: f1bb 0f00    	cmp.w	r11, #0x0
    d61c: f47f adf5    	bne.w	0xd20a <_dtoa_r+0x84a>  @ imm = #-0x416
    d620: eeb1 7b04    	<unknown>
    d624: 4659         	mov	r1, r11
    d626: ee26 7b07    	<unknown>
    d62a: eeb4 8bc7    	<unknown>
    d62e: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d632: d806         	bhi	0xd642 <_dtoa_r+0xc82>  @ imm = #0xc
    d634: 4620         	mov	r0, r4
    d636: f1c9 0600    	rsb.w	r6, r9, #0x0
    d63a: 46c3         	mov	r11, r8
    d63c: f000 fa20    	bl	0xda80 <_Bfree>         @ imm = #0x440
    d640: e482         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #-0x6fc
    d642: 2331         	movs	r3, #0x31
    d644: 46c3         	mov	r11, r8
    d646: 4620         	mov	r0, r4
    d648: f80b 3b01    	strb	r3, [r11], #1
    d64c: f000 fa18    	bl	0xda80 <_Bfree>         @ imm = #0x430
    d650: 9e04         	ldr	r6, [sp, #0x10]
    d652: 3602         	adds	r6, #0x2
    d654: e478         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #-0x710
    d656: 4556         	cmp	r6, r10
    d658: 4633         	mov	r3, r6
    d65a: eb0a 010b    	add.w	r1, r10, r11
    d65e: bfa8         	it	ge
    d660: 4653         	movge	r3, r10
    d662: ebaa 0003    	sub.w	r0, r10, r3
    d666: 1af6         	subs	r6, r6, r3
    d668: eba1 0a03    	sub.w	r10, r1, r3
    d66c: 900a         	str	r0, [sp, #0x28]
    d66e: e76c         	b	0xd54a <_dtoa_r+0xb8a>  @ imm = #-0x128
    d670: ee38 8b08    	<unknown>
    d674: 9a04         	ldr	r2, [sp, #0x10]
    d676: 1c56         	adds	r6, r2, #0x1
    d678: eeb4 8bc6    	<unknown>
    d67c: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d680: dc08         	bgt	0xd694 <_dtoa_r+0xcd4>  @ imm = #0x10
    d682: eeb4 8b46    	<unknown>
    d686: eef1 fa10    	vmrs	APSR_nzcv, fpscr
    d68a: d106         	bne	0xd69a <_dtoa_r+0xcda>  @ imm = #0xc
    d68c: ee17 2a10    	vmov	r2, s14
    d690: 07d1         	lsls	r1, r2, #0x1f
    d692: d502         	bpl	0xd69a <_dtoa_r+0xcda>  @ imm = #0x4
    d694: f8dd e010    	ldr.w	lr, [sp, #0x10]
    d698: e44c         	b	0xcf34 <_dtoa_r+0x574>  @ imm = #-0x768
    d69a: 469b         	mov	r11, r3
    d69c: e454         	b	0xcf48 <_dtoa_r+0x588>  @ imm = #-0x758
    d69e: 4b30         	ldr	r3, [pc, #0xc0]         @ 0xd760 <_dtoa_r+0xda0>
    d6a0: 2200         	movs	r2, #0x0
    d6a2: f240 11af    	movw	r1, #0x1af
    d6a6: 482f         	ldr	r0, [pc, #0xbc]         @ 0xd764 <_dtoa_r+0xda4>
    d6a8: f000 fecc    	bl	0xe444 <__assert_func>  @ imm = #0xd98
    d6ac: 9e04         	ldr	r6, [sp, #0x10]
    d6ae: 4643         	mov	r3, r8
    d6b0: 9701         	str	r7, [sp, #0x4]
    d6b2: 4657         	mov	r7, r10
    d6b4: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    d6b8: 3601         	adds	r6, #0x1
    d6ba: e49d         	b	0xcff8 <_dtoa_r+0x638>  @ imm = #-0x6c6
    d6bc: 4927         	ldr	r1, [pc, #0x9c]         @ 0xd75c <_dtoa_r+0xd9c>
    d6be: e7a0         	b	0xd602 <_dtoa_r+0xc42>  @ imm = #-0xc0
    d6c0: 46b1         	mov	r9, r6
    d6c2: 2339         	movs	r3, #0x39
    d6c4: 9e04         	ldr	r6, [sp, #0x10]
    d6c6: 9701         	str	r7, [sp, #0x4]
    d6c8: 4657         	mov	r7, r10
    d6ca: 3601         	adds	r6, #0x1
    d6cc: f809 3b01    	strb	r3, [r9], #1
    d6d0: e4a2         	b	0xd018 <_dtoa_r+0x658>  @ imm = #-0x6bc
    d6d2: 2a00         	cmp	r2, #0x0
    d6d4: 4643         	mov	r3, r8
    d6d6: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    d6da: f73f ae9b    	bgt.w	0xd414 <_dtoa_r+0xa54>  @ imm = #-0x2ca
    d6de: e6ac         	b	0xd43a <_dtoa_r+0xa7a>  @ imm = #-0x2a8
    d6e0: 9b03         	ldr	r3, [sp, #0xc]
    d6e2: f023 4300    	bic	r3, r3, #0x80000000
    d6e6: 0d1b         	lsrs	r3, r3, #0x14
    d6e8: 051b         	lsls	r3, r3, #0x14
    d6ea: 2b00         	cmp	r3, #0x0
    d6ec: f43f ad44    	beq.w	0xd178 <_dtoa_r+0x7b8>  @ imm = #-0x578
    d6f0: 2301         	movs	r3, #0x1
    d6f2: f10a 0a01    	add.w	r10, r10, #0x1
    d6f6: 3601         	adds	r6, #0x1
    d6f8: 9308         	str	r3, [sp, #0x20]
    d6fa: e53e         	b	0xd17a <_dtoa_r+0x7ba>  @ imm = #-0x584
    d6fc: 4643         	mov	r3, r8
    d6fe: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    d702: e69a         	b	0xd43a <_dtoa_r+0xa7a>  @ imm = #-0x2cc
    d704: 4643         	mov	r3, r8
    d706: f8dd 8028    	ldr.w	r8, [sp, #0x28]
    d70a: 2b39         	cmp	r3, #0x39
    d70c: d0d8         	beq	0xd6c0 <_dtoa_r+0xd00>  @ imm = #-0x50
    d70e: f1b9 0f00    	cmp.w	r9, #0x0
    d712: f73f ae90    	bgt.w	0xd436 <_dtoa_r+0xa76>  @ imm = #-0x2e0
    d716: e690         	b	0xd43a <_dtoa_r+0xa7a>  @ imm = #-0x2e0
    d718: f8dd b02c    	ldr.w	r11, [sp, #0x2c]
    d71c: f8cd a010    	str.w	r10, [sp, #0x10]
    d720: f7ff baf2    	b.w	0xcd08 <_dtoa_r+0x348>  @ imm = #-0xa1c
    d724: 4618         	mov	r0, r3
    d726: e593         	b	0xd250 <_dtoa_r+0x890>  @ imm = #-0x4da
    d728: f8cd a028    	str.w	r10, [sp, #0x28]
    d72c: 445e         	add	r6, r11
    d72e: 44da         	add	r10, r11
    d730: f7ff ba77    	b.w	0xcc22 <_dtoa_r+0x262>  @ imm = #-0xb12
    d734: f47f ae81    	bne.w	0xd43a <_dtoa_r+0xa7a>  @ imm = #-0x2fe
    d738: 07da         	lsls	r2, r3, #0x1f
    d73a: f57f ae7e    	bpl.w	0xd43a <_dtoa_r+0xa7a>  @ imm = #-0x304
    d73e: e677         	b	0xd430 <_dtoa_r+0xa70>  @ imm = #-0x312
    d740: 2202         	movs	r2, #0x2
    d742: f7ff bb89    	b.w	0xce58 <_dtoa_r+0x498>  @ imm = #-0x8ee
    d746: 2100         	movs	r1, #0x0
    d748: 63e1         	str	r1, [r4, #0x3c]
    d74a: f7ff bb50    	b.w	0xcdee <_dtoa_r+0x42e>  @ imm = #-0x960
    d74e: 4602         	mov	r2, r0
    d750: 4b03         	ldr	r3, [pc, #0xc]          @ 0xd760 <_dtoa_r+0xda0>
    d752: f240 21ef    	movw	r1, #0x2ef
    d756: 4803         	ldr	r0, [pc, #0xc]          @ 0xd764 <_dtoa_r+0xda4>
    d758: f000 fe74    	bl	0xe444 <__assert_func>  @ imm = #0xce8
    d75c: 40 20 21 80  	.word	0x80212040
    d760: cc 1d 21 80  	.word	0x80211dcc
    d764: e0 1d 21 80  	.word	0x80211de0

0000d768 <_malloc_trim_r>:
; _malloc_trim_r():
    d768: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
    d76c: 4606         	mov	r6, r0
    d76e: f8df 80ac    	ldr.w	r8, [pc, #0xac]         @ 0xd81c <_malloc_trim_r+0xb4>
    d772: 2008         	movs	r0, #0x8
    d774: 4689         	mov	r9, r1
    d776: f7fe ff73    	bl	0xc660 <sysconf>        @ imm = #-0x111a
    d77a: 4605         	mov	r5, r0
    d77c: 4630         	mov	r0, r6
    d77e: f7fe f9ed    	bl	0xbb5c <__malloc_lock>  @ imm = #-0x1c26
    d782: f8d8 3008    	ldr.w	r3, [r8, #0x8]
    d786: 685f         	ldr	r7, [r3, #0x4]
    d788: f027 0703    	bic	r7, r7, #0x3
    d78c: f1a7 0411    	sub.w	r4, r7, #0x11
    d790: eba4 0409    	sub.w	r4, r4, r9
    d794: 442c         	add	r4, r5
    d796: fbb4 f4f5    	udiv	r4, r4, r5
    d79a: 3c01         	subs	r4, #0x1
    d79c: fb05 f404    	mul	r4, r5, r4
    d7a0: 42a5         	cmp	r5, r4
    d7a2: dc08         	bgt	0xd7b6 <_malloc_trim_r+0x4e> @ imm = #0x10
    d7a4: 2100         	movs	r1, #0x0
    d7a6: 4630         	mov	r0, r6
    d7a8: f7fe ff48    	bl	0xc63c <_sbrk_r>        @ imm = #-0x1170
    d7ac: f8d8 3008    	ldr.w	r3, [r8, #0x8]
    d7b0: 443b         	add	r3, r7
    d7b2: 4298         	cmp	r0, r3
    d7b4: d005         	beq	0xd7c2 <_malloc_trim_r+0x5a> @ imm = #0xa
    d7b6: 4630         	mov	r0, r6
    d7b8: f7fe f9d6    	bl	0xbb68 <__malloc_unlock> @ imm = #-0x1c54
    d7bc: 2000         	movs	r0, #0x0
    d7be: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
    d7c2: 4261         	rsbs	r1, r4, #0
    d7c4: 4630         	mov	r0, r6
    d7c6: f7fe ff39    	bl	0xc63c <_sbrk_r>        @ imm = #-0x118e
    d7ca: 3001         	adds	r0, #0x1
    d7cc: d00f         	beq	0xd7ee <_malloc_trim_r+0x86> @ imm = #0x1e
    d7ce: 1b3f         	subs	r7, r7, r4
    d7d0: 4a10         	ldr	r2, [pc, #0x40]         @ 0xd814 <_malloc_trim_r+0xac>
    d7d2: f8d8 3008    	ldr.w	r3, [r8, #0x8]
    d7d6: 4630         	mov	r0, r6
    d7d8: f047 0701    	orr	r7, r7, #0x1
    d7dc: 605f         	str	r7, [r3, #0x4]
    d7de: 6813         	ldr	r3, [r2]
    d7e0: 1b1b         	subs	r3, r3, r4
    d7e2: 6013         	str	r3, [r2]
    d7e4: f7fe f9c0    	bl	0xbb68 <__malloc_unlock> @ imm = #-0x1c80
    d7e8: 2001         	movs	r0, #0x1
    d7ea: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
    d7ee: 2100         	movs	r1, #0x0
    d7f0: 4630         	mov	r0, r6
    d7f2: f7fe ff23    	bl	0xc63c <_sbrk_r>        @ imm = #-0x11ba
    d7f6: f8d8 2008    	ldr.w	r2, [r8, #0x8]
    d7fa: 1a83         	subs	r3, r0, r2
    d7fc: 2b0f         	cmp	r3, #0xf
    d7fe: ddda         	ble	0xd7b6 <_malloc_trim_r+0x4e> @ imm = #-0x4c
    d800: f043 0301    	orr	r3, r3, #0x1
    d804: 4903         	ldr	r1, [pc, #0xc]          @ 0xd814 <_malloc_trim_r+0xac>
    d806: 6053         	str	r3, [r2, #0x4]
    d808: 4b03         	ldr	r3, [pc, #0xc]          @ 0xd818 <_malloc_trim_r+0xb0>
    d80a: 681b         	ldr	r3, [r3]
    d80c: 1ac0         	subs	r0, r0, r3
    d80e: 6008         	str	r0, [r1]
    d810: e7d1         	b	0xd7b6 <_malloc_trim_r+0x4e> @ imm = #-0x5e
    d812: bf00         	nop
    d814: 10 18 00 20  	.word	0x20001810
    d818: 0c 07 00 20  	.word	0x2000070c
    d81c: 18 07 00 20  	.word	0x20000718

0000d820 <_free_r>:
; _free_r():
    d820: 2900         	cmp	r1, #0x0
    d822: d05a         	beq	0xd8da <_free_r+0xba>   @ imm = #0xb4
    d824: b5f8         	push	{r3, r4, r5, r6, r7, lr}
    d826: 460c         	mov	r4, r1
    d828: 4607         	mov	r7, r0
    d82a: f7fe f997    	bl	0xbb5c <__malloc_lock>  @ imm = #-0x1cd2
    d82e: 4d73         	ldr	r5, [pc, #0x1cc]        @ 0xd9fc <_free_r+0x1dc>
    d830: f854 cc04    	ldr	r12, [r4, #-4]
    d834: f1a4 0208    	sub.w	r2, r4, #0x8
    d838: 68a8         	ldr	r0, [r5, #0x8]
    d83a: f02c 0301    	bic	r3, r12, #0x1
    d83e: f00c 0e01    	and	lr, r12, #0x1
    d842: 18d1         	adds	r1, r2, r3
    d844: 684e         	ldr	r6, [r1, #0x4]
    d846: 4288         	cmp	r0, r1
    d848: f026 0603    	bic	r6, r6, #0x3
    d84c: d07c         	beq	0xd948 <_free_r+0x128>  @ imm = #0xf8
    d84e: 1988         	adds	r0, r1, r6
    d850: 604e         	str	r6, [r1, #0x4]
    d852: 6840         	ldr	r0, [r0, #0x4]
    d854: f000 0001    	and	r0, r0, #0x1
    d858: f1be 0f00    	cmp.w	lr, #0x0
    d85c: d12e         	bne	0xd8bc <_free_r+0x9c>   @ imm = #0x5c
    d85e: f854 4c08    	ldr	r4, [r4, #-8]
    d862: f105 0c08    	add.w	r12, r5, #0x8
    d866: 1b12         	subs	r2, r2, r4
    d868: 4423         	add	r3, r4
    d86a: 6894         	ldr	r4, [r2, #0x8]
    d86c: 4564         	cmp	r4, r12
    d86e: d060         	beq	0xd932 <_free_r+0x112>  @ imm = #0xc0
    d870: f8d2 e00c    	ldr.w	lr, [r2, #0xc]
    d874: f8c4 e00c    	str.w	lr, [r4, #0xc]
    d878: f8ce 4008    	str.w	r4, [lr, #0x8]
    d87c: 2800         	cmp	r0, #0x0
    d87e: d07d         	beq	0xd97c <_free_r+0x15c>  @ imm = #0xfa
    d880: f043 0001    	orr	r0, r3, #0x1
    d884: 6050         	str	r0, [r2, #0x4]
    d886: 600b         	str	r3, [r1]
    d888: f5b3 7f00    	cmp.w	r3, #0x200
    d88c: d22e         	bhs	0xd8ec <_free_r+0xcc>   @ imm = #0x5c
    d88e: 0958         	lsrs	r0, r3, #0x5
    d890: 08d9         	lsrs	r1, r3, #0x3
    d892: 2301         	movs	r3, #0x1
    d894: 4083         	lsls	r3, r0
    d896: 6868         	ldr	r0, [r5, #0x4]
    d898: 3101         	adds	r1, #0x1
    d89a: 4303         	orrs	r3, r0
    d89c: f855 0031    	ldr.w	r0, [r5, r1, lsl #3]
    d8a0: 606b         	str	r3, [r5, #0x4]
    d8a2: eb05 03c1    	add.w	r3, r5, r1, lsl #3
    d8a6: 3b08         	subs	r3, #0x8
    d8a8: e9c2 0302    	strd	r0, r3, [r2, #8]
    d8ac: f845 2031    	str.w	r2, [r5, r1, lsl #3]
    d8b0: 60c2         	str	r2, [r0, #0xc]
    d8b2: 4638         	mov	r0, r7
    d8b4: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
    d8b8: f7fe b956    	b.w	0xbb68 <__malloc_unlock> @ imm = #-0x1d54
    d8bc: b970         	cbnz	r0, 0xd8dc <_free_r+0xbc> @ imm = #0x1c
    d8be: 4433         	add	r3, r6
    d8c0: f105 0c08    	add.w	r12, r5, #0x8
    d8c4: 6888         	ldr	r0, [r1, #0x8]
    d8c6: f043 0401    	orr	r4, r3, #0x1
    d8ca: 4560         	cmp	r0, r12
    d8cc: d06e         	beq	0xd9ac <_free_r+0x18c>  @ imm = #0xdc
    d8ce: 68c9         	ldr	r1, [r1, #0xc]
    d8d0: 60c1         	str	r1, [r0, #0xc]
    d8d2: 6088         	str	r0, [r1, #0x8]
    d8d4: 6054         	str	r4, [r2, #0x4]
    d8d6: 50d3         	str	r3, [r2, r3]
    d8d8: e7d6         	b	0xd888 <_free_r+0x68>   @ imm = #-0x54
    d8da: 4770         	bx	lr
    d8dc: f04c 0101    	orr	r1, r12, #0x1
    d8e0: f5b3 7f00    	cmp.w	r3, #0x200
    d8e4: f844 1c04    	str	r1, [r4, #-4]
    d8e8: 50d3         	str	r3, [r2, r3]
    d8ea: d3d0         	blo	0xd88e <_free_r+0x6e>   @ imm = #-0x60
    d8ec: f5b3 6f20    	cmp.w	r3, #0xa00
    d8f0: ea4f 2153    	lsr.w	r1, r3, #0x9
    d8f4: d244         	bhs	0xd980 <_free_r+0x160>  @ imm = #0x88
    d8f6: 0999         	lsrs	r1, r3, #0x6
    d8f8: f101 0039    	add.w	r0, r1, #0x39
    d8fc: f101 0438    	add.w	r4, r1, #0x38
    d900: 00c1         	lsls	r1, r0, #0x3
    d902: 1868         	adds	r0, r5, r1
    d904: 5869         	ldr	r1, [r5, r1]
    d906: 3808         	subs	r0, #0x8
    d908: 4288         	cmp	r0, r1
    d90a: d103         	bne	0xd914 <_free_r+0xf4>   @ imm = #0x6
    d90c: e055         	b	0xd9ba <_free_r+0x19a>  @ imm = #0xaa
    d90e: 6889         	ldr	r1, [r1, #0x8]
    d910: 4288         	cmp	r0, r1
    d912: d004         	beq	0xd91e <_free_r+0xfe>   @ imm = #0x8
    d914: 684c         	ldr	r4, [r1, #0x4]
    d916: f024 0403    	bic	r4, r4, #0x3
    d91a: 429c         	cmp	r4, r3
    d91c: d8f7         	bhi	0xd90e <_free_r+0xee>   @ imm = #-0x12
    d91e: 68c8         	ldr	r0, [r1, #0xc]
    d920: e9c2 1002    	strd	r1, r0, [r2, #8]
    d924: 6082         	str	r2, [r0, #0x8]
    d926: 4638         	mov	r0, r7
    d928: 60ca         	str	r2, [r1, #0xc]
    d92a: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
    d92e: f7fe b91b    	b.w	0xbb68 <__malloc_unlock> @ imm = #-0x1dca
    d932: bb80         	cbnz	r0, 0xd996 <_free_r+0x176> @ imm = #0x60
    d934: 441e         	add	r6, r3
    d936: e9d1 1302    	ldrd	r1, r3, [r1, #8]
    d93a: 60cb         	str	r3, [r1, #0xc]
    d93c: 6099         	str	r1, [r3, #0x8]
    d93e: f046 0301    	orr	r3, r6, #0x1
    d942: 6053         	str	r3, [r2, #0x4]
    d944: 5196         	str	r6, [r2, r6]
    d946: e7b4         	b	0xd8b2 <_free_r+0x92>   @ imm = #-0x98
    d948: 441e         	add	r6, r3
    d94a: f1be 0f00    	cmp.w	lr, #0x0
    d94e: d107         	bne	0xd960 <_free_r+0x140>  @ imm = #0xe
    d950: f854 3c08    	ldr	r3, [r4, #-8]
    d954: 1ad2         	subs	r2, r2, r3
    d956: 441e         	add	r6, r3
    d958: e9d2 1302    	ldrd	r1, r3, [r2, #8]
    d95c: 60cb         	str	r3, [r1, #0xc]
    d95e: 6099         	str	r1, [r3, #0x8]
    d960: f046 0301    	orr	r3, r6, #0x1
    d964: 6053         	str	r3, [r2, #0x4]
    d966: 4b26         	ldr	r3, [pc, #0x98]         @ 0xda00 <_free_r+0x1e0>
    d968: 60aa         	str	r2, [r5, #0x8]
    d96a: 681b         	ldr	r3, [r3]
    d96c: 42b3         	cmp	r3, r6
    d96e: d8a0         	bhi	0xd8b2 <_free_r+0x92>   @ imm = #-0xc0
    d970: 4b24         	ldr	r3, [pc, #0x90]         @ 0xda04 <_free_r+0x1e4>
    d972: 4638         	mov	r0, r7
    d974: 6819         	ldr	r1, [r3]
    d976: f7ff fef7    	bl	0xd768 <_malloc_trim_r> @ imm = #-0x212
    d97a: e79a         	b	0xd8b2 <_free_r+0x92>   @ imm = #-0xcc
    d97c: 4433         	add	r3, r6
    d97e: e7a1         	b	0xd8c4 <_free_r+0xa4>   @ imm = #-0xbe
    d980: 2914         	cmp	r1, #0x14
    d982: d90d         	bls	0xd9a0 <_free_r+0x180>  @ imm = #0x1a
    d984: 2954         	cmp	r1, #0x54
    d986: d81f         	bhi	0xd9c8 <_free_r+0x1a8>  @ imm = #0x3e
    d988: 0b19         	lsrs	r1, r3, #0xc
    d98a: f101 006f    	add.w	r0, r1, #0x6f
    d98e: f101 046e    	add.w	r4, r1, #0x6e
    d992: 00c1         	lsls	r1, r0, #0x3
    d994: e7b5         	b	0xd902 <_free_r+0xe2>   @ imm = #-0x96
    d996: f043 0001    	orr	r0, r3, #0x1
    d99a: 6050         	str	r0, [r2, #0x4]
    d99c: 600b         	str	r3, [r1]
    d99e: e788         	b	0xd8b2 <_free_r+0x92>   @ imm = #-0xf0
    d9a0: f101 005c    	add.w	r0, r1, #0x5c
    d9a4: f101 045b    	add.w	r4, r1, #0x5b
    d9a8: 00c1         	lsls	r1, r0, #0x3
    d9aa: e7aa         	b	0xd902 <_free_r+0xe2>   @ imm = #-0xac
    d9ac: e9c5 2204    	strd	r2, r2, [r5, #16]
    d9b0: e9c2 cc02    	strd	r12, r12, [r2, #8]
    d9b4: 6054         	str	r4, [r2, #0x4]
    d9b6: 50d3         	str	r3, [r2, r3]
    d9b8: e77b         	b	0xd8b2 <_free_r+0x92>   @ imm = #-0x10a
    d9ba: 10a4         	asrs	r4, r4, #0x2
    d9bc: 2301         	movs	r3, #0x1
    d9be: 40a3         	lsls	r3, r4
    d9c0: 686c         	ldr	r4, [r5, #0x4]
    d9c2: 4323         	orrs	r3, r4
    d9c4: 606b         	str	r3, [r5, #0x4]
    d9c6: e7ab         	b	0xd920 <_free_r+0x100>  @ imm = #-0xaa
    d9c8: f5b1 7faa    	cmp.w	r1, #0x154
    d9cc: d806         	bhi	0xd9dc <_free_r+0x1bc>  @ imm = #0xc
    d9ce: 0bd9         	lsrs	r1, r3, #0xf
    d9d0: f101 0078    	add.w	r0, r1, #0x78
    d9d4: f101 0477    	add.w	r4, r1, #0x77
    d9d8: 00c1         	lsls	r1, r0, #0x3
    d9da: e792         	b	0xd902 <_free_r+0xe2>   @ imm = #-0xdc
    d9dc: f240 5054    	movw	r0, #0x554
    d9e0: 4281         	cmp	r1, r0
    d9e2: d806         	bhi	0xd9f2 <_free_r+0x1d2>  @ imm = #0xc
    d9e4: 0c99         	lsrs	r1, r3, #0x12
    d9e6: f101 007d    	add.w	r0, r1, #0x7d
    d9ea: f101 047c    	add.w	r4, r1, #0x7c
    d9ee: 00c1         	lsls	r1, r0, #0x3
    d9f0: e787         	b	0xd902 <_free_r+0xe2>   @ imm = #-0xf2
    d9f2: f44f 717e    	mov.w	r1, #0x3f8
    d9f6: 247e         	movs	r4, #0x7e
    d9f8: e783         	b	0xd902 <_free_r+0xe2>   @ imm = #-0xfa
    d9fa: bf00         	nop
    d9fc: 18 07 00 20  	.word	0x20000718
    da00: 10 07 00 20  	.word	0x20000710
    da04: 40 18 00 20  	.word	0x20001840

0000da08 <__ascii_mbtowc>:
; __ascii_mbtowc():
    da08: b082         	sub	sp, #0x8
    da0a: b149         	cbz	r1, 0xda20 <__ascii_mbtowc+0x18> @ imm = #0x12
    da0c: b15a         	cbz	r2, 0xda26 <__ascii_mbtowc+0x1e> @ imm = #0x16
    da0e: b16b         	cbz	r3, 0xda2c <__ascii_mbtowc+0x24> @ imm = #0x1a
    da10: 7813         	ldrb	r3, [r2]
    da12: 600b         	str	r3, [r1]
    da14: 7812         	ldrb	r2, [r2]
    da16: 1e10         	subs	r0, r2, #0x0
    da18: bf18         	it	ne
    da1a: 2001         	movne	r0, #0x1
    da1c: b002         	add	sp, #0x8
    da1e: 4770         	bx	lr
    da20: a901         	add	r1, sp, #0x4
    da22: 2a00         	cmp	r2, #0x0
    da24: d1f3         	bne	0xda0e <__ascii_mbtowc+0x6> @ imm = #-0x1a
    da26: 4610         	mov	r0, r2
    da28: b002         	add	sp, #0x8
    da2a: 4770         	bx	lr
    da2c: f06f 0001    	mvn	r0, #0x1
    da30: e7f4         	b	0xda1c <__ascii_mbtowc+0x14> @ imm = #-0x18
    da32: bf00         	nop

0000da34 <_Balloc>:
; _Balloc():
    da34: b538         	push	{r3, r4, r5, lr}
    da36: 6c43         	ldr	r3, [r0, #0x44]
    da38: 4605         	mov	r5, r0
    da3a: 460c         	mov	r4, r1
    da3c: b14b         	cbz	r3, 0xda52 <_Balloc+0x1e> @ imm = #0x12
    da3e: f853 0024    	ldr.w	r0, [r3, r4, lsl #2]
    da42: b180         	cbz	r0, 0xda66 <_Balloc+0x32> @ imm = #0x20
    da44: 6802         	ldr	r2, [r0]
    da46: f843 2024    	str.w	r2, [r3, r4, lsl #2]
    da4a: 2300         	movs	r3, #0x0
    da4c: e9c0 3303    	strd	r3, r3, [r0, #12]
    da50: bd38         	pop	{r3, r4, r5, pc}
    da52: 2221         	movs	r2, #0x21
    da54: 2104         	movs	r1, #0x4
    da56: f000 fd13    	bl	0xe480 <_calloc_r>      @ imm = #0xa26
    da5a: 4603         	mov	r3, r0
    da5c: 6468         	str	r0, [r5, #0x44]
    da5e: 2800         	cmp	r0, #0x0
    da60: d1ed         	bne	0xda3e <_Balloc+0xa>    @ imm = #-0x26
    da62: 2000         	movs	r0, #0x0
    da64: bd38         	pop	{r3, r4, r5, pc}
    da66: 2101         	movs	r1, #0x1
    da68: 4628         	mov	r0, r5
    da6a: fa01 f504    	lsl.w	r5, r1, r4
    da6e: 1d6a         	adds	r2, r5, #0x5
    da70: 0092         	lsls	r2, r2, #0x2
    da72: f000 fd05    	bl	0xe480 <_calloc_r>      @ imm = #0xa0a
    da76: 2800         	cmp	r0, #0x0
    da78: d0f3         	beq	0xda62 <_Balloc+0x2e>   @ imm = #-0x1a
    da7a: e9c0 4501    	strd	r4, r5, [r0, #4]
    da7e: e7e4         	b	0xda4a <_Balloc+0x16>   @ imm = #-0x38

0000da80 <_Bfree>:
; _Bfree():
    da80: b131         	cbz	r1, 0xda90 <_Bfree+0x10> @ imm = #0xc
    da82: 6c43         	ldr	r3, [r0, #0x44]
    da84: 684a         	ldr	r2, [r1, #0x4]
    da86: f853 0022    	ldr.w	r0, [r3, r2, lsl #2]
    da8a: 6008         	str	r0, [r1]
    da8c: f843 1022    	str.w	r1, [r3, r2, lsl #2]
    da90: 4770         	bx	lr
    da92: bf00         	nop

0000da94 <__multadd>:
; __multadd():
    da94: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    da98: 4607         	mov	r7, r0
    da9a: 460e         	mov	r6, r1
    da9c: 461c         	mov	r4, r3
    da9e: 690d         	ldr	r5, [r1, #0x10]
    daa0: f101 0e14    	add.w	lr, r1, #0x14
    daa4: 2000         	movs	r0, #0x0
    daa6: f8de 1000    	ldr.w	r1, [lr]
    daaa: 3001         	adds	r0, #0x1
    daac: b28b         	uxth	r3, r1
    daae: 4285         	cmp	r5, r0
    dab0: ea4f 4111    	lsr.w	r1, r1, #0x10
    dab4: fb02 4303    	mla	r3, r2, r3, r4
    dab8: ea4f 4c13    	lsr.w	r12, r3, #0x10
    dabc: b29b         	uxth	r3, r3
    dabe: fb02 cc01    	mla	r12, r2, r1, r12
    dac2: eb03 430c    	add.w	r3, r3, r12, lsl #16
    dac6: ea4f 441c    	lsr.w	r4, r12, #0x10
    daca: f84e 3b04    	str	r3, [lr], #4
    dace: dcea         	bgt	0xdaa6 <__multadd+0x12> @ imm = #-0x2c
    dad0: b13c         	cbz	r4, 0xdae2 <__multadd+0x4e> @ imm = #0xe
    dad2: 68b3         	ldr	r3, [r6, #0x8]
    dad4: 42ab         	cmp	r3, r5
    dad6: dd07         	ble	0xdae8 <__multadd+0x54> @ imm = #0xe
    dad8: eb06 0385    	add.w	r3, r6, r5, lsl #2
    dadc: 3501         	adds	r5, #0x1
    dade: 615c         	str	r4, [r3, #0x14]
    dae0: 6135         	str	r5, [r6, #0x10]
    dae2: 4630         	mov	r0, r6
    dae4: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
    dae8: 6871         	ldr	r1, [r6, #0x4]
    daea: 4638         	mov	r0, r7
    daec: 3101         	adds	r1, #0x1
    daee: f7ff ffa1    	bl	0xda34 <_Balloc>        @ imm = #-0xbe
    daf2: 4680         	mov	r8, r0
    daf4: b1a8         	cbz	r0, 0xdb22 <__multadd+0x8e> @ imm = #0x2a
    daf6: 6932         	ldr	r2, [r6, #0x10]
    daf8: f106 010c    	add.w	r1, r6, #0xc
    dafc: 300c         	adds	r0, #0xc
    dafe: 3202         	adds	r2, #0x2
    db00: 0092         	lsls	r2, r2, #0x2
    db02: f7fb fa13    	bl	0x8f2c <memcpy>         @ imm = #-0x4bda
    db06: 6c7b         	ldr	r3, [r7, #0x44]
    db08: 6872         	ldr	r2, [r6, #0x4]
    db0a: f853 1022    	ldr.w	r1, [r3, r2, lsl #2]
    db0e: 6031         	str	r1, [r6]
    db10: f843 6022    	str.w	r6, [r3, r2, lsl #2]
    db14: 4646         	mov	r6, r8
    db16: eb06 0385    	add.w	r3, r6, r5, lsl #2
    db1a: 3501         	adds	r5, #0x1
    db1c: 615c         	str	r4, [r3, #0x14]
    db1e: 6135         	str	r5, [r6, #0x10]
    db20: e7df         	b	0xdae2 <__multadd+0x4e> @ imm = #-0x42
    db22: 4602         	mov	r2, r0
    db24: 4b02         	ldr	r3, [pc, #0x8]          @ 0xdb30 <__multadd+0x9c>
    db26: 21ba         	movs	r1, #0xba
    db28: 4802         	ldr	r0, [pc, #0x8]          @ 0xdb34 <__multadd+0xa0>
    db2a: f000 fc8b    	bl	0xe444 <__assert_func>  @ imm = #0x916
    db2e: bf00         	nop
    db30: cc 1d 21 80  	.word	0x80211dcc
    db34: 44 1e 21 80  	.word	0x80211e44

0000db38 <__hi0bits>:
; __hi0bits():
    db38: f5b0 3f80    	cmp.w	r0, #0x10000
    db3c: 4603         	mov	r3, r0
    db3e: d210         	bhs	0xdb62 <__hi0bits+0x2a> @ imm = #0x20
    db40: 0403         	lsls	r3, r0, #0x10
    db42: 2010         	movs	r0, #0x10
    db44: f1b3 7f80    	cmp.w	r3, #0x1000000
    db48: d201         	bhs	0xdb4e <__hi0bits+0x16> @ imm = #0x2
    db4a: 3008         	adds	r0, #0x8
    db4c: 021b         	lsls	r3, r3, #0x8
    db4e: f1b3 5f80    	cmp.w	r3, #0x10000000
    db52: d308         	blo	0xdb66 <__hi0bits+0x2e> @ imm = #0x10
    db54: f1b3 4f80    	cmp.w	r3, #0x40000000
    db58: d210         	bhs	0xdb7c <__hi0bits+0x44> @ imm = #0x20
    db5a: 009a         	lsls	r2, r3, #0x2
    db5c: d413         	bmi	0xdb86 <__hi0bits+0x4e> @ imm = #0x26
    db5e: 3003         	adds	r0, #0x3
    db60: 4770         	bx	lr
    db62: 2000         	movs	r0, #0x0
    db64: e7ee         	b	0xdb44 <__hi0bits+0xc>  @ imm = #-0x24
    db66: 011a         	lsls	r2, r3, #0x4
    db68: 3004         	adds	r0, #0x4
    db6a: f1b2 4f80    	cmp.w	r2, #0x40000000
    db6e: d206         	bhs	0xdb7e <__hi0bits+0x46> @ imm = #0xc
    db70: 019b         	lsls	r3, r3, #0x6
    db72: d408         	bmi	0xdb86 <__hi0bits+0x4e> @ imm = #0x10
    db74: 005b         	lsls	r3, r3, #0x1
    db76: d4f2         	bmi	0xdb5e <__hi0bits+0x26> @ imm = #-0x1c
    db78: 2020         	movs	r0, #0x20
    db7a: 4770         	bx	lr
    db7c: 461a         	mov	r2, r3
    db7e: 2a00         	cmp	r2, #0x0
    db80: dbfb         	blt	0xdb7a <__hi0bits+0x42> @ imm = #-0xa
    db82: 3001         	adds	r0, #0x1
    db84: 4770         	bx	lr
    db86: 3002         	adds	r0, #0x2
    db88: 4770         	bx	lr
    db8a: bf00         	nop

0000db8c <__lo0bits>:
; __lo0bits():
    db8c: 6803         	ldr	r3, [r0]
    db8e: 4602         	mov	r2, r0
    db90: 0759         	lsls	r1, r3, #0x1d
    db92: d007         	beq	0xdba4 <__lo0bits+0x18> @ imm = #0xe
    db94: 07d8         	lsls	r0, r3, #0x1f
    db96: d41d         	bmi	0xdbd4 <__lo0bits+0x48> @ imm = #0x3a
    db98: 0799         	lsls	r1, r3, #0x1e
    db9a: d52a         	bpl	0xdbf2 <__lo0bits+0x66> @ imm = #0x54
    db9c: 085b         	lsrs	r3, r3, #0x1
    db9e: 2001         	movs	r0, #0x1
    dba0: 6013         	str	r3, [r2]
    dba2: 4770         	bx	lr
    dba4: b299         	uxth	r1, r3
    dba6: b979         	cbnz	r1, 0xdbc8 <__lo0bits+0x3c> @ imm = #0x1e
    dba8: 0c1b         	lsrs	r3, r3, #0x10
    dbaa: b2d9         	uxtb	r1, r3
    dbac: b1a1         	cbz	r1, 0xdbd8 <__lo0bits+0x4c> @ imm = #0x28
    dbae: 2010         	movs	r0, #0x10
    dbb0: 0719         	lsls	r1, r3, #0x1c
    dbb2: d101         	bne	0xdbb8 <__lo0bits+0x2c> @ imm = #0x2
    dbb4: 3004         	adds	r0, #0x4
    dbb6: 091b         	lsrs	r3, r3, #0x4
    dbb8: 0799         	lsls	r1, r3, #0x1e
    dbba: d012         	beq	0xdbe2 <__lo0bits+0x56> @ imm = #0x24
    dbbc: 07d9         	lsls	r1, r3, #0x1f
    dbbe: d401         	bmi	0xdbc4 <__lo0bits+0x38> @ imm = #0x2
    dbc0: 3001         	adds	r0, #0x1
    dbc2: 085b         	lsrs	r3, r3, #0x1
    dbc4: 6013         	str	r3, [r2]
    dbc6: 4770         	bx	lr
    dbc8: b2d9         	uxtb	r1, r3
    dbca: b141         	cbz	r1, 0xdbde <__lo0bits+0x52> @ imm = #0x10
    dbcc: 0718         	lsls	r0, r3, #0x1c
    dbce: d118         	bne	0xdc02 <__lo0bits+0x76> @ imm = #0x30
    dbd0: 2004         	movs	r0, #0x4
    dbd2: e7f0         	b	0xdbb6 <__lo0bits+0x2a> @ imm = #-0x20
    dbd4: 2000         	movs	r0, #0x0
    dbd6: 4770         	bx	lr
    dbd8: 2018         	movs	r0, #0x18
    dbda: 0a1b         	lsrs	r3, r3, #0x8
    dbdc: e7e8         	b	0xdbb0 <__lo0bits+0x24> @ imm = #-0x30
    dbde: 2008         	movs	r0, #0x8
    dbe0: e7fb         	b	0xdbda <__lo0bits+0x4e> @ imm = #-0xa
    dbe2: f013 0f04    	tst.w	r3, #0x4
    dbe6: ea4f 0193    	lsr.w	r1, r3, #0x2
    dbea: d006         	beq	0xdbfa <__lo0bits+0x6e> @ imm = #0xc
    dbec: 3002         	adds	r0, #0x2
    dbee: 460b         	mov	r3, r1
    dbf0: e7e8         	b	0xdbc4 <__lo0bits+0x38> @ imm = #-0x30
    dbf2: 089b         	lsrs	r3, r3, #0x2
    dbf4: 2002         	movs	r0, #0x2
    dbf6: 6013         	str	r3, [r2]
    dbf8: 4770         	bx	lr
    dbfa: 08db         	lsrs	r3, r3, #0x3
    dbfc: d104         	bne	0xdc08 <__lo0bits+0x7c> @ imm = #0x8
    dbfe: 2020         	movs	r0, #0x20
    dc00: 4770         	bx	lr
    dc02: 08db         	lsrs	r3, r3, #0x3
    dc04: 2003         	movs	r0, #0x3
    dc06: e7dd         	b	0xdbc4 <__lo0bits+0x38> @ imm = #-0x46
    dc08: 3003         	adds	r0, #0x3
    dc0a: e7db         	b	0xdbc4 <__lo0bits+0x38> @ imm = #-0x4a

0000dc0c <__i2b>:
; __i2b():
    dc0c: b538         	push	{r3, r4, r5, lr}
    dc0e: 6c43         	ldr	r3, [r0, #0x44]
    dc10: 4604         	mov	r4, r0
    dc12: 460d         	mov	r5, r1
    dc14: b14b         	cbz	r3, 0xdc2a <__i2b+0x1e> @ imm = #0x12
    dc16: 6858         	ldr	r0, [r3, #0x4]
    dc18: b1b0         	cbz	r0, 0xdc48 <__i2b+0x3c> @ imm = #0x2c
    dc1a: 6802         	ldr	r2, [r0]
    dc1c: 605a         	str	r2, [r3, #0x4]
    dc1e: 2200         	movs	r2, #0x0
    dc20: 2301         	movs	r3, #0x1
    dc22: 6145         	str	r5, [r0, #0x14]
    dc24: e9c0 2303    	strd	r2, r3, [r0, #12]
    dc28: bd38         	pop	{r3, r4, r5, pc}
    dc2a: 2221         	movs	r2, #0x21
    dc2c: 2104         	movs	r1, #0x4
    dc2e: f000 fc27    	bl	0xe480 <_calloc_r>      @ imm = #0x84e
    dc32: 4603         	mov	r3, r0
    dc34: 6460         	str	r0, [r4, #0x44]
    dc36: 2800         	cmp	r0, #0x0
    dc38: d1ed         	bne	0xdc16 <__i2b+0xa>      @ imm = #-0x26
    dc3a: 4b09         	ldr	r3, [pc, #0x24]         @ 0xdc60 <__i2b+0x54>
    dc3c: 2200         	movs	r2, #0x0
    dc3e: f240 1145    	movw	r1, #0x145
    dc42: 4808         	ldr	r0, [pc, #0x20]         @ 0xdc64 <__i2b+0x58>
    dc44: f000 fbfe    	bl	0xe444 <__assert_func>  @ imm = #0x7fc
    dc48: 221c         	movs	r2, #0x1c
    dc4a: 2101         	movs	r1, #0x1
    dc4c: 4620         	mov	r0, r4
    dc4e: f000 fc17    	bl	0xe480 <_calloc_r>      @ imm = #0x82e
    dc52: 2800         	cmp	r0, #0x0
    dc54: d0f1         	beq	0xdc3a <__i2b+0x2e>     @ imm = #-0x1e
    dc56: 2201         	movs	r2, #0x1
    dc58: 2302         	movs	r3, #0x2
    dc5a: e9c0 2301    	strd	r2, r3, [r0, #4]
    dc5e: e7de         	b	0xdc1e <__i2b+0x12>     @ imm = #-0x44
    dc60: cc 1d 21 80  	.word	0x80211dcc
    dc64: 44 1e 21 80  	.word	0x80211e44

0000dc68 <__multiply>:
; __multiply():
    dc68: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    dc6c: f8d1 8010    	ldr.w	r8, [r1, #0x10]
    dc70: b085         	sub	sp, #0x14
    dc72: 6915         	ldr	r5, [r2, #0x10]
    dc74: 460e         	mov	r6, r1
    dc76: 4692         	mov	r10, r2
    dc78: 45a8         	cmp	r8, r5
    dc7a: db05         	blt	0xdc88 <__multiply+0x20> @ imm = #0xa
    dc7c: 462a         	mov	r2, r5
    dc7e: 4653         	mov	r3, r10
    dc80: 4645         	mov	r5, r8
    dc82: 468a         	mov	r10, r1
    dc84: 4690         	mov	r8, r2
    dc86: 461e         	mov	r6, r3
    dc88: eb05 0408    	add.w	r4, r5, r8
    dc8c: e9da 1301    	ldrd	r1, r3, [r10, #4]
    dc90: 42a3         	cmp	r3, r4
    dc92: bfb8         	it	lt
    dc94: 3101         	addlt	r1, #0x1
    dc96: f7ff fecd    	bl	0xda34 <_Balloc>        @ imm = #-0x266
    dc9a: 2800         	cmp	r0, #0x0
    dc9c: f000 808c    	beq.w	0xddb8 <__multiply+0x150> @ imm = #0x118
    dca0: f100 0714    	add.w	r7, r0, #0x14
    dca4: eb07 0e84    	add.w	lr, r7, r4, lsl #2
    dca8: 4577         	cmp	r7, lr
    dcaa: d205         	bhs	0xdcb8 <__multiply+0x50> @ imm = #0xa
    dcac: 463b         	mov	r3, r7
    dcae: 2200         	movs	r2, #0x0
    dcb0: f843 2b04    	str	r2, [r3], #4
    dcb4: 459e         	cmp	lr, r3
    dcb6: d8fb         	bhi	0xdcb0 <__multiply+0x48> @ imm = #-0xa
    dcb8: 3614         	adds	r6, #0x14
    dcba: f10a 0914    	add.w	r9, r10, #0x14
    dcbe: eb06 0888    	add.w	r8, r6, r8, lsl #2
    dcc2: eb09 0585    	add.w	r5, r9, r5, lsl #2
    dcc6: 4546         	cmp	r6, r8
    dcc8: d269         	bhs	0xdd9e <__multiply+0x136> @ imm = #0xd2
    dcca: eba5 030a    	sub.w	r3, r5, r10
    dcce: f10a 0a15    	add.w	r10, r10, #0x15
    dcd2: f8cd e008    	str.w	lr, [sp, #0x8]
    dcd6: 46ae         	mov	lr, r5
    dcd8: 3b15         	subs	r3, #0x15
    dcda: 9403         	str	r4, [sp, #0xc]
    dcdc: f023 0303    	bic	r3, r3, #0x3
    dce0: 45aa         	cmp	r10, r5
    dce2: bf94         	ite	ls
    dce4: 469b         	movls	r11, r3
    dce6: f04f 0b00    	movhi.w	r11, #0x0
    dcea: 4682         	mov	r10, r0
    dcec: e005         	b	0xdcfa <__multiply+0x92> @ imm = #0xa
    dcee: 0c09         	lsrs	r1, r1, #0x10
    dcf0: d12d         	bne	0xdd4e <__multiply+0xe6> @ imm = #0x5a
    dcf2: 45b0         	cmp	r8, r6
    dcf4: f107 0704    	add.w	r7, r7, #0x4
    dcf8: d94e         	bls	0xdd98 <__multiply+0x130> @ imm = #0x9c
    dcfa: f856 1b04    	ldr	r1, [r6], #4
    dcfe: b28d         	uxth	r5, r1
    dd00: 2d00         	cmp	r5, #0x0
    dd02: d0f4         	beq	0xdcee <__multiply+0x86> @ imm = #-0x18
    dd04: 46cc         	mov	r12, r9
    dd06: 463c         	mov	r4, r7
    dd08: 2300         	movs	r3, #0x0
    dd0a: 9601         	str	r6, [sp, #0x4]
    dd0c: f85c 0b04    	ldr	r0, [r12], #4
    dd10: 6821         	ldr	r1, [r4]
    dd12: b286         	uxth	r6, r0
    dd14: 45e6         	cmp	lr, r12
    dd16: b28a         	uxth	r2, r1
    dd18: ea4f 4010    	lsr.w	r0, r0, #0x10
    dd1c: fb05 2206    	mla	r2, r5, r6, r2
    dd20: ea4f 4111    	lsr.w	r1, r1, #0x10
    dd24: 441a         	add	r2, r3
    dd26: fb05 1100    	mla	r1, r5, r0, r1
    dd2a: eb01 4112    	add.w	r1, r1, r2, lsr #16
    dd2e: b292         	uxth	r2, r2
    dd30: ea4f 4311    	lsr.w	r3, r1, #0x10
    dd34: ea42 4201    	orr.w	r2, r2, r1, lsl #16
    dd38: f844 2b04    	str	r2, [r4], #4
    dd3c: d8e6         	bhi	0xdd0c <__multiply+0xa4> @ imm = #-0x34
    dd3e: 9e01         	ldr	r6, [sp, #0x4]
    dd40: eb07 020b    	add.w	r2, r7, r11
    dd44: 6053         	str	r3, [r2, #0x4]
    dd46: f856 1c04    	ldr	r1, [r6, #-4]
    dd4a: 0c09         	lsrs	r1, r1, #0x10
    dd4c: d0d1         	beq	0xdcf2 <__multiply+0x8a> @ imm = #-0x5e
    dd4e: 683b         	ldr	r3, [r7]
    dd50: 2200         	movs	r2, #0x0
    dd52: 4648         	mov	r0, r9
    dd54: 463d         	mov	r5, r7
    dd56: 461c         	mov	r4, r3
    dd58: 4694         	mov	r12, r2
    dd5a: 8802         	ldrh	r2, [r0]
    dd5c: b29b         	uxth	r3, r3
    dd5e: fb01 c202    	mla	r2, r1, r2, r12
    dd62: eb02 4214    	add.w	r2, r2, r4, lsr #16
    dd66: ea43 4302    	orr.w	r3, r3, r2, lsl #16
    dd6a: f845 3b04    	str	r3, [r5], #4
    dd6e: f850 3b04    	ldr	r3, [r0], #4
    dd72: 682c         	ldr	r4, [r5]
    dd74: ea4f 4c13    	lsr.w	r12, r3, #0x10
    dd78: 4586         	cmp	lr, r0
    dd7a: b2a3         	uxth	r3, r4
    dd7c: fb01 330c    	mla	r3, r1, r12, r3
    dd80: eb03 4312    	add.w	r3, r3, r2, lsr #16
    dd84: ea4f 4c13    	lsr.w	r12, r3, #0x10
    dd88: d8e7         	bhi	0xdd5a <__multiply+0xf2> @ imm = #-0x32
    dd8a: eb07 020b    	add.w	r2, r7, r11
    dd8e: 45b0         	cmp	r8, r6
    dd90: f107 0704    	add.w	r7, r7, #0x4
    dd94: 6053         	str	r3, [r2, #0x4]
    dd96: d8b0         	bhi	0xdcfa <__multiply+0x92> @ imm = #-0xa0
    dd98: 4650         	mov	r0, r10
    dd9a: e9dd e402    	ldrd	lr, r4, [sp, #8]
    dd9e: 2c00         	cmp	r4, #0x0
    dda0: dc02         	bgt	0xdda8 <__multiply+0x140> @ imm = #0x4
    dda2: e005         	b	0xddb0 <__multiply+0x148> @ imm = #0xa
    dda4: 3c01         	subs	r4, #0x1
    dda6: d003         	beq	0xddb0 <__multiply+0x148> @ imm = #0x6
    dda8: f85e 3d04    	ldr	r3, [lr, #-4]!
    ddac: 2b00         	cmp	r3, #0x0
    ddae: d0f9         	beq	0xdda4 <__multiply+0x13c> @ imm = #-0xe
    ddb0: 6104         	str	r4, [r0, #0x10]
    ddb2: b005         	add	sp, #0x14
    ddb4: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    ddb8: 4602         	mov	r2, r0
    ddba: 4b03         	ldr	r3, [pc, #0xc]          @ 0xddc8 <__multiply+0x160>
    ddbc: f44f 71b1    	mov.w	r1, #0x162
    ddc0: 4802         	ldr	r0, [pc, #0x8]          @ 0xddcc <__multiply+0x164>
    ddc2: f000 fb3f    	bl	0xe444 <__assert_func>  @ imm = #0x67e
    ddc6: bf00         	nop
    ddc8: cc 1d 21 80  	.word	0x80211dcc
    ddcc: 44 1e 21 80  	.word	0x80211e44

0000ddd0 <__pow5mult>:
; __pow5mult():
    ddd0: f012 0303    	ands	r3, r2, #0x3
    ddd4: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    ddd8: 4614         	mov	r4, r2
    ddda: 4607         	mov	r7, r0
    dddc: d132         	bne	0xde44 <__pow5mult+0x74> @ imm = #0x64
    ddde: 460e         	mov	r6, r1
    dde0: 10a4         	asrs	r4, r4, #0x2
    dde2: d02c         	beq	0xde3e <__pow5mult+0x6e> @ imm = #0x58
    dde4: 6c3d         	ldr	r5, [r7, #0x40]
    dde6: 2d00         	cmp	r5, #0x0
    dde8: d035         	beq	0xde56 <__pow5mult+0x86> @ imm = #0x6a
    ddea: f004 0301    	and	r3, r4, #0x1
    ddee: f04f 0800    	mov.w	r8, #0x0
    ddf2: 1064         	asrs	r4, r4, #0x1
    ddf4: b93b         	cbnz	r3, 0xde06 <__pow5mult+0x36> @ imm = #0xe
    ddf6: 6828         	ldr	r0, [r5]
    ddf8: b1b8         	cbz	r0, 0xde2a <__pow5mult+0x5a> @ imm = #0x2e
    ddfa: 4605         	mov	r5, r0
    ddfc: f004 0301    	and	r3, r4, #0x1
    de00: 1064         	asrs	r4, r4, #0x1
    de02: 2b00         	cmp	r3, #0x0
    de04: d0f7         	beq	0xddf6 <__pow5mult+0x26> @ imm = #-0x12
    de06: 462a         	mov	r2, r5
    de08: 4631         	mov	r1, r6
    de0a: 4638         	mov	r0, r7
    de0c: f7ff ff2c    	bl	0xdc68 <__multiply>     @ imm = #-0x1a8
    de10: b136         	cbz	r6, 0xde20 <__pow5mult+0x50> @ imm = #0xc
    de12: 6c7b         	ldr	r3, [r7, #0x44]
    de14: 6871         	ldr	r1, [r6, #0x4]
    de16: f853 2021    	ldr.w	r2, [r3, r1, lsl #2]
    de1a: 6032         	str	r2, [r6]
    de1c: f843 6021    	str.w	r6, [r3, r1, lsl #2]
    de20: b174         	cbz	r4, 0xde40 <__pow5mult+0x70> @ imm = #0x1c
    de22: 4606         	mov	r6, r0
    de24: 6828         	ldr	r0, [r5]
    de26: 2800         	cmp	r0, #0x0
    de28: d1e7         	bne	0xddfa <__pow5mult+0x2a> @ imm = #-0x32
    de2a: 462a         	mov	r2, r5
    de2c: 4629         	mov	r1, r5
    de2e: 4638         	mov	r0, r7
    de30: f7ff ff1a    	bl	0xdc68 <__multiply>     @ imm = #-0x1cc
    de34: 6028         	str	r0, [r5]
    de36: 4605         	mov	r5, r0
    de38: f8c0 8000    	str.w	r8, [r0]
    de3c: e7de         	b	0xddfc <__pow5mult+0x2c> @ imm = #-0x44
    de3e: 4630         	mov	r0, r6
    de40: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
    de44: 3b01         	subs	r3, #0x1
    de46: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0xde84 <__pow5mult+0xb4>
    de48: f852 2023    	ldr.w	r2, [r2, r3, lsl #2]
    de4c: 2300         	movs	r3, #0x0
    de4e: f7ff fe21    	bl	0xda94 <__multadd>      @ imm = #-0x3be
    de52: 4606         	mov	r6, r0
    de54: e7c4         	b	0xdde0 <__pow5mult+0x10> @ imm = #-0x78
    de56: 2101         	movs	r1, #0x1
    de58: 4638         	mov	r0, r7
    de5a: f7ff fdeb    	bl	0xda34 <_Balloc>        @ imm = #-0x42a
    de5e: 4605         	mov	r5, r0
    de60: b140         	cbz	r0, 0xde74 <__pow5mult+0xa4> @ imm = #0x10
    de62: 2301         	movs	r3, #0x1
    de64: f240 2271    	movw	r2, #0x271
    de68: e9c0 3204    	strd	r3, r2, [r0, #16]
    de6c: 2300         	movs	r3, #0x0
    de6e: 6438         	str	r0, [r7, #0x40]
    de70: 6003         	str	r3, [r0]
    de72: e7ba         	b	0xddea <__pow5mult+0x1a> @ imm = #-0x8c
    de74: 4602         	mov	r2, r0
    de76: 4b04         	ldr	r3, [pc, #0x10]         @ 0xde88 <__pow5mult+0xb8>
    de78: f240 1145    	movw	r1, #0x145
    de7c: 4803         	ldr	r0, [pc, #0xc]          @ 0xde8c <__pow5mult+0xbc>
    de7e: f000 fae1    	bl	0xe444 <__assert_func>  @ imm = #0x5c2
    de82: bf00         	nop
    de84: 0c 20 21 80  	.word	0x8021200c
    de88: cc 1d 21 80  	.word	0x80211dcc
    de8c: 44 1e 21 80  	.word	0x80211e44

0000de90 <__lshift>:
; __lshift():
    de90: e92d 47f0    	push.w	{r4, r5, r6, r7, r8, r9, r10, lr}
    de94: 460c         	mov	r4, r1
    de96: 4690         	mov	r8, r2
    de98: 4606         	mov	r6, r0
    de9a: ea4f 1962    	asr.w	r9, r2, #0x5
    de9e: 6927         	ldr	r7, [r4, #0x10]
    dea0: 68a3         	ldr	r3, [r4, #0x8]
    dea2: eb07 1762    	add.w	r7, r7, r2, asr #5
    dea6: 6849         	ldr	r1, [r1, #0x4]
    dea8: 1c7d         	adds	r5, r7, #0x1
    deaa: 429d         	cmp	r5, r3
    deac: dd03         	ble	0xdeb6 <__lshift+0x26>  @ imm = #0x6
    deae: 005b         	lsls	r3, r3, #0x1
    deb0: 3101         	adds	r1, #0x1
    deb2: 429d         	cmp	r5, r3
    deb4: dcfb         	bgt	0xdeae <__lshift+0x1e>  @ imm = #-0xa
    deb6: 4630         	mov	r0, r6
    deb8: f7ff fdbc    	bl	0xda34 <_Balloc>        @ imm = #-0x488
    debc: 2800         	cmp	r0, #0x0
    debe: d04d         	beq	0xdf5c <__lshift+0xcc>  @ imm = #0x9a
    dec0: f1b9 0f00    	cmp.w	r9, #0x0
    dec4: f100 0c14    	add.w	r12, r0, #0x14
    dec8: dd0b         	ble	0xdee2 <__lshift+0x52>  @ imm = #0x16
    deca: f109 0205    	add.w	r2, r9, #0x5
    dece: 4663         	mov	r3, r12
    ded0: 2100         	movs	r1, #0x0
    ded2: eb00 0282    	add.w	r2, r0, r2, lsl #2
    ded6: f843 1b04    	str	r1, [r3], #4
    deda: 4293         	cmp	r3, r2
    dedc: d1fb         	bne	0xded6 <__lshift+0x46>  @ imm = #-0xa
    dede: eb0c 0c89    	add.w	r12, r12, r9, lsl #2
    dee2: f104 0314    	add.w	r3, r4, #0x14
    dee6: 6921         	ldr	r1, [r4, #0x10]
    dee8: f018 081f    	ands	r8, r8, #0x1f
    deec: eb03 0181    	add.w	r1, r3, r1, lsl #2
    def0: d02b         	beq	0xdf4a <__lshift+0xba>  @ imm = #0x56
    def2: f1c8 0920    	rsb.w	r9, r8, #0x20
    def6: 46e6         	mov	lr, r12
    def8: f04f 0a00    	mov.w	r10, #0x0
    defc: 681a         	ldr	r2, [r3]
    defe: fa02 f208    	lsl.w	r2, r2, r8
    df02: ea42 020a    	orr.w	r2, r2, r10
    df06: f84e 2b04    	str	r2, [lr], #4
    df0a: f853 2b04    	ldr	r2, [r3], #4
    df0e: 4299         	cmp	r1, r3
    df10: fa22 fa09    	lsr.w	r10, r2, r9
    df14: d8f2         	bhi	0xdefc <__lshift+0x6c>  @ imm = #-0x1c
    df16: 1b0b         	subs	r3, r1, r4
    df18: f104 0215    	add.w	r2, r4, #0x15
    df1c: 3b15         	subs	r3, #0x15
    df1e: f023 0303    	bic	r3, r3, #0x3
    df22: 4291         	cmp	r1, r2
    df24: bf38         	it	lo
    df26: 2300         	movlo	r3, #0x0
    df28: 3304         	adds	r3, #0x4
    df2a: f84c a003    	str.w	r10, [r12, r3]
    df2e: f1ba 0f00    	cmp.w	r10, #0x0
    df32: d100         	bne	0xdf36 <__lshift+0xa6>  @ imm = #0x0
    df34: 463d         	mov	r5, r7
    df36: 6c73         	ldr	r3, [r6, #0x44]
    df38: 6862         	ldr	r2, [r4, #0x4]
    df3a: 6105         	str	r5, [r0, #0x10]
    df3c: f853 1022    	ldr.w	r1, [r3, r2, lsl #2]
    df40: 6021         	str	r1, [r4]
    df42: f843 4022    	str.w	r4, [r3, r2, lsl #2]
    df46: e8bd 87f0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, pc}
    df4a: f1ac 0c04    	sub.w	r12, r12, #0x4
    df4e: f853 2b04    	ldr	r2, [r3], #4
    df52: 4299         	cmp	r1, r3
    df54: f84c 2f04    	str	r2, [r12, #4]!
    df58: d8f9         	bhi	0xdf4e <__lshift+0xbe>  @ imm = #-0xe
    df5a: e7eb         	b	0xdf34 <__lshift+0xa4>  @ imm = #-0x2a
    df5c: 4602         	mov	r2, r0
    df5e: 4b03         	ldr	r3, [pc, #0xc]          @ 0xdf6c <__lshift+0xdc>
    df60: f44f 71ef    	mov.w	r1, #0x1de
    df64: 4802         	ldr	r0, [pc, #0x8]          @ 0xdf70 <__lshift+0xe0>
    df66: f000 fa6d    	bl	0xe444 <__assert_func>  @ imm = #0x4da
    df6a: bf00         	nop
    df6c: cc 1d 21 80  	.word	0x80211dcc
    df70: 44 1e 21 80  	.word	0x80211e44

0000df74 <__mcmp>:
; __mcmp():
    df74: 4684         	mov	r12, r0
    df76: 690b         	ldr	r3, [r1, #0x10]
    df78: 6900         	ldr	r0, [r0, #0x10]
    df7a: 1ac0         	subs	r0, r0, r3
    df7c: d116         	bne	0xdfac <__mcmp+0x38>    @ imm = #0x2c
    df7e: f10c 0c14    	add.w	r12, r12, #0x14
    df82: 3114         	adds	r1, #0x14
    df84: eb0c 0283    	add.w	r2, r12, r3, lsl #2
    df88: eb01 0383    	add.w	r3, r1, r3, lsl #2
    df8c: b410         	push	{r4}
    df8e: e001         	b	0xdf94 <__mcmp+0x20>    @ imm = #0x2
    df90: 4594         	cmp	r12, r2
    df92: d208         	bhs	0xdfa6 <__mcmp+0x32>    @ imm = #0x10
    df94: f852 4d04    	ldr	r4, [r2, #-4]!
    df98: f853 1d04    	ldr	r1, [r3, #-4]!
    df9c: 428c         	cmp	r4, r1
    df9e: d0f7         	beq	0xdf90 <__mcmp+0x1c>    @ imm = #-0x12
    dfa0: d205         	bhs	0xdfae <__mcmp+0x3a>    @ imm = #0xa
    dfa2: f04f 30ff    	mov.w	r0, #0xffffffff
    dfa6: f85d 4b04    	ldr	r4, [sp], #4
    dfaa: 4770         	bx	lr
    dfac: 4770         	bx	lr
    dfae: 2001         	movs	r0, #0x1
    dfb0: f85d 4b04    	ldr	r4, [sp], #4
    dfb4: 4770         	bx	lr
    dfb6: bf00         	nop

0000dfb8 <__mdiff>:
; __mdiff():
    dfb8: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    dfbc: 6913         	ldr	r3, [r2, #0x10]
    dfbe: b083         	sub	sp, #0xc
    dfc0: 690e         	ldr	r6, [r1, #0x10]
    dfc2: 4689         	mov	r9, r1
    dfc4: 4615         	mov	r5, r2
    dfc6: 1af6         	subs	r6, r6, r3
    dfc8: 2e00         	cmp	r6, #0x0
    dfca: d114         	bne	0xdff6 <__mdiff+0x3e>   @ imm = #0x28
    dfcc: f101 0714    	add.w	r7, r1, #0x14
    dfd0: f102 0114    	add.w	r1, r2, #0x14
    dfd4: eb01 0183    	add.w	r1, r1, r3, lsl #2
    dfd8: eb07 0383    	add.w	r3, r7, r3, lsl #2
    dfdc: e001         	b	0xdfe2 <__mdiff+0x2a>   @ imm = #0x2
    dfde: 429f         	cmp	r7, r3
    dfe0: d27e         	bhs	0xe0e0 <__mdiff+0x128>  @ imm = #0xfc
    dfe2: f853 4d04    	ldr	r4, [r3, #-4]!
    dfe6: f851 2d04    	ldr	r2, [r1, #-4]!
    dfea: 4294         	cmp	r4, r2
    dfec: d0f7         	beq	0xdfde <__mdiff+0x26>   @ imm = #-0x12
    dfee: f080 8082    	bhs.w	0xe0f6 <__mdiff+0x13e>  @ imm = #0x104
    dff2: 2601         	movs	r6, #0x1
    dff4: e003         	b	0xdffe <__mdiff+0x46>   @ imm = #0x6
    dff6: dbfc         	blt	0xdff2 <__mdiff+0x3a>   @ imm = #-0x8
    dff8: 2600         	movs	r6, #0x0
    dffa: 460d         	mov	r5, r1
    dffc: 4691         	mov	r9, r2
    dffe: 6869         	ldr	r1, [r5, #0x4]
    e000: f7ff fd18    	bl	0xda34 <_Balloc>        @ imm = #-0x5d0
    e004: 2800         	cmp	r0, #0x0
    e006: f000 8083    	beq.w	0xe110 <__mdiff+0x158>  @ imm = #0x106
    e00a: 692f         	ldr	r7, [r5, #0x10]
    e00c: f105 0b14    	add.w	r11, r5, #0x14
    e010: f105 0210    	add.w	r2, r5, #0x10
    e014: f8d9 3010    	ldr.w	r3, [r9, #0x10]
    e018: f109 0514    	add.w	r5, r9, #0x14
    e01c: f100 0114    	add.w	r1, r0, #0x14
    e020: eb0b 0e87    	add.w	lr, r11, r7, lsl #2
    e024: 4694         	mov	r12, r2
    e026: eb05 0a83    	add.w	r10, r5, r3, lsl #2
    e02a: 4688         	mov	r8, r1
    e02c: 2300         	movs	r3, #0x0
    e02e: 60c6         	str	r6, [r0, #0xc]
    e030: f8cd b004    	str.w	r11, [sp, #0x4]
    e034: f855 6b04    	ldr	r6, [r5], #4
    e038: f85c 2f04    	ldr	r2, [r12, #4]!
    e03c: fa1f fb86    	uxth.w	r11, r6
    e040: 45aa         	cmp	r10, r5
    e042: b294         	uxth	r4, r2
    e044: eba4 040b    	sub.w	r4, r4, r11
    e048: 441c         	add	r4, r3
    e04a: ea4f 4316    	lsr.w	r3, r6, #0x10
    e04e: ebc3 4312    	rsb	r3, r3, r2, lsr #16
    e052: eb03 4324    	add.w	r3, r3, r4, asr #16
    e056: b2a4         	uxth	r4, r4
    e058: ea44 4403    	orr.w	r4, r4, r3, lsl #16
    e05c: ea4f 4323    	asr.w	r3, r3, #0x10
    e060: f848 4b04    	str	r4, [r8], #4
    e064: d8e6         	bhi	0xe034 <__mdiff+0x7c>   @ imm = #-0x34
    e066: ebaa 0209    	sub.w	r2, r10, r9
    e06a: f109 0915    	add.w	r9, r9, #0x15
    e06e: f8dd b004    	ldr.w	r11, [sp, #0x4]
    e072: 4626         	mov	r6, r4
    e074: 3a15         	subs	r2, #0x15
    e076: f022 0203    	bic	r2, r2, #0x3
    e07a: 45ca         	cmp	r10, r9
    e07c: bf38         	it	lo
    e07e: 2200         	movlo	r2, #0x0
    e080: eb0b 0802    	add.w	r8, r11, r2
    e084: 440a         	add	r2, r1
    e086: f108 0804    	add.w	r8, r8, #0x4
    e08a: 1d14         	adds	r4, r2, #0x4
    e08c: 45c6         	cmp	lr, r8
    e08e: 4645         	mov	r5, r8
    e090: d935         	bls	0xe0fe <__mdiff+0x146>  @ imm = #0x6a
    e092: eba1 010b    	sub.w	r1, r1, r11
    e096: eb05 0c01    	add.w	r12, r5, r1
    e09a: f855 2b04    	ldr	r2, [r5], #4
    e09e: fa1f f982    	uxth.w	r9, r2
    e0a2: 18d6         	adds	r6, r2, r3
    e0a4: 0c12         	lsrs	r2, r2, #0x10
    e0a6: 45ae         	cmp	lr, r5
    e0a8: 444b         	add	r3, r9
    e0aa: b2b6         	uxth	r6, r6
    e0ac: eb02 4223    	add.w	r2, r2, r3, asr #16
    e0b0: ea46 4602    	orr.w	r6, r6, r2, lsl #16
    e0b4: ea4f 4322    	asr.w	r3, r2, #0x10
    e0b8: f8cc 6000    	str.w	r6, [r12]
    e0bc: d8eb         	bhi	0xe096 <__mdiff+0xde>   @ imm = #-0x2a
    e0be: f10e 33ff    	add.w	r3, lr, #0xffffffff
    e0c2: eba3 0308    	sub.w	r3, r3, r8
    e0c6: f023 0303    	bic	r3, r3, #0x3
    e0ca: 4423         	add	r3, r4
    e0cc: b926         	cbnz	r6, 0xe0d8 <__mdiff+0x120> @ imm = #0x8
    e0ce: f853 2d04    	ldr	r2, [r3, #-4]!
    e0d2: 3f01         	subs	r7, #0x1
    e0d4: 2a00         	cmp	r2, #0x0
    e0d6: d0fa         	beq	0xe0ce <__mdiff+0x116>  @ imm = #-0xc
    e0d8: 6107         	str	r7, [r0, #0x10]
    e0da: b003         	add	sp, #0xc
    e0dc: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    e0e0: 2100         	movs	r1, #0x0
    e0e2: f7ff fca7    	bl	0xda34 <_Balloc>        @ imm = #-0x6b2
    e0e6: b160         	cbz	r0, 0xe102 <__mdiff+0x14a> @ imm = #0x18
    e0e8: 2201         	movs	r2, #0x1
    e0ea: 2300         	movs	r3, #0x0
    e0ec: e9c0 2304    	strd	r2, r3, [r0, #16]
    e0f0: b003         	add	sp, #0xc
    e0f2: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    e0f6: 462b         	mov	r3, r5
    e0f8: 464d         	mov	r5, r9
    e0fa: 4699         	mov	r9, r3
    e0fc: e77f         	b	0xdffe <__mdiff+0x46>   @ imm = #-0x102
    e0fe: 4613         	mov	r3, r2
    e100: e7e4         	b	0xe0cc <__mdiff+0x114>  @ imm = #-0x38
    e102: 4602         	mov	r2, r0
    e104: 4b06         	ldr	r3, [pc, #0x18]         @ 0xe120 <__mdiff+0x168>
    e106: f240 2137    	movw	r1, #0x237
    e10a: 4806         	ldr	r0, [pc, #0x18]         @ 0xe124 <__mdiff+0x16c>
    e10c: f000 f99a    	bl	0xe444 <__assert_func>  @ imm = #0x334
    e110: 4602         	mov	r2, r0
    e112: 4b03         	ldr	r3, [pc, #0xc]          @ 0xe120 <__mdiff+0x168>
    e114: f240 2145    	movw	r1, #0x245
    e118: 4802         	ldr	r0, [pc, #0x8]          @ 0xe124 <__mdiff+0x16c>
    e11a: f000 f993    	bl	0xe444 <__assert_func>  @ imm = #0x326
    e11e: bf00         	nop
    e120: cc 1d 21 80  	.word	0x80211dcc
    e124: 44 1e 21 80  	.word	0x80211e44

0000e128 <__d2b>:
; __d2b():
    e128: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
    e12c: 460e         	mov	r6, r1
    e12e: b083         	sub	sp, #0xc
    e130: 2101         	movs	r1, #0x1
    e132: 4615         	mov	r5, r2
    e134: ec59 8b10    	vmov	r8, r9, d0
    e138: f7ff fc7c    	bl	0xda34 <_Balloc>        @ imm = #-0x708
    e13c: 4604         	mov	r4, r0
    e13e: 2800         	cmp	r0, #0x0
    e140: d044         	beq	0xe1cc <__d2b+0xa4>     @ imm = #0x88
    e142: f3c9 570a    	ubfx	r7, r9, #0x14, #0xb
    e146: f3c9 0313    	ubfx	r3, r9, #0x0, #0x14
    e14a: b10f         	cbz	r7, 0xe150 <__d2b+0x28> @ imm = #0x2
    e14c: f443 1380    	orr	r3, r3, #0x100000
    e150: 9301         	str	r3, [sp, #0x4]
    e152: f1b8 0300    	subs.w	r3, r8, #0x0
    e156: d113         	bne	0xe180 <__d2b+0x58>     @ imm = #0x26
    e158: a801         	add	r0, sp, #0x4
    e15a: f7ff fd17    	bl	0xdb8c <__lo0bits>      @ imm = #-0x5d2
    e15e: 9b01         	ldr	r3, [sp, #0x4]
    e160: 2101         	movs	r1, #0x1
    e162: 3020         	adds	r0, #0x20
    e164: 6163         	str	r3, [r4, #0x14]
    e166: 6121         	str	r1, [r4, #0x10]
    e168: b30f         	cbz	r7, 0xe1ae <__d2b+0x86> @ imm = #0x42
    e16a: f2a7 4733    	subw	r7, r7, #0x433
    e16e: 4407         	add	r7, r0
    e170: f1c0 0035    	rsb.w	r0, r0, #0x35
    e174: 6037         	str	r7, [r6]
    e176: 6028         	str	r0, [r5]
    e178: 4620         	mov	r0, r4
    e17a: b003         	add	sp, #0xc
    e17c: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
    e180: 4668         	mov	r0, sp
    e182: 9300         	str	r3, [sp]
    e184: f7ff fd02    	bl	0xdb8c <__lo0bits>      @ imm = #-0x5fc
    e188: e9dd 2300    	ldrd	r2, r3, [sp]
    e18c: b130         	cbz	r0, 0xe19c <__d2b+0x74> @ imm = #0xc
    e18e: f1c0 0120    	rsb.w	r1, r0, #0x20
    e192: fa03 f101    	lsl.w	r1, r3, r1
    e196: 40c3         	lsrs	r3, r0
    e198: 430a         	orrs	r2, r1
    e19a: 9301         	str	r3, [sp, #0x4]
    e19c: 2b00         	cmp	r3, #0x0
    e19e: 6162         	str	r2, [r4, #0x14]
    e1a0: 61a3         	str	r3, [r4, #0x18]
    e1a2: bf0c         	ite	eq
    e1a4: 2101         	moveq	r1, #0x1
    e1a6: 2102         	movne	r1, #0x2
    e1a8: 6121         	str	r1, [r4, #0x10]
    e1aa: 2f00         	cmp	r7, #0x0
    e1ac: d1dd         	bne	0xe16a <__d2b+0x42>     @ imm = #-0x46
    e1ae: eb04 0381    	add.w	r3, r4, r1, lsl #2
    e1b2: f2a0 4032    	subw	r0, r0, #0x432
    e1b6: 6030         	str	r0, [r6]
    e1b8: 6918         	ldr	r0, [r3, #0x10]
    e1ba: f7ff fcbd    	bl	0xdb38 <__hi0bits>      @ imm = #-0x686
    e1be: ebc0 1041    	rsb	r0, r0, r1, lsl #5
    e1c2: 6028         	str	r0, [r5]
    e1c4: 4620         	mov	r0, r4
    e1c6: b003         	add	sp, #0xc
    e1c8: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
    e1cc: 4602         	mov	r2, r0
    e1ce: 4b03         	ldr	r3, [pc, #0xc]          @ 0xe1dc <__d2b+0xb4>
    e1d0: f240 310f    	movw	r1, #0x30f
    e1d4: 4802         	ldr	r0, [pc, #0x8]          @ 0xe1e0 <__d2b+0xb8>
    e1d6: f000 f935    	bl	0xe444 <__assert_func>  @ imm = #0x26a
    e1da: bf00         	nop
    e1dc: cc 1d 21 80  	.word	0x80211dcc
    e1e0: 44 1e 21 80  	.word	0x80211e44

0000e1e4 <__smakebuf_r>:
; __smakebuf_r():
    e1e4: f9b1 300c    	ldrsh.w	r3, [r1, #0xc]
    e1e8: b570         	push	{r4, r5, r6, lr}
    e1ea: 460c         	mov	r4, r1
    e1ec: 0799         	lsls	r1, r3, #0x1e
    e1ee: b096         	sub	sp, #0x58
    e1f0: d507         	bpl	0xe202 <__smakebuf_r+0x1e> @ imm = #0xe
    e1f2: f104 0343    	add.w	r3, r4, #0x43
    e1f6: 2201         	movs	r2, #0x1
    e1f8: 6023         	str	r3, [r4]
    e1fa: e9c4 3204    	strd	r3, r2, [r4, #16]
    e1fe: b016         	add	sp, #0x58
    e200: bd70         	pop	{r4, r5, r6, pc}
    e202: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
    e206: 4605         	mov	r5, r0
    e208: 2900         	cmp	r1, #0x0
    e20a: db2b         	blt	0xe264 <__smakebuf_r+0x80> @ imm = #0x56
    e20c: 466a         	mov	r2, sp
    e20e: f000 f85f    	bl	0xe2d0 <_fstat_r>       @ imm = #0xbe
    e212: 2800         	cmp	r0, #0x0
    e214: db24         	blt	0xe260 <__smakebuf_r+0x7c> @ imm = #0x48
    e216: f44f 6180    	mov.w	r1, #0x400
    e21a: 4628         	mov	r0, r5
    e21c: 9e01         	ldr	r6, [sp, #0x4]
    e21e: f7fa ff97    	bl	0x9150 <_malloc_r>      @ imm = #-0x50d2
    e222: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    e226: b3a0         	cbz	r0, 0xe292 <__smakebuf_r+0xae> @ imm = #0x68
    e228: f406 4670    	and	r6, r6, #0xf000
    e22c: f043 0380    	orr	r3, r3, #0x80
    e230: f44f 6280    	mov.w	r2, #0x400
    e234: 6020         	str	r0, [r4]
    e236: f5b6 5f00    	cmp.w	r6, #0x2000
    e23a: 6120         	str	r0, [r4, #0x10]
    e23c: 81a3         	strh	r3, [r4, #0xc]
    e23e: 6162         	str	r2, [r4, #0x14]
    e240: d135         	bne	0xe2ae <__smakebuf_r+0xca> @ imm = #0x6a
    e242: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
    e246: 4628         	mov	r0, r5
    e248: f000 f858    	bl	0xe2fc <_isatty_r>      @ imm = #0xb0
    e24c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    e250: b368         	cbz	r0, 0xe2ae <__smakebuf_r+0xca> @ imm = #0x5a
    e252: f023 0303    	bic	r3, r3, #0x3
    e256: f44f 6200    	mov.w	r2, #0x800
    e25a: f043 0301    	orr	r3, r3, #0x1
    e25e: e014         	b	0xe28a <__smakebuf_r+0xa6> @ imm = #0x28
    e260: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    e264: f013 0f80    	tst.w	r3, #0x80
    e268: 4628         	mov	r0, r5
    e26a: bf0c         	ite	eq
    e26c: f44f 6580    	moveq.w	r5, #0x400
    e270: 2540         	movne	r5, #0x40
    e272: 4629         	mov	r1, r5
    e274: f7fa ff6c    	bl	0x9150 <_malloc_r>      @ imm = #-0x5128
    e278: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    e27c: b148         	cbz	r0, 0xe292 <__smakebuf_r+0xae> @ imm = #0x12
    e27e: f043 0380    	orr	r3, r3, #0x80
    e282: 2200         	movs	r2, #0x0
    e284: 6020         	str	r0, [r4]
    e286: e9c4 0504    	strd	r0, r5, [r4, #16]
    e28a: 4313         	orrs	r3, r2
    e28c: 81a3         	strh	r3, [r4, #0xc]
    e28e: b016         	add	sp, #0x58
    e290: bd70         	pop	{r4, r5, r6, pc}
    e292: 059a         	lsls	r2, r3, #0x16
    e294: d4b3         	bmi	0xe1fe <__smakebuf_r+0x1a> @ imm = #-0x9a
    e296: f023 0303    	bic	r3, r3, #0x3
    e29a: f104 0243    	add.w	r2, r4, #0x43
    e29e: 2101         	movs	r1, #0x1
    e2a0: f043 0302    	orr	r3, r3, #0x2
    e2a4: 6022         	str	r2, [r4]
    e2a6: e9c4 2104    	strd	r2, r1, [r4, #16]
    e2aa: 81a3         	strh	r3, [r4, #0xc]
    e2ac: e7a7         	b	0xe1fe <__smakebuf_r+0x1a> @ imm = #-0xb2
    e2ae: f44f 6200    	mov.w	r2, #0x800
    e2b2: e7ea         	b	0xe28a <__smakebuf_r+0xa6> @ imm = #-0x2c

0000e2b4 <__ascii_wctomb>:
; __ascii_wctomb():
    e2b4: 4603         	mov	r3, r0
    e2b6: b149         	cbz	r1, 0xe2cc <__ascii_wctomb+0x18> @ imm = #0x12
    e2b8: 2aff         	cmp	r2, #0xff
    e2ba: d802         	bhi	0xe2c2 <__ascii_wctomb+0xe> @ imm = #0x4
    e2bc: 2001         	movs	r0, #0x1
    e2be: 700a         	strb	r2, [r1]
    e2c0: 4770         	bx	lr
    e2c2: 228a         	movs	r2, #0x8a
    e2c4: f04f 30ff    	mov.w	r0, #0xffffffff
    e2c8: 601a         	str	r2, [r3]
    e2ca: 4770         	bx	lr
    e2cc: 4608         	mov	r0, r1
    e2ce: 4770         	bx	lr

0000e2d0 <_fstat_r>:
; _fstat_r():
    e2d0: b570         	push	{r4, r5, r6, lr}
    e2d2: 460c         	mov	r4, r1
    e2d4: 4603         	mov	r3, r0
    e2d6: 4d08         	ldr	r5, [pc, #0x20]         @ 0xe2f8 <_fstat_r+0x28>
    e2d8: 2600         	movs	r6, #0x0
    e2da: 4620         	mov	r0, r4
    e2dc: 4611         	mov	r1, r2
    e2de: 461c         	mov	r4, r3
    e2e0: 602e         	str	r6, [r5]
    e2e2: f001 fa47    	bl	0xf774 <_fstat>         @ imm = #0x148e
    e2e6: 1c43         	adds	r3, r0, #0x1
    e2e8: d000         	beq	0xe2ec <_fstat_r+0x1c>  @ imm = #0x0
    e2ea: bd70         	pop	{r4, r5, r6, pc}
    e2ec: 682b         	ldr	r3, [r5]
    e2ee: 2b00         	cmp	r3, #0x0
    e2f0: d0fb         	beq	0xe2ea <_fstat_r+0x1a>  @ imm = #-0xa
    e2f2: 6023         	str	r3, [r4]
    e2f4: bd70         	pop	{r4, r5, r6, pc}
    e2f6: bf00         	nop
    e2f8: 44 18 00 20  	.word	0x20001844

0000e2fc <_isatty_r>:
; _isatty_r():
    e2fc: b538         	push	{r3, r4, r5, lr}
    e2fe: 2200         	movs	r2, #0x0
    e300: 4d06         	ldr	r5, [pc, #0x18]         @ 0xe31c <_isatty_r+0x20>
    e302: 4604         	mov	r4, r0
    e304: 4608         	mov	r0, r1
    e306: 602a         	str	r2, [r5]
    e308: f001 fa44    	bl	0xf794 <_isatty>        @ imm = #0x1488
    e30c: 1c43         	adds	r3, r0, #0x1
    e30e: d000         	beq	0xe312 <_isatty_r+0x16> @ imm = #0x0
    e310: bd38         	pop	{r3, r4, r5, pc}
    e312: 682b         	ldr	r3, [r5]
    e314: 2b00         	cmp	r3, #0x0
    e316: d0fb         	beq	0xe310 <_isatty_r+0x14> @ imm = #-0xa
    e318: 6023         	str	r3, [r4]
    e31a: bd38         	pop	{r3, r4, r5, pc}
    e31c: 44 18 00 20  	.word	0x20001844

0000e320 <__errno>:
; __errno():
    e320: 4b01         	ldr	r3, [pc, #0x4]          @ 0xe328 <__errno+0x8>
    e322: 6818         	ldr	r0, [r3]
    e324: 4770         	bx	lr
    e326: bf00         	nop
    e328: c4 05 00 20  	.word	0x200005c4

0000e32c <_wcsnrtombs_l>:
; _wcsnrtombs_l():
    e32c: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    e330: b08b         	sub	sp, #0x2c
    e332: 461c         	mov	r4, r3
    e334: e9dd 7814    	ldrd	r7, r8, [sp, #80]
    e338: f8dd 9058    	ldr.w	r9, [sp, #0x58]
    e33c: 9002         	str	r0, [sp, #0x8]
    e33e: f1b8 0f00    	cmp.w	r8, #0x0
    e342: d050         	beq	0xe3e6 <_wcsnrtombs_l+0xba> @ imm = #0xa0
    e344: 2900         	cmp	r1, #0x0
    e346: 6816         	ldr	r6, [r2]
    e348: 46c3         	mov	r11, r8
    e34a: f04f 0500    	mov.w	r5, #0x0
    e34e: bf08         	it	eq
    e350: f04f 37ff    	moveq.w	r7, #0xffffffff
    e354: 4692         	mov	r10, r2
    e356: 4688         	mov	r8, r1
    e358: 9601         	str	r6, [sp, #0x4]
    e35a: 9103         	str	r1, [sp, #0xc]
    e35c: e007         	b	0xe36e <_wcsnrtombs_l+0x42> @ imm = #0xe
    e35e: 9b01         	ldr	r3, [sp, #0x4]
    e360: 3c01         	subs	r4, #0x1
    e362: f853 0b04    	ldr	r0, [r3], #4
    e366: 9301         	str	r3, [sp, #0x4]
    e368: 2800         	cmp	r0, #0x0
    e36a: d04a         	beq	0xe402 <_wcsnrtombs_l+0xd6> @ imm = #0x94
    e36c: 4665         	mov	r5, r12
    e36e: 42af         	cmp	r7, r5
    e370: d935         	bls	0xe3de <_wcsnrtombs_l+0xb2> @ imm = #0x6a
    e372: 2c00         	cmp	r4, #0x0
    e374: d033         	beq	0xe3de <_wcsnrtombs_l+0xb2> @ imm = #0x66
    e376: f8db 3000    	ldr.w	r3, [r11]
    e37a: a906         	add	r1, sp, #0x18
    e37c: 9a01         	ldr	r2, [sp, #0x4]
    e37e: 9304         	str	r3, [sp, #0x10]
    e380: f8db 3004    	ldr.w	r3, [r11, #0x4]
    e384: 6812         	ldr	r2, [r2]
    e386: 9305         	str	r3, [sp, #0x14]
    e388: 465b         	mov	r3, r11
    e38a: 9802         	ldr	r0, [sp, #0x8]
    e38c: f8d9 60e0    	ldr.w	r6, [r9, #0xe0]
    e390: 47b0         	blx	r6
    e392: 1c43         	adds	r3, r0, #0x1
    e394: d01c         	beq	0xe3d0 <_wcsnrtombs_l+0xa4> @ imm = #0x38
    e396: eb00 0c05    	add.w	r12, r0, r5
    e39a: 45bc         	cmp	r12, r7
    e39c: d826         	bhi	0xe3ec <_wcsnrtombs_l+0xc0> @ imm = #0x4c
    e39e: 9b03         	ldr	r3, [sp, #0xc]
    e3a0: 2b00         	cmp	r3, #0x0
    e3a2: d0dc         	beq	0xe35e <_wcsnrtombs_l+0x32> @ imm = #-0x48
    e3a4: 2800         	cmp	r0, #0x0
    e3a6: dd0d         	ble	0xe3c4 <_wcsnrtombs_l+0x98> @ imm = #0x1a
    e3a8: f108 32ff    	add.w	r2, r8, #0xffffffff
    e3ac: a906         	add	r1, sp, #0x18
    e3ae: 9e01         	ldr	r6, [sp, #0x4]
    e3b0: eb02 0e00    	add.w	lr, r2, r0
    e3b4: f811 3b01    	ldrb	r3, [r1], #1
    e3b8: f802 3f01    	strb	r3, [r2, #1]!
    e3bc: 4572         	cmp	r2, lr
    e3be: d1f9         	bne	0xe3b4 <_wcsnrtombs_l+0x88> @ imm = #-0xe
    e3c0: 4480         	add	r8, r0
    e3c2: 9601         	str	r6, [sp, #0x4]
    e3c4: f8da 2000    	ldr.w	r2, [r10]
    e3c8: 3204         	adds	r2, #0x4
    e3ca: f8ca 2000    	str.w	r2, [r10]
    e3ce: e7c6         	b	0xe35e <_wcsnrtombs_l+0x32> @ imm = #-0x74
    e3d0: 218a         	movs	r1, #0x8a
    e3d2: 2200         	movs	r2, #0x0
    e3d4: 9b02         	ldr	r3, [sp, #0x8]
    e3d6: 4605         	mov	r5, r0
    e3d8: 6019         	str	r1, [r3]
    e3da: f8cb 2000    	str.w	r2, [r11]
    e3de: 4628         	mov	r0, r5
    e3e0: b00b         	add	sp, #0x2c
    e3e2: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    e3e6: f500 7886    	add.w	r8, r0, #0x10c
    e3ea: e7ab         	b	0xe344 <_wcsnrtombs_l+0x18> @ imm = #-0xaa
    e3ec: 46d8         	mov	r8, r11
    e3ee: f8dd a010    	ldr.w	r10, [sp, #0x10]
    e3f2: f8dd b014    	ldr.w	r11, [sp, #0x14]
    e3f6: 4628         	mov	r0, r5
    e3f8: e9c8 ab00    	strd	r10, r11, [r8]
    e3fc: b00b         	add	sp, #0x2c
    e3fe: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    e402: 9903         	ldr	r1, [sp, #0xc]
    e404: 46d8         	mov	r8, r11
    e406: b109         	cbz	r1, 0xe40c <_wcsnrtombs_l+0xe0> @ imm = #0x2
    e408: f8ca 0000    	str.w	r0, [r10]
    e40c: f10c 35ff    	add.w	r5, r12, #0xffffffff
    e410: 2200         	movs	r2, #0x0
    e412: 4628         	mov	r0, r5
    e414: f8c8 2000    	str.w	r2, [r8]
    e418: b00b         	add	sp, #0x2c
    e41a: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    e41e: bf00         	nop

0000e420 <_wcsnrtombs_r>:
; _wcsnrtombs_r():
    e420: b510         	push	{r4, lr}
    e422: b084         	sub	sp, #0x10
    e424: 4c05         	ldr	r4, [pc, #0x14]         @ 0xe43c <_wcsnrtombs_r+0x1c>
    e426: 9806         	ldr	r0, [sp, #0x18]
    e428: 9000         	str	r0, [sp]
    e42a: 9807         	ldr	r0, [sp, #0x1c]
    e42c: 9001         	str	r0, [sp, #0x4]
    e42e: 4804         	ldr	r0, [pc, #0x10]         @ 0xe440 <_wcsnrtombs_r+0x20>
    e430: 6800         	ldr	r0, [r0]
    e432: 9402         	str	r4, [sp, #0x8]
    e434: f7ff ff7a    	bl	0xe32c <_wcsnrtombs_l>  @ imm = #-0x10c
    e438: b004         	add	sp, #0x10
    e43a: bd10         	pop	{r4, pc}
    e43c: 20 0b 00 20  	.word	0x20000b20
    e440: c4 05 00 20  	.word	0x200005c4

0000e444 <__assert_func>:
; __assert_func():
    e444: 4d0a         	ldr	r5, [pc, #0x28]         @ 0xe470 <__assert_func+0x2c>
    e446: 4614         	mov	r4, r2
    e448: 461a         	mov	r2, r3
    e44a: 4603         	mov	r3, r0
    e44c: 682e         	ldr	r6, [r5]
    e44e: 460d         	mov	r5, r1
    e450: b500         	push	{lr}
    e452: 68f0         	ldr	r0, [r6, #0xc]
    e454: b085         	sub	sp, #0x14
    e456: b144         	cbz	r4, 0xe46a <__assert_func+0x26> @ imm = #0x10
    e458: 4906         	ldr	r1, [pc, #0x18]         @ 0xe474 <__assert_func+0x30>
    e45a: 9500         	str	r5, [sp]
    e45c: e9cd 1401    	strd	r1, r4, [sp, #4]
    e460: 4905         	ldr	r1, [pc, #0x14]         @ 0xe478 <__assert_func+0x34>
    e462: f000 f845    	bl	0xe4f0 <fiprintf>       @ imm = #0x8a
    e466: f7fa fb39    	bl	0x8adc <abort>          @ imm = #-0x598e
    e46a: 4904         	ldr	r1, [pc, #0x10]         @ 0xe47c <__assert_func+0x38>
    e46c: 460c         	mov	r4, r1
    e46e: e7f4         	b	0xe45a <__assert_func+0x16> @ imm = #-0x18
    e470: c4 05 00 20  	.word	0x200005c4
    e474: a8 1e 21 80  	.word	0x80211ea8
    e478: b8 1e 21 80  	.word	0x80211eb8
    e47c: b4 1e 21 80  	.word	0x80211eb4

0000e480 <_calloc_r>:
; _calloc_r():
    e480: b538         	push	{r3, r4, r5, lr}
    e482: fba1 1402    	umull	r1, r4, r1, r2
    e486: bb34         	cbnz	r4, 0xe4d6 <_calloc_r+0x56> @ imm = #0x4c
    e488: f7fa fe62    	bl	0x9150 <_malloc_r>      @ imm = #-0x533c
    e48c: 4605         	mov	r5, r0
    e48e: b330         	cbz	r0, 0xe4de <_calloc_r+0x5e> @ imm = #0x4c
    e490: f850 2c04    	ldr	r2, [r0, #-4]
    e494: f022 0203    	bic	r2, r2, #0x3
    e498: 3a04         	subs	r2, #0x4
    e49a: 2a24         	cmp	r2, #0x24
    e49c: d80c         	bhi	0xe4b8 <_calloc_r+0x38> @ imm = #0x18
    e49e: 2a13         	cmp	r2, #0x13
    e4a0: d90f         	bls	0xe4c2 <_calloc_r+0x42> @ imm = #0x1e
    e4a2: 2a1b         	cmp	r2, #0x1b
    e4a4: e9c0 4400    	strd	r4, r4, [r0]
    e4a8: d912         	bls	0xe4d0 <_calloc_r+0x50> @ imm = #0x24
    e4aa: 2a24         	cmp	r2, #0x24
    e4ac: e9c0 4402    	strd	r4, r4, [r0, #8]
    e4b0: d018         	beq	0xe4e4 <_calloc_r+0x64> @ imm = #0x30
    e4b2: f100 0210    	add.w	r2, r0, #0x10
    e4b6: e005         	b	0xe4c4 <_calloc_r+0x44> @ imm = #0xa
    e4b8: 4621         	mov	r1, r4
    e4ba: f7fa fc75    	bl	0x8da8 <memset>         @ imm = #-0x5716
    e4be: 4628         	mov	r0, r5
    e4c0: bd38         	pop	{r3, r4, r5, pc}
    e4c2: 4602         	mov	r2, r0
    e4c4: 2300         	movs	r3, #0x0
    e4c6: 4628         	mov	r0, r5
    e4c8: e9c2 3300    	strd	r3, r3, [r2]
    e4cc: 6093         	str	r3, [r2, #0x8]
    e4ce: bd38         	pop	{r3, r4, r5, pc}
    e4d0: f100 0208    	add.w	r2, r0, #0x8
    e4d4: e7f6         	b	0xe4c4 <_calloc_r+0x44> @ imm = #-0x14
    e4d6: f7ff ff23    	bl	0xe320 <__errno>        @ imm = #-0x1ba
    e4da: 230c         	movs	r3, #0xc
    e4dc: 6003         	str	r3, [r0]
    e4de: 2500         	movs	r5, #0x0
    e4e0: 4628         	mov	r0, r5
    e4e2: bd38         	pop	{r3, r4, r5, pc}
    e4e4: f100 0218    	add.w	r2, r0, #0x18
    e4e8: e9c0 4404    	strd	r4, r4, [r0, #16]
    e4ec: e7ea         	b	0xe4c4 <_calloc_r+0x44> @ imm = #-0x2c
    e4ee: bf00         	nop

0000e4f0 <fiprintf>:
; fiprintf():
    e4f0: b40e         	push	{r1, r2, r3}
    e4f2: b510         	push	{r4, lr}
    e4f4: b083         	sub	sp, #0xc
    e4f6: 4c07         	ldr	r4, [pc, #0x1c]         @ 0xe514 <fiprintf+0x24>
    e4f8: 4601         	mov	r1, r0
    e4fa: ab05         	add	r3, sp, #0x14
    e4fc: 6820         	ldr	r0, [r4]
    e4fe: f853 2b04    	ldr	r2, [r3], #4
    e502: 9301         	str	r3, [sp, #0x4]
    e504: f000 f808    	bl	0xe518 <_vfiprintf_r>   @ imm = #0x10
    e508: b003         	add	sp, #0xc
    e50a: e8bd 4010    	pop.w	{r4, lr}
    e50e: b003         	add	sp, #0xc
    e510: 4770         	bx	lr
    e512: bf00         	nop
    e514: c4 05 00 20  	.word	0x200005c4

0000e518 <_vfiprintf_r>:
; _vfiprintf_r():
    e518: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    e51c: b0c5         	sub	sp, #0x114
    e51e: 4683         	mov	r11, r0
    e520: 4692         	mov	r10, r2
    e522: 2208         	movs	r2, #0x8
    e524: af14         	add	r7, sp, #0x50
    e526: 9104         	str	r1, [sp, #0x10]
    e528: 2100         	movs	r1, #0x0
    e52a: 461c         	mov	r4, r3
    e52c: 4638         	mov	r0, r7
    e52e: 930b         	str	r3, [sp, #0x2c]
    e530: f7fa fc3a    	bl	0x8da8 <memset>         @ imm = #-0x578c
    e534: f1bb 0f00    	cmp.w	r11, #0x0
    e538: d004         	beq	0xe544 <_vfiprintf_r+0x2c> @ imm = #0x8
    e53a: f8db 3034    	ldr.w	r3, [r11, #0x34]
    e53e: 2b00         	cmp	r3, #0x0
    e540: f000 8761    	beq.w	0xf406 <_vfiprintf_r+0xeee> @ imm = #0xec2
    e544: 9a04         	ldr	r2, [sp, #0x10]
    e546: 6e53         	ldr	r3, [r2, #0x64]
    e548: f9b2 200c    	ldrsh.w	r2, [r2, #0xc]
    e54c: 07d9         	lsls	r1, r3, #0x1f
    e54e: f140 813a    	bpl.w	0xe7c6 <_vfiprintf_r+0x2ae> @ imm = #0x274
    e552: 0496         	lsls	r6, r2, #0x12
    e554: f100 8553    	bmi.w	0xeffe <_vfiprintf_r+0xae6> @ imm = #0xaa6
    e558: f442 5200    	orr	r2, r2, #0x2000
    e55c: 9904         	ldr	r1, [sp, #0x10]
    e55e: f423 5300    	bic	r3, r3, #0x2000
    e562: 818a         	strh	r2, [r1, #0xc]
    e564: b212         	sxth	r2, r2
    e566: 664b         	str	r3, [r1, #0x64]
    e568: 0713         	lsls	r3, r2, #0x1c
    e56a: f140 80b9    	bpl.w	0xe6e0 <_vfiprintf_r+0x1c8> @ imm = #0x172
    e56e: 9b04         	ldr	r3, [sp, #0x10]
    e570: 691b         	ldr	r3, [r3, #0x10]
    e572: 2b00         	cmp	r3, #0x0
    e574: f000 80b4    	beq.w	0xe6e0 <_vfiprintf_r+0x1c8> @ imm = #0x168
    e578: f002 031a    	and	r3, r2, #0x1a
    e57c: 2b0a         	cmp	r3, #0xa
    e57e: f000 80be    	beq.w	0xe6fe <_vfiprintf_r+0x1e6> @ imm = #0x17c
    e582: aa1b         	add	r2, sp, #0x6c
    e584: 2300         	movs	r3, #0x0
    e586: 4691         	mov	r9, r2
    e588: 930d         	str	r3, [sp, #0x34]
    e58a: 9218         	str	r2, [sp, #0x60]
    e58c: 9307         	str	r3, [sp, #0x1c]
    e58e: e9cd 3319    	strd	r3, r3, [sp, #100]
    e592: e9cd 330e    	strd	r3, r3, [sp, #56]
    e596: 4655         	mov	r5, r10
    e598: 4b95         	ldr	r3, [pc, #0x254]        @ 0xe7f0 <_vfiprintf_r+0x2d8>
    e59a: f8d3 40e4    	ldr.w	r4, [r3, #0xe4]
    e59e: f7fe f805    	bl	0xc5ac <__locale_mb_cur_max> @ imm = #-0x1ff6
    e5a2: 462a         	mov	r2, r5
    e5a4: 4603         	mov	r3, r0
    e5a6: a912         	add	r1, sp, #0x48
    e5a8: 4658         	mov	r0, r11
    e5aa: 9700         	str	r7, [sp]
    e5ac: 47a0         	blx	r4
    e5ae: 2800         	cmp	r0, #0x0
    e5b0: 4603         	mov	r3, r0
    e5b2: f000 80c3    	beq.w	0xe73c <_vfiprintf_r+0x224> @ imm = #0x186
    e5b6: f2c0 80b9    	blt.w	0xe72c <_vfiprintf_r+0x214> @ imm = #0x172
    e5ba: 9a12         	ldr	r2, [sp, #0x48]
    e5bc: 2a25         	cmp	r2, #0x25
    e5be: d001         	beq	0xe5c4 <_vfiprintf_r+0xac> @ imm = #0x2
    e5c0: 441d         	add	r5, r3
    e5c2: e7e9         	b	0xe598 <_vfiprintf_r+0x80> @ imm = #-0x2e
    e5c4: ebb5 060a    	subs.w	r6, r5, r10
    e5c8: 4604         	mov	r4, r0
    e5ca: f040 80bb    	bne.w	0xe744 <_vfiprintf_r+0x22c> @ imm = #0x176
    e5ce: 2300         	movs	r3, #0x0
    e5d0: f04f 32ff    	mov.w	r2, #0xffffffff
    e5d4: f105 0a01    	add.w	r10, r5, #0x1
    e5d8: 4619         	mov	r1, r3
    e5da: f88d 3043    	strb.w	r3, [sp, #0x43]
    e5de: 9308         	str	r3, [sp, #0x20]
    e5e0: 786b         	ldrb	r3, [r5, #0x1]
    e5e2: 9206         	str	r2, [sp, #0x18]
    e5e4: 9103         	str	r1, [sp, #0xc]
    e5e6: f10a 0a01    	add.w	r10, r10, #0x1
    e5ea: f1a3 0220    	sub.w	r2, r3, #0x20
    e5ee: 2a5a         	cmp	r2, #0x5a
    e5f0: f200 8100    	bhi.w	0xe7f4 <_vfiprintf_r+0x2dc> @ imm = #0x200
    e5f4: e8df f012    	tbh	[pc, r2, lsl #1]
    e5f8: 8e 03 fe 00  	.word	0x00fe038e
    e5fc: fe 00 87 03  	.word	0x038700fe
    e600: fe 00 fe 00  	.word	0x00fe00fe
    e604: fe 00 67 03  	.word	0x036700fe
    e608: fe 00 fe 00  	.word	0x00fe00fe
    e60c: 24 02 36 02  	.word	0x02360224
    e610: fe 00 2f 02  	.word	0x022f00fe
    e614: a0 03 fe 00  	.word	0x00fe03a0
    e618: 99 03 5b 00  	.word	0x005b0399
    e61c: 5b 00 5b 00  	.word	0x005b005b
    e620: 5b 00 5b 00  	.word	0x005b005b
    e624: 5b 00 5b 00  	.word	0x005b005b
    e628: 5b 00 5b 00  	.word	0x005b005b
    e62c: fe 00 fe 00  	.word	0x00fe00fe
    e630: fe 00 fe 00  	.word	0x00fe00fe
    e634: fe 00 fe 00  	.word	0x00fe00fe
    e638: fe 00 fe 00  	.word	0x00fe00fe
    e63c: fe 00 ed 01  	.word	0x01ed00fe
    e640: 26 03 fe 00  	.word	0x00fe0326
    e644: fe 00 fe 00  	.word	0x00fe00fe
    e648: fe 00 fe 00  	.word	0x00fe00fe
    e64c: fe 00 fe 00  	.word	0x00fe00fe
    e650: fe 00 fe 00  	.word	0x00fe00fe
    e654: fe 00 3c 02  	.word	0x023c00fe
    e658: fe 00 fe 00  	.word	0x00fe00fe
    e65c: fe 00 bd 01  	.word	0x01bd00fe
    e660: fe 00 9c 02  	.word	0x029c00fe
    e664: fe 00 fe 00  	.word	0x00fe00fe
    e668: d8 05 fe 00  	.word	0x00fe05d8
    e66c: fe 00 fe 00  	.word	0x00fe00fe
    e670: fe 00 fe 00  	.word	0x00fe00fe
    e674: fe 00 fe 00  	.word	0x00fe00fe
    e678: fe 00 fe 00  	.word	0x00fe00fe
    e67c: fe 00 ed 01  	.word	0x01ed00fe
    e680: 83 01 fe 00  	.word	0x00fe0183
    e684: fe 00 fe 00  	.word	0x00fe00fe
    e688: 5d 03 83 01  	.word	0x0183035d
    e68c: 6d 00 fe 00  	.word	0x00fe006d
    e690: 1c 03 fe 00  	.word	0x00fe031c
    e694: 0e 03 f9 02  	.word	0x02f9030e
    e698: c6 02 6d 00  	.word	0x006d02c6
    e69c: fe 00 bd 01  	.word	0x01bd00fe
    e6a0: 6a 00 6e 02  	.word	0x026e006a
    e6a4: fe 00 fe 00  	.word	0x00fe00fe
    e6a8: 1b 06 fe 00  	.word	0x00fe061b
    e6ac: 6a 00        	.short	0x006a
    e6ae: f1a3 0230    	sub.w	r2, r3, #0x30
    e6b2: 2100         	movs	r1, #0x0
    e6b4: eb01 0181    	add.w	r1, r1, r1, lsl #2
    e6b8: f81a 3b01    	ldrb	r3, [r10], #1
    e6bc: eb02 0141    	add.w	r1, r2, r1, lsl #1
    e6c0: f1a3 0230    	sub.w	r2, r3, #0x30
    e6c4: 2a09         	cmp	r2, #0x9
    e6c6: d9f5         	bls	0xe6b4 <_vfiprintf_r+0x19c> @ imm = #-0x16
    e6c8: 9108         	str	r1, [sp, #0x20]
    e6ca: e78e         	b	0xe5ea <_vfiprintf_r+0xd2> @ imm = #-0xe4
    e6cc: f89a 3000    	ldrb.w	r3, [r10]
    e6d0: e789         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0xee
    e6d2: 9b03         	ldr	r3, [sp, #0xc]
    e6d4: f043 0320    	orr	r3, r3, #0x20
    e6d8: 9303         	str	r3, [sp, #0xc]
    e6da: f89a 3000    	ldrb.w	r3, [r10]
    e6de: e782         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0xfc
    e6e0: 9d04         	ldr	r5, [sp, #0x10]
    e6e2: 4658         	mov	r0, r11
    e6e4: 4629         	mov	r1, r5
    e6e6: f7fd fe31    	bl	0xc34c <__swsetup_r>    @ imm = #-0x239e
    e6ea: 2800         	cmp	r0, #0x0
    e6ec: f040 87d0    	bne.w	0xf690 <_vfiprintf_r+0x1178> @ imm = #0xfa0
    e6f0: f9b5 200c    	ldrsh.w	r2, [r5, #0xc]
    e6f4: f002 031a    	and	r3, r2, #0x1a
    e6f8: 2b0a         	cmp	r3, #0xa
    e6fa: f47f af42    	bne.w	0xe582 <_vfiprintf_r+0x6a> @ imm = #-0x17c
    e6fe: 9904         	ldr	r1, [sp, #0x10]
    e700: f9b1 300e    	ldrsh.w	r3, [r1, #0xe]
    e704: 2b00         	cmp	r3, #0x0
    e706: f6ff af3c    	blt.w	0xe582 <_vfiprintf_r+0x6a> @ imm = #-0x188
    e70a: 6e4b         	ldr	r3, [r1, #0x64]
    e70c: 07dd         	lsls	r5, r3, #0x1f
    e70e: d402         	bmi	0xe716 <_vfiprintf_r+0x1fe> @ imm = #0x4
    e710: 0590         	lsls	r0, r2, #0x16
    e712: f140 8718    	bpl.w	0xf546 <_vfiprintf_r+0x102e> @ imm = #0xe30
    e716: 4623         	mov	r3, r4
    e718: 4652         	mov	r2, r10
    e71a: 9904         	ldr	r1, [sp, #0x10]
    e71c: 4658         	mov	r0, r11
    e71e: f000 ffdf    	bl	0xf6e0 <__sbprintf>     @ imm = #0xfbe
    e722: 9007         	str	r0, [sp, #0x1c]
    e724: 9807         	ldr	r0, [sp, #0x1c]
    e726: b045         	add	sp, #0x114
    e728: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    e72c: 2208         	movs	r2, #0x8
    e72e: 2100         	movs	r1, #0x0
    e730: 4638         	mov	r0, r7
    e732: f7fa fb39    	bl	0x8da8 <memset>         @ imm = #-0x598e
    e736: 2301         	movs	r3, #0x1
    e738: 441d         	add	r5, r3
    e73a: e72d         	b	0xe598 <_vfiprintf_r+0x80> @ imm = #-0x1a6
    e73c: ebb5 060a    	subs.w	r6, r5, r10
    e740: 4604         	mov	r4, r0
    e742: d011         	beq	0xe768 <_vfiprintf_r+0x250> @ imm = #0x22
    e744: 9b1a         	ldr	r3, [sp, #0x68]
    e746: 4433         	add	r3, r6
    e748: 931a         	str	r3, [sp, #0x68]
    e74a: 9b19         	ldr	r3, [sp, #0x64]
    e74c: 3301         	adds	r3, #0x1
    e74e: 2b07         	cmp	r3, #0x7
    e750: 9319         	str	r3, [sp, #0x64]
    e752: e9c9 a600    	strd	r10, r6, [r9]
    e756: dc11         	bgt	0xe77c <_vfiprintf_r+0x264> @ imm = #0x22
    e758: f109 0908    	add.w	r9, r9, #0x8
    e75c: 9b07         	ldr	r3, [sp, #0x1c]
    e75e: 4433         	add	r3, r6
    e760: 9307         	str	r3, [sp, #0x1c]
    e762: 2c00         	cmp	r4, #0x0
    e764: f47f af33    	bne.w	0xe5ce <_vfiprintf_r+0xb6> @ imm = #-0x19a
    e768: 9b1a         	ldr	r3, [sp, #0x68]
    e76a: 2b00         	cmp	r3, #0x0
    e76c: f040 873f    	bne.w	0xf5ee <_vfiprintf_r+0x10d6> @ imm = #0xe7e
    e770: 2200         	movs	r2, #0x0
    e772: 9b04         	ldr	r3, [sp, #0x10]
    e774: 9219         	str	r2, [sp, #0x64]
    e776: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    e77a: e019         	b	0xe7b0 <_vfiprintf_r+0x298> @ imm = #0x32
    e77c: aa18         	add	r2, sp, #0x60
    e77e: 9904         	ldr	r1, [sp, #0x10]
    e780: 4658         	mov	r0, r11
    e782: f7fd fc0f    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x27e2
    e786: b980         	cbnz	r0, 0xe7aa <_vfiprintf_r+0x292> @ imm = #0x20
    e788: f10d 096c    	add.w	r9, sp, #0x6c
    e78c: e7e6         	b	0xe75c <_vfiprintf_r+0x244> @ imm = #-0x34
    e78e: aa18         	add	r2, sp, #0x60
    e790: 9904         	ldr	r1, [sp, #0x10]
    e792: 4658         	mov	r0, r11
    e794: f7fd fc06    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x27f4
    e798: 2800         	cmp	r0, #0x0
    e79a: f000 809b    	beq.w	0xe8d4 <_vfiprintf_r+0x3bc> @ imm = #0x136
    e79e: 9b09         	ldr	r3, [sp, #0x24]
    e7a0: b11b         	cbz	r3, 0xe7aa <_vfiprintf_r+0x292> @ imm = #0x6
    e7a2: 9909         	ldr	r1, [sp, #0x24]
    e7a4: 4658         	mov	r0, r11
    e7a6: f7ff f83b    	bl	0xd820 <_free_r>        @ imm = #-0xf8a
    e7aa: 9b04         	ldr	r3, [sp, #0x10]
    e7ac: f9b3 300c    	ldrsh.w	r3, [r3, #0xc]
    e7b0: 9a04         	ldr	r2, [sp, #0x10]
    e7b2: 6e52         	ldr	r2, [r2, #0x64]
    e7b4: 07d0         	lsls	r0, r2, #0x1f
    e7b6: f140 8098    	bpl.w	0xe8ea <_vfiprintf_r+0x3d2> @ imm = #0x130
    e7ba: 065b         	lsls	r3, r3, #0x19
    e7bc: d414         	bmi	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #0x28
    e7be: 9807         	ldr	r0, [sp, #0x1c]
    e7c0: b045         	add	sp, #0x114
    e7c2: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
    e7c6: 0590         	lsls	r0, r2, #0x16
    e7c8: f140 8129    	bpl.w	0xea1e <_vfiprintf_r+0x506> @ imm = #0x252
    e7cc: 0491         	lsls	r1, r2, #0x12
    e7ce: f57f aec3    	bpl.w	0xe558 <_vfiprintf_r+0x40> @ imm = #-0x27a
    e7d2: 049e         	lsls	r6, r3, #0x12
    e7d4: f57f aec8    	bpl.w	0xe568 <_vfiprintf_r+0x50> @ imm = #-0x270
    e7d8: 9b04         	ldr	r3, [sp, #0x10]
    e7da: 899b         	ldrh	r3, [r3, #0xc]
    e7dc: 059a         	lsls	r2, r3, #0x16
    e7de: d403         	bmi	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #0x6
    e7e0: 9b04         	ldr	r3, [sp, #0x10]
    e7e2: 6d98         	ldr	r0, [r3, #0x58]
    e7e4: f7fa fba0    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x58c0
    e7e8: f04f 33ff    	mov.w	r3, #0xffffffff
    e7ec: 9307         	str	r3, [sp, #0x1c]
    e7ee: e7e6         	b	0xe7be <_vfiprintf_r+0x2a6> @ imm = #-0x34
    e7f0: 20 0b 00 20  	.word	0x20000b20
    e7f4: 2b00         	cmp	r3, #0x0
    e7f6: d0b7         	beq	0xe768 <_vfiprintf_r+0x250> @ imm = #-0x92
    e7f8: 2201         	movs	r2, #0x1
    e7fa: f88d 30ac    	strb.w	r3, [sp, #0xac]
    e7fe: ad2b         	add	r5, sp, #0xac
    e800: 2300         	movs	r3, #0x0
    e802: 920a         	str	r2, [sp, #0x28]
    e804: f88d 3043    	strb.w	r3, [sp, #0x43]
    e808: 9309         	str	r3, [sp, #0x24]
    e80a: e9cd 2305    	strd	r2, r3, [sp, #20]
    e80e: 9c03         	ldr	r4, [sp, #0xc]
    e810: e9dd 3019    	ldrd	r3, r0, [sp, #100]
    e814: f014 0884    	ands	r8, r4, #0x84
    e818: 4601         	mov	r1, r0
    e81a: 461a         	mov	r2, r3
    e81c: d12e         	bne	0xe87c <_vfiprintf_r+0x364> @ imm = #0x5c
    e81e: 9c08         	ldr	r4, [sp, #0x20]
    e820: 9e05         	ldr	r6, [sp, #0x14]
    e822: 1ba4         	subs	r4, r4, r6
    e824: 2c00         	cmp	r4, #0x0
    e826: f300 8392    	bgt.w	0xef4e <_vfiprintf_r+0xa36> @ imm = #0x724
    e82a: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    e82e: b34b         	cbz	r3, 0xe884 <_vfiprintf_r+0x36c> @ imm = #0x52
    e830: f04f 0800    	mov.w	r8, #0x0
    e834: f8cd 8030    	str.w	r8, [sp, #0x30]
    e838: 3201         	adds	r2, #0x1
    e83a: 2301         	movs	r3, #0x1
    e83c: 3101         	adds	r1, #0x1
    e83e: f8c9 3004    	str.w	r3, [r9, #0x4]
    e842: 2a07         	cmp	r2, #0x7
    e844: f10d 0343    	add.w	r3, sp, #0x43
    e848: e9cd 2119    	strd	r2, r1, [sp, #100]
    e84c: f8c9 3000    	str.w	r3, [r9]
    e850: f300 8315    	bgt.w	0xee7e <_vfiprintf_r+0x966> @ imm = #0x62a
    e854: f109 0908    	add.w	r9, r9, #0x8
    e858: 9b0c         	ldr	r3, [sp, #0x30]
    e85a: b17b         	cbz	r3, 0xe87c <_vfiprintf_r+0x364> @ imm = #0x1e
    e85c: 3201         	adds	r2, #0x1
    e85e: ab11         	add	r3, sp, #0x44
    e860: 3102         	adds	r1, #0x2
    e862: f8c9 3000    	str.w	r3, [r9]
    e866: 2a07         	cmp	r2, #0x7
    e868: f04f 0302    	mov.w	r3, #0x2
    e86c: e9cd 2119    	strd	r2, r1, [sp, #100]
    e870: f8c9 3004    	str.w	r3, [r9, #0x4]
    e874: f300 82f6    	bgt.w	0xee64 <_vfiprintf_r+0x94c> @ imm = #0x5ec
    e878: f109 0908    	add.w	r9, r9, #0x8
    e87c: f1b8 0f80    	cmp.w	r8, #0x80
    e880: f000 8275    	beq.w	0xed6e <_vfiprintf_r+0x856> @ imm = #0x4ea
    e884: 9b06         	ldr	r3, [sp, #0x18]
    e886: 980a         	ldr	r0, [sp, #0x28]
    e888: 1a1c         	subs	r4, r3, r0
    e88a: 2c00         	cmp	r4, #0x0
    e88c: f300 82ad    	bgt.w	0xedea <_vfiprintf_r+0x8d2> @ imm = #0x55a
    e890: 9b0a         	ldr	r3, [sp, #0x28]
    e892: 3201         	adds	r2, #0x1
    e894: f8c9 5000    	str.w	r5, [r9]
    e898: 4419         	add	r1, r3
    e89a: 2a07         	cmp	r2, #0x7
    e89c: f8c9 3004    	str.w	r3, [r9, #0x4]
    e8a0: e9cd 2119    	strd	r2, r1, [sp, #100]
    e8a4: f300 82d2    	bgt.w	0xee4c <_vfiprintf_r+0x934> @ imm = #0x5a4
    e8a8: f109 0908    	add.w	r9, r9, #0x8
    e8ac: 9b03         	ldr	r3, [sp, #0xc]
    e8ae: 075c         	lsls	r4, r3, #0x1d
    e8b0: d505         	bpl	0xe8be <_vfiprintf_r+0x3a6> @ imm = #0xa
    e8b2: 9b08         	ldr	r3, [sp, #0x20]
    e8b4: 9a05         	ldr	r2, [sp, #0x14]
    e8b6: 1a9c         	subs	r4, r3, r2
    e8b8: 2c00         	cmp	r4, #0x0
    e8ba: f300 82ed    	bgt.w	0xee98 <_vfiprintf_r+0x980> @ imm = #0x5da
    e8be: 9805         	ldr	r0, [sp, #0x14]
    e8c0: e9dd 3207    	ldrd	r3, r2, [sp, #28]
    e8c4: 4282         	cmp	r2, r0
    e8c6: bfac         	ite	ge
    e8c8: 189b         	addge	r3, r3, r2
    e8ca: 181b         	addlt	r3, r3, r0
    e8cc: 9307         	str	r3, [sp, #0x1c]
    e8ce: 2900         	cmp	r1, #0x0
    e8d0: f47f af5d    	bne.w	0xe78e <_vfiprintf_r+0x276> @ imm = #-0x146
    e8d4: 2300         	movs	r3, #0x0
    e8d6: 9319         	str	r3, [sp, #0x64]
    e8d8: 9b09         	ldr	r3, [sp, #0x24]
    e8da: b11b         	cbz	r3, 0xe8e4 <_vfiprintf_r+0x3cc> @ imm = #0x6
    e8dc: 9909         	ldr	r1, [sp, #0x24]
    e8de: 4658         	mov	r0, r11
    e8e0: f7fe ff9e    	bl	0xd820 <_free_r>        @ imm = #-0x10c4
    e8e4: f10d 096c    	add.w	r9, sp, #0x6c
    e8e8: e655         	b	0xe596 <_vfiprintf_r+0x7e> @ imm = #-0x356
    e8ea: 059a         	lsls	r2, r3, #0x16
    e8ec: f53f af65    	bmi.w	0xe7ba <_vfiprintf_r+0x2a2> @ imm = #-0x136
    e8f0: 9c04         	ldr	r4, [sp, #0x10]
    e8f2: 6da0         	ldr	r0, [r4, #0x58]
    e8f4: f7fa fb18    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x59d0
    e8f8: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
    e8fc: e75d         	b	0xe7ba <_vfiprintf_r+0x2a2> @ imm = #-0x146
    e8fe: 9b03         	ldr	r3, [sp, #0xc]
    e900: 069b         	lsls	r3, r3, #0x1a
    e902: f140 842e    	bpl.w	0xf162 <_vfiprintf_r+0xc4a> @ imm = #0x85c
    e906: 9b0b         	ldr	r3, [sp, #0x2c]
    e908: 3307         	adds	r3, #0x7
    e90a: f023 0307    	bic	r3, r3, #0x7
    e90e: 461a         	mov	r2, r3
    e910: 685b         	ldr	r3, [r3, #0x4]
    e912: f852 4b08    	ldr	r4, [r2], #8
    e916: 469e         	mov	lr, r3
    e918: 920b         	str	r2, [sp, #0x2c]
    e91a: 2b00         	cmp	r3, #0x0
    e91c: f2c0 81a4    	blt.w	0xec68 <_vfiprintf_r+0x750> @ imm = #0x348
    e920: 9b06         	ldr	r3, [sp, #0x18]
    e922: 2b00         	cmp	r3, #0x0
    e924: f2c0 81ad    	blt.w	0xec82 <_vfiprintf_r+0x76a> @ imm = #0x35a
    e928: 9a03         	ldr	r2, [sp, #0xc]
    e92a: f022 0280    	bic	r2, r2, #0x80
    e92e: 9203         	str	r2, [sp, #0xc]
    e930: 2b00         	cmp	r3, #0x0
    e932: f040 81a6    	bne.w	0xec82 <_vfiprintf_r+0x76a> @ imm = #0x34c
    e936: ea54 030e    	orrs.w	r3, r4, lr
    e93a: bf14         	ite	ne
    e93c: 2201         	movne	r2, #0x1
    e93e: 2200         	moveq	r2, #0x0
    e940: f040 819f    	bne.w	0xec82 <_vfiprintf_r+0x76a> @ imm = #0x33e
    e944: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    e948: 2b00         	cmp	r3, #0x0
    e94a: f000 8115    	beq.w	0xeb78 <_vfiprintf_r+0x660> @ imm = #0x22a
    e94e: 2101         	movs	r1, #0x1
    e950: ad44         	add	r5, sp, #0x110
    e952: 9209         	str	r2, [sp, #0x24]
    e954: 9105         	str	r1, [sp, #0x14]
    e956: 920a         	str	r2, [sp, #0x28]
    e958: 9206         	str	r2, [sp, #0x18]
    e95a: 9c03         	ldr	r4, [sp, #0xc]
    e95c: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    e960: f014 0884    	ands	r8, r4, #0x84
    e964: 4608         	mov	r0, r1
    e966: 4613         	mov	r3, r2
    e968: f43f af59    	beq.w	0xe81e <_vfiprintf_r+0x306> @ imm = #-0x14e
    e96c: 2300         	movs	r3, #0x0
    e96e: 930c         	str	r3, [sp, #0x30]
    e970: e762         	b	0xe838 <_vfiprintf_r+0x320> @ imm = #-0x13c
    e972: 2200         	movs	r2, #0x0
    e974: f8dd 802c    	ldr.w	r8, [sp, #0x2c]
    e978: f88d 2043    	strb.w	r2, [sp, #0x43]
    e97c: f858 2b04    	ldr	r2, [r8], #4
    e980: 9209         	str	r2, [sp, #0x24]
    e982: 2a00         	cmp	r2, #0x0
    e984: f000 8558    	beq.w	0xf438 <_vfiprintf_r+0xf20> @ imm = #0xab0
    e988: 2b53         	cmp	r3, #0x53
    e98a: f000 8490    	beq.w	0xf2ae <_vfiprintf_r+0xd96> @ imm = #0x920
    e98e: 9b03         	ldr	r3, [sp, #0xc]
    e990: f013 0410    	ands	r4, r3, #0x10
    e994: f040 848b    	bne.w	0xf2ae <_vfiprintf_r+0xd96> @ imm = #0x916
    e998: 9a06         	ldr	r2, [sp, #0x18]
    e99a: 2a00         	cmp	r2, #0x0
    e99c: f2c0 85ba    	blt.w	0xf514 <_vfiprintf_r+0xffc> @ imm = #0xb74
    e9a0: 4621         	mov	r1, r4
    e9a2: 9809         	ldr	r0, [sp, #0x24]
    e9a4: f7fd fe7e    	bl	0xc6a4 <memchr>         @ imm = #-0x2304
    e9a8: f89d 2043    	ldrb.w	r2, [sp, #0x43]
    e9ac: 9d09         	ldr	r5, [sp, #0x24]
    e9ae: 2800         	cmp	r0, #0x0
    e9b0: f000 864e    	beq.w	0xf650 <_vfiprintf_r+0x1138> @ imm = #0xc9c
    e9b4: 1b43         	subs	r3, r0, r5
    e9b6: 930a         	str	r3, [sp, #0x28]
    e9b8: ea23 73e3    	bic.w	r3, r3, r3, asr #31
    e9bc: 9305         	str	r3, [sp, #0x14]
    e9be: 2a00         	cmp	r2, #0x0
    e9c0: f000 8638    	beq.w	0xf634 <_vfiprintf_r+0x111c> @ imm = #0xc70
    e9c4: 3301         	adds	r3, #0x1
    e9c6: 9406         	str	r4, [sp, #0x18]
    e9c8: f8cd 802c    	str.w	r8, [sp, #0x2c]
    e9cc: 9305         	str	r3, [sp, #0x14]
    e9ce: 9409         	str	r4, [sp, #0x24]
    e9d0: e7c3         	b	0xe95a <_vfiprintf_r+0x442> @ imm = #-0x7a
    e9d2: 9a0b         	ldr	r2, [sp, #0x2c]
    e9d4: 2b43         	cmp	r3, #0x43
    e9d6: f102 0404    	add.w	r4, r2, #0x4
    e9da: d003         	beq	0xe9e4 <_vfiprintf_r+0x4cc> @ imm = #0x6
    e9dc: 9b03         	ldr	r3, [sp, #0xc]
    e9de: 06d9         	lsls	r1, r3, #0x1b
    e9e0: f140 8447    	bpl.w	0xf272 <_vfiprintf_r+0xd5a> @ imm = #0x88e
    e9e4: 2208         	movs	r2, #0x8
    e9e6: 2100         	movs	r1, #0x0
    e9e8: a816         	add	r0, sp, #0x58
    e9ea: ad2b         	add	r5, sp, #0xac
    e9ec: f7fa f9dc    	bl	0x8da8 <memset>         @ imm = #-0x5c48
    e9f0: 9a0b         	ldr	r2, [sp, #0x2c]
    e9f2: ab16         	add	r3, sp, #0x58
    e9f4: 4658         	mov	r0, r11
    e9f6: 6812         	ldr	r2, [r2]
    e9f8: 4629         	mov	r1, r5
    e9fa: f7fd fe93    	bl	0xc724 <_wcrtomb_r>     @ imm = #-0x22da
    e9fe: 4603         	mov	r3, r0
    ea00: 900a         	str	r0, [sp, #0x28]
    ea02: 3301         	adds	r3, #0x1
    ea04: f000 8607    	beq.w	0xf616 <_vfiprintf_r+0x10fe> @ imm = #0xc0e
    ea08: 9b0a         	ldr	r3, [sp, #0x28]
    ea0a: ea23 73e3    	bic.w	r3, r3, r3, asr #31
    ea0e: 9305         	str	r3, [sp, #0x14]
    ea10: 2300         	movs	r3, #0x0
    ea12: 940b         	str	r4, [sp, #0x2c]
    ea14: f88d 3043    	strb.w	r3, [sp, #0x43]
    ea18: 9309         	str	r3, [sp, #0x24]
    ea1a: 9306         	str	r3, [sp, #0x18]
    ea1c: e6f7         	b	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0x212
    ea1e: 9d04         	ldr	r5, [sp, #0x10]
    ea20: 6da8         	ldr	r0, [r5, #0x58]
    ea22: f7fa fa7f    	bl	0x8f24 <__retarget_lock_acquire_recursive> @ imm = #-0x5b02
    ea26: f9b5 200c    	ldrsh.w	r2, [r5, #0xc]
    ea2a: 6e6b         	ldr	r3, [r5, #0x64]
    ea2c: 0495         	lsls	r5, r2, #0x12
    ea2e: f57f ad93    	bpl.w	0xe558 <_vfiprintf_r+0x40> @ imm = #-0x4da
    ea32: 0498         	lsls	r0, r3, #0x12
    ea34: f57f ad98    	bpl.w	0xe568 <_vfiprintf_r+0x50> @ imm = #-0x4d0
    ea38: 07d9         	lsls	r1, r3, #0x1f
    ea3a: f57f aecd    	bpl.w	0xe7d8 <_vfiprintf_r+0x2c0> @ imm = #-0x266
    ea3e: e6d3         	b	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #-0x25a
    ea40: 9b0b         	ldr	r3, [sp, #0x2c]
    ea42: f853 2b04    	ldr	r2, [r3], #4
    ea46: 2a00         	cmp	r2, #0x0
    ea48: 9208         	str	r2, [sp, #0x20]
    ea4a: f280 82d3    	bge.w	0xeff4 <_vfiprintf_r+0xadc> @ imm = #0x5a6
    ea4e: 9a08         	ldr	r2, [sp, #0x20]
    ea50: 930b         	str	r3, [sp, #0x2c]
    ea52: 4252         	rsbs	r2, r2, #0
    ea54: 9208         	str	r2, [sp, #0x20]
    ea56: 9b03         	ldr	r3, [sp, #0xc]
    ea58: f043 0304    	orr	r3, r3, #0x4
    ea5c: 9303         	str	r3, [sp, #0xc]
    ea5e: f89a 3000    	ldrb.w	r3, [r10]
    ea62: e5c0         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x480
    ea64: 232b         	movs	r3, #0x2b
    ea66: f88d 3043    	strb.w	r3, [sp, #0x43]
    ea6a: f89a 3000    	ldrb.w	r3, [r10]
    ea6e: e5ba         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x48c
    ea70: 9b03         	ldr	r3, [sp, #0xc]
    ea72: 069d         	lsls	r5, r3, #0x1a
    ea74: f043 0010    	orr	r0, r3, #0x10
    ea78: f140 82d4    	bpl.w	0xf024 <_vfiprintf_r+0xb0c> @ imm = #0x5a8
    ea7c: 9b0b         	ldr	r3, [sp, #0x2c]
    ea7e: 3307         	adds	r3, #0x7
    ea80: f023 0307    	bic	r3, r3, #0x7
    ea84: 4619         	mov	r1, r3
    ea86: 685a         	ldr	r2, [r3, #0x4]
    ea88: f851 3b08    	ldr	r3, [r1], #8
    ea8c: 910b         	str	r1, [sp, #0x2c]
    ea8e: 2100         	movs	r1, #0x0
    ea90: f88d 1043    	strb.w	r1, [sp, #0x43]
    ea94: 9906         	ldr	r1, [sp, #0x18]
    ea96: 2900         	cmp	r1, #0x0
    ea98: f2c0 8238    	blt.w	0xef0c <_vfiprintf_r+0x9f4> @ imm = #0x470
    ea9c: f420 6190    	bic	r1, r0, #0x480
    eaa0: 9103         	str	r1, [sp, #0xc]
    eaa2: 9906         	ldr	r1, [sp, #0x18]
    eaa4: 2900         	cmp	r1, #0x0
    eaa6: f040 8234    	bne.w	0xef12 <_vfiprintf_r+0x9fa> @ imm = #0x468
    eaaa: ea53 0102    	orrs.w	r1, r3, r2
    eaae: bf14         	ite	ne
    eab0: 2101         	movne	r1, #0x1
    eab2: 2100         	moveq	r1, #0x0
    eab4: f040 822d    	bne.w	0xef12 <_vfiprintf_r+0x9fa> @ imm = #0x45a
    eab8: f010 0201    	ands	r2, r0, #0x1
    eabc: 9205         	str	r2, [sp, #0x14]
    eabe: f000 8293    	beq.w	0xefe8 <_vfiprintf_r+0xad0> @ imm = #0x526
    eac2: 2330         	movs	r3, #0x30
    eac4: f20d 150f    	addw	r5, sp, #0x10f
    eac8: 9106         	str	r1, [sp, #0x18]
    eaca: f88d 310f    	strb.w	r3, [sp, #0x10f]
    eace: 920a         	str	r2, [sp, #0x28]
    ead0: 9109         	str	r1, [sp, #0x24]
    ead2: e69c         	b	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0x2c8
    ead4: 9a03         	ldr	r2, [sp, #0xc]
    ead6: 0696         	lsls	r6, r2, #0x1a
    ead8: d430         	bmi	0xeb3c <_vfiprintf_r+0x624> @ imm = #0x60
    eada: 9b03         	ldr	r3, [sp, #0xc]
    eadc: 990b         	ldr	r1, [sp, #0x2c]
    eade: f013 0310    	ands	r3, r3, #0x10
    eae2: f851 4b04    	ldr	r4, [r1], #4
    eae6: 9305         	str	r3, [sp, #0x14]
    eae8: f040 85f3    	bne.w	0xf6d2 <_vfiprintf_r+0x11ba> @ imm = #0xbe6
    eaec: 9b03         	ldr	r3, [sp, #0xc]
    eaee: f013 0340    	ands	r3, r3, #0x40
    eaf2: f000 842f    	beq.w	0xf354 <_vfiprintf_r+0xe3c> @ imm = #0x85e
    eaf6: 9b06         	ldr	r3, [sp, #0x18]
    eaf8: b2a4         	uxth	r4, r4
    eafa: f8dd e014    	ldr.w	lr, [sp, #0x14]
    eafe: 2b00         	cmp	r3, #0x0
    eb00: f88d e043    	strb.w	lr, [sp, #0x43]
    eb04: f2c0 8432    	blt.w	0xf36c <_vfiprintf_r+0xe54> @ imm = #0x864
    eb08: 9b03         	ldr	r3, [sp, #0xc]
    eb0a: f023 0380    	bic	r3, r3, #0x80
    eb0e: 9303         	str	r3, [sp, #0xc]
    eb10: 2c00         	cmp	r4, #0x0
    eb12: f040 842b    	bne.w	0xf36c <_vfiprintf_r+0xe54> @ imm = #0x856
    eb16: 9a06         	ldr	r2, [sp, #0x18]
    eb18: 1e13         	subs	r3, r2, #0x0
    eb1a: bf18         	it	ne
    eb1c: 2301         	movne	r3, #0x1
    eb1e: 2a00         	cmp	r2, #0x0
    eb20: f040 8424    	bne.w	0xf36c <_vfiprintf_r+0xe54> @ imm = #0x848
    eb24: ad44         	add	r5, sp, #0x110
    eb26: 9306         	str	r3, [sp, #0x18]
    eb28: 910b         	str	r1, [sp, #0x2c]
    eb2a: e9cd 3309    	strd	r3, r3, [sp, #36]
    eb2e: e66e         	b	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0x324
    eb30: 9b03         	ldr	r3, [sp, #0xc]
    eb32: f043 0210    	orr	r2, r3, #0x10
    eb36: 069b         	lsls	r3, r3, #0x1a
    eb38: f140 8288    	bpl.w	0xf04c <_vfiprintf_r+0xb34> @ imm = #0x510
    eb3c: 9b0b         	ldr	r3, [sp, #0x2c]
    eb3e: 2100         	movs	r1, #0x0
    eb40: 3307         	adds	r3, #0x7
    eb42: f88d 1043    	strb.w	r1, [sp, #0x43]
    eb46: f023 0307    	bic	r3, r3, #0x7
    eb4a: f8d3 e004    	ldr.w	lr, [r3, #0x4]
    eb4e: f853 4b08    	ldr	r4, [r3], #8
    eb52: 930b         	str	r3, [sp, #0x2c]
    eb54: 9b06         	ldr	r3, [sp, #0x18]
    eb56: 428b         	cmp	r3, r1
    eb58: f2c0 8285    	blt.w	0xf066 <_vfiprintf_r+0xb4e> @ imm = #0x50a
    eb5c: f022 0380    	bic	r3, r2, #0x80
    eb60: 9303         	str	r3, [sp, #0xc]
    eb62: 9b06         	ldr	r3, [sp, #0x18]
    eb64: 2b00         	cmp	r3, #0x0
    eb66: f040 808c    	bne.w	0xec82 <_vfiprintf_r+0x76a> @ imm = #0x118
    eb6a: ea54 030e    	orrs.w	r3, r4, lr
    eb6e: bf14         	ite	ne
    eb70: 2301         	movne	r3, #0x1
    eb72: 2300         	moveq	r3, #0x0
    eb74: f040 8085    	bne.w	0xec82 <_vfiprintf_r+0x76a> @ imm = #0x10a
    eb78: ad44         	add	r5, sp, #0x110
    eb7a: 9309         	str	r3, [sp, #0x24]
    eb7c: 9306         	str	r3, [sp, #0x18]
    eb7e: 930a         	str	r3, [sp, #0x28]
    eb80: 9305         	str	r3, [sp, #0x14]
    eb82: e644         	b	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0x378
    eb84: 2100         	movs	r1, #0x0
    eb86: 9b0b         	ldr	r3, [sp, #0x2c]
    eb88: 9c06         	ldr	r4, [sp, #0x18]
    eb8a: f647 0230    	movw	r2, #0x7830
    eb8e: f853 0b04    	ldr	r0, [r3], #4
    eb92: 428c         	cmp	r4, r1
    eb94: f8ad 2044    	strh.w	r2, [sp, #0x44]
    eb98: f88d 1043    	strb.w	r1, [sp, #0x43]
    eb9c: 4602         	mov	r2, r0
    eb9e: f2c0 8348    	blt.w	0xf232 <_vfiprintf_r+0xd1a> @ imm = #0x690
    eba2: 9c03         	ldr	r4, [sp, #0xc]
    eba4: f024 0480    	bic	r4, r4, #0x80
    eba8: f044 0402    	orr	r4, r4, #0x2
    ebac: 9403         	str	r4, [sp, #0xc]
    ebae: 2800         	cmp	r0, #0x0
    ebb0: f040 858a    	bne.w	0xf6c8 <_vfiprintf_r+0x11b0> @ imm = #0xb14
    ebb4: 9c06         	ldr	r4, [sp, #0x18]
    ebb6: 1e20         	subs	r0, r4, #0x0
    ebb8: bf18         	it	ne
    ebba: 2001         	movne	r0, #0x1
    ebbc: 2c00         	cmp	r4, #0x0
    ebbe: f040 8583    	bne.w	0xf6c8 <_vfiprintf_r+0x11b0> @ imm = #0xb06
    ebc2: ad44         	add	r5, sp, #0x110
    ebc4: 9006         	str	r0, [sp, #0x18]
    ebc6: 930b         	str	r3, [sp, #0x2c]
    ebc8: 9005         	str	r0, [sp, #0x14]
    ebca: 900a         	str	r0, [sp, #0x28]
    ebcc: 9b05         	ldr	r3, [sp, #0x14]
    ebce: 9c03         	ldr	r4, [sp, #0xc]
    ebd0: 3302         	adds	r3, #0x2
    ebd2: f014 0884    	ands	r8, r4, #0x84
    ebd6: 9305         	str	r3, [sp, #0x14]
    ebd8: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    ebdc: 4608         	mov	r0, r1
    ebde: 4613         	mov	r3, r2
    ebe0: f000 83c6    	beq.w	0xf370 <_vfiprintf_r+0xe58> @ imm = #0x78c
    ebe4: 2300         	movs	r3, #0x0
    ebe6: 9309         	str	r3, [sp, #0x24]
    ebe8: e638         	b	0xe85c <_vfiprintf_r+0x344> @ imm = #-0x390
    ebea: 9803         	ldr	r0, [sp, #0xc]
    ebec: 0684         	lsls	r4, r0, #0x1a
    ebee: f53f af45    	bmi.w	0xea7c <_vfiprintf_r+0x564> @ imm = #-0x176
    ebf2: 9a03         	ldr	r2, [sp, #0xc]
    ebf4: 990b         	ldr	r1, [sp, #0x2c]
    ebf6: f012 0210    	ands	r2, r2, #0x10
    ebfa: f851 3b04    	ldr	r3, [r1], #4
    ebfe: f040 8566    	bne.w	0xf6ce <_vfiprintf_r+0x11b6> @ imm = #0xacc
    ec02: 9c03         	ldr	r4, [sp, #0xc]
    ec04: f014 0040    	ands	r0, r4, #0x40
    ec08: f000 8434    	beq.w	0xf474 <_vfiprintf_r+0xf5c> @ imm = #0x868
    ec0c: b29b         	uxth	r3, r3
    ec0e: 4620         	mov	r0, r4
    ec10: 910b         	str	r1, [sp, #0x2c]
    ec12: e73c         	b	0xea8e <_vfiprintf_r+0x576> @ imm = #-0x188
    ec14: 9b03         	ldr	r3, [sp, #0xc]
    ec16: 0699         	lsls	r1, r3, #0x1a
    ec18: f140 82b5    	bpl.w	0xf186 <_vfiprintf_r+0xc6e> @ imm = #0x56a
    ec1c: 9b0b         	ldr	r3, [sp, #0x2c]
    ec1e: 9a07         	ldr	r2, [sp, #0x1c]
    ec20: 681b         	ldr	r3, [r3]
    ec22: 601a         	str	r2, [r3]
    ec24: 17d2         	asrs	r2, r2, #0x1f
    ec26: 605a         	str	r2, [r3, #0x4]
    ec28: 9b0b         	ldr	r3, [sp, #0x2c]
    ec2a: 3304         	adds	r3, #0x4
    ec2c: 930b         	str	r3, [sp, #0x2c]
    ec2e: e4b2         	b	0xe596 <_vfiprintf_r+0x7e> @ imm = #-0x69c
    ec30: f89a 3000    	ldrb.w	r3, [r10]
    ec34: 2b6c         	cmp	r3, #0x6c
    ec36: f000 8326    	beq.w	0xf286 <_vfiprintf_r+0xd6e> @ imm = #0x64c
    ec3a: 9a03         	ldr	r2, [sp, #0xc]
    ec3c: f042 0210    	orr	r2, r2, #0x10
    ec40: 9203         	str	r2, [sp, #0xc]
    ec42: e4d0         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x660
    ec44: 9a03         	ldr	r2, [sp, #0xc]
    ec46: f042 0310    	orr	r3, r2, #0x10
    ec4a: 0692         	lsls	r2, r2, #0x1a
    ec4c: f100 81e8    	bmi.w	0xf020 <_vfiprintf_r+0xb08> @ imm = #0x3d0
    ec50: 9a0b         	ldr	r2, [sp, #0x2c]
    ec52: 1d11         	adds	r1, r2, #0x4
    ec54: 9a0b         	ldr	r2, [sp, #0x2c]
    ec56: 9303         	str	r3, [sp, #0xc]
    ec58: 6814         	ldr	r4, [r2]
    ec5a: 910b         	str	r1, [sp, #0x2c]
    ec5c: ea4f 7ee4    	asr.w	lr, r4, #0x1f
    ec60: 4673         	mov	r3, lr
    ec62: 2b00         	cmp	r3, #0x0
    ec64: f6bf ae5c    	bge.w	0xe920 <_vfiprintf_r+0x408> @ imm = #-0x348
    ec68: 232d         	movs	r3, #0x2d
    ec6a: 4264         	rsbs	r4, r4, #0
    ec6c: f88d 3043    	strb.w	r3, [sp, #0x43]
    ec70: eb6e 0e4e    	sbc.w	lr, lr, lr, lsl #1
    ec74: 9b06         	ldr	r3, [sp, #0x18]
    ec76: 2b00         	cmp	r3, #0x0
    ec78: db03         	blt	0xec82 <_vfiprintf_r+0x76a> @ imm = #0x6
    ec7a: 9b03         	ldr	r3, [sp, #0xc]
    ec7c: f023 0380    	bic	r3, r3, #0x80
    ec80: 9303         	str	r3, [sp, #0xc]
    ec82: 2c0a         	cmp	r4, #0xa
    ec84: f17e 0300    	sbcs	r3, lr, #0x0
    ec88: f080 81f3    	bhs.w	0xf072 <_vfiprintf_r+0xb5a> @ imm = #0x3e6
    ec8c: 9a06         	ldr	r2, [sp, #0x18]
    ec8e: 3430         	adds	r4, #0x30
    ec90: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    ec94: 2a01         	cmp	r2, #0x1
    ec96: f88d 410f    	strb.w	r4, [sp, #0x10f]
    ec9a: bfb8         	it	lt
    ec9c: 2201         	movlt	r2, #0x1
    ec9e: 9205         	str	r2, [sp, #0x14]
    eca0: 2b00         	cmp	r3, #0x0
    eca2: f040 81b1    	bne.w	0xf008 <_vfiprintf_r+0xaf0> @ imm = #0x362
    eca6: 9309         	str	r3, [sp, #0x24]
    eca8: 2301         	movs	r3, #0x1
    ecaa: f20d 150f    	addw	r5, sp, #0x10f
    ecae: 930a         	str	r3, [sp, #0x28]
    ecb0: e5ad         	b	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0x4a6
    ecb2: f89a 3000    	ldrb.w	r3, [r10]
    ecb6: 2b68         	cmp	r3, #0x68
    ecb8: f000 82ef    	beq.w	0xf29a <_vfiprintf_r+0xd82> @ imm = #0x5de
    ecbc: 9a03         	ldr	r2, [sp, #0xc]
    ecbe: f042 0240    	orr	r2, r2, #0x40
    ecc2: 9203         	str	r2, [sp, #0xc]
    ecc4: e48f         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x6e2
    ecc6: 4658         	mov	r0, r11
    ecc8: f7fd fc76    	bl	0xc5b8 <_localeconv_r>  @ imm = #-0x2714
    eccc: 6843         	ldr	r3, [r0, #0x4]
    ecce: 4618         	mov	r0, r3
    ecd0: 930f         	str	r3, [sp, #0x3c]
    ecd2: f7fa f9a1    	bl	0x9018 <strlen>         @ imm = #-0x5cbe
    ecd6: 900e         	str	r0, [sp, #0x38]
    ecd8: 4604         	mov	r4, r0
    ecda: 4658         	mov	r0, r11
    ecdc: f7fd fc6c    	bl	0xc5b8 <_localeconv_r>  @ imm = #-0x2728
    ece0: 6882         	ldr	r2, [r0, #0x8]
    ece2: f89a 3000    	ldrb.w	r3, [r10]
    ece6: 920d         	str	r2, [sp, #0x34]
    ece8: 2c00         	cmp	r4, #0x0
    ecea: f43f ac7c    	beq.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x708
    ecee: 2a00         	cmp	r2, #0x0
    ecf0: f43f ac79    	beq.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x70e
    ecf4: 7812         	ldrb	r2, [r2]
    ecf6: 2a00         	cmp	r2, #0x0
    ecf8: f43f ac75    	beq.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x716
    ecfc: 9a03         	ldr	r2, [sp, #0xc]
    ecfe: f442 6280    	orr	r2, r2, #0x400
    ed02: 9203         	str	r2, [sp, #0xc]
    ed04: e46f         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x722
    ed06: 9b03         	ldr	r3, [sp, #0xc]
    ed08: f043 0301    	orr	r3, r3, #0x1
    ed0c: 9303         	str	r3, [sp, #0xc]
    ed0e: f89a 3000    	ldrb.w	r3, [r10]
    ed12: e468         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x730
    ed14: f89d 2043    	ldrb.w	r2, [sp, #0x43]
    ed18: f89a 3000    	ldrb.w	r3, [r10]
    ed1c: 2a00         	cmp	r2, #0x0
    ed1e: f47f ac62    	bne.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x73c
    ed22: 2220         	movs	r2, #0x20
    ed24: f88d 2043    	strb.w	r2, [sp, #0x43]
    ed28: e45d         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x746
    ed2a: 9b03         	ldr	r3, [sp, #0xc]
    ed2c: f043 0380    	orr	r3, r3, #0x80
    ed30: 9303         	str	r3, [sp, #0xc]
    ed32: f89a 3000    	ldrb.w	r3, [r10]
    ed36: e456         	b	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x754
    ed38: 4650         	mov	r0, r10
    ed3a: f810 3b01    	ldrb	r3, [r0], #1
    ed3e: 2b2a         	cmp	r3, #0x2a
    ed40: f000 849a    	beq.w	0xf678 <_vfiprintf_r+0x1160> @ imm = #0x934
    ed44: f1a3 0230    	sub.w	r2, r3, #0x30
    ed48: 2a09         	cmp	r2, #0x9
    ed4a: f200 844b    	bhi.w	0xf5e4 <_vfiprintf_r+0x10cc> @ imm = #0x896
    ed4e: 2100         	movs	r1, #0x0
    ed50: eb01 0181    	add.w	r1, r1, r1, lsl #2
    ed54: f810 3b01    	ldrb	r3, [r0], #1
    ed58: eb02 0141    	add.w	r1, r2, r1, lsl #1
    ed5c: f1a3 0230    	sub.w	r2, r3, #0x30
    ed60: 2a09         	cmp	r2, #0x9
    ed62: d9f5         	bls	0xed50 <_vfiprintf_r+0x838> @ imm = #-0x16
    ed64: ea41 72e1    	orr.w	r2, r1, r1, asr #31
    ed68: 4682         	mov	r10, r0
    ed6a: 9206         	str	r2, [sp, #0x18]
    ed6c: e43d         	b	0xe5ea <_vfiprintf_r+0xd2> @ imm = #-0x786
    ed6e: 9b08         	ldr	r3, [sp, #0x20]
    ed70: 9805         	ldr	r0, [sp, #0x14]
    ed72: 1a1c         	subs	r4, r3, r0
    ed74: 2c00         	cmp	r4, #0x0
    ed76: f77f ad85    	ble.w	0xe884 <_vfiprintf_r+0x36c> @ imm = #-0x4f6
    ed7a: 2c10         	cmp	r4, #0x10
    ed7c: 4eb1         	ldr	r6, [pc, #0x2c4]        @ 0xf044 <_vfiprintf_r+0xb2c>
    ed7e: dd21         	ble	0xedc4 <_vfiprintf_r+0x8ac> @ imm = #0x42
    ed80: 950c         	str	r5, [sp, #0x30]
    ed82: f04f 0810    	mov.w	r8, #0x10
    ed86: 9d04         	ldr	r5, [sp, #0x10]
    ed88: e002         	b	0xed90 <_vfiprintf_r+0x878> @ imm = #0x4
    ed8a: 3c10         	subs	r4, #0x10
    ed8c: 2c10         	cmp	r4, #0x10
    ed8e: dd18         	ble	0xedc2 <_vfiprintf_r+0x8aa> @ imm = #0x30
    ed90: 3201         	adds	r2, #0x1
    ed92: 3110         	adds	r1, #0x10
    ed94: 2a07         	cmp	r2, #0x7
    ed96: e9c9 6800    	strd	r6, r8, [r9]
    ed9a: e9cd 2119    	strd	r2, r1, [sp, #100]
    ed9e: f109 0908    	add.w	r9, r9, #0x8
    eda2: ddf2         	ble	0xed8a <_vfiprintf_r+0x872> @ imm = #-0x1c
    eda4: aa18         	add	r2, sp, #0x60
    eda6: 4629         	mov	r1, r5
    eda8: 4658         	mov	r0, r11
    edaa: f7fd f8fb    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2e0a
    edae: 2800         	cmp	r0, #0x0
    edb0: f47f acf5    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x616
    edb4: 3c10         	subs	r4, #0x10
    edb6: f10d 096c    	add.w	r9, sp, #0x6c
    edba: 2c10         	cmp	r4, #0x10
    edbc: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    edc0: dce6         	bgt	0xed90 <_vfiprintf_r+0x878> @ imm = #-0x34
    edc2: 9d0c         	ldr	r5, [sp, #0x30]
    edc4: 3201         	adds	r2, #0x1
    edc6: 4421         	add	r1, r4
    edc8: f8c9 6000    	str.w	r6, [r9]
    edcc: 2a07         	cmp	r2, #0x7
    edce: f8c9 4004    	str.w	r4, [r9, #0x4]
    edd2: e9cd 2119    	strd	r2, r1, [sp, #100]
    edd6: f300 831b    	bgt.w	0xf410 <_vfiprintf_r+0xef8> @ imm = #0x636
    edda: 9b06         	ldr	r3, [sp, #0x18]
    eddc: f109 0908    	add.w	r9, r9, #0x8
    ede0: 980a         	ldr	r0, [sp, #0x28]
    ede2: 1a1c         	subs	r4, r3, r0
    ede4: 2c00         	cmp	r4, #0x0
    ede6: f77f ad53    	ble.w	0xe890 <_vfiprintf_r+0x378> @ imm = #-0x55a
    edea: 2c10         	cmp	r4, #0x10
    edec: 4e95         	ldr	r6, [pc, #0x254]        @ 0xf044 <_vfiprintf_r+0xb2c>
    edee: dd1f         	ble	0xee30 <_vfiprintf_r+0x918> @ imm = #0x3e
    edf0: f04f 0810    	mov.w	r8, #0x10
    edf4: e002         	b	0xedfc <_vfiprintf_r+0x8e4> @ imm = #0x4
    edf6: 3c10         	subs	r4, #0x10
    edf8: 2c10         	cmp	r4, #0x10
    edfa: dd19         	ble	0xee30 <_vfiprintf_r+0x918> @ imm = #0x32
    edfc: 3201         	adds	r2, #0x1
    edfe: 3110         	adds	r1, #0x10
    ee00: 4b90         	ldr	r3, [pc, #0x240]        @ 0xf044 <_vfiprintf_r+0xb2c>
    ee02: 2a07         	cmp	r2, #0x7
    ee04: e9c9 3800    	strd	r3, r8, [r9]
    ee08: e9cd 2119    	strd	r2, r1, [sp, #100]
    ee0c: f109 0908    	add.w	r9, r9, #0x8
    ee10: ddf1         	ble	0xedf6 <_vfiprintf_r+0x8de> @ imm = #-0x1e
    ee12: aa18         	add	r2, sp, #0x60
    ee14: 9904         	ldr	r1, [sp, #0x10]
    ee16: 4658         	mov	r0, r11
    ee18: f10d 096c    	add.w	r9, sp, #0x6c
    ee1c: f7fd f8c2    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2e7c
    ee20: 2800         	cmp	r0, #0x0
    ee22: f47f acbc    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x688
    ee26: 3c10         	subs	r4, #0x10
    ee28: 2c10         	cmp	r4, #0x10
    ee2a: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    ee2e: dce5         	bgt	0xedfc <_vfiprintf_r+0x8e4> @ imm = #-0x36
    ee30: 3201         	adds	r2, #0x1
    ee32: 4421         	add	r1, r4
    ee34: f8c9 6000    	str.w	r6, [r9]
    ee38: 2a07         	cmp	r2, #0x7
    ee3a: f8c9 4004    	str.w	r4, [r9, #0x4]
    ee3e: e9cd 2119    	strd	r2, r1, [sp, #100]
    ee42: f300 80c4    	bgt.w	0xefce <_vfiprintf_r+0xab6> @ imm = #0x188
    ee46: f109 0908    	add.w	r9, r9, #0x8
    ee4a: e521         	b	0xe890 <_vfiprintf_r+0x378> @ imm = #-0x5be
    ee4c: aa18         	add	r2, sp, #0x60
    ee4e: 9904         	ldr	r1, [sp, #0x10]
    ee50: 4658         	mov	r0, r11
    ee52: f7fd f8a7    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2eb2
    ee56: 2800         	cmp	r0, #0x0
    ee58: f47f aca1    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x6be
    ee5c: 991a         	ldr	r1, [sp, #0x68]
    ee5e: f10d 096c    	add.w	r9, sp, #0x6c
    ee62: e523         	b	0xe8ac <_vfiprintf_r+0x394> @ imm = #-0x5ba
    ee64: aa18         	add	r2, sp, #0x60
    ee66: 9904         	ldr	r1, [sp, #0x10]
    ee68: 4658         	mov	r0, r11
    ee6a: f7fd f89b    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2eca
    ee6e: 2800         	cmp	r0, #0x0
    ee70: f47f ac95    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x6d6
    ee74: f10d 096c    	add.w	r9, sp, #0x6c
    ee78: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    ee7c: e4fe         	b	0xe87c <_vfiprintf_r+0x364> @ imm = #-0x604
    ee7e: aa18         	add	r2, sp, #0x60
    ee80: 9904         	ldr	r1, [sp, #0x10]
    ee82: 4658         	mov	r0, r11
    ee84: f7fd f88e    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2ee4
    ee88: 2800         	cmp	r0, #0x0
    ee8a: f47f ac88    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x6f0
    ee8e: f10d 096c    	add.w	r9, sp, #0x6c
    ee92: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    ee96: e4df         	b	0xe858 <_vfiprintf_r+0x340> @ imm = #-0x642
    ee98: 2c10         	cmp	r4, #0x10
    ee9a: 9b19         	ldr	r3, [sp, #0x64]
    ee9c: f8df 81a8    	ldr.w	r8, [pc, #0x1a8]        @ 0xf048 <_vfiprintf_r+0xb30>
    eea0: dd21         	ble	0xeee6 <_vfiprintf_r+0x9ce> @ imm = #0x42
    eea2: 4646         	mov	r6, r8
    eea4: 2510         	movs	r5, #0x10
    eea6: f8dd 8010    	ldr.w	r8, [sp, #0x10]
    eeaa: e002         	b	0xeeb2 <_vfiprintf_r+0x99a> @ imm = #0x4
    eeac: 3c10         	subs	r4, #0x10
    eeae: 2c10         	cmp	r4, #0x10
    eeb0: dd18         	ble	0xeee4 <_vfiprintf_r+0x9cc> @ imm = #0x30
    eeb2: 3301         	adds	r3, #0x1
    eeb4: 3110         	adds	r1, #0x10
    eeb6: 2b07         	cmp	r3, #0x7
    eeb8: e9c9 6500    	strd	r6, r5, [r9]
    eebc: e9cd 3119    	strd	r3, r1, [sp, #100]
    eec0: f109 0908    	add.w	r9, r9, #0x8
    eec4: ddf2         	ble	0xeeac <_vfiprintf_r+0x994> @ imm = #-0x1c
    eec6: aa18         	add	r2, sp, #0x60
    eec8: 4641         	mov	r1, r8
    eeca: 4658         	mov	r0, r11
    eecc: f10d 096c    	add.w	r9, sp, #0x6c
    eed0: f7fd f868    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2f30
    eed4: 2800         	cmp	r0, #0x0
    eed6: f47f ac62    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x73c
    eeda: 3c10         	subs	r4, #0x10
    eedc: 2c10         	cmp	r4, #0x10
    eede: e9dd 3119    	ldrd	r3, r1, [sp, #100]
    eee2: dce6         	bgt	0xeeb2 <_vfiprintf_r+0x99a> @ imm = #-0x34
    eee4: 46b0         	mov	r8, r6
    eee6: 3301         	adds	r3, #0x1
    eee8: 4421         	add	r1, r4
    eeea: 2b07         	cmp	r3, #0x7
    eeec: e9c9 8400    	strd	r8, r4, [r9]
    eef0: e9cd 3119    	strd	r3, r1, [sp, #100]
    eef4: f77f ace3    	ble.w	0xe8be <_vfiprintf_r+0x3a6> @ imm = #-0x63a
    eef8: aa18         	add	r2, sp, #0x60
    eefa: 9904         	ldr	r1, [sp, #0x10]
    eefc: 4658         	mov	r0, r11
    eefe: f7fd f851    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2f5e
    ef02: 2800         	cmp	r0, #0x0
    ef04: f47f ac4b    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x76a
    ef08: 991a         	ldr	r1, [sp, #0x68]
    ef0a: e4d8         	b	0xe8be <_vfiprintf_r+0x3a6> @ imm = #-0x650
    ef0c: f420 6180    	bic	r1, r0, #0x400
    ef10: 9103         	str	r1, [sp, #0xc]
    ef12: ad44         	add	r5, sp, #0x110
    ef14: f003 0107    	and	r1, r3, #0x7
    ef18: 08db         	lsrs	r3, r3, #0x3
    ef1a: 4628         	mov	r0, r5
    ef1c: ea43 7342    	orr.w	r3, r3, r2, lsl #29
    ef20: 3130         	adds	r1, #0x30
    ef22: 08d2         	lsrs	r2, r2, #0x3
    ef24: f805 1d01    	strb	r1, [r5, #-1]!
    ef28: ea53 0402    	orrs.w	r4, r3, r2
    ef2c: d1f2         	bne	0xef14 <_vfiprintf_r+0x9fc> @ imm = #-0x1c
    ef2e: 2930         	cmp	r1, #0x30
    ef30: d002         	beq	0xef38 <_vfiprintf_r+0xa20> @ imm = #0x4
    ef32: 9b03         	ldr	r3, [sp, #0xc]
    ef34: 07de         	lsls	r6, r3, #0x1f
    ef36: d47c         	bmi	0xf032 <_vfiprintf_r+0xb1a> @ imm = #0xf8
    ef38: ab44         	add	r3, sp, #0x110
    ef3a: 1b5b         	subs	r3, r3, r5
    ef3c: 930a         	str	r3, [sp, #0x28]
    ef3e: 2200         	movs	r2, #0x0
    ef40: 9209         	str	r2, [sp, #0x24]
    ef42: 9a06         	ldr	r2, [sp, #0x18]
    ef44: 429a         	cmp	r2, r3
    ef46: bfb8         	it	lt
    ef48: 461a         	movlt	r2, r3
    ef4a: 9205         	str	r2, [sp, #0x14]
    ef4c: e45f         	b	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0x742
    ef4e: 2200         	movs	r2, #0x0
    ef50: 920c         	str	r2, [sp, #0x30]
    ef52: 2c10         	cmp	r4, #0x10
    ef54: 461a         	mov	r2, r3
    ef56: f8df 80f0    	ldr.w	r8, [pc, #0xf0]         @ 0xf048 <_vfiprintf_r+0xb30>
    ef5a: dd22         	ble	0xefa2 <_vfiprintf_r+0xa8a> @ imm = #0x44
    ef5c: 4646         	mov	r6, r8
    ef5e: 2310         	movs	r3, #0x10
    ef60: f8dd 8010    	ldr.w	r8, [sp, #0x10]
    ef64: e002         	b	0xef6c <_vfiprintf_r+0xa54> @ imm = #0x4
    ef66: 3c10         	subs	r4, #0x10
    ef68: 2c10         	cmp	r4, #0x10
    ef6a: dd19         	ble	0xefa0 <_vfiprintf_r+0xa88> @ imm = #0x32
    ef6c: 3201         	adds	r2, #0x1
    ef6e: 3010         	adds	r0, #0x10
    ef70: 2a07         	cmp	r2, #0x7
    ef72: e9c9 6300    	strd	r6, r3, [r9]
    ef76: e9cd 2019    	strd	r2, r0, [sp, #100]
    ef7a: f109 0908    	add.w	r9, r9, #0x8
    ef7e: ddf2         	ble	0xef66 <_vfiprintf_r+0xa4e> @ imm = #-0x1c
    ef80: aa18         	add	r2, sp, #0x60
    ef82: 4641         	mov	r1, r8
    ef84: 4658         	mov	r0, r11
    ef86: f10d 096c    	add.w	r9, sp, #0x6c
    ef8a: f7fd f80b    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x2fea
    ef8e: 2800         	cmp	r0, #0x0
    ef90: f47f ac05    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x7f6
    ef94: 3c10         	subs	r4, #0x10
    ef96: 2310         	movs	r3, #0x10
    ef98: 2c10         	cmp	r4, #0x10
    ef9a: e9dd 2019    	ldrd	r2, r0, [sp, #100]
    ef9e: dce5         	bgt	0xef6c <_vfiprintf_r+0xa54> @ imm = #-0x36
    efa0: 46b0         	mov	r8, r6
    efa2: 3201         	adds	r2, #0x1
    efa4: 1821         	adds	r1, r4, r0
    efa6: f8c9 8000    	str.w	r8, [r9]
    efaa: 2a07         	cmp	r2, #0x7
    efac: f8c9 4004    	str.w	r4, [r9, #0x4]
    efb0: e9cd 2119    	strd	r2, r1, [sp, #100]
    efb4: f300 81fe    	bgt.w	0xf3b4 <_vfiprintf_r+0xe9c> @ imm = #0x3fc
    efb8: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    efbc: f109 0908    	add.w	r9, r9, #0x8
    efc0: bb5b         	cbnz	r3, 0xf01a <_vfiprintf_r+0xb02> @ imm = #0x56
    efc2: 980c         	ldr	r0, [sp, #0x30]
    efc4: 2800         	cmp	r0, #0x0
    efc6: f43f ac5d    	beq.w	0xe884 <_vfiprintf_r+0x36c> @ imm = #-0x746
    efca: 4698         	mov	r8, r3
    efcc: e446         	b	0xe85c <_vfiprintf_r+0x344> @ imm = #-0x774
    efce: aa18         	add	r2, sp, #0x60
    efd0: 9904         	ldr	r1, [sp, #0x10]
    efd2: 4658         	mov	r0, r11
    efd4: f7fc ffe6    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x3034
    efd8: 2800         	cmp	r0, #0x0
    efda: f47f abe0    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0x840
    efde: f10d 096c    	add.w	r9, sp, #0x6c
    efe2: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    efe6: e453         	b	0xe890 <_vfiprintf_r+0x378> @ imm = #-0x75a
    efe8: 9a05         	ldr	r2, [sp, #0x14]
    efea: ad44         	add	r5, sp, #0x110
    efec: 9206         	str	r2, [sp, #0x18]
    efee: 920a         	str	r2, [sp, #0x28]
    eff0: 9209         	str	r2, [sp, #0x24]
    eff2: e40c         	b	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0x7e8
    eff4: 930b         	str	r3, [sp, #0x2c]
    eff6: f89a 3000    	ldrb.w	r3, [r10]
    effa: f7ff baf4    	b.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0xa18
    effe: 049d         	lsls	r5, r3, #0x12
    f000: f57f aab2    	bpl.w	0xe568 <_vfiprintf_r+0x50> @ imm = #-0xa9c
    f004: f7ff bbf0    	b.w	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #-0x820
    f008: 2500         	movs	r5, #0x0
    f00a: 3201         	adds	r2, #0x1
    f00c: 2301         	movs	r3, #0x1
    f00e: 9205         	str	r2, [sp, #0x14]
    f010: e9cd 5309    	strd	r5, r3, [sp, #36]
    f014: f20d 150f    	addw	r5, sp, #0x10f
    f018: e49f         	b	0xe95a <_vfiprintf_r+0x442> @ imm = #-0x6c2
    f01a: f04f 0800    	mov.w	r8, #0x0
    f01e: e40b         	b	0xe838 <_vfiprintf_r+0x320> @ imm = #-0x7ea
    f020: 9303         	str	r3, [sp, #0xc]
    f022: e470         	b	0xe906 <_vfiprintf_r+0x3ee> @ imm = #-0x720
    f024: 9b0b         	ldr	r3, [sp, #0x2c]
    f026: 1d19         	adds	r1, r3, #0x4
    f028: 9b0b         	ldr	r3, [sp, #0x2c]
    f02a: 2200         	movs	r2, #0x0
    f02c: 910b         	str	r1, [sp, #0x2c]
    f02e: 681b         	ldr	r3, [r3]
    f030: e52d         	b	0xea8e <_vfiprintf_r+0x576> @ imm = #-0x5a6
    f032: 2330         	movs	r3, #0x30
    f034: 3802         	subs	r0, #0x2
    f036: f805 3c01    	strb	r3, [r5, #-1]
    f03a: ab44         	add	r3, sp, #0x110
    f03c: 4605         	mov	r5, r0
    f03e: 1a1b         	subs	r3, r3, r0
    f040: 930a         	str	r3, [sp, #0x28]
    f042: e77c         	b	0xef3e <_vfiprintf_r+0xa26> @ imm = #-0x108
    f044: 08 21 21 80  	.word	0x80212108
    f048: 18 21 21 80  	.word	0x80212118
    f04c: 9b0b         	ldr	r3, [sp, #0x2c]
    f04e: 1d19         	adds	r1, r3, #0x4
    f050: 9b0b         	ldr	r3, [sp, #0x2c]
    f052: f04f 0e00    	mov.w	lr, #0x0
    f056: 910b         	str	r1, [sp, #0x2c]
    f058: 681c         	ldr	r4, [r3]
    f05a: 9b06         	ldr	r3, [sp, #0x18]
    f05c: f88d e043    	strb.w	lr, [sp, #0x43]
    f060: 4573         	cmp	r3, lr
    f062: f6bf ad7b    	bge.w	0xeb5c <_vfiprintf_r+0x644> @ imm = #-0x50a
    f066: 2c0a         	cmp	r4, #0xa
    f068: 9203         	str	r2, [sp, #0xc]
    f06a: f17e 0300    	sbcs	r3, lr, #0x0
    f06e: f4ff ae0d    	blo.w	0xec8c <_vfiprintf_r+0x774> @ imm = #-0x3e6
    f072: 9b03         	ldr	r3, [sp, #0xc]
    f074: 4676         	mov	r6, lr
    f076: a944         	add	r1, sp, #0x110
    f078: f8df 83f4    	ldr.w	r8, [pc, #0x3f4]        @ 0xf470 <_vfiprintf_r+0xf58>
    f07c: f403 6580    	and	r5, r3, #0x400
    f080: 2300         	movs	r3, #0x0
    f082: f8cd 9014    	str.w	r9, [sp, #0x14]
    f086: 469e         	mov	lr, r3
    f088: e9cd ba09    	strd	r11, r10, [sp, #36]
    f08c: f8dd a034    	ldr.w	r10, [sp, #0x34]
    f090: e023         	b	0xf0da <_vfiprintf_r+0xbc2> @ imm = #0x46
    f092: 19a3         	adds	r3, r4, r6
    f094: 46a3         	mov	r11, r4
    f096: 4630         	mov	r0, r6
    f098: 4649         	mov	r1, r9
    f09a: f143 0300    	adc	r3, r3, #0x0
    f09e: fba8 2c03    	umull	r2, r12, r8, r3
    f0a2: f02c 0203    	bic	r2, r12, #0x3
    f0a6: eb02 029c    	add.w	r2, r2, r12, lsr #2
    f0aa: 1a9b         	subs	r3, r3, r2
    f0ac: f04f 32cc    	mov.w	r2, #0xcccccccc
    f0b0: 1ae3         	subs	r3, r4, r3
    f0b2: f166 0600    	sbc	r6, r6, #0x0
    f0b6: fb02 f203    	mul	r2, r2, r3
    f0ba: f1bb 0f0a    	cmp.w	r11, #0xa
    f0be: fba3 4308    	umull	r4, r3, r3, r8
    f0c2: fb08 2206    	mla	r2, r8, r6, r2
    f0c6: ea4f 0454    	lsr.w	r4, r4, #0x1
    f0ca: f170 0000    	sbcs	r0, r0, #0x0
    f0ce: 4413         	add	r3, r2
    f0d0: ea44 74c3    	orr.w	r4, r4, r3, lsl #31
    f0d4: ea4f 0653    	lsr.w	r6, r3, #0x1
    f0d8: d32b         	blo	0xf132 <_vfiprintf_r+0xc1a> @ imm = #0x56
    f0da: 19a3         	adds	r3, r4, r6
    f0dc: f10e 0e01    	add.w	lr, lr, #0x1
    f0e0: f101 39ff    	add.w	r9, r1, #0xffffffff
    f0e4: f143 0300    	adc	r3, r3, #0x0
    f0e8: fba8 2003    	umull	r2, r0, r8, r3
    f0ec: f020 0203    	bic	r2, r0, #0x3
    f0f0: eb02 0290    	add.w	r2, r2, r0, lsr #2
    f0f4: 1a9b         	subs	r3, r3, r2
    f0f6: 1ae3         	subs	r3, r4, r3
    f0f8: fba3 3208    	umull	r3, r2, r3, r8
    f0fc: f166 0000    	sbc	r0, r6, #0x0
    f100: 085b         	lsrs	r3, r3, #0x1
    f102: fb08 2200    	mla	r2, r8, r0, r2
    f106: ea43 73c2    	orr.w	r3, r3, r2, lsl #31
    f10a: eb03 0383    	add.w	r3, r3, r3, lsl #2
    f10e: eba4 0343    	sub.w	r3, r4, r3, lsl #1
    f112: 3330         	adds	r3, #0x30
    f114: f801 3c01    	strb	r3, [r1, #-1]
    f118: 2d00         	cmp	r5, #0x0
    f11a: d0ba         	beq	0xf092 <_vfiprintf_r+0xb7a> @ imm = #-0x8c
    f11c: f89a 3000    	ldrb.w	r3, [r10]
    f120: 4573         	cmp	r3, lr
    f122: d1b6         	bne	0xf092 <_vfiprintf_r+0xb7a> @ imm = #-0x94
    f124: 2bff         	cmp	r3, #0xff
    f126: d0b4         	beq	0xf092 <_vfiprintf_r+0xb7a> @ imm = #-0x98
    f128: 2c0a         	cmp	r4, #0xa
    f12a: f176 0300    	sbcs	r3, r6, #0x0
    f12e: f080 820f    	bhs.w	0xf550 <_vfiprintf_r+0x1038> @ imm = #0x41e
    f132: 464d         	mov	r5, r9
    f134: ab44         	add	r3, sp, #0x110
    f136: 9906         	ldr	r1, [sp, #0x18]
    f138: 1b5b         	subs	r3, r3, r5
    f13a: f8cd a034    	str.w	r10, [sp, #0x34]
    f13e: f8dd 9014    	ldr.w	r9, [sp, #0x14]
    f142: 461a         	mov	r2, r3
    f144: 4291         	cmp	r1, r2
    f146: e9dd ba09    	ldrd	r11, r10, [sp, #36]
    f14a: bfb8         	it	lt
    f14c: 4611         	movlt	r1, r2
    f14e: 930a         	str	r3, [sp, #0x28]
    f150: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    f154: 9105         	str	r1, [sp, #0x14]
    f156: 2b00         	cmp	r3, #0x0
    f158: d056         	beq	0xf208 <_vfiprintf_r+0xcf0> @ imm = #0xac
    f15a: 9b05         	ldr	r3, [sp, #0x14]
    f15c: 3301         	adds	r3, #0x1
    f15e: 9305         	str	r3, [sp, #0x14]
    f160: e052         	b	0xf208 <_vfiprintf_r+0xcf0> @ imm = #0xa4
    f162: 9b03         	ldr	r3, [sp, #0xc]
    f164: 990b         	ldr	r1, [sp, #0x2c]
    f166: 06de         	lsls	r6, r3, #0x1b
    f168: f851 4b04    	ldr	r4, [r1], #4
    f16c: f53f ad72    	bmi.w	0xec54 <_vfiprintf_r+0x73c> @ imm = #-0x51c
    f170: 9b03         	ldr	r3, [sp, #0xc]
    f172: 065d         	lsls	r5, r3, #0x19
    f174: f140 816c    	bpl.w	0xf450 <_vfiprintf_r+0xf38> @ imm = #0x2d8
    f178: f344 3ec0    	sbfx	lr, r4, #0xf, #0x1
    f17c: 910b         	str	r1, [sp, #0x2c]
    f17e: b224         	sxth	r4, r4
    f180: 4673         	mov	r3, lr
    f182: f7ff bbca    	b.w	0xe91a <_vfiprintf_r+0x402> @ imm = #-0x86c
    f186: 9b03         	ldr	r3, [sp, #0xc]
    f188: 06da         	lsls	r2, r3, #0x1b
    f18a: f100 814f    	bmi.w	0xf42c <_vfiprintf_r+0xf14> @ imm = #0x29e
    f18e: 9b03         	ldr	r3, [sp, #0xc]
    f190: 065b         	lsls	r3, r3, #0x19
    f192: f100 81b9    	bmi.w	0xf508 <_vfiprintf_r+0xff0> @ imm = #0x372
    f196: 9b03         	ldr	r3, [sp, #0xc]
    f198: 059e         	lsls	r6, r3, #0x16
    f19a: f140 8147    	bpl.w	0xf42c <_vfiprintf_r+0xf14> @ imm = #0x28e
    f19e: 9b0b         	ldr	r3, [sp, #0x2c]
    f1a0: 9a07         	ldr	r2, [sp, #0x1c]
    f1a2: 681b         	ldr	r3, [r3]
    f1a4: 701a         	strb	r2, [r3]
    f1a6: e53f         	b	0xec28 <_vfiprintf_r+0x710> @ imm = #-0x582
    f1a8: 48ae         	ldr	r0, [pc, #0x2b8]        @ 0xf464 <_vfiprintf_r+0xf4c>
    f1aa: 9a03         	ldr	r2, [sp, #0xc]
    f1ac: f012 0120    	ands	r1, r2, #0x20
    f1b0: f000 80f0    	beq.w	0xf394 <_vfiprintf_r+0xe7c> @ imm = #0x1e0
    f1b4: 9a0b         	ldr	r2, [sp, #0x2c]
    f1b6: 3207         	adds	r2, #0x7
    f1b8: f022 0207    	bic	r2, r2, #0x7
    f1bc: 4614         	mov	r4, r2
    f1be: 6851         	ldr	r1, [r2, #0x4]
    f1c0: f854 2b08    	ldr	r2, [r4], #8
    f1c4: 940b         	str	r4, [sp, #0x2c]
    f1c6: ea52 0401    	orrs.w	r4, r2, r1
    f1ca: 9d03         	ldr	r5, [sp, #0xc]
    f1cc: bf14         	ite	ne
    f1ce: 2401         	movne	r4, #0x1
    f1d0: 2400         	moveq	r4, #0x0
    f1d2: 07ed         	lsls	r5, r5, #0x1f
    f1d4: d502         	bpl	0xf1dc <_vfiprintf_r+0xcc4> @ imm = #0x4
    f1d6: 2c00         	cmp	r4, #0x0
    f1d8: f040 8103    	bne.w	0xf3e2 <_vfiprintf_r+0xeca> @ imm = #0x206
    f1dc: 2300         	movs	r3, #0x0
    f1de: f88d 3043    	strb.w	r3, [sp, #0x43]
    f1e2: 9b06         	ldr	r3, [sp, #0x18]
    f1e4: 2b00         	cmp	r3, #0x0
    f1e6: 9b03         	ldr	r3, [sp, #0xc]
    f1e8: f2c0 80cd    	blt.w	0xf386 <_vfiprintf_r+0xe6e> @ imm = #0x19a
    f1ec: f423 6390    	bic	r3, r3, #0x480
    f1f0: 9303         	str	r3, [sp, #0xc]
    f1f2: 9b06         	ldr	r3, [sp, #0x18]
    f1f4: 2b00         	cmp	r3, #0x0
    f1f6: f040 80c9    	bne.w	0xf38c <_vfiprintf_r+0xe74> @ imm = #0x192
    f1fa: 2c00         	cmp	r4, #0x0
    f1fc: f040 80c6    	bne.w	0xf38c <_vfiprintf_r+0xe74> @ imm = #0x18c
    f200: ad44         	add	r5, sp, #0x110
    f202: 9406         	str	r4, [sp, #0x18]
    f204: 940a         	str	r4, [sp, #0x28]
    f206: 9405         	str	r4, [sp, #0x14]
    f208: 9c03         	ldr	r4, [sp, #0xc]
    f20a: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    f20e: f014 0884    	ands	r8, r4, #0x84
    f212: 4608         	mov	r0, r1
    f214: 4613         	mov	r3, r2
    f216: f000 8253    	beq.w	0xf6c0 <_vfiprintf_r+0x11a8> @ imm = #0x4a6
    f21a: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    f21e: 2b00         	cmp	r3, #0x0
    f220: f000 8244    	beq.w	0xf6ac <_vfiprintf_r+0x1194> @ imm = #0x488
    f224: 2300         	movs	r3, #0x0
    f226: 9309         	str	r3, [sp, #0x24]
    f228: 930c         	str	r3, [sp, #0x30]
    f22a: f7ff bb05    	b.w	0xe838 <_vfiprintf_r+0x320> @ imm = #-0x9f6
    f22e: 488e         	ldr	r0, [pc, #0x238]        @ 0xf468 <_vfiprintf_r+0xf50>
    f230: e7bb         	b	0xf1aa <_vfiprintf_r+0xc92> @ imm = #-0x8a
    f232: 9803         	ldr	r0, [sp, #0xc]
    f234: 2402         	movs	r4, #0x2
    f236: 930b         	str	r3, [sp, #0x2c]
    f238: f040 0002    	orr	r0, r0, #0x2
    f23c: 9003         	str	r0, [sp, #0xc]
    f23e: 488a         	ldr	r0, [pc, #0x228]        @ 0xf468 <_vfiprintf_r+0xf50>
    f240: ad44         	add	r5, sp, #0x110
    f242: f002 030f    	and	r3, r2, #0xf
    f246: 0912         	lsrs	r2, r2, #0x4
    f248: 5cc3         	ldrb	r3, [r0, r3]
    f24a: ea42 7201    	orr.w	r2, r2, r1, lsl #28
    f24e: 0909         	lsrs	r1, r1, #0x4
    f250: f805 3d01    	strb	r3, [r5, #-1]!
    f254: ea52 0301    	orrs.w	r3, r2, r1
    f258: d1f3         	bne	0xf242 <_vfiprintf_r+0xd2a> @ imm = #-0x1a
    f25a: ab44         	add	r3, sp, #0x110
    f25c: 9a06         	ldr	r2, [sp, #0x18]
    f25e: 1b5b         	subs	r3, r3, r5
    f260: 429a         	cmp	r2, r3
    f262: 930a         	str	r3, [sp, #0x28]
    f264: bfb8         	it	lt
    f266: 461a         	movlt	r2, r3
    f268: 9205         	str	r2, [sp, #0x14]
    f26a: 2c00         	cmp	r4, #0x0
    f26c: f47f acae    	bne.w	0xebcc <_vfiprintf_r+0x6b4> @ imm = #-0x6a4
    f270: e7ca         	b	0xf208 <_vfiprintf_r+0xcf0> @ imm = #-0x6c
    f272: 9b0b         	ldr	r3, [sp, #0x2c]
    f274: ad2b         	add	r5, sp, #0xac
    f276: 681b         	ldr	r3, [r3]
    f278: f88d 30ac    	strb.w	r3, [sp, #0xac]
    f27c: 2301         	movs	r3, #0x1
    f27e: 9305         	str	r3, [sp, #0x14]
    f280: 930a         	str	r3, [sp, #0x28]
    f282: f7ff bbc5    	b.w	0xea10 <_vfiprintf_r+0x4f8> @ imm = #-0x876
    f286: 9b03         	ldr	r3, [sp, #0xc]
    f288: f10a 0a01    	add.w	r10, r10, #0x1
    f28c: f043 0320    	orr	r3, r3, #0x20
    f290: 9303         	str	r3, [sp, #0xc]
    f292: f89a 3000    	ldrb.w	r3, [r10]
    f296: f7ff b9a6    	b.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0xcb4
    f29a: 9b03         	ldr	r3, [sp, #0xc]
    f29c: f10a 0a01    	add.w	r10, r10, #0x1
    f2a0: f443 7300    	orr	r3, r3, #0x200
    f2a4: 9303         	str	r3, [sp, #0xc]
    f2a6: f89a 3000    	ldrb.w	r3, [r10]
    f2aa: f7ff b99c    	b.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0xcc8
    f2ae: 9b09         	ldr	r3, [sp, #0x24]
    f2b0: 2208         	movs	r2, #0x8
    f2b2: 2100         	movs	r1, #0x0
    f2b4: a816         	add	r0, sp, #0x58
    f2b6: 9313         	str	r3, [sp, #0x4c]
    f2b8: f7f9 fd76    	bl	0x8da8 <memset>         @ imm = #-0x6514
    f2bc: 9e06         	ldr	r6, [sp, #0x18]
    f2be: 2e00         	cmp	r6, #0x0
    f2c0: f2c0 80ed    	blt.w	0xf49e <_vfiprintf_r+0xf86> @ imm = #0x1da
    f2c4: 2400         	movs	r4, #0x0
    f2c6: 4625         	mov	r5, r4
    f2c8: e00d         	b	0xf2e6 <_vfiprintf_r+0xdce> @ imm = #0x1a
    f2ca: a92b         	add	r1, sp, #0xac
    f2cc: 4658         	mov	r0, r11
    f2ce: f7fd fa29    	bl	0xc724 <_wcrtomb_r>     @ imm = #-0x2bae
    f2d2: 1c41         	adds	r1, r0, #0x1
    f2d4: f104 0404    	add.w	r4, r4, #0x4
    f2d8: 4428         	add	r0, r5
    f2da: f000 819c    	beq.w	0xf616 <_vfiprintf_r+0x10fe> @ imm = #0x338
    f2de: 42b0         	cmp	r0, r6
    f2e0: dc06         	bgt	0xf2f0 <_vfiprintf_r+0xdd8> @ imm = #0xc
    f2e2: d006         	beq	0xf2f2 <_vfiprintf_r+0xdda> @ imm = #0xc
    f2e4: 4605         	mov	r5, r0
    f2e6: 9a13         	ldr	r2, [sp, #0x4c]
    f2e8: ab16         	add	r3, sp, #0x58
    f2ea: 5912         	ldr	r2, [r2, r4]
    f2ec: 2a00         	cmp	r2, #0x0
    f2ee: d1ec         	bne	0xf2ca <_vfiprintf_r+0xdb2> @ imm = #-0x28
    f2f0: 9506         	str	r5, [sp, #0x18]
    f2f2: 9b06         	ldr	r3, [sp, #0x18]
    f2f4: 2b00         	cmp	r3, #0x0
    f2f6: f000 80e2    	beq.w	0xf4be <_vfiprintf_r+0xfa6> @ imm = #0x1c4
    f2fa: 2b63         	cmp	r3, #0x63
    f2fc: f340 811f    	ble.w	0xf53e <_vfiprintf_r+0x1026> @ imm = #0x23e
    f300: 1c59         	adds	r1, r3, #0x1
    f302: 4658         	mov	r0, r11
    f304: f7f9 ff24    	bl	0x9150 <_malloc_r>      @ imm = #-0x61b8
    f308: 4605         	mov	r5, r0
    f30a: 2800         	cmp	r0, #0x0
    f30c: f000 8183    	beq.w	0xf616 <_vfiprintf_r+0x10fe> @ imm = #0x306
    f310: 9009         	str	r0, [sp, #0x24]
    f312: 2208         	movs	r2, #0x8
    f314: 2100         	movs	r1, #0x0
    f316: a816         	add	r0, sp, #0x58
    f318: f7f9 fd46    	bl	0x8da8 <memset>         @ imm = #-0x6574
    f31c: 9c06         	ldr	r4, [sp, #0x18]
    f31e: ab16         	add	r3, sp, #0x58
    f320: aa13         	add	r2, sp, #0x4c
    f322: 4629         	mov	r1, r5
    f324: 4658         	mov	r0, r11
    f326: 9300         	str	r3, [sp]
    f328: 4623         	mov	r3, r4
    f32a: f7fd fa21    	bl	0xc770 <_wcsrtombs_r>   @ imm = #-0x2bbe
    f32e: 4284         	cmp	r4, r0
    f330: f040 81bf    	bne.w	0xf6b2 <_vfiprintf_r+0x119a> @ imm = #0x37e
    f334: 9906         	ldr	r1, [sp, #0x18]
    f336: 2300         	movs	r3, #0x0
    f338: ea21 70e1    	bic.w	r0, r1, r1, asr #31
    f33c: 546b         	strb	r3, [r5, r1]
    f33e: f89d 2043    	ldrb.w	r2, [sp, #0x43]
    f342: 9005         	str	r0, [sp, #0x14]
    f344: 2a00         	cmp	r2, #0x0
    f346: f040 815c    	bne.w	0xf602 <_vfiprintf_r+0x10ea> @ imm = #0x2b8
    f34a: 9206         	str	r2, [sp, #0x18]
    f34c: e9cd 180a    	strd	r1, r8, [sp, #40]
    f350: f7ff ba5d    	b.w	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0xb46
    f354: 9a03         	ldr	r2, [sp, #0xc]
    f356: f412 7200    	ands	r2, r2, #0x200
    f35a: f040 80c7    	bne.w	0xf4ec <_vfiprintf_r+0xfd4> @ imm = #0x18e
    f35e: 9b06         	ldr	r3, [sp, #0x18]
    f360: 4696         	mov	lr, r2
    f362: f88d 2043    	strb.w	r2, [sp, #0x43]
    f366: 2b00         	cmp	r3, #0x0
    f368: f6bf abce    	bge.w	0xeb08 <_vfiprintf_r+0x5f0> @ imm = #-0x864
    f36c: 910b         	str	r1, [sp, #0x2c]
    f36e: e488         	b	0xec82 <_vfiprintf_r+0x76a> @ imm = #-0x6f0
    f370: 9c08         	ldr	r4, [sp, #0x20]
    f372: 9e05         	ldr	r6, [sp, #0x14]
    f374: f8cd 8024    	str.w	r8, [sp, #0x24]
    f378: 1ba4         	subs	r4, r4, r6
    f37a: 2c00         	cmp	r4, #0x0
    f37c: f77f aa6e    	ble.w	0xe85c <_vfiprintf_r+0x344> @ imm = #-0xb24
    f380: 2202         	movs	r2, #0x2
    f382: 920c         	str	r2, [sp, #0x30]
    f384: e5e5         	b	0xef52 <_vfiprintf_r+0xa3a> @ imm = #-0x436
    f386: f423 6380    	bic	r3, r3, #0x400
    f38a: 9303         	str	r3, [sp, #0xc]
    f38c: 9b03         	ldr	r3, [sp, #0xc]
    f38e: f003 0402    	and	r4, r3, #0x2
    f392: e755         	b	0xf240 <_vfiprintf_r+0xd28> @ imm = #-0x156
    f394: 9c0b         	ldr	r4, [sp, #0x2c]
    f396: f854 2b04    	ldr	r2, [r4], #4
    f39a: 940b         	str	r4, [sp, #0x2c]
    f39c: 9c03         	ldr	r4, [sp, #0xc]
    f39e: f014 0410    	ands	r4, r4, #0x10
    f3a2: f47f af10    	bne.w	0xf1c6 <_vfiprintf_r+0xcae> @ imm = #-0x1e0
    f3a6: 9903         	ldr	r1, [sp, #0xc]
    f3a8: f011 0140    	ands	r1, r1, #0x40
    f3ac: d06c         	beq	0xf488 <_vfiprintf_r+0xf70> @ imm = #0xd8
    f3ae: b292         	uxth	r2, r2
    f3b0: 4621         	mov	r1, r4
    f3b2: e708         	b	0xf1c6 <_vfiprintf_r+0xcae> @ imm = #-0x1f0
    f3b4: aa18         	add	r2, sp, #0x60
    f3b6: 9904         	ldr	r1, [sp, #0x10]
    f3b8: 4658         	mov	r0, r11
    f3ba: f7fc fdf3    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x341a
    f3be: 4680         	mov	r8, r0
    f3c0: 2800         	cmp	r0, #0x0
    f3c2: f47f a9ec    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0xc28
    f3c6: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    f3ca: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    f3ce: 2b00         	cmp	r3, #0x0
    f3d0: d161         	bne	0xf496 <_vfiprintf_r+0xf7e> @ imm = #0xc2
    f3d2: 9b0c         	ldr	r3, [sp, #0x30]
    f3d4: f10d 096c    	add.w	r9, sp, #0x6c
    f3d8: 2b00         	cmp	r3, #0x0
    f3da: f47f aa3f    	bne.w	0xe85c <_vfiprintf_r+0x344> @ imm = #-0xb82
    f3de: f7ff ba51    	b.w	0xe884 <_vfiprintf_r+0x36c> @ imm = #-0xb5e
    f3e2: f88d 3045    	strb.w	r3, [sp, #0x45]
    f3e6: 2330         	movs	r3, #0x30
    f3e8: f88d 3044    	strb.w	r3, [sp, #0x44]
    f3ec: 2300         	movs	r3, #0x0
    f3ee: f88d 3043    	strb.w	r3, [sp, #0x43]
    f3f2: 9b06         	ldr	r3, [sp, #0x18]
    f3f4: 2b00         	cmp	r3, #0x0
    f3f6: da6e         	bge	0xf4d6 <_vfiprintf_r+0xfbe> @ imm = #0xdc
    f3f8: 9b03         	ldr	r3, [sp, #0xc]
    f3fa: f423 6380    	bic	r3, r3, #0x400
    f3fe: f043 0302    	orr	r3, r3, #0x2
    f402: 9303         	str	r3, [sp, #0xc]
    f404: e7c2         	b	0xf38c <_vfiprintf_r+0xe74> @ imm = #-0x7c
    f406: 4658         	mov	r0, r11
    f408: f7f9 fca4    	bl	0x8d54 <__sinit>        @ imm = #-0x66b8
    f40c: f7ff b89a    	b.w	0xe544 <_vfiprintf_r+0x2c> @ imm = #-0xecc
    f410: aa18         	add	r2, sp, #0x60
    f412: 9904         	ldr	r1, [sp, #0x10]
    f414: 4658         	mov	r0, r11
    f416: f7fc fdc5    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x3476
    f41a: 2800         	cmp	r0, #0x0
    f41c: f47f a9bf    	bne.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0xc82
    f420: f10d 096c    	add.w	r9, sp, #0x6c
    f424: e9dd 2119    	ldrd	r2, r1, [sp, #100]
    f428: f7ff ba2c    	b.w	0xe884 <_vfiprintf_r+0x36c> @ imm = #-0xba8
    f42c: 9b0b         	ldr	r3, [sp, #0x2c]
    f42e: 9a07         	ldr	r2, [sp, #0x1c]
    f430: 681b         	ldr	r3, [r3]
    f432: 601a         	str	r2, [r3]
    f434: f7ff bbf8    	b.w	0xec28 <_vfiprintf_r+0x710> @ imm = #-0x810
    f438: 9b06         	ldr	r3, [sp, #0x18]
    f43a: 4d0c         	ldr	r5, [pc, #0x30]         @ 0xf46c <_vfiprintf_r+0xf54>
    f43c: 2b06         	cmp	r3, #0x6
    f43e: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f442: 9206         	str	r2, [sp, #0x18]
    f444: bf28         	it	hs
    f446: 2306         	movhs	r3, #0x6
    f448: 9305         	str	r3, [sp, #0x14]
    f44a: 930a         	str	r3, [sp, #0x28]
    f44c: f7ff b9df    	b.w	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0xc42
    f450: 9b03         	ldr	r3, [sp, #0xc]
    f452: 910b         	str	r1, [sp, #0x2c]
    f454: 0598         	lsls	r0, r3, #0x16
    f456: d552         	bpl	0xf4fe <_vfiprintf_r+0xfe6> @ imm = #0xa4
    f458: f344 1ec0    	sbfx	lr, r4, #0x7, #0x1
    f45c: b264         	sxtb	r4, r4
    f45e: 4673         	mov	r3, lr
    f460: f7ff ba5b    	b.w	0xe91a <_vfiprintf_r+0x402> @ imm = #-0xb4a
    f464: 54 1d 21 80  	.word	0x80211d54
    f468: 40 1d 21 80  	.word	0x80211d40
    f46c: 68 1d 21 80  	.word	0x80211d68
    f470: cd cc cc cc  	.word	0xcccccccd
    f474: 9c03         	ldr	r4, [sp, #0xc]
    f476: f414 7200    	ands	r2, r4, #0x200
    f47a: d033         	beq	0xf4e4 <_vfiprintf_r+0xfcc> @ imm = #0x66
    f47c: 4602         	mov	r2, r0
    f47e: b2db         	uxtb	r3, r3
    f480: 4620         	mov	r0, r4
    f482: 910b         	str	r1, [sp, #0x2c]
    f484: f7ff bb03    	b.w	0xea8e <_vfiprintf_r+0x576> @ imm = #-0x9fa
    f488: 9c03         	ldr	r4, [sp, #0xc]
    f48a: f414 7400    	ands	r4, r4, #0x200
    f48e: bf14         	ite	ne
    f490: b2d2         	uxtbne	r2, r2
    f492: 4621         	moveq	r1, r4
    f494: e697         	b	0xf1c6 <_vfiprintf_r+0xcae> @ imm = #-0x2d2
    f496: f10d 096c    	add.w	r9, sp, #0x6c
    f49a: f7ff b9cd    	b.w	0xe838 <_vfiprintf_r+0x320> @ imm = #-0xc66
    f49e: ab16         	add	r3, sp, #0x58
    f4a0: aa13         	add	r2, sp, #0x4c
    f4a2: 4658         	mov	r0, r11
    f4a4: 9300         	str	r3, [sp]
    f4a6: 2300         	movs	r3, #0x0
    f4a8: 4619         	mov	r1, r3
    f4aa: f7fd f961    	bl	0xc770 <_wcsrtombs_r>   @ imm = #-0x2d3e
    f4ae: 4603         	mov	r3, r0
    f4b0: 9006         	str	r0, [sp, #0x18]
    f4b2: 3301         	adds	r3, #0x1
    f4b4: f000 80af    	beq.w	0xf616 <_vfiprintf_r+0x10fe> @ imm = #0x15e
    f4b8: 9b09         	ldr	r3, [sp, #0x24]
    f4ba: 9313         	str	r3, [sp, #0x4c]
    f4bc: e719         	b	0xf2f2 <_vfiprintf_r+0xdda> @ imm = #-0x1ce
    f4be: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    f4c2: 9d09         	ldr	r5, [sp, #0x24]
    f4c4: 3b00         	subs	r3, #0x0
    f4c6: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f4ca: bf18         	it	ne
    f4cc: 2301         	movne	r3, #0x1
    f4ce: 9305         	str	r3, [sp, #0x14]
    f4d0: 9b06         	ldr	r3, [sp, #0x18]
    f4d2: 930a         	str	r3, [sp, #0x28]
    f4d4: e698         	b	0xf208 <_vfiprintf_r+0xcf0> @ imm = #-0x2d0
    f4d6: 9b03         	ldr	r3, [sp, #0xc]
    f4d8: f423 6390    	bic	r3, r3, #0x480
    f4dc: f043 0302    	orr	r3, r3, #0x2
    f4e0: 9303         	str	r3, [sp, #0xc]
    f4e2: e753         	b	0xf38c <_vfiprintf_r+0xe74> @ imm = #-0x15a
    f4e4: 9803         	ldr	r0, [sp, #0xc]
    f4e6: 910b         	str	r1, [sp, #0x2c]
    f4e8: f7ff bad1    	b.w	0xea8e <_vfiprintf_r+0x576> @ imm = #-0xa5e
    f4ec: 469e         	mov	lr, r3
    f4ee: f88d 3043    	strb.w	r3, [sp, #0x43]
    f4f2: 9b06         	ldr	r3, [sp, #0x18]
    f4f4: b2e4         	uxtb	r4, r4
    f4f6: 2b00         	cmp	r3, #0x0
    f4f8: f6bf ab06    	bge.w	0xeb08 <_vfiprintf_r+0x5f0> @ imm = #-0x9f4
    f4fc: e736         	b	0xf36c <_vfiprintf_r+0xe54> @ imm = #-0x194
    f4fe: ea4f 7ee4    	asr.w	lr, r4, #0x1f
    f502: 4673         	mov	r3, lr
    f504: f7ff ba09    	b.w	0xe91a <_vfiprintf_r+0x402> @ imm = #-0xbee
    f508: 9b0b         	ldr	r3, [sp, #0x2c]
    f50a: 9a07         	ldr	r2, [sp, #0x1c]
    f50c: 681b         	ldr	r3, [r3]
    f50e: 801a         	strh	r2, [r3]
    f510: f7ff bb8a    	b.w	0xec28 <_vfiprintf_r+0x710> @ imm = #-0x8ec
    f514: 9d09         	ldr	r5, [sp, #0x24]
    f516: 4628         	mov	r0, r5
    f518: f7f9 fd7e    	bl	0x9018 <strlen>         @ imm = #-0x6504
    f51c: f89d 3043    	ldrb.w	r3, [sp, #0x43]
    f520: ea20 72e0    	bic.w	r2, r0, r0, asr #31
    f524: 900a         	str	r0, [sp, #0x28]
    f526: 9205         	str	r2, [sp, #0x14]
    f528: 2b00         	cmp	r3, #0x0
    f52a: f000 808a    	beq.w	0xf642 <_vfiprintf_r+0x112a> @ imm = #0x114
    f52e: 3201         	adds	r2, #0x1
    f530: 9406         	str	r4, [sp, #0x18]
    f532: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f536: 9205         	str	r2, [sp, #0x14]
    f538: 9409         	str	r4, [sp, #0x24]
    f53a: f7ff ba0e    	b.w	0xe95a <_vfiprintf_r+0x442> @ imm = #-0xbe4
    f53e: 2300         	movs	r3, #0x0
    f540: ad2b         	add	r5, sp, #0xac
    f542: 9309         	str	r3, [sp, #0x24]
    f544: e6e5         	b	0xf312 <_vfiprintf_r+0xdfa> @ imm = #-0x236
    f546: 6d88         	ldr	r0, [r1, #0x58]
    f548: f7f9 fcee    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x6624
    f54c: f7ff b8e3    	b.w	0xe716 <_vfiprintf_r+0x1fe> @ imm = #-0xe3a
    f550: 9a0e         	ldr	r2, [sp, #0x38]
    f552: 990f         	ldr	r1, [sp, #0x3c]
    f554: eba9 0b02    	sub.w	r11, r9, r2
    f558: 4658         	mov	r0, r11
    f55a: f7fc fff5    	bl	0xc548 <strncpy>        @ imm = #-0x3016
    f55e: f89a 3001    	ldrb.w	r3, [r10, #0x1]
    f562: b10b         	cbz	r3, 0xf568 <_vfiprintf_r+0x1050> @ imm = #0x2
    f564: f10a 0a01    	add.w	r10, r10, #0x1
    f568: 19a3         	adds	r3, r4, r6
    f56a: 4a5b         	ldr	r2, [pc, #0x16c]        @ 0xf6d8 <_vfiprintf_r+0x11c0>
    f56c: f04f 31cc    	mov.w	r1, #0xcccccccc
    f570: f04f 0e01    	mov.w	lr, #0x1
    f574: f143 0300    	adc	r3, r3, #0x0
    f578: f10b 39ff    	add.w	r9, r11, #0xffffffff
    f57c: fba2 0c03    	umull	r0, r12, r2, r3
    f580: f02c 0003    	bic	r0, r12, #0x3
    f584: eb00 009c    	add.w	r0, r0, r12, lsr #2
    f588: 1a1b         	subs	r3, r3, r0
    f58a: 1ae3         	subs	r3, r4, r3
    f58c: f166 0600    	sbc	r6, r6, #0x0
    f590: fb03 f101    	mul	r1, r3, r1
    f594: fba3 3002    	umull	r3, r0, r3, r2
    f598: fb02 1106    	mla	r1, r2, r6, r1
    f59c: fa23 f30e    	lsr.w	r3, r3, lr
    f5a0: 4401         	add	r1, r0
    f5a2: ea43 74c1    	orr.w	r4, r3, r1, lsl #31
    f5a6: fa21 f60e    	lsr.w	r6, r1, lr
    f5aa: 19a3         	adds	r3, r4, r6
    f5ac: f143 0300    	adc	r3, r3, #0x0
    f5b0: fba2 1003    	umull	r1, r0, r2, r3
    f5b4: f020 0103    	bic	r1, r0, #0x3
    f5b8: eb01 0190    	add.w	r1, r1, r0, lsr #2
    f5bc: 1a5b         	subs	r3, r3, r1
    f5be: 1ae3         	subs	r3, r4, r3
    f5c0: fba3 3102    	umull	r3, r1, r3, r2
    f5c4: f166 0000    	sbc	r0, r6, #0x0
    f5c8: fa23 f30e    	lsr.w	r3, r3, lr
    f5cc: fb02 1200    	mla	r2, r2, r0, r1
    f5d0: ea43 73c2    	orr.w	r3, r3, r2, lsl #31
    f5d4: eb03 0383    	add.w	r3, r3, r3, lsl #2
    f5d8: eba4 0343    	sub.w	r3, r4, r3, lsl #1
    f5dc: 3330         	adds	r3, #0x30
    f5de: f80b 3c01    	strb	r3, [r11, #-1]
    f5e2: e59b         	b	0xf11c <_vfiprintf_r+0xc04> @ imm = #-0x4ca
    f5e4: 2200         	movs	r2, #0x0
    f5e6: 4682         	mov	r10, r0
    f5e8: 9206         	str	r2, [sp, #0x18]
    f5ea: f7fe bffe    	b.w	0xe5ea <_vfiprintf_r+0xd2> @ imm = #-0x1004
    f5ee: aa18         	add	r2, sp, #0x60
    f5f0: 9904         	ldr	r1, [sp, #0x10]
    f5f2: 4658         	mov	r0, r11
    f5f4: f7fc fcd6    	bl	0xbfa4 <__sprint_r>     @ imm = #-0x3654
    f5f8: 2800         	cmp	r0, #0x0
    f5fa: f43f a8b9    	beq.w	0xe770 <_vfiprintf_r+0x258> @ imm = #-0xe8e
    f5fe: f7ff b8d4    	b.w	0xe7aa <_vfiprintf_r+0x292> @ imm = #-0xe58
    f602: 9a06         	ldr	r2, [sp, #0x18]
    f604: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f608: 920a         	str	r2, [sp, #0x28]
    f60a: 9a05         	ldr	r2, [sp, #0x14]
    f60c: 9306         	str	r3, [sp, #0x18]
    f60e: 3201         	adds	r2, #0x1
    f610: 9205         	str	r2, [sp, #0x14]
    f612: f7ff b9a2    	b.w	0xe95a <_vfiprintf_r+0x442> @ imm = #-0xcbc
    f616: 9804         	ldr	r0, [sp, #0x10]
    f618: f9b0 300c    	ldrsh.w	r3, [r0, #0xc]
    f61c: 6e42         	ldr	r2, [r0, #0x64]
    f61e: f043 0140    	orr	r1, r3, #0x40
    f622: 07d2         	lsls	r2, r2, #0x1f
    f624: 8181         	strh	r1, [r0, #0xc]
    f626: f53f a8df    	bmi.w	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #-0xe42
    f62a: 0599         	lsls	r1, r3, #0x16
    f62c: f53f a8dc    	bmi.w	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #-0xe48
    f630: f7ff b95e    	b.w	0xe8f0 <_vfiprintf_r+0x3d8> @ imm = #-0xd44
    f634: 9d09         	ldr	r5, [sp, #0x24]
    f636: 9206         	str	r2, [sp, #0x18]
    f638: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f63c: 9209         	str	r2, [sp, #0x24]
    f63e: f7ff b8e6    	b.w	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0xe34
    f642: 9d09         	ldr	r5, [sp, #0x24]
    f644: 9306         	str	r3, [sp, #0x18]
    f646: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f64a: 9309         	str	r3, [sp, #0x24]
    f64c: f7ff b8df    	b.w	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0xe42
    f650: b14a         	cbz	r2, 0xf666 <_vfiprintf_r+0x114e> @ imm = #0x12
    f652: 9a06         	ldr	r2, [sp, #0x18]
    f654: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f658: 1c51         	adds	r1, r2, #0x1
    f65a: 920a         	str	r2, [sp, #0x28]
    f65c: 9006         	str	r0, [sp, #0x18]
    f65e: 9105         	str	r1, [sp, #0x14]
    f660: 9009         	str	r0, [sp, #0x24]
    f662: f7ff b97a    	b.w	0xe95a <_vfiprintf_r+0x442> @ imm = #-0xd0c
    f666: 9b06         	ldr	r3, [sp, #0x18]
    f668: 9209         	str	r2, [sp, #0x24]
    f66a: f8cd 802c    	str.w	r8, [sp, #0x2c]
    f66e: 930a         	str	r3, [sp, #0x28]
    f670: 9305         	str	r3, [sp, #0x14]
    f672: 9206         	str	r2, [sp, #0x18]
    f674: f7ff b8cb    	b.w	0xe80e <_vfiprintf_r+0x2f6> @ imm = #-0xe6a
    f678: 9a0b         	ldr	r2, [sp, #0x2c]
    f67a: f89a 3001    	ldrb.w	r3, [r10, #0x1]
    f67e: 4682         	mov	r10, r0
    f680: f852 1b04    	ldr	r1, [r2], #4
    f684: ea41 71e1    	orr.w	r1, r1, r1, asr #31
    f688: 920b         	str	r2, [sp, #0x2c]
    f68a: 9106         	str	r1, [sp, #0x18]
    f68c: f7fe bfab    	b.w	0xe5e6 <_vfiprintf_r+0xce> @ imm = #-0x10aa
    f690: 9a04         	ldr	r2, [sp, #0x10]
    f692: 6e53         	ldr	r3, [r2, #0x64]
    f694: 07df         	lsls	r7, r3, #0x1f
    f696: f53f a8a7    	bmi.w	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #-0xeb2
    f69a: 8993         	ldrh	r3, [r2, #0xc]
    f69c: 059e         	lsls	r6, r3, #0x16
    f69e: f53f a8a3    	bmi.w	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #-0xeba
    f6a2: 6d90         	ldr	r0, [r2, #0x58]
    f6a4: f7f9 fc40    	bl	0x8f28 <__retarget_lock_release_recursive> @ imm = #-0x6780
    f6a8: f7ff b89e    	b.w	0xe7e8 <_vfiprintf_r+0x2d0> @ imm = #-0xec4
    f6ac: 9309         	str	r3, [sp, #0x24]
    f6ae: f7ff b8e5    	b.w	0xe87c <_vfiprintf_r+0x364> @ imm = #-0xe36
    f6b2: 9a04         	ldr	r2, [sp, #0x10]
    f6b4: 8993         	ldrh	r3, [r2, #0xc]
    f6b6: f043 0340    	orr	r3, r3, #0x40
    f6ba: 8193         	strh	r3, [r2, #0xc]
    f6bc: f7ff b86f    	b.w	0xe79e <_vfiprintf_r+0x286> @ imm = #-0xf22
    f6c0: f8cd 8024    	str.w	r8, [sp, #0x24]
    f6c4: f7ff b8ab    	b.w	0xe81e <_vfiprintf_r+0x306> @ imm = #-0xeaa
    f6c8: 4804         	ldr	r0, [pc, #0x10]         @ 0xf6dc <_vfiprintf_r+0x11c4>
    f6ca: 930b         	str	r3, [sp, #0x2c]
    f6cc: e65e         	b	0xf38c <_vfiprintf_r+0xe74> @ imm = #-0x344
    f6ce: 9803         	ldr	r0, [sp, #0xc]
    f6d0: e4aa         	b	0xf028 <_vfiprintf_r+0xb10> @ imm = #-0x6ac
    f6d2: 9a03         	ldr	r2, [sp, #0xc]
    f6d4: e4bc         	b	0xf050 <_vfiprintf_r+0xb38> @ imm = #-0x688
    f6d6: bf00         	nop
    f6d8: cd cc cc cc  	.word	0xcccccccd
    f6dc: 40 1d 21 80  	.word	0x80211d40

0000f6e0 <__sbprintf>:
; __sbprintf():
    f6e0: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
    f6e4: 4698         	mov	r8, r3
    f6e6: 898b         	ldrh	r3, [r1, #0xc]
    f6e8: f5ad 6d8d    	sub.w	sp, sp, #0x468
    f6ec: 4616         	mov	r6, r2
    f6ee: f023 0302    	bic	r3, r3, #0x2
    f6f2: 4607         	mov	r7, r0
    f6f4: a816         	add	r0, sp, #0x58
    f6f6: 460d         	mov	r5, r1
    f6f8: f8ad 300c    	strh.w	r3, [sp, #0xc]
    f6fc: ab1a         	add	r3, sp, #0x68
    f6fe: 466c         	mov	r4, sp
    f700: 9300         	str	r3, [sp]
    f702: 9304         	str	r3, [sp, #0x10]
    f704: f44f 6380    	mov.w	r3, #0x400
    f708: 9302         	str	r3, [sp, #0x8]
    f70a: 9305         	str	r3, [sp, #0x14]
    f70c: 6e4b         	ldr	r3, [r1, #0x64]
    f70e: 9319         	str	r3, [sp, #0x64]
    f710: 89cb         	ldrh	r3, [r1, #0xe]
    f712: f8ad 300e    	strh.w	r3, [sp, #0xe]
    f716: 69cb         	ldr	r3, [r1, #0x1c]
    f718: 9307         	str	r3, [sp, #0x1c]
    f71a: 6a4b         	ldr	r3, [r1, #0x24]
    f71c: 9309         	str	r3, [sp, #0x24]
    f71e: 2300         	movs	r3, #0x0
    f720: 9306         	str	r3, [sp, #0x18]
    f722: f7f9 fbfb    	bl	0x8f1c <__retarget_lock_init_recursive> @ imm = #-0x680a
    f726: 4632         	mov	r2, r6
    f728: 4643         	mov	r3, r8
    f72a: 4669         	mov	r1, sp
    f72c: 4638         	mov	r0, r7
    f72e: f7fe fef3    	bl	0xe518 <_vfiprintf_r>   @ imm = #-0x121a
    f732: 1e06         	subs	r6, r0, #0x0
    f734: db07         	blt	0xf746 <__sbprintf+0x66> @ imm = #0xe
    f736: 4669         	mov	r1, sp
    f738: 4638         	mov	r0, r7
    f73a: f7fc fd3d    	bl	0xc1b8 <_fflush_r>      @ imm = #-0x3586
    f73e: 2800         	cmp	r0, #0x0
    f740: bf18         	it	ne
    f742: f04f 36ff    	movne.w	r6, #0xffffffff
    f746: 89a3         	ldrh	r3, [r4, #0xc]
    f748: 065b         	lsls	r3, r3, #0x19
    f74a: d503         	bpl	0xf754 <__sbprintf+0x74> @ imm = #0x6
    f74c: 89ab         	ldrh	r3, [r5, #0xc]
    f74e: f043 0340    	orr	r3, r3, #0x40
    f752: 81ab         	strh	r3, [r5, #0xc]
    f754: 6da0         	ldr	r0, [r4, #0x58]
    f756: f7f9 fbe3    	bl	0x8f20 <__retarget_lock_close_recursive> @ imm = #-0x683a
    f75a: 4630         	mov	r0, r6
    f75c: f50d 6d8d    	add.w	sp, sp, #0x468
    f760: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}

0000f764 <_close>:
; _close():
    f764: 4b02         	ldr	r3, [pc, #0x8]          @ 0xf770 <_close+0xc>
    f766: 2258         	movs	r2, #0x58
    f768: f04f 30ff    	mov.w	r0, #0xffffffff
    f76c: 601a         	str	r2, [r3]
    f76e: 4770         	bx	lr
    f770: 44 18 00 20  	.word	0x20001844

0000f774 <_fstat>:
; _fstat():
    f774: 4b02         	ldr	r3, [pc, #0x8]          @ 0xf780 <_fstat+0xc>
    f776: 2258         	movs	r2, #0x58
    f778: f04f 30ff    	mov.w	r0, #0xffffffff
    f77c: 601a         	str	r2, [r3]
    f77e: 4770         	bx	lr
    f780: 44 18 00 20  	.word	0x20001844

0000f784 <_getpid>:
; _getpid():
    f784: 4b02         	ldr	r3, [pc, #0x8]          @ 0xf790 <_getpid+0xc>
    f786: 2258         	movs	r2, #0x58
    f788: f04f 30ff    	mov.w	r0, #0xffffffff
    f78c: 601a         	str	r2, [r3]
    f78e: 4770         	bx	lr
    f790: 44 18 00 20  	.word	0x20001844

0000f794 <_isatty>:
; _isatty():
    f794: 4b02         	ldr	r3, [pc, #0x8]          @ 0xf7a0 <_isatty+0xc>
    f796: 2258         	movs	r2, #0x58
    f798: 2000         	movs	r0, #0x0
    f79a: 601a         	str	r2, [r3]
    f79c: 4770         	bx	lr
    f79e: bf00         	nop
    f7a0: 44 18 00 20  	.word	0x20001844

0000f7a4 <_kill>:
; _kill():
    f7a4: 4b02         	ldr	r3, [pc, #0x8]          @ 0xf7b0 <_kill+0xc>
    f7a6: 2258         	movs	r2, #0x58
    f7a8: f04f 30ff    	mov.w	r0, #0xffffffff
    f7ac: 601a         	str	r2, [r3]
    f7ae: 4770         	bx	lr
    f7b0: 44 18 00 20  	.word	0x20001844

0000f7b4 <_lseek>:
; _lseek():
    f7b4: 4b02         	ldr	r3, [pc, #0x8]          @ 0xf7c0 <_lseek+0xc>
    f7b6: 2258         	movs	r2, #0x58
    f7b8: f04f 30ff    	mov.w	r0, #0xffffffff
    f7bc: 601a         	str	r2, [r3]
    f7be: 4770         	bx	lr
    f7c0: 44 18 00 20  	.word	0x20001844

0000f7c4 <_read>:
; _read():
    f7c4: 4b02         	ldr	r3, [pc, #0x8]          @ 0xf7d0 <_read+0xc>
    f7c6: 2258         	movs	r2, #0x58
    f7c8: f04f 30ff    	mov.w	r0, #0xffffffff
    f7cc: 601a         	str	r2, [r3]
    f7ce: 4770         	bx	lr
    f7d0: 44 18 00 20  	.word	0x20001844

0000f7d4 <_sbrk>:
; _sbrk():
    f7d4: 4a05         	ldr	r2, [pc, #0x14]         @ 0xf7ec <_sbrk+0x18>
    f7d6: 4603         	mov	r3, r0
    f7d8: 6810         	ldr	r0, [r2]
    f7da: b110         	cbz	r0, 0xf7e2 <_sbrk+0xe>  @ imm = #0x4
    f7dc: 4403         	add	r3, r0
    f7de: 6013         	str	r3, [r2]
    f7e0: 4770         	bx	lr
    f7e2: 4803         	ldr	r0, [pc, #0xc]          @ 0xf7f0 <_sbrk+0x1c>
    f7e4: 4403         	add	r3, r0
    f7e6: 6013         	str	r3, [r2]
    f7e8: 4770         	bx	lr
    f7ea: bf00         	nop
    f7ec: d8 19 00 20  	.word	0x200019d8
    f7f0: 00 80 00 20  	.word	0x20008000

0000f7f4 <_exit>:
; _exit():
    f7f4: e7fe         	b	0xf7f4 <_exit>          @ imm = #-0x4
    f7f6: bf00         	nop

0000f7f8 <__GetSystemCoreClock_veneer>:
; __GetSystemCoreClock_veneer():
    f7f8: f85f f000    	ldr.w	pc, [pc, #-0x0]         @ 0xf7fc <__GetSystemCoreClock_veneer+0x4>
    f7fc: e1 08 20 80  	.word	0x802008e1

0000f800 <__sys_busy_loop_us_veneer>:
; __sys_busy_loop_us_veneer():
    f800: f85f f000    	ldr.w	pc, [pc, #-0x0]         @ 0xf804 <__sys_busy_loop_us_veneer+0x4>
    f804: 43 0b 20 80  	.word	0x80200b43

0000f808 <___fini_veneer>:
; ___fini_veneer():
    f808: f85f f000    	ldr.w	pc, [pc, #-0x0]         @ 0xf80c <___fini_veneer+0x4>
    f80c: ed 17 21 80  	.word	0x802117ed

0000f810 <___init_veneer>:
; ___init_veneer():
    f810: f85f f000    	ldr.w	pc, [pc, #-0x0]         @ 0xf814 <___init_veneer+0x4>
    f814: e1 17 21 80  	.word	0x802117e1
    f818: 00 00 00 00  	.word	0x00000000
    f81c: 00 00 00 00  	.word	0x00000000

Disassembly of section .readonly.at_mram:

802117e0 <_init>:
; _init():
802117e0: b5f8         	push	{r3, r4, r5, r6, r7, lr}
802117e2: bf00         	nop
802117e4: bcf8         	pop	{r3, r4, r5, r6, r7}
802117e6: bc08         	pop	{r3}
802117e8: 469e         	mov	lr, r3
802117ea: 4770         	bx	lr

802117ec <_fini>:
; _fini():
802117ec: b5f8         	push	{r3, r4, r5, r6, r7, lr}
802117ee: bf00         	nop
802117f0: bcf8         	pop	{r3, r4, r5, r6, r7}
802117f2: bc08         	pop	{r3}
802117f4: 469e         	mov	lr, r3
802117f6: 4770         	bx	lr

802117f8 <__preinit_array_start>:
802117f8: 07 09 20 80  	.word	0x80200907

802117fc <__preinit_array_end>:
802117fc: 75 90 00 00  	.word	0x00009075
80211800: 6d 00 00 00  	.word	0x0000006d
80211804: a5 03 00 00  	.word	0x000003a5

80211808 <__init_array_end>:
80211808: 45 00 00 00  	.word	0x00000045

8021180c <__fini_array_end>:
8021180c: 01 68 01 f1  	.word	0xf1016801
80211810: 03 01 01 60  	.word	0x60010103
80211814: 70 47 00 00  	.word	0x00004770
80211818: 56 61 6c 20  	.word	0x206c6156
8021181c: 4e 65 77 20  	.word	0x2077654e
80211820: 25 64 0a 00  	.word	0x000a6425
80211824: 48 61 72 64  	.word	0x64726148
80211828: 46 61 75 6c  	.word	0x6c756146
8021182c: 74 00 00 00  	.word	0x00000074
80211830: 4d 65 6d 4d  	.word	0x4d6d654d
80211834: 61 6e 61 67  	.word	0x67616e61
80211838: 65 00 00 00  	.word	0x00000065
8021183c: 42 75 73 46  	.word	0x46737542
80211840: 61 75 6c 74  	.word	0x746c7561
80211844: 00 00 00 00  	.word	0x00000000
80211848: 55 73 61 67  	.word	0x67617355
8021184c: 65 46 61 75  	.word	0x75614665
80211850: 6c 74 00 00  	.word	0x0000746c
80211854: 53 65 63 75  	.word	0x75636553
80211858: 72 65 46 61  	.word	0x61466572
8021185c: 75 6c 74 00  	.word	0x00746c75
80211860: 44 65 62 75  	.word	0x75626544
80211864: 67 4d 6f 6e  	.word	0x6e6f4d67
80211868: 69 74 6f 72  	.word	0x726f7469
8021186c: 00 00 00 00  	.word	0x00000000
80211870: 20 28 00 00  	.word	0x00002820
80211874: 2c 20 00 00  	.word	0x0000202c
80211878: 25 73 25 2e  	.word	0x2e257325
8021187c: 2a 73 00 00  	.word	0x0000732a
80211880: 00 00 00 00  	.word	0x00000000
80211884: 29 00 00 00  	.word	0x00000029
80211888: 4d 4d 46 53  	.word	0x53464d4d
8021188c: 52 20 3d 20  	.word	0x203d2052
80211890: 25 30 32 6c  	.word	0x6c323025
80211894: 58 00 00 00  	.word	0x00000058
80211898: 4d 4d 46 41  	.word	0x41464d4d
8021189c: 52 20 3d 20  	.word	0x203d2052
802118a0: 25 30 38 6c  	.word	0x6c383025
802118a4: 58 0a 00 00  	.word	0x00000a58
802118a8: 42 46 53 52  	.word	0x52534642
802118ac: 20 20 3d 20  	.word	0x203d2020
802118b0: 25 30 32 6c  	.word	0x6c323025
802118b4: 58 00 00 00  	.word	0x00000058
802118b8: 42 46 41 52  	.word	0x52414642
802118bc: 20 20 3d 20  	.word	0x203d2020
802118c0: 25 30 38 6c  	.word	0x6c383025
802118c4: 58 0a 00 00  	.word	0x00000a58
802118c8: 41 46 53 52  	.word	0x52534641
802118cc: 20 20 3d 20  	.word	0x203d2020
802118d0: 25 30 38 6c  	.word	0x6c383025
802118d4: 58 00 00 00  	.word	0x00000058
802118d8: 55 46 53 52  	.word	0x52534655
802118dc: 20 20 3d 20  	.word	0x203d2020
802118e0: 25 30 34 6c  	.word	0x6c343025
802118e4: 58 00 00 00  	.word	0x00000058
802118e8: 48 46 53 52  	.word	0x52534648
802118ec: 20 20 3d 20  	.word	0x203d2020
802118f0: 25 30 38 6c  	.word	0x6c383025
802118f4: 58 00 00 00  	.word	0x00000058
802118f8: 53 46 53 52  	.word	0x52534653
802118fc: 20 20 3d 20  	.word	0x203d2020
80211900: 25 30 38 6c  	.word	0x6c383025
80211904: 58 00 00 00  	.word	0x00000058
80211908: 44 46 53 52  	.word	0x52534644
8021190c: 20 20 3d 20  	.word	0x203d2020
80211910: 25 30 38 6c  	.word	0x6c383025
80211914: 58 00 00 00  	.word	0x00000058
80211918: 21 21 21 20  	.word	0x20212121
8021191c: 49 6e 20 65  	.word	0x65206e49
80211920: 78 63 65 70  	.word	0x70656378
80211924: 74 69 6f 6e  	.word	0x6e6f6974
80211928: 20 25 64 20  	.word	0x20642520
8021192c: 21 21 21 0a  	.word	0x0a212121
80211930: 00 00 00 00  	.word	0x00000000
80211934: 0a 3d 3d 3d  	.word	0x3d3d3d0a
80211938: 3d 20 25 73  	.word	0x7325203d
8021193c: 20 65 78 63  	.word	0x63786520
80211940: 65 70 74 69  	.word	0x69747065
80211944: 6f 6e 20 3d  	.word	0x3d206e6f
80211948: 3d 3d 3d 0a  	.word	0x0a3d3d3d
8021194c: 0a 00 00 00  	.word	0x0000000a
80211950: 0a 45 58 43  	.word	0x4358450a
80211954: 5f 52 45 54  	.word	0x5445525f
80211958: 55 52 4e 20  	.word	0x204e5255
8021195c: 3d 20 25 30  	.word	0x3025203d
80211960: 38 6c 58 0a  	.word	0x0a586c38
80211964: 0a 52 65 67  	.word	0x6765520a
80211968: 69 73 74 65  	.word	0x65747369
8021196c: 72 20 64 75  	.word	0x75642072
80211970: 6d 70 20 28  	.word	0x2820706d
80211974: 73 74 6f 72  	.word	0x726f7473
80211978: 65 64 20 61  	.word	0x61206465
8021197c: 74 20 26 25  	.word	0x25262074
80211980: 30 38 58 29  	.word	0x29583830
80211984: 20 69 73 3a  	.word	0x3a736920
80211988: 0a 00 00 00  	.word	0x0000000a
8021198c: 52 25 2d 33  	.word	0x332d2552
80211990: 64 3d 20 25  	.word	0x25203d64
80211994: 30 38 6c 58  	.word	0x586c3830
80211998: 25 63 00 00  	.word	0x00006325
8021199c: 53 50 20 20  	.word	0x20205053
802119a0: 3d 20 25 30  	.word	0x3025203d
802119a4: 38 6c 58 20  	.word	0x20586c38
802119a8: 4c 52 20 20  	.word	0x2020524c
802119ac: 3d 20 25 30  	.word	0x3025203d
802119b0: 38 6c 58 20  	.word	0x20586c38
802119b4: 50 43 20 20  	.word	0x20204350
802119b8: 3d 20 25 30  	.word	0x3025203d
802119bc: 38 6c 58 0a  	.word	0x0a586c38
802119c0: 00 00 00 00  	.word	0x00000000
802119c4: 54 68 72 65  	.word	0x65726854
802119c8: 61 64 00 00  	.word	0x00006461
802119cc: 48 61 6e 64  	.word	0x646e6148
802119d0: 6c 65 72 00  	.word	0x0072656c
802119d4: 4d 6f 64 65  	.word	0x65646f4d
802119d8: 20 25 2d 38  	.word	0x382d2520
802119dc: 73 66 6c 61  	.word	0x616c6673
802119e0: 67 73 20 73  	.word	0x73207367
802119e4: 65 74 3a 20  	.word	0x203a7465
802119e8: 00 00 00 00  	.word	0x00000000
802119ec: 50 53 52 20  	.word	0x20525350
802119f0: 3d 20 25 30  	.word	0x3025203d
802119f4: 38 6c 58 0a  	.word	0x0a586c38
802119f8: 00 00 00 00  	.word	0x00000000
802119fc: 45 78 63 65  	.word	0x65637845
80211a00: 70 74 69 6f  	.word	0x6f697470
80211a04: 6e 20 25 6c  	.word	0x6c25206e
80211a08: 64 0a 00 00  	.word	0x00000a64
80211a0c: 53 74 61 63  	.word	0x63617453
80211a10: 6b 20 74 6f  	.word	0x6f74206b
80211a14: 70 20 66 72  	.word	0x72662070
80211a18: 6f 6d 20 56  	.word	0x56206d6f
80211a1c: 54 4f 52 3a  	.word	0x3a524f54
80211a20: 20 25 30 38  	.word	0x38302520
80211a24: 58 0a 00 00  	.word	0x00000a58
80211a28: 0a 3d 3d 3d  	.word	0x3d3d3d0a
80211a2c: 3d 20 53 74  	.word	0x7453203d
80211a30: 61 63 6b 20  	.word	0x206b6361
80211a34: 64 75 6d 70  	.word	0x706d7564
80211a38: 20 3d 3d 3d  	.word	0x3d3d3d20
80211a3c: 3d 0a 00 00  	.word	0x00000a3d
80211a40: 41 64 64 72  	.word	0x72646441
80211a44: 65 73 73 20  	.word	0x20737365
80211a48: 20 3a 20 20  	.word	0x20203a20
80211a4c: 20 20 20 33  	.word	0x33202020
80211a50: 20 32 20 31  	.word	0x31203220
80211a54: 20 30 20 20  	.word	0x20203020
80211a58: 20 20 20 37  	.word	0x37202020
80211a5c: 20 36 20 35  	.word	0x35203620
80211a60: 20 34 20 20  	.word	0x20203420
80211a64: 20 20 20 42  	.word	0x42202020
80211a68: 20 41 20 39  	.word	0x39204120
80211a6c: 20 38 20 20  	.word	0x20203820
80211a70: 20 20 20 46  	.word	0x46202020
80211a74: 20 45 20 44  	.word	0x44204520
80211a78: 20 43 20 20  	.word	0x20204320
80211a7c: 20 20 20 20  	.word	0x20202020
80211a80: 20 41 53 43  	.word	0x43534120
80211a84: 49 49 20 44  	.word	0x44204949
80211a88: 61 74 61 00  	.word	0x00617461
80211a8c: 25 30 38 58  	.word	0x58383025
80211a90: 20 3a 00 00  	.word	0x00003a20
80211a94: 20 20 20 20  	.word	0x20202020
80211a98: 25 30 38 6c  	.word	0x6c383025
80211a9c: 58 00 00 00  	.word	0x00000058
80211aa0: 20 20 20 20  	.word	0x20202020
80211aa4: 20 20 20 20  	.word	0x20202020
80211aa8: 20 20 20 20  	.word	0x20202020
80211aac: 00 00 00 00  	.word	0x00000000
80211ab0: 20 20 20 20  	.word	0x20202020
80211ab4: 00 00 00 00  	.word	0x00000000
80211ab8: 24 18 21 80  	.word	0x80211824
80211abc: 30 18 21 80  	.word	0x80211830
80211ac0: 3c 18 21 80  	.word	0x8021183c
80211ac4: 48 18 21 80  	.word	0x80211848
80211ac8: 54 18 21 80  	.word	0x80211854
80211acc: 60 18 21 80  	.word	0x80211860

80211ad0 <flag_names>:
80211ad0: 4e 5a 43 56 51 49 49 54         NZCVQIIT
80211ad8: 30 30 42 30 47 47 47 47         00B0GGGG
80211ae0: 00 00 00 00                     ....

80211ae4 <mmfsr_bits>:
80211ae4: 07 4d 4d 41 52 56 41 4c         .MMARVAL
80211aec: 49 44 05 4d 4c 53 50 45         ID.MLSPE
80211af4: 52 52 04 4d 53 54 4b 45         RR.MSTKE
80211afc: 52 52 03 4d 55 4e 53 54         RR.MUNST
80211b04: 4b 45 52 52 01 44 41 43         KERR.DAC
80211b0c: 43 56 49 4f 4c 00 49 41         CVIOL.IA
80211b14: 43 43 56 49 4f 4c 20 00         CCVIOL .

80211b1c <bfsr_bits>:
80211b1c: 07 42 46 41 52 56 41 4c         .BFARVAL
80211b24: 49 44 05 4c 53 50 45 52         ID.LSPER
80211b2c: 52 04 53 54 4b 45 52 52         R.STKERR
80211b34: 03 55 4e 53 54 4b 45 52         .UNSTKER
80211b3c: 52 02 49 4d 50 52 45 43         R.IMPREC
80211b44: 49 53 45 52 52 01 50 52         ISERR.PR
80211b4c: 45 43 49 53 45 52 52 00         ECISERR.
80211b54: 49 42 55 53 45 52 52 20         IBUSERR 
80211b5c: 00 00 00 00                     ....

80211b60 <ufsr_bits>:
80211b60: 09 44 49 56 42 59 5a 45         .DIVBYZE
80211b68: 52 4f 08 55 4e 41 4c 49         RO.UNALI
80211b70: 47 4e 45 44 04 53 54 4b         GNED.STK
80211b78: 4f 46 03 4e 4f 43 50 02         OF.NOCP.
80211b80: 49 4e 56 50 43 01 49 4e         INVPC.IN
80211b88: 56 53 54 41 54 45 00 55         VSTATE.U
80211b90: 4e 44 45 46 49 4e 53 54         NDEFINST
80211b98: 52 20 00 00                     R ..

80211b9c <hfsr_bits>:
80211b9c: 1f 44 45 42 55 47 45 56         .DEBUGEV
80211ba4: 54 1e 46 4f 52 43 45 44         T.FORCED
80211bac: 01 56 45 43 54 42 4c 20         .VECTBL 
80211bb4: 00 00 00 00                     ....

80211bb8 <sfsr_bits>:
80211bb8: 07 4c 53 45 52 52 06 53         .LSERR.S
80211bc0: 46 41 52 56 41 4c 49 44         FARVALID
80211bc8: 05 4c 53 50 45 52 52 04         .LSPERR.
80211bd0: 49 4e 56 54 52 41 4e 03         INVTRAN.
80211bd8: 41 55 56 49 4f 4c 02 49         AUVIOL.I
80211be0: 4e 56 45 52 01 49 4e 56         NVER.INV
80211be8: 49 53 00 49 4e 56 45 50         IS.INVEP
80211bf0: 20 00 00 00                      ...

80211bf4 <dfsr_bits>:
80211bf4: 05 50 4d 55 04 45 58 54         .PMU.EXT
80211bfc: 45 52 4e 41 4c 03 56 43         ERNAL.VC
80211c04: 41 54 43 48 02 44 57 54         ATCH.DWT
80211c0c: 54 52 41 50 01 42 4b 50         TRAP.BKP
80211c14: 54 00 48 41 4c 54 45 44         T.HALTED
80211c1c: 20 00 00 00                      ...

80211c20 <afsr_bits>:
80211c20: 1e 46 50 4f 49 53 4f 4e         .FPOISON
80211c28: 1d 46 54 47 55 1c 46 45         .FTGU.FE
80211c30: 43 43 18 46 4d 41 58 49         CC.FMAXI
80211c38: 1b 46 4d 41 58 49 54 59         .FMAXITY
80211c40: 50 45 3d 44 45 43 45 52         PE=DECER
80211c48: 52 16 46 44 54 43 4d 15         R.FDTCM.
80211c50: 46 49 54 43 4d 13 50 50         FITCM.PP
80211c58: 4f 49 53 4f 4e 12 50 54         OISON.PT
80211c60: 47 55 11 50 45 43 43 0f         GU.PECC.
80211c68: 50 49 50 50 42 0e 50 45         PIPPB.PE
80211c70: 50 50 42 0d 50 4d 41 58         PPB.PMAX
80211c78: 49 10 50 4d 41 58 49 54         I.PMAXIT
80211c80: 59 50 45 3d 44 45 43 45         YPE=DECE
80211c88: 52 52 0c 50 50 41 48 42         RR.PPAHB
80211c90: 0b 50 44 54 43 4d 0a 50         .PDTCM.P
80211c98: 49 54 43 4d 09 49 50 4f         ITCM.IPO
80211ca0: 49 53 4f 4e 07 49 45 43         ISON.IEC
80211ca8: 43 04 49 45 50 50 42 03         C.IEPPB.
80211cb0: 49 4d 41 58 49 06 49 4d         IMAXI.IM
80211cb8: 41 58 49 54 59 50 45 3d         AXITYPE=
80211cc0: 44 45 43 45 52 52 02 49         DECERR.I
80211cc8: 50 41 48 42 01 49 44 54         PAHB.IDT
80211cd0: 43 4d 00 49 49 54 43 4d         CM.IITCM
80211cd8: 20 00 00 00                      ...
80211cdc: 30 31 32 33  	.word	0x33323130
80211ce0: 34 35 36 37  	.word	0x37363534
80211ce4: 38 39 41 42  	.word	0x42413938
80211ce8: 43 44 45 46  	.word	0x46454443
80211cec: 54 65 72 6d  	.word	0x6d726554
80211cf0: 69 6e 61 6c  	.word	0x6c616e69
80211cf4: 00 00 00 00  	.word	0x00000000
80211cf8: 00 00 00 00  	.word	0x00000000
80211cfc: 00 00 54 54  	.word	0x54540000
80211d00: 52 20 52 45  	.word	0x45522052
80211d04: 47 47 45 53  	.word	0x53454747
80211d08: 00 00 00 00  	.word	0x00000000
80211d0c: 28 4e 55 4c  	.word	0x4c554e28
80211d10: 4c 29 00 00  	.word	0x0000294c
80211d14: 30 31 32 33  	.word	0x33323130
80211d18: 34 35 36 37  	.word	0x37363534
80211d1c: 38 39 41 42  	.word	0x42413938
80211d20: 43 44 45 46  	.word	0x46454443
80211d24: 04 02 00 01  	.word	0x01000204
80211d28: 81 07 00 00  	.word	0x00000781
80211d2c: 0a 00 00 00  	.word	0x0000000a
80211d30: 49 4e 46 00  	.word	0x00464e49
80211d34: 69 6e 66 00  	.word	0x00666e69
80211d38: 4e 41 4e 00  	.word	0x004e414e
80211d3c: 6e 61 6e 00  	.word	0x006e616e
80211d40: 30 31 32 33  	.word	0x33323130
80211d44: 34 35 36 37  	.word	0x37363534
80211d48: 38 39 61 62  	.word	0x62613938
80211d4c: 63 64 65 66  	.word	0x66656463
80211d50: 00 00 00 00  	.word	0x00000000
80211d54: 30 31 32 33  	.word	0x33323130
80211d58: 34 35 36 37  	.word	0x37363534
80211d5c: 38 39 41 42  	.word	0x42413938
80211d60: 43 44 45 46  	.word	0x46454443
80211d64: 00 00 00 00  	.word	0x00000000
80211d68: 28 6e 75 6c  	.word	0x6c756e28
80211d6c: 6c 29 00 00  	.word	0x0000296c
80211d70: 30 00 00 00  	.word	0x00000030
80211d74: 2e 00 00 00  	.word	0x0000002e
80211d78: 4c 43 5f 43  	.word	0x435f434c
80211d7c: 4f 4c 4c 41  	.word	0x414c4c4f
80211d80: 54 45 00 00  	.word	0x00004554
80211d84: 4c 43 5f 43  	.word	0x435f434c
80211d88: 54 59 50 45  	.word	0x45505954
80211d8c: 00 00 00 00  	.word	0x00000000
80211d90: 4c 43 5f 4d  	.word	0x4d5f434c
80211d94: 4f 4e 45 54  	.word	0x54454e4f
80211d98: 41 52 59 00  	.word	0x00595241
80211d9c: 4c 43 5f 4e  	.word	0x4e5f434c
80211da0: 55 4d 45 52  	.word	0x52454d55
80211da4: 49 43 00 00  	.word	0x00004349
80211da8: 4c 43 5f 54  	.word	0x545f434c
80211dac: 49 4d 45 00  	.word	0x00454d49
80211db0: 4c 43 5f 4d  	.word	0x4d5f434c
80211db4: 45 53 53 41  	.word	0x41535345
80211db8: 47 45 53 00  	.word	0x00534547
80211dbc: 49 6e 66 69  	.word	0x69666e49
80211dc0: 6e 69 74 79  	.word	0x7974696e
80211dc4: 00 00 00 00  	.word	0x00000000
80211dc8: 4e 61 4e 00  	.word	0x004e614e
80211dcc: 42 61 6c 6c  	.word	0x6c6c6142
80211dd0: 6f 63 20 73  	.word	0x7320636f
80211dd4: 75 63 63 65  	.word	0x65636375
80211dd8: 65 64 65 64  	.word	0x64656465
80211ddc: 00 00 00 00  	.word	0x00000000
80211de0: 2f 56 6f 6c  	.word	0x6c6f562f
80211de4: 75 6d 65 73  	.word	0x73656d75
80211de8: 2f 64 61 74  	.word	0x7461642f
80211dec: 61 2f 6a 65  	.word	0x656a2f61
80211df0: 6e 6b 69 6e  	.word	0x6e696b6e
80211df4: 73 2f 77 6f  	.word	0x6f772f73
80211df8: 72 6b 73 70  	.word	0x70736b72
80211dfc: 61 63 65 2f  	.word	0x2f656361
80211e00: 47 4e 55 2d  	.word	0x2d554e47
80211e04: 74 6f 6f 6c  	.word	0x6c6f6f74
80211e08: 63 68 61 69  	.word	0x69616863
80211e0c: 6e 2f 61 72  	.word	0x72612f6e
80211e10: 6d 2d 31 34  	.word	0x34312d6d
80211e14: 2f 73 72 63  	.word	0x6372732f
80211e18: 2f 6e 65 77  	.word	0x77656e2f
80211e1c: 6c 69 62 2d  	.word	0x2d62696c
80211e20: 63 79 67 77  	.word	0x77677963
80211e24: 69 6e 2f 6e  	.word	0x6e2f6e69
80211e28: 65 77 6c 69  	.word	0x696c7765
80211e2c: 62 2f 6c 69  	.word	0x696c2f62
80211e30: 62 63 2f 73  	.word	0x732f6362
80211e34: 74 64 6c 69  	.word	0x696c6474
80211e38: 62 2f 64 74  	.word	0x74642f62
80211e3c: 6f 61 2e 63  	.word	0x632e616f
80211e40: 00 00 00 00  	.word	0x00000000
80211e44: 2f 56 6f 6c  	.word	0x6c6f562f
80211e48: 75 6d 65 73  	.word	0x73656d75
80211e4c: 2f 64 61 74  	.word	0x7461642f
80211e50: 61 2f 6a 65  	.word	0x656a2f61
80211e54: 6e 6b 69 6e  	.word	0x6e696b6e
80211e58: 73 2f 77 6f  	.word	0x6f772f73
80211e5c: 72 6b 73 70  	.word	0x70736b72
80211e60: 61 63 65 2f  	.word	0x2f656361
80211e64: 47 4e 55 2d  	.word	0x2d554e47
80211e68: 74 6f 6f 6c  	.word	0x6c6f6f74
80211e6c: 63 68 61 69  	.word	0x69616863
80211e70: 6e 2f 61 72  	.word	0x72612f6e
80211e74: 6d 2d 31 34  	.word	0x34312d6d
80211e78: 2f 73 72 63  	.word	0x6372732f
80211e7c: 2f 6e 65 77  	.word	0x77656e2f
80211e80: 6c 69 62 2d  	.word	0x2d62696c
80211e84: 63 79 67 77  	.word	0x77677963
80211e88: 69 6e 2f 6e  	.word	0x6e2f6e69
80211e8c: 65 77 6c 69  	.word	0x696c7765
80211e90: 62 2f 6c 69  	.word	0x696c2f62
80211e94: 62 63 2f 73  	.word	0x732f6362
80211e98: 74 64 6c 69  	.word	0x696c6474
80211e9c: 62 2f 6d 70  	.word	0x706d2f62
80211ea0: 72 65 63 2e  	.word	0x2e636572
80211ea4: 63 00 00 00  	.word	0x00000063
80211ea8: 2c 20 66 75  	.word	0x7566202c
80211eac: 6e 63 74 69  	.word	0x6974636e
80211eb0: 6f 6e 3a 20  	.word	0x203a6e6f
80211eb4: 00 00 00 00  	.word	0x00000000
80211eb8: 61 73 73 65  	.word	0x65737361
80211ebc: 72 74 69 6f  	.word	0x6f697472
80211ec0: 6e 20 22 25  	.word	0x2522206e
80211ec4: 73 22 20 66  	.word	0x66202273
80211ec8: 61 69 6c 65  	.word	0x656c6961
80211ecc: 64 3a 20 66  	.word	0x66203a64
80211ed0: 69 6c 65 20  	.word	0x20656c69
80211ed4: 22 25 73 22  	.word	0x22732522
80211ed8: 2c 20 6c 69  	.word	0x696c202c
80211edc: 6e 65 20 25  	.word	0x2520656e
80211ee0: 64 25 73 25  	.word	0x25732564
80211ee4: 73 0a 00 00  	.word	0x00000a73
80211ee8: 30 30 30 30  	.word	0x30303030
80211eec: 30 30 30 30  	.word	0x30303030
80211ef0: 30 30 30 30  	.word	0x30303030
80211ef4: 30 30 30 30  	.word	0x30303030
80211ef8: 20 20 20 20  	.word	0x20202020
80211efc: 20 20 20 20  	.word	0x20202020
80211f00: 20 20 20 20  	.word	0x20202020
80211f04: 20 20 20 20  	.word	0x20202020
80211f08: 00 20 20 20  	.word	0x20202000
80211f0c: 20 20 20 20  	.word	0x20202020
80211f10: 20 20 28 28  	.word	0x28282020
80211f14: 28 28 28 20  	.word	0x20282828
80211f18: 20 20 20 20  	.word	0x20202020
80211f1c: 20 20 20 20  	.word	0x20202020
80211f20: 20 20 20 20  	.word	0x20202020
80211f24: 20 20 20 20  	.word	0x20202020
80211f28: 20 88 10 10  	.word	0x10108820
80211f2c: 10 10 10 10  	.word	0x10101010
80211f30: 10 10 10 10  	.word	0x10101010
80211f34: 10 10 10 10  	.word	0x10101010
80211f38: 10 04 04 04  	.word	0x04040410
80211f3c: 04 04 04 04  	.word	0x04040404
80211f40: 04 04 04 10  	.word	0x10040404
80211f44: 10 10 10 10  	.word	0x10101010
80211f48: 10 10 41 41  	.word	0x41411010
80211f4c: 41 41 41 41  	.word	0x41414141
80211f50: 01 01 01 01  	.word	0x01010101
80211f54: 01 01 01 01  	.word	0x01010101
80211f58: 01 01 01 01  	.word	0x01010101
80211f5c: 01 01 01 01  	.word	0x01010101
80211f60: 01 01 01 01  	.word	0x01010101
80211f64: 10 10 10 10  	.word	0x10101010
80211f68: 10 10 42 42  	.word	0x42421010
80211f6c: 42 42 42 42  	.word	0x42424242
80211f70: 02 02 02 02  	.word	0x02020202
80211f74: 02 02 02 02  	.word	0x02020202
80211f78: 02 02 02 02  	.word	0x02020202
80211f7c: 02 02 02 02  	.word	0x02020202
80211f80: 02 02 02 02  	.word	0x02020202
80211f84: 10 10 10 10  	.word	0x10101010
80211f88: 20 00 00 00  	.word	0x00000020
80211f8c: 00 00 00 00  	.word	0x00000000
80211f90: 00 00 00 00  	.word	0x00000000
80211f94: 00 00 00 00  	.word	0x00000000
80211f98: 00 00 00 00  	.word	0x00000000
80211f9c: 00 00 00 00  	.word	0x00000000
80211fa0: 00 00 00 00  	.word	0x00000000
80211fa4: 00 00 00 00  	.word	0x00000000
80211fa8: 00 00 00 00  	.word	0x00000000
80211fac: 00 00 00 00  	.word	0x00000000
80211fb0: 00 00 00 00  	.word	0x00000000
80211fb4: 00 00 00 00  	.word	0x00000000
80211fb8: 00 00 00 00  	.word	0x00000000
80211fbc: 00 00 00 00  	.word	0x00000000
80211fc0: 00 00 00 00  	.word	0x00000000
80211fc4: 00 00 00 00  	.word	0x00000000
80211fc8: 00 00 00 00  	.word	0x00000000
80211fcc: 00 00 00 00  	.word	0x00000000
80211fd0: 00 00 00 00  	.word	0x00000000
80211fd4: 00 00 00 00  	.word	0x00000000
80211fd8: 00 00 00 00  	.word	0x00000000
80211fdc: 00 00 00 00  	.word	0x00000000
80211fe0: 00 00 00 00  	.word	0x00000000
80211fe4: 00 00 00 00  	.word	0x00000000
80211fe8: 00 00 00 00  	.word	0x00000000
80211fec: 00 00 00 00  	.word	0x00000000
80211ff0: 00 00 00 00  	.word	0x00000000
80211ff4: 00 00 00 00  	.word	0x00000000
80211ff8: 00 00 00 00  	.word	0x00000000
80211ffc: 00 00 00 00  	.word	0x00000000
80212000: 00 00 00 00  	.word	0x00000000
80212004: 00 00 00 00  	.word	0x00000000
80212008: 00 00 00 00  	.word	0x00000000
8021200c: 05 00 00 00  	.word	0x00000005
80212010: 19 00 00 00  	.word	0x00000019
80212014: 7d 00 00 00  	.word	0x0000007d
80212018: 00 80 e0 37  	.word	0x37e08000
8021201c: 79 c3 41 43  	.word	0x4341c379
80212020: 17 6e 05 b5  	.word	0xb5056e17
80212024: b5 b8 93 46  	.word	0x4693b8b5
80212028: f5 f9 3f e9  	.word	0xe93ff9f5
8021202c: 03 4f 38 4d  	.word	0x4d384f03
80212030: 32 1d 30 f9  	.word	0xf9301d32
80212034: 48 77 82 5a  	.word	0x5a827748
80212038: 3c bf 73 7f  	.word	0x7f73bf3c
8021203c: dd 4f 15 75  	.word	0x75154fdd
80212040: 00 00 00 00  	.word	0x00000000
80212044: 00 00 f0 3f  	.word	0x3ff00000
80212048: 00 00 00 00  	.word	0x00000000
8021204c: 00 00 24 40  	.word	0x40240000
80212050: 00 00 00 00  	.word	0x00000000
80212054: 00 00 59 40  	.word	0x40590000
80212058: 00 00 00 00  	.word	0x00000000
8021205c: 00 40 8f 40  	.word	0x408f4000
80212060: 00 00 00 00  	.word	0x00000000
80212064: 00 88 c3 40  	.word	0x40c38800
80212068: 00 00 00 00  	.word	0x00000000
8021206c: 00 6a f8 40  	.word	0x40f86a00
80212070: 00 00 00 00  	.word	0x00000000
80212074: 80 84 2e 41  	.word	0x412e8480
80212078: 00 00 00 00  	.word	0x00000000
8021207c: d0 12 63 41  	.word	0x416312d0
80212080: 00 00 00 00  	.word	0x00000000
80212084: 84 d7 97 41  	.word	0x4197d784
80212088: 00 00 00 00  	.word	0x00000000
8021208c: 65 cd cd 41  	.word	0x41cdcd65
80212090: 00 00 00 20  	.word	0x20000000
80212094: 5f a0 02 42  	.word	0x4202a05f
80212098: 00 00 00 e8  	.word	0xe8000000
8021209c: 76 48 37 42  	.word	0x42374876
802120a0: 00 00 00 a2  	.word	0xa2000000
802120a4: 94 1a 6d 42  	.word	0x426d1a94
802120a8: 00 00 40 e5  	.word	0xe5400000
802120ac: 9c 30 a2 42  	.word	0x42a2309c
802120b0: 00 00 90 1e  	.word	0x1e900000
802120b4: c4 bc d6 42  	.word	0x42d6bcc4
802120b8: 00 00 34 26  	.word	0x26340000
802120bc: f5 6b 0c 43  	.word	0x430c6bf5
802120c0: 00 80 e0 37  	.word	0x37e08000
802120c4: 79 c3 41 43  	.word	0x4341c379
802120c8: 00 a0 d8 85  	.word	0x85d8a000
802120cc: 57 34 76 43  	.word	0x43763457
802120d0: 00 c8 4e 67  	.word	0x674ec800
802120d4: 6d c1 ab 43  	.word	0x43abc16d
802120d8: 00 3d 91 60  	.word	0x60913d00
802120dc: e4 58 e1 43  	.word	0x43e158e4
802120e0: 40 8c b5 78  	.word	0x78b58c40
802120e4: 1d af 15 44  	.word	0x4415af1d
802120e8: 50 ef e2 d6  	.word	0xd6e2ef50
802120ec: e4 1a 4b 44  	.word	0x444b1ae4
802120f0: 92 d5 4d 06  	.word	0x064dd592
802120f4: cf f0 80 44  	.word	0x4480f0cf
802120f8: f6 4a e1 c7  	.word	0xc7e14af6
802120fc: 02 2d b5 44  	.word	0x44b52d02
80212100: b4 9d d9 79  	.word	0x79d99db4
80212104: 43 78 ea 44  	.word	0x44ea7843
80212108: 30 30 30 30  	.word	0x30303030
8021210c: 30 30 30 30  	.word	0x30303030
80212110: 30 30 30 30  	.word	0x30303030
80212114: 30 30 30 30  	.word	0x30303030
80212118: 20 20 20 20  	.word	0x20202020
8021211c: 20 20 20 20  	.word	0x20202020
80212120: 20 20 20 20  	.word	0x20202020
80212124: 20 20 20 20  	.word	0x20202020
80212128: 00 00 00 00  	.word	0x00000000
8021212c: 00 00 00 00  	.word	0x00000000
